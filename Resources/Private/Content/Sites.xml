<?xml version="1.0" encoding="UTF-8"?>
<root>
 <site identifier="49829e98-1a9c-aacf-49aa-75af2789c749" type="TYPO3.Neos.NodeTypes:Page" nodeName="docstypo3org" locale="">
  <properties>
   <name>docs.typo3.org</name>
   <title>Home</title>
   <state>1</state>
   <siteResourcesPackageKey>TYPO3.DocsTypo3Org</siteResourcesPackageKey>
  </properties>
  <node identifier="8bac3ab2-85e6-1a50-adba-fbbfcfdf23e7" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
   <node identifier="830fdb37-7d10-0ee1-6358-b340f2bbc022" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
    <properties>
     <text><![CDATA[<p>This is the homepage</p>]]></text>
    </properties>
   </node>
  </node>
  <node identifier="74a06352-2ac0-799e-4baa-297a691737af" type="TYPO3.DocsTypo3Org:Project" nodeName="typo3cms" locale="">
   <properties>
    <title>TYPO3 CMS</title>
   </properties>
   <node identifier="ee2b7bc7-51a1-691f-9791-ba691cea8771" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
    <node identifier="acf7671b-fe29-a94c-89d7-9f21303168f6" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
     <properties>
      <text><![CDATA[<p>This is the first sub page</p>]]></text>
     </properties>
    </node>
   </node>
   <node identifier="8c44e98c-01a9-f236-692c-24094253085d" type="TYPO3.Neos.NodeTypes:Page" nodeName="references" locale="">
    <properties>
     <title>Reference Manuals</title>
    </properties>
    <node identifier="436191bf-4fbc-1521-4de6-439712f095b9" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
    <node identifier="a1e6f9a1-73c6-fd32-eef4-7e7d4e5c07b6" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
   </node>
   <node identifier="47a9a7df-d4cb-0591-ccea-6d08a937401a" type="TYPO3.Neos.NodeTypes:Page" nodeName="extensions" locale="">
    <properties>
     <title>TER Extensions</title>
    </properties>
    <node identifier="4bd1fa67-90a5-5333-fff2-17b75e4ff8af" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
    <node identifier="ef6332be-706f-0de2-7a57-10b9da90999a" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
    <node identifier="d41b235b-117a-7e05-6e24-fb054369c445" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="restdoc" locale="">
     <properties>
      <title>Sphinx/reStructuredText Documentation Viewer</title>
     </properties>
     <node identifier="38a97cd5-ec40-e879-1d5c-f0fee92659e9" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
      <node identifier="c998dd3e-5e54-cdad-4f03-33424dc0d274" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
       <properties>
        <text><![CDATA[<div class="section" id="sphinx-restructuredtext-documentation-viewer">
<span id="start"></span><h1>Sphinx/reStructuredText Documentation Viewer</h1>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Classification:</th><td class="field-body">restdoc</td>
</tr>
<tr class="field-even field"><th class="field-name">Version:</th><td class="field-body">1.3.1-dev</td>
</tr>
<tr class="field-odd field"><th class="field-name">Language:</th><td class="field-body">en</td>
</tr>
<tr class="field-even field"><th class="field-name">Description:</th><td class="field-body">Seamlessly embeds Sphinx/reStructuredText-based documentation into your TYPO3 website. Instead of publishing
your various manual, in-house documents, guides, references, ... solely as PDF, render them as JSON and use this
extension to show them as part of your website to enhance the overall user experience and Search Engine
Optimization (SEO). Lets you merge the chapter structure with the breadcrumb menu and much more. Documentation
styles automatically inherit from your corporate design.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Keywords:</th><td class="field-body">reStructuredText, reST, sphinx, sphinx-doc, documentation, embedding</td>
</tr>
<tr class="field-even field"><th class="field-name">Copyright:</th><td class="field-body">2013</td>
</tr>
<tr class="field-odd field"><th class="field-name">Author:</th><td class="field-body">Xavier Perseguers</td>
</tr>
<tr class="field-even field"><th class="field-name">Email:</th><td class="field-body"><a class="reference external" href="typo3cms/extensions/restdoc/mailto:xavier&.html#37;&#52;&#48;causal&#46;ch">xavier<span>&#64;</span>causal<span>&#46;</span>ch</a></td>
</tr>
<tr class="field-odd field"><th class="field-name">License:</th><td class="field-body">This document is published under the Open Content License
available from <a class="reference external" href="http://www.opencontent.org/opl.shtml">http://www.opencontent.org/opl.shtml</a></td>
</tr>
<tr class="field-even field"><th class="field-name">Rendered:</th><td class="field-body">April 11, 2014</td>
</tr>
</tbody>
</table>
<p>The content of this document is related to TYPO3,
a GNU/GPL CMS/Framework available from <a class="reference external" href="http://www.typo3.org/">www.typo3.org</a>.</p>
<p><strong>Other version of this document</strong></p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">PDF:</th><td class="field-body"><a class="reference external" href="http://docs.typo3.org/typo3cms/extensions/restdoc/1.3.1/_pdf/">http://docs.typo3.org/typo3cms/extensions/restdoc/1.3.1/_pdf/</a></td>
</tr>
</tbody>
</table>
<p><strong>Table of Contents</strong></p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/introduction.html">Introduction</a><ul class="simple">
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/usersmanual.html">Users Manual</a><ul>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/usersmanual/requirements.html">Requirements</a></li>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/usersmanual/generatingdocumentationjson.html">Generating the documentation as JSON</a></li>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/usersmanual/pluginoptions.html">Plugin options</a><ul class="simple">
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/administratormanual.html">Administrator manual</a><ul>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/administratormanual/installingextension.html">Installing the extension</a><ul class="simple">
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/administratormanual/typoscriptconfiguration.html">TypoScript configuration</a><ul class="simple">
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/configuration.html">Configuration</a><ul>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/configuration/txrestdocpi1.html">plugin.tx_restdoc_pi1</a><ul class="simple">
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/configuration/txrestdocpi1setup.html">plugin.tx_restdoc_pi1.setup</a><ul class="simple">
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/configuration/restmetadata.html">REST_METADATA</a><ul class="simple">
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/development.html">Development</a><ul>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/development/hooks/renderhook.html">renderHook</a><ul class="simple">
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/development/hooks/makemenuarrayhook.html">makeMenuArrayHook</a><ul class="simple">
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/development/hooks/quicknavigationhook.html">quickNavigationHook</a><ul class="simple">
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="typo3cms/extensions/restdoc/development/hooks/searchformhook.html">searchFormHook</a><ul class="simple">
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/knownproblems.html">Known problems</a></li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/todolist.html">To-Do list</a><ul class="simple">
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/changelog.html">ChangeLog</a></li>
</ul>
</div>
</div>]]></text>
        <title></title>
       </properties>
      </node>
     </node>
     <node identifier="4407d720-b5d8-a1bb-b762-b392c0571f4b" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     <node identifier="b875ab43-aacf-9b8e-f6ef-fb7d6072f318" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="introduction" locale="">
      <properties>
       <title>Introduction</title>
      </properties>
      <node identifier="75b5e598-0efd-8c9a-937d-be08604663da" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="2b34609b-cf0f-64b8-0c27-a365e0030af8" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="introduction">
<span id="id1"></span><h1>Introduction</h1>
<div class="section" id="what-does-it-do">
<span id="what-it-does"></span><h2>What does it do?</h2>
<p>This extension lets you build documentation projects written with <a class="reference external" href="http://sphinx-doc.org/">Sphinx</a> (the Python Documentation Generator used
by the TYPO3 documentation team for all official documentation) from within the TYPO3 Backend:</p>
<iframe width="640" height="360" src="//www.youtube.com/embed/YeGqHMDT7R8?feature=player_detailpage" frameborder="0" allowfullscreen="1">&nbsp;</iframe><div class="line-block">
<div class="line"><br /></div>
</div>
<p>The name of this extension comes from the underlying markup language used by Sphinx. In fact, Sphinx uses <a class="reference external" href="http://docutils.sourceforge.net/rst.html">reStructuredText</a> (commonly abbreviated as reST) as its markup language.</p>
<p>Sphinx was originally created for the Python documentation and a few features are worth highlighting:</p>
<ul class="simple">
<li><strong>Output formats:</strong> HTML, JSON (a derivate from HTML this extension is relying on), LaTeX (for printable PDF versions), plain text, ...</li>
<li><strong>Extensive cross-references:</strong> semantic markup and automatic links for citations, glossary terms and similar pieces of information. For instance, the official TYPO3 documentation provides resources to cross-link from your own documentation to virtually any chapter or section of any TYPO3 documentation. Please consult page <a class="reference external" href="http://wiki.typo3.org/Tips_and_Tricks_%28reST%29">Tips and Tricks</a> in the TYPO3 wiki for more information.</li>
<li><strong>Hierarchical structure:</strong> easy definition of a document tree, with automatic links to siblings, parents and children</li>
<li><strong>Automatic index:</strong> general index of terms used in your documentation</li>
<li><strong>Extensions:</strong> the tool lets you extend it with your own modules</li>
</ul>
<div class="section" id="and-this-extension">
<h3>And this extension?</h3>
<p>The &#8220;Sphinx way&#8221; of publishing a reST documentation to the Web is to generate either a standalone HTML website (or single page) or a PDF. The drawback of using a standalone HTML website is that it is extremely tedious to adapt the base templates provided by Sphinx to your needs to get something visually comparable to your website&#8217;s design you try to look like.</p>
<p>Fortunately, Sphinx lets you generate your documentation as JSON files which are basically the HTML output without any layout.</p>
<p>This extension uses the JSON content parts and lets you freely place them in your TYPO3 website, where they belong in the overall design (e.g., the table of contents as part of your navigation menu, the documentation itself as main content, ...). The integration of your reST documentation is not only much more effective but is also better from a <a class="reference external" href="http://en.wikipedia.org/wiki/Search_engine_optimization">SEO</a> point of view as your documentation is seen as real content of your TYPO3 website.</p>
</div>
<div class="section" id="how-to-start">
<h3>How to start?</h3>
<p>If you already have a Sphinx documentation project at hand, generate a JSON output with <tt class="docutils literal"><span class="pre">make</span> <span class="pre">json</span></tt> instead of <tt class="docutils literal"><span class="pre">make</span> <span class="pre">html</span></tt>, copy the whole output directory to your website, place a restdoc plugin on your page and you&#8217;re done!</p>
<p>If you are new to Sphinx, reStructuredText and currently write your documentation with one of the common word processors (OpenOffice Writer, MS Word, ...), don&#8217;t worry! The TYPO3 documentation team and a few other passionate persons are maintaining tutorials and tips and tricks in <a class="reference external" href="http://wiki.typo3.org/ReST">the TYPO3 wiki</a>.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>Wait! &#8220;<tt class="docutils literal"><span class="pre">make</span> <span class="pre">json</span></tt>&#8221;? I&#8217;m a writer, not a command line aficionado.</p>
<p class="last">No Problem! Please have a look at extension <a class="reference external" href="http://typo3.org/extensions/repository/view/sphinx">Sphinx Python Documentation Generator and Viewer</a>.</p>
</div>
</div>
</div>
<div class="section" id="screenshots">
<span id="id2"></span><h2>Screenshots</h2>
<p><img alt="Flexform configuration of the plugin" src="_Resources/Persistent/0c3cbc3fa7a46bcd591f3e37e341c0807305f8ab/plugin-options.png" style="width: 542px" /></p>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="aae0babd-a286-5fa4-ca5d-142b0fcc8ead" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     </node>
     <node identifier="b950925c-ac0d-9215-0f9d-09409d629b04" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="usersmanual" locale="">
      <properties>
       <title>Users Manual</title>
      </properties>
      <node identifier="8fab360a-6a0f-cc64-47c2-fb70d6217720" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="84365d07-4551-50b6-4f62-91a0b4c79218" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="users-manual">
<span id="id1"></span><h1>Users Manual</h1>
<p>This chapter describes how to use the extension from a user point of view.</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/usersmanual/requirements.html">Requirements</a></li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/usersmanual/generatingdocumentationjson.html">Generating the documentation as JSON</a></li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/usersmanual/pluginoptions.html">Plugin options</a><ul class="simple">
</ul>
</li>
</ul>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="6408555f-61f1-97f0-7e2c-2241393095ff" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      <node identifier="691dc08a-6f95-88f0-cab1-0f3533733359" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="requirements" locale="">
       <properties>
        <title>Requirements</title>
       </properties>
       <node identifier="1f909393-c3cc-1629-ca1e-f9f5900eb74f" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="c761ee3e-47b5-9be7-e74a-4342db077dbe" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="requirements">
<h1>Requirements</h1>
<p>You need a documentation written in reStructuredText and as a Sphinx project. Please visit <a class="reference external" href="http://wiki.typo3.org/ReST">http://wiki.typo3.org/ReST</a>
for further information. You may consider using <a class="reference external" href="http://typo3.org/extensions/repository/view/sphinx">TYPO3 extension Sphinx</a>
to easily set up your environment and work on your own documentation.</p>
<p>The main documentation file should be named <tt class="docutils literal"><span class="pre">Index.rst</span></tt> (to match the convention of the TYPO3 Documentation Team).
If you choose to name it &#8220;index.rst&#8221; instead (lower case), or want to use another arbitrary name, make sure to update
the <a class="reference internal" href="typo3cms/extensions/restdoc/usersmanual/requirements/../../configuration/txrestdocpi1.html#ts-plugin-tx-restdoc-pi1-defaultfile">default TypoScript settings</a> accordingly.</p>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="fddecae4-9d0f-58dc-1030-39ab676617b8" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="6b795d1b-2cce-92cf-0ca8-c4938ac5db2a" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="generatingdocumentationjson" locale="">
       <properties>
        <title>Generating the documentation as JSON</title>
       </properties>
       <node identifier="f890daac-5a84-6028-ad1e-a4e5b8ec139e" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="61b5e6b0-a682-1e47-04ec-67acdff5f81b" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="generating-the-documentation-as-json">
<h1>Generating the documentation as JSON</h1>
<p>When kickstarting a project, Sphinx creates a Makefile with different output. Generating your documentation is just a
matter of running:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd</span> /path/to/documentation
<span class="nv">$ </span>make json
</pre></div>
</div>
<p>The documentation will be created in a <tt class="docutils literal"><span class="pre">json</span></tt> directory within the <tt class="docutils literal"><span class="pre">build</span></tt> (or <tt class="docutils literal"><span class="pre">_build</span></tt>) directory. This <tt class="docutils literal"><span class="pre">json</span></tt>
directory is what should be published to your TYPO3 website, typically somewhere within <tt class="docutils literal"><span class="pre">fileadmin/</span></tt>.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Instead of manually setting up a Sphinx environment on your computer, you may consider
using <a class="reference external" href="http://typo3.org/extensions/repository/view/sphinx">TYPO3 extension Sphinx</a> available off TER.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="8ac1b32e-1c04-c3fd-7256-70e47235b9f2" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="d7d68553-707d-b1fa-132b-932344991126" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="pluginoptions" locale="">
       <properties>
        <title>Plugin options</title>
       </properties>
       <node identifier="a55b2383-a0d3-359e-d7ac-0960a782b6e5" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="f80ea4e6-6f49-faaa-a76c-a62c31189f20" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="plugin-options">
<h1>Plugin options</h1>
<p>The plugin options let you choose whether the content of the file (BODY), the table of contents (TOC), the master table of contents (MASTER_TOC), the quick navigation (QUICK_NAVIGATION) or a list of references (REFERENCES) should be generated. The table of contents is in fact a contextual menu for the current chapter, aka a &#8220;mini-toc&#8221; whereas the quick navigation shows previous/next links, typically after the content of the file, in a footer.</p>
<p><a class="reference internal" href="typo3cms/extensions/restdoc/usersmanual/pluginoptions/../../_images/plugin_options1.png.html"><img alt="Flexform configuration of the plugin" src="_Resources/Persistent/0c3cbc3fa7a46bcd591f3e37e341c0807305f8ab/plugin-options1.png" style="width: 542px" /></a></p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>Screenshot above shows a non-FAL documentation root. When using TYPO3 6.x, both syntaxes are supported, mainly to
ensure backward compatibility:</p>
<ul class="last simple">
<li><tt class="docutils literal"><span class="pre">fileadmin/path/to/documentation/</span></tt></li>
<li><tt class="docutils literal"><span class="pre">file:1:/path/to/documentation/</span></tt></li>
</ul>
</div>
<div class="section" id="search-form">
<h2>Search Form</h2>
<p>A search form may be generated with option (SEARCH).</p>
<div class="admonition caution">
<p class="first admonition-title">Caution</p>
<p class="last">You must load the jQuery JavaScript framework yourself as the search form automatically includes a few JavaScript libraries that depend on jQuery.</p>
</div>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p class="last">The search results may show a context where the search term has been found within a chapter. Make sure to allow sources to be published (TS <tt class="docutils literal"><span class="pre">plugin.tx_restdoc_pi1.publishSources</span></tt>) if you want to take advantage of this feature.</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="e75cc7ac-7567-989e-f576-6ac60b707fd9" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
     </node>
     <node identifier="7891128e-963c-286b-8978-4a4447ed3baf" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="administratormanual" locale="">
      <properties>
       <title>Administrator manual</title>
      </properties>
      <node identifier="b40bdba0-e6e8-c14b-13c0-d9db2f9fe32d" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="b2ecd644-5e38-05e5-96a9-ceb14b51ede8" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="administrator-manual">
<span id="admin-manual"></span><h1>Administrator manual</h1>
<p>This chapter describes how to manage the extension from a superuser point of view.</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/administratormanual/installingextension.html">Installing the extension</a><ul class="simple">
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/administratormanual/typoscriptconfiguration.html">TypoScript configuration</a><ul class="simple">
</ul>
</li>
</ul>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="314c1c9e-9cff-d6dd-45d4-8904b79e172a" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      <node identifier="5816bd29-b4b9-e903-7bce-c50c8ea24af7" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="installingextension" locale="">
       <properties>
        <title>Installing the extension</title>
       </properties>
       <node identifier="9bff9940-7334-32b8-4679-fe70a12b8547" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="320810d9-c0ef-97a5-97d9-89095ac94585" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="installing-the-extension">
<h1>Installing the extension</h1>
<p>There are a few steps necessary to install the Sphinx/reStructuredText Documentation Viewer extension. If you have
installed other extensions in the past, you will run into little new here.</p>
<div class="section" id="install-the-extension-from-extension-manager">
<h2>Install the extension from Extension Manager</h2>
<p>The Sphinx/reStructuredText Documentation Viewer extension can ben installed through the typical TYPO3 installation
process using the Extension Manager.</p>
<p>The Extension Manager will create a new table in your database. This table is used to store references to the chapters in the context of the plugin and is used to both generate the menu of recent updates in your documentation and to integrate the structure of your documentation within your website&#8217;s sitemap, when using this extension together with <a class="reference external" href="http://typo3.org/extensions/repository/view/dd_googlesitemap">dd_googlesitemap</a>.</p>
</div>
<div class="section" id="configure-realurl">
<h2>Configure RealURL</h2>
<p>If you are using RealURL, the good news is that the Sphinx/reStructuredText Documentation Viewer extension comes with a
configuration for RealURL.</p>
<p>If your configuration is automatically generated (you have a <tt class="docutils literal"><span class="pre">typo3conf/realurl_autoconf.php</span></tt> file), delete it. It will be recreated by RealURL the next time you render your page and will integrate our postVarSets configuration.</p>
<p>If you manually tweaked the configuration (you have a <tt class="docutils literal"><span class="pre">typo3conf/realurl_conf.php</span></tt> file), here is the configuration we suggest:</p>
<div class="highlight-guess"><div class="highlight"><pre><span class="s">&quot;postVarSets&quot;</span> <span class="o">=&gt;</span> <span class="n">array</span><span class="p">(</span>
    <span class="s">&quot;_DEFAULT&quot;</span> <span class="o">=&gt;</span> <span class="n">array</span><span class="p">(</span>
        <span class="s">&quot;chapter&quot;</span> <span class="o">=&gt;</span> <span class="n">array</span><span class="p">(</span>
            <span class="n">array</span><span class="p">(</span>
                <span class="s">&quot;GETvar&quot;</span> <span class="o">=&gt;</span> <span class="s">&quot;tx_restdoc_pi1[doc]&quot;</span><span class="p">,</span>
            <span class="p">),</span>
        <span class="p">),</span>
    <span class="p">),</span>
<span class="p">),</span>
</pre></div>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="606daa1c-efae-cb5f-c481-3aefb73f775b" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="2e4787df-d044-0726-b468-4fa6e12795cd" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="typoscriptconfiguration" locale="">
       <properties>
        <title>TypoScript configuration</title>
       </properties>
       <node identifier="e3fc4017-cef8-f100-cec1-b021d8d7fd96" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="4ae9b511-5ad1-e091-2920-ac4fa57396eb" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="typoscript-configuration">
<h1>TypoScript configuration</h1>
<p>In order for this extension to be usable, make sure to include the static template that is provided with this extension.</p>
<p>The TypoScript configuration should be generic enough to let you fine tune the rendering process to fit your needs. As an example, for a project I changed the rendering of the images to:</p>
<ul class="simple">
<li>Add an overlay shown when the mouse enters pictures with the ALT label</li>
<li>Add a fancybox (lightbox) for the image whenever it got resized, but not when the image was not resized (does not make sense to show a lightbox with the very same image...</li>
<li>Do not do those changes for small inline images (say smaller than 100px width)</li>
</ul>
<p>This is just a matter of playing with TypoScript, something you should love anyway as a TYPO3 integrator. Please note that the extension comes with a directory containing <a class="reference external" href="https://git.typo3.org/TYPO3CMS/Extensions/restdoc.git/tree/HEAD:/Resources/Private/Examples">TypoScript snippets</a>.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Need some ideas of what is feasible? Please have a look at a <a class="reference external" href="https://plus.google.com/117624290123792924579/posts/R5H1ZUMcwEm">post of mine in Google+</a>.</p>
</div>
<div class="section" id="available-modes-for-the-plugin">
<h2>Available modes for the plugin</h2>
<p>When integrating the plugin with TypoScript, additional modes of operations are available. These are:</p>
<dl class="docutils">
<dt>TOC</dt>
<dd>Generates a table of contents</dd>
<dt>MASTER_TOC</dt>
<dd>Generates the master table of contents</dd>
<dt>RECENT</dt>
<dd>Renders a list of chapters updated recently</dd>
<dt>BODY</dt>
<dd>Generates the documentation itself</dd>
<dt>TITLE</dt>
<dd>Returns the current chapter&#8217;s title</dd>
<dt>QUICK_NAVIGATION</dt>
<dd>Generates a quick navigation with &#8220;previous&#8221;, &#8220;next&#8221;, &#8220;home&#8221;, ...</dd>
<dt>BREADCRUMB</dt>
<dd>Generates a breadcrumb menu for the current chapter</dd>
<dt>REFERENCES</dt>
<dd>Generates a list of references within the whole documentation</dd>
<dt>FILENAME</dt>
<dd>Returns the name of the .fjson being rendered</dd>
<dt>SEARCH</dt>
<dd>Generates a search form</dd>
</dl>
</div>
<div class="section" id="additional-content-object">
<h2>Additional Content Object</h2>
<p>This extension registers an additional content object to let you access meta-information from your documentation. Example:</p>
<div class="highlight-typoscript"><div class="highlight"><pre>10 = REST_METADATA
10 {
    path = {$plugin.tx_restdoc.path}
    field = copyright
    noTrimWrap = |Copyright &amp;copy; ||
}
</pre></div>
</div>
<p>Please read next chapter for a list of available fields.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="4fd1e437-2b3a-5923-9cbf-9cd8527e83c3" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
     </node>
     <node identifier="c59731d1-e1c0-d6e3-33bb-9df6ae139960" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="configuration" locale="">
      <properties>
       <title>Configuration</title>
      </properties>
      <node identifier="15d77775-0c61-ee23-9d9e-aed5e2dcf223" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="fb38374c-452e-a92a-8823-db744daf93bc" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="configuration">
<span id="id1"></span><h1>Configuration</h1>
<p>This chapter describes the TypoScript extension parameters.</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/configuration/txrestdocpi1.html">plugin.tx_restdoc_pi1</a><ul class="simple">
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/configuration/txrestdocpi1setup.html">plugin.tx_restdoc_pi1.setup</a><ul class="simple">
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/configuration/restmetadata.html">REST_METADATA</a><ul class="simple">
</ul>
</li>
</ul>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="cd1ebdf5-2c9b-a256-f402-a33274c8a26d" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      <node identifier="c53843ae-25f4-8161-f26b-881e58f57566" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="txrestdocpi1" locale="">
       <properties>
        <title>plugin.tx_restdoc_pi1</title>
       </properties>
       <node identifier="49d16724-fb96-d29a-5325-d698c7785f4c" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="c2a9a22d-f0ff-b664-765e-669bdcdcf5d2" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="plugin-tx-restdoc-pi1">
<span id="ts-plugin-tx-restdoc-pi1"></span><h1>plugin.tx_restdoc_pi1</h1>
<div class="contents local topic" id="contents">
<ul class="simple">
<li><a class="reference internal" href="#properties" id="id2">Properties</a></li>
<li><a class="reference internal" href="#property-details" id="id3">Property details</a></li>
</ul>
</div>
<div class="section" id="properties">
<h2><a class="toc-backref" href="#id2">Properties</a></h2>
<div class="ts-properties container">
<table border="1" class="docutils">
<colgroup>
<col width="33%" />
<col width="42%" />
<col width="14%" />
<col width="11%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Property</th>
<th class="head">Data type</th>
<th class="head"><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/Functions/Stdwrap/Index.html#stdwrap" title="(in TypoScript Reference v6.2)">stdWrap</a></th>
<th class="head">Default</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><a class="reference internal" href="#path">path</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></td>
<td>yes</td>
<td>empty</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#defaultfile">defaultFile</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></td>
<td>yes</td>
<td>&#8220;index&#8221;</td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="#mode">mode</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></td>
<td>yes</td>
<td>empty</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#rootpage">rootPage</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Integer/Index.html#data-type-integer" title="(in TypoScript Reference v6.2)">integer</a></td>
<td>yes</td>
<td>empty</td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="#showpermanentlink">showPermanentLink</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Boolean/Index.html#data-type-boolean" title="(in TypoScript Reference v6.2)">boolean</a></td>
<td>yes</td>
<td>0</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#pathseparator">pathSeparator</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></td>
<td>yes</td>
<td>&#8220;|&#8221; (vertical bar)</td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="#fallbackpathseparator">fallbackPathSeparator</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></td>
<td>yes</td>
<td>&#8220;\&#8221; (backslash)</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#documentstructuremaxdocuments">documentStructureMaxDocuments</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Integer/Index.html#data-type-integer" title="(in TypoScript Reference v6.2)">integer</a></td>
<td>yes</td>
<td>50</td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="#advertisesphinx">advertiseSphinx</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Boolean/Index.html#data-type-boolean" title="(in TypoScript Reference v6.2)">boolean</a></td>
<td>yes</td>
<td>1</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#addheadpagination">addHeadPagination</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Boolean/Index.html#data-type-boolean" title="(in TypoScript Reference v6.2)">boolean</a></td>
<td>yes</td>
<td>1</td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="#publishsources">publishSources</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Boolean/Index.html#data-type-boolean" title="(in TypoScript Reference v6.2)">boolean</a></td>
<td>yes</td>
<td>1</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#basewrap">baseWrap</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/Functions/Stdwrap/Index.html#stdwrap" title="(in TypoScript Reference v6.2)">stdWrap</a></td>
<td>yes</td>
<td>empty</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="property-details">
<h2><a class="toc-backref" href="#id3">Property details</a></h2>
<div class="contents local topic" id="id1">
<ul class="simple">
<li><a class="reference internal" href="#path" id="id4">path</a></li>
<li><a class="reference internal" href="#defaultfile" id="id5">defaultFile</a></li>
<li><a class="reference internal" href="#mode" id="id6">mode</a></li>
<li><a class="reference internal" href="#rootpage" id="id7">rootPage</a></li>
<li><a class="reference internal" href="#showpermanentlink" id="id8">showPermanentLink</a></li>
<li><a class="reference internal" href="#pathseparator" id="id9">pathSeparator</a></li>
<li><a class="reference internal" href="#fallbackpathseparator" id="id10">fallbackPathSeparator</a></li>
<li><a class="reference internal" href="#documentstructuremaxdocuments" id="id11">documentStructureMaxDocuments</a></li>
<li><a class="reference internal" href="#advertisesphinx" id="id12">advertiseSphinx</a></li>
<li><a class="reference internal" href="#addheadpagination" id="id13">addHeadPagination</a></li>
<li><a class="reference internal" href="#publishsources" id="id14">publishSources</a></li>
<li><a class="reference internal" href="#basewrap" id="id15">baseWrap</a></li>
</ul>
</div>
<div class="section" id="path">
<span id="ts-plugin-tx-restdoc-pi1-path"></span><h3><a class="toc-backref" href="#id4">path</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.path</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></p>
<p>Path to the root directory of the documentation.</p>
</div>
<div class="section" id="defaultfile">
<span id="ts-plugin-tx-restdoc-pi1-defaultfile"></span><h3><a class="toc-backref" href="#id5">defaultFile</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.defaultFile</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></p>
<p>Default file (main file).</p>
</div>
<div class="section" id="mode">
<span id="ts-plugin-tx-restdoc-pi1-mode"></span><h3><a class="toc-backref" href="#id6">mode</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.mode</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></p>
<p>Either <tt class="docutils literal"><span class="pre">BODY</span></tt>, <tt class="docutils literal"><span class="pre">TOC</span></tt>, <tt class="docutils literal"><span class="pre">RECENT</span></tt>, <tt class="docutils literal"><span class="pre">TITLE</span></tt>, <tt class="docutils literal"><span class="pre">QUICK_NAVIGATION</span></tt>, <tt class="docutils literal"><span class="pre">BREADCRUMB</span></tt>, <tt class="docutils literal"><span class="pre">REFERENCES</span></tt>, <tt class="docutils literal"><span class="pre">FILENAME</span></tt>
or <tt class="docutils literal"><span class="pre">SEARCH</span></tt> to setup the plugin from TypoScript.</p>
</div>
<div class="section" id="rootpage">
<span id="ts-plugin-tx-restdoc-pi1-rootpage"></span><h3><a class="toc-backref" href="#id7">rootPage</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.rootPage</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Integer/Index.html#data-type-integer" title="(in TypoScript Reference v6.2)">integer</a></p>
<p>UID of the page showing the documentation. This setting is used when <a class="reference internal" href="#mode">mode</a> = <tt class="docutils literal"><span class="pre">SEARCH</span></tt> to link back to the
documentation from search results.</p>
</div>
<div class="section" id="showpermanentlink">
<span id="ts-plugin-tx-restdoc-pi1-showpermanentlink"></span><h3><a class="toc-backref" href="#id8">showPermanentLink</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.showPermanentLink</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Boolean/Index.html#data-type-boolean" title="(in TypoScript Reference v6.2)">boolean</a></p>
<p>Whether permanent links should be added to each section.</p>
</div>
<div class="section" id="pathseparator">
<span id="ts-plugin-tx-restdoc-pi1-pathseparator"></span><h3><a class="toc-backref" href="#id9">pathSeparator</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.pathSeparator</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></p>
<p>Separator to be used between directories of the documentation. You may use multiple characters as well.</p>
<p>Make sure to read <a class="reference external" href="http://forge.typo3.org/issues/45560">http://forge.typo3.org/issues/45560</a> before using special characters such as <tt class="docutils literal"><span class="pre">\</span></tt> (backslash)
or <tt class="docutils literal"><span class="pre">/</span></tt> (forward slash).</p>
</div>
<div class="section" id="fallbackpathseparator">
<span id="ts-plugin-tx-restdoc-pi1-fallbackpathseparator"></span><h3><a class="toc-backref" href="#id10">fallbackPathSeparator</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.fallbackPathSeparator</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></p>
<p>Comma-separated list of fallback path separators.</p>
</div>
<div class="section" id="documentstructuremaxdocuments">
<span id="ts-plugin-tx-restdoc-pi1-documentstructuremaxdocuments"></span><h3><a class="toc-backref" href="#id11">documentStructureMaxDocuments</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.documentStructureMaxDocuments</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Integer/Index.html#data-type-integer" title="(in TypoScript Reference v6.2)">integer</a></p>
<p>Maximal number of documents to be processed at once when generating the documentation&#8217;s structure (requires
EXT:<a class="reference external" href="http://typo3.org/extensions/repository/view/dd_googlesitemap">dd_googlesitemap</a>).</p>
</div>
<div class="section" id="advertisesphinx">
<span id="ts-plugin-tx-restdoc-pi1-advertisesphinx"></span><h3><a class="toc-backref" href="#id12">advertiseSphinx</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.advertiseSphinx</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Boolean/Index.html#data-type-boolean" title="(in TypoScript Reference v6.2)">boolean</a></p>
<p>Whether header JS block should be generated to advertise Sphinx to plugins such as <a class="reference external" href="http://wappalyzer.com/">Wappalizer</a>.</p>
</div>
<div class="section" id="addheadpagination">
<span id="ts-plugin-tx-restdoc-pi1-addheadpagination"></span><h3><a class="toc-backref" href="#id13">addHeadPagination</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.addHeadPagination</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Boolean/Index.html#data-type-boolean" title="(in TypoScript Reference v6.2)">boolean</a></p>
<p>Whether pagination links should be added to the HEAD part. See Google&#8217;s <a class="reference external" href="http://googlewebmastercentral.blogspot.ch/2011/09/pagination-with-relnext-and-relprev.html">Webmaster Central Blog</a> for additional
information.</p>
</div>
<div class="section" id="publishsources">
<span id="ts-plugin-tx-restdoc-pi1-publishsources"></span><h3><a class="toc-backref" href="#id14">publishSources</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.publishSources</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/Boolean/Index.html#data-type-boolean" title="(in TypoScript Reference v6.2)">boolean</a></p>
<p>If active, the sources of your documentation (content of directory <tt class="docutils literal"><span class="pre">_sources/</span></tt> will be published. Please note that
this flag should be set if you want to show a context of where a search term was found.</p>
</div>
<div class="section" id="basewrap">
<span id="ts-plugin-tx-restdoc-pi1-basewrap"></span><h3><a class="toc-backref" href="#id15">baseWrap</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.baseWrap</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/Functions/Stdwrap/Index.html#stdwrap" title="(in TypoScript Reference v6.2)">stdWrap</a></p>
<p>Override the default wrap for the plugin:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tx-restdoc-pi1&quot;</span><span class="nt">&gt;</span>
    ...
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">Default wrap is <strong>not</strong> applied when <a class="reference internal" href="#mode">mode</a> is either <tt class="docutils literal"><span class="pre">TITLE</span></tt> or <tt class="docutils literal"><span class="pre">FILENAME</span></tt> but baseWrap will be applied if defined.</p>
</div>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="2dd75edd-8cb3-2d0a-573c-89252b525a82" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="21792f9e-2bf8-11cc-0b03-b457a0b69862" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="txrestdocpi1setup" locale="">
       <properties>
        <title>plugin.tx_restdoc_pi1.setup</title>
       </properties>
       <node identifier="f1864762-3c5a-af20-d65a-5e4f101c934e" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="8079f26c-34d3-f506-0ecd-56727303bc55" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="plugin-tx-restdoc-pi1-setup">
<span id="ts-plugin-tx-restdoc-pi1-setup"></span><h1>plugin.tx_restdoc_pi1.setup</h1>
<div class="contents local topic" id="contents">
<ul class="simple">
<li><a class="reference internal" href="#properties" id="id2">Properties</a></li>
<li><a class="reference internal" href="#property-details" id="id3">Property details</a></li>
</ul>
</div>
<div class="section" id="properties">
<h2><a class="toc-backref" href="#id2">Properties</a></h2>
<div class="ts-properties container">
<table border="1" class="docutils">
<colgroup>
<col width="33%" />
<col width="42%" />
<col width="14%" />
<col width="11%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Property</th>
<th class="head">Data type</th>
<th class="head"><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/Functions/Stdwrap/Index.html#stdwrap" title="(in TypoScript Reference v6.2)">stdWrap</a></th>
<th class="head">Default</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><a class="reference internal" href="#defaultfile">defaultFile</a> (deprecated)</td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></td>
<td>yes</td>
<td>empty</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#body-image-renderobj">BODY.image.renderObj</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></td>
<td>no</td>
<td>see <a class="reference external" href="https://git.typo3.org/TYPO3CMS/Extensions/restdoc.git/blob/HEAD:/Configuration/TypoScript/setup.txt">setup.txt</a></td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="#toc-renderobj">TOC.renderObj</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></td>
<td>no</td>
<td>see <a class="reference external" href="https://git.typo3.org/TYPO3CMS/Extensions/restdoc.git/blob/HEAD:/Configuration/TypoScript/setup.txt">setup.txt</a></td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#master-toc-renderobj">MASTER_TOC.renderObj</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></td>
<td>no</td>
<td>see <a class="reference external" href="https://git.typo3.org/TYPO3CMS/Extensions/restdoc.git/blob/HEAD:/Configuration/TypoScript/setup.txt">setup.txt</a></td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="#recent-renderobj">RECENT.renderObj</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></td>
<td>no</td>
<td>see <a class="reference external" href="https://git.typo3.org/TYPO3CMS/Extensions/restdoc.git/blob/HEAD:/Configuration/TypoScript/setup.txt">setup.txt</a></td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#quick-navigation-renderobj">QUICK_NAVIGATION.renderObj</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></td>
<td>no</td>
<td>see <a class="reference external" href="https://git.typo3.org/TYPO3CMS/Extensions/restdoc.git/blob/HEAD:/Configuration/TypoScript/setup.txt">setup.txt</a></td>
</tr>
<tr class="row-even"><td><a class="reference internal" href="#breadcrumb-renderobj">BREADCRUMB.renderObj</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></td>
<td>no</td>
<td>see <a class="reference external" href="https://git.typo3.org/TYPO3CMS/Extensions/restdoc.git/blob/HEAD:/Configuration/TypoScript/setup.txt">setup.txt</a></td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#references-renderobj">REFERENCES.renderObj</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></td>
<td>no</td>
<td>see <a class="reference external" href="https://git.typo3.org/TYPO3CMS/Extensions/restdoc.git/blob/HEAD:/Configuration/TypoScript/setup.txt">setup.txt</a></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="property-details">
<h2><a class="toc-backref" href="#id3">Property details</a></h2>
<div class="contents local topic" id="id1">
<ul class="simple">
<li><a class="reference internal" href="#defaultfile" id="id4">defaultFile</a></li>
<li><a class="reference internal" href="#body-image-renderobj" id="id5">BODY.image.renderObj</a></li>
<li><a class="reference internal" href="#toc-renderobj" id="id6">TOC.renderObj</a></li>
<li><a class="reference internal" href="#master-toc-renderobj" id="id7">MASTER_TOC.renderObj</a></li>
<li><a class="reference internal" href="#recent-renderobj" id="id8">RECENT.renderObj</a></li>
<li><a class="reference internal" href="#quick-navigation-renderobj" id="id9">QUICK_NAVIGATION.renderObj</a></li>
<li><a class="reference internal" href="#breadcrumb-renderobj" id="id10">BREADCRUMB.renderObj</a></li>
<li><a class="reference internal" href="#references-renderobj" id="id11">REFERENCES.renderObj</a></li>
</ul>
</div>
<div class="section" id="defaultfile">
<span id="ts-plugin-tx-restdoc-pi1-setup-defaultfile"></span><h3><a class="toc-backref" href="#id4">defaultFile</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.setup.defaultFile</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></p>
<div class="warning admonition">
<p class="first admonition-title">Deprecated</p>
<p class="last">Use <a class="reference internal" href="typo3cms/extensions/restdoc/configuration/txrestdocpi1setup/../txrestdocpi1.html#ts-plugin-tx-restdoc-pi1-defaultfile">plugin.tx_restdoc_pi1.defaultFile</a> instead.</p>
</div>
</div>
<div class="section" id="body-image-renderobj">
<span id="ts-plugin-tx-restdoc-pi1-setup-body-image"></span><h3><a class="toc-backref" href="#id5">BODY.image.renderObj</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.setup.BODY.image.renderObj</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></p>
<p>Setup to render the images within the documentation.</p>
</div>
<div class="section" id="toc-renderobj">
<span id="ts-plugin-tx-restdoc-pi1-setup-toc"></span><h3><a class="toc-backref" href="#id6">TOC.renderObj</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.setup.TOC.renderObj</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></p>
<p>Setup to render the table of contents of the documentation.</p>
</div>
<div class="section" id="master-toc-renderobj">
<span id="ts-plugin-tx-restdoc-pi1-setup-master-toc"></span><h3><a class="toc-backref" href="#id7">MASTER_TOC.renderObj</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.setup.MASTER_TOC.renderObj</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></p>
<p>Setup to render the master table of contents of the documentation.</p>
</div>
<div class="section" id="recent-renderobj">
<span id="ts-plugin-tx-restdoc-pi1-setup-recent"></span><h3><a class="toc-backref" href="#id8">RECENT.renderObj</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.setup.RECENT.renderObj</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></p>
<p>Setup to render the list of chapters updated recently.</p>
</div>
<div class="section" id="quick-navigation-renderobj">
<span id="ts-plugin-tx-restdoc-pi1-setup-quick-navigation"></span><h3><a class="toc-backref" href="#id9">QUICK_NAVIGATION.renderObj</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.setup.QUICK_NAVIGATION.renderObj</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></p>
<p>Setup to render the quick navigation (previous/next links).</p>
</div>
<div class="section" id="breadcrumb-renderobj">
<span id="ts-plugin-tx-restdoc-pi1-setup-breadcrumb"></span><h3><a class="toc-backref" href="#id10">BREADCRUMB.renderObj</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.setup.BREADCRUMB.renderObj</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></p>
<p>Setup to render the breadcrumb menu.</p>
</div>
<div class="section" id="references-renderobj">
<span id="ts-plugin-tx-restdoc-pi1-setup-references"></span><h3><a class="toc-backref" href="#id11">REFERENCES.renderObj</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">plugin.tx_restdoc_pi1.setup.REFERENCES.renderObj</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/ContentObjects/Index.html#cobjects" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">cObject</em></a></p>
<p>Setup to render the list of references.</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="d647ad07-3def-1914-0abc-1276268e1d9e" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="36bd758e-a7e6-cacc-173d-66b3bf77a28c" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="restmetadata" locale="">
       <properties>
        <title>REST_METADATA</title>
       </properties>
       <node identifier="dd33ca7d-87b9-89ba-59c3-c7d629c2b256" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="491f53b4-90ea-b37b-13e8-ee2bba67a8a1" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="rest-metadata">
<span id="ts-rest-metadata"></span><h1>REST_METADATA</h1>
<div class="contents local topic" id="contents">
<ul class="simple">
<li><a class="reference internal" href="#properties" id="id2">Properties</a></li>
<li><a class="reference internal" href="#property-details" id="id3">Property details</a></li>
</ul>
</div>
<div class="section" id="properties">
<h2><a class="toc-backref" href="#id2">Properties</a></h2>
<div class="ts-properties container">
<table border="1" class="docutils">
<colgroup>
<col width="33%" />
<col width="42%" />
<col width="14%" />
<col width="11%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Property</th>
<th class="head">Data type</th>
<th class="head"><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/Functions/Stdwrap/Index.html#stdwrap" title="(in TypoScript Reference v6.2)">stdWrap</a></th>
<th class="head">Default</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><a class="reference internal" href="#path">path</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></td>
<td>yes</td>
<td>empty</td>
</tr>
<tr class="row-odd"><td><a class="reference internal" href="#stdwrap-properties">(stdWrap properties)</a></td>
<td><a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/Functions/Stdwrap/Index.html#stdwrap" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">stdWrap property</em></a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="property-details">
<h2><a class="toc-backref" href="#id3">Property details</a></h2>
<div class="contents local topic" id="id1">
<ul class="simple">
<li><a class="reference internal" href="#path" id="id4">path</a></li>
<li><a class="reference internal" href="#stdwrap-properties" id="id5">(stdWrap properties)</a></li>
</ul>
</div>
<div class="section" id="path">
<span id="ts-rest-metadata-path"></span><h3><a class="toc-backref" href="#id4">path</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">REST_METADATA.path</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/DataTypes/String/Index.html#data-type-string" title="(in TypoScript Reference v6.2)">string</a></p>
<p>Path to the root directory of the documentation.</p>
</div>
<div class="section" id="stdwrap-properties">
<h3><a class="toc-backref" href="#id5">(stdWrap properties)</a></h3>
<p><tt class="code typoscript docutils literal"><span class="pre">REST_METADATA.&lt;stdWrap</span> <span class="pre">property&gt;</span> <span class="pre">=</span></tt> <a class="reference external" href="http://docs.typo3.org/typo3cms/TyposcriptReference/Functions/Stdwrap/Index.html#stdwrap" title="(in TypoScript Reference v6.2)"><em class="xref std std-ref">stdWrap property</em></a></p>
<p>Available fields:</p>
<ul class="simple">
<li>shorttitle</li>
<li>copyright</li>
<li>project</li>
<li>version</li>
<li>release</li>
<li>sphinx_version</li>
<li>...</li>
</ul>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">See <tt class="docutils literal"><span class="pre">globalcontext.json</span></tt> for additional fields.</p>
</div>
<div class="section" id="example">
<h4>Example</h4>
<div class="highlight-typoscript"><div class="highlight"><pre>10 = REST_METADATA
10.field = copyright
</pre></div>
</div>
</div>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="4c62e1f3-b0a4-43c8-b549-ef2e4f15b9bd" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
     </node>
     <node identifier="ba0511c4-e4b0-2b3c-cd29-4cff2e5091a3" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="development" locale="">
      <properties>
       <title>Development</title>
      </properties>
      <node identifier="074b39fc-b1cb-9636-8252-b7dfa2a5abd1" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="08d43ed7-89f5-6a63-4ee5-83f94da2dc8c" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="development">
<span id="id1"></span><h1>Development</h1>
<p>This chapter describes some internals of the restdoc extension to let you extend it easily.</p>
<div class="section" id="hooks">
<h2>Hooks</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/development/hooks/renderhook.html">renderHook</a></li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/development/hooks/makemenuarrayhook.html">makeMenuArrayHook</a></li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/development/hooks/quicknavigationhook.html">quickNavigationHook</a></li>
<li class="toctree-l1"><a class="reference internal" href="typo3cms/extensions/restdoc/development/hooks/searchformhook.html">searchFormHook</a></li>
</ul>
</div>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="6322a8c5-a2c2-f4ff-6385-dd7e47f27e24" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      <node identifier="1e77d258-bd47-ddb5-5c14-c09a8b42feaf" type="TYPO3.Neos:Shortcut" nodeName="hooks" locale="">
       <properties>
        <title>hooks</title>
       </properties>
       <node identifier="704fd5b6-aba0-e886-5391-6e296a301df0" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
       <node identifier="3c65947b-e41f-e265-605e-cfda7d33e9dd" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       <node identifier="e95ba41b-921c-db90-fd19-6a6bc22b9fcb" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="makemenuarrayhook" locale="">
        <properties>
         <title>makeMenuArrayHook</title>
        </properties>
        <node identifier="d422e7f0-2f13-6f7c-cec9-51761b373ca5" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="b9cce136-2a0b-f89b-c91c-cb70e99f154a" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="makemenuarrayhook">
<h1>makeMenuArrayHook</h1>
<p>This hook can be used to post-process the menu entries when generating a menu in TypoScript (general menu, previous/next page, breadcrumb menu, updated chapters).</p>
<div class="section" id="registration">
<h2>Registration</h2>
<p>You should register your class in:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;TYPO3_CONF_VARS&#39;</span><span class="p">][</span><span class="s1">&#39;EXTCONF&#39;</span><span class="p">][</span><span class="s1">&#39;restdoc&#39;</span><span class="p">][</span><span class="s1">&#39;makeMenuArrayHook&#39;</span><span class="p">]</span>
</pre></div>
</div>
</div>
<div class="section" id="expected-method">
<h2>Expected method</h2>
<p>Your hook should implement a method <tt class="docutils literal"><span class="pre">postProcessTOC()</span></tt> of the form</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">postProcessTOC</span><span class="p">(</span><span class="k">array</span> <span class="nv">$params</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Custom code</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="parameters">
<h2>Parameters</h2>
<p><tt class="docutils literal"><span class="pre">$params</span></tt> is an array with following keys:</p>
<dl class="docutils">
<dt>documentRoot</dt>
<dd>Absolute path to the documentation&#8217;s root</dd>
<dt>document</dt>
<dd>Relative path to the current document</dd>
<dt>data</dt>
<dd>A reference to an array of menu entries compatible with the various <tt class="docutils literal"><span class="pre">*MENU</span></tt> content objects, may thus be changed within your hook</dd>
<dt>config</dt>
<dd>Configuration of the plugin</dd>
<dt>pObj</dt>
<dd>A reference to the current <tt class="docutils literal"><span class="pre">pi_restdoc_pi1</span></tt> instance</dd>
</dl>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="d2643c2b-69af-746c-49fc-c0d9ed8864db" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="371d29ec-2d3c-e8f8-63ea-508cca9367d8" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="quicknavigationhook" locale="">
        <properties>
         <title>quickNavigationHook</title>
        </properties>
        <node identifier="1065dd94-35a9-00ef-8993-d88e70da6b21" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="29021e46-1aa4-cb55-9bdb-2b95dc145a8e" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="quicknavigationhook">
<h1>quickNavigationHook</h1>
<p>This hook can be used to post-process the quick navigation items.</p>
<div class="section" id="registration">
<h2>Registration</h2>
<p>You should register your class in:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;TYPO3_CONF_VARS&#39;</span><span class="p">][</span><span class="s1">&#39;EXTCONF&#39;</span><span class="p">][</span><span class="s1">&#39;restdoc&#39;</span><span class="p">][</span><span class="s1">&#39;quickNavigationHook&#39;</span><span class="p">]</span>
</pre></div>
</div>
</div>
<div class="section" id="expected-method">
<h2>Expected method</h2>
<p>Your hook should implement a method <tt class="docutils literal"><span class="pre">postProcessQUICK_NAVIGATION()</span></tt> of the form</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">postProcessQUICK_NAVIGATION</span><span class="p">(</span><span class="k">array</span> <span class="nv">$params</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Custom code</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="parameters">
<h2>Parameters</h2>
<p><tt class="docutils literal"><span class="pre">$params</span></tt> is an array with following keys:</p>
<dl class="docutils">
<dt>documentRoot</dt>
<dd>Absolute path to the documentation&#8217;s root</dd>
<dt>document</dt>
<dd>Relative path to the current document</dd>
<dt>data</dt>
<dd><p class="first">A reference to an array with the various links, may thus be changed within your hook. Available keys:</p>
<ul class="last simple">
<li>home_title / home_uri / home_uri_absolute</li>
<li>previous_title / previous_uri / previous_uri_absolute</li>
<li>next_title / next_uri / next_uri_absolute</li>
<li>parent_title / parent_uri / parent_uri_absolute</li>
<li>index_title / index_uri / index_uri_absolute</li>
<li>has_previous / has_next / has_parent / has_index</li>
</ul>
</dd>
<dt>config</dt>
<dd>Configuration of the plugin</dd>
<dt>pObj</dt>
<dd>A reference to the current <tt class="docutils literal"><span class="pre">pi_restdoc_pi1</span></tt> instance</dd>
</dl>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="9b63c321-c7a9-712e-cf19-81365d918445" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="0af95f48-6a5b-1eca-485b-943e4084ad4e" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="renderhook" locale="">
        <properties>
         <title>renderHook</title>
        </properties>
        <node identifier="2c0b147c-c183-aa6f-680f-5e131534d173" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="bcd61851-551c-9f9d-dbca-bd2df65abfab" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="renderhook">
<h1>renderHook</h1>
<p>This hook can be used to post-process the general plugin&#8217;s output before being wrapped by either your custom TypoScript processing or the standard base class:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tx-restdoc-pi1&quot;</span><span class="nt">&gt;</span>
    ...
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</div>
<div class="section" id="registration">
<h2>Registration</h2>
<p>You should register your class in:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;TYPO3_CONF_VARS&#39;</span><span class="p">][</span><span class="s1">&#39;EXTCONF&#39;</span><span class="p">][</span><span class="s1">&#39;restdoc&#39;</span><span class="p">][</span><span class="s1">&#39;renderHook&#39;</span><span class="p">]</span>
</pre></div>
</div>
</div>
<div class="section" id="expected-method">
<h2>Expected method</h2>
<p>Your hook should implement a method <tt class="docutils literal"><span class="pre">postProcessOutput()</span></tt> of the form</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">postProcessOutput</span><span class="p">(</span><span class="k">array</span> <span class="nv">$params</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Custom code</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="parameters">
<h2>Parameters</h2>
<p><tt class="docutils literal"><span class="pre">$params</span></tt> is an array with following keys:</p>
<dl class="docutils">
<dt>mode</dt>
<dd>The plugin&#8217;s mode</dd>
<dt>documentRoot</dt>
<dd>Absolute path to the documentation&#8217;s root</dd>
<dt>document</dt>
<dd>Relative path to the current document</dd>
<dt>output</dt>
<dd>Reference to the output of the plugin, may thus be changed within your hook</dd>
<dt>config</dt>
<dd>Configuration of the plugin</dd>
<dt>pObj</dt>
<dd>A reference to the current <tt class="docutils literal"><span class="pre">pi_restdoc_pi1</span></tt> instance</dd>
</dl>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="fc806503-0979-e5d3-878f-5308d90950ac" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="c31fc900-fe02-0014-e004-eff60d58cb43" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="searchformhook" locale="">
        <properties>
         <title>searchFormHook</title>
        </properties>
        <node identifier="61b50ae8-9b7d-c150-c56c-dbf44e37ea58" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="0595e666-68c2-2cc1-6b70-8f1a54e314ae" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="searchformhook">
<h1>searchFormHook</h1>
<p>This hook can be used to pre-process the search form.</p>
<div class="section" id="registration">
<h2>Registration</h2>
<p>You should register your class in:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;TYPO3_CONF_VARS&#39;</span><span class="p">][</span><span class="s1">&#39;EXTCONF&#39;</span><span class="p">][</span><span class="s1">&#39;restdoc&#39;</span><span class="p">][</span><span class="s1">&#39;searchFormHook&#39;</span><span class="p">]</span>
</pre></div>
</div>
</div>
<div class="section" id="expected-method">
<h2>Expected method</h2>
<p>Your hook should implement a method <tt class="docutils literal"><span class="pre">preProcessSEARCH()</span></tt> of the form</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">preProcessSEARCH</span><span class="p">(</span><span class="k">array</span> <span class="nv">$params</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Custom code</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="parameters">
<h2>Parameters</h2>
<p><tt class="docutils literal"><span class="pre">$params</span></tt> is an array with following keys:</p>
<dl class="docutils">
<dt>config</dt>
<dd><p class="first">A reference to the configuration of the search form:</p>
<ul class="last simple">
<li><strong>jsLibs:</strong> Array of JavaScript libraries to be loaded (<tt class="docutils literal"><span class="pre">underscore.js</span></tt>, <tt class="docutils literal"><span class="pre">doctools.js</span></tt>, <tt class="docutils literal"><span class="pre">searchtools.js</span></tt>)</li>
<li><strong>jsInline:</strong> Inline JavaScript code (loading the index resource)</li>
<li><strong>advertiseSphinx:</strong> Whether to advertise Sphinx (standard inline JavaScript code needed by <tt class="docutils literal"><span class="pre">searchtools.js</span></tt>,
thus default to <tt class="docutils literal"><span class="pre">TRUE</span></tt>)</li>
</ul>
</dd>
<dt>pObj</dt>
<dd>A reference to the current <tt class="docutils literal"><span class="pre">pi_restdoc_pi1</span></tt> instance</dd>
</dl>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="d941c407-8ea0-fa99-6557-3d3d5b1af7fd" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
      </node>
     </node>
     <node identifier="f62770b4-1fc9-61b9-e1bd-f745750a6485" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="knownproblems" locale="">
      <properties>
       <title>Known problems</title>
      </properties>
      <node identifier="68e756b9-f9a9-cabe-e49f-37723ffec7ad" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="f7c8d9ed-02a6-f691-6483-166292851025" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="known-problems">
<span id="id1"></span><h1>Known problems</h1>
<ul class="simple">
<li>With FAL (TYPO3 6.x) only LocalStorage has been implemented and tested, meaning code will need to be adapted in order to deal with other types of remote storage.</li>
</ul>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Please use the extension&#8217;s bug tracker on Forge to report bugs: <a class="reference external" href="https://forge.typo3.org/projects/extension-restdoc/issues">https://forge.typo3.org/projects/extension-restdoc/issues</a></p>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="32357b66-6b41-d610-8e47-df502cc79034" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     </node>
     <node identifier="8a9b5651-0afa-9dd4-b560-a83871633863" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="todolist" locale="">
      <properties>
       <title>To-Do list</title>
      </properties>
      <node identifier="330a6665-5149-91c2-594f-bd750cc6c967" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="f8302ae1-4ba8-02f6-f0eb-23d5443e40b3" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="to-do-list">
<span id="id1"></span><h1>To-Do list</h1>
<p>This project evolves and matures as new use cases pop up. You would like to see a killer feature?
You have thought of better user experience? Great!</p>
<p><img alt="A single address" src="_Resources/Persistent/d8a9894dc8ec9ded381023d8117969397700a25e/finger.png" style="width: 64px" /></p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Please use the extension&#8217;s bug tracker on Forge to propose new features: <a class="reference external" href="https://forge.typo3.org/projects/extension-restdoc/issues">https://forge.typo3.org/projects/extension-restdoc/issues</a></p>
</div>
<div class="section" id="translation">
<h2>Translation</h2>
<p id="index-0">Another very easy way to contribute to the success of this extension is to translate it on the
<a class="reference external" href="http://translation.typo3.org/projects/TYPO3.TYPO3.ext.restdoc/">TYPO3 translation server</a>; other users will thank you much.</p>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="b1f798f1-3207-1ef9-a967-7efebd831870" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     </node>
     <node identifier="7867a407-0400-6b73-e534-3919dbd6f3d2" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="changelog" locale="">
      <properties>
       <title>ChangeLog</title>
      </properties>
      <node identifier="0b4397c8-e21e-3622-149f-de05484591d5" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="3bceafb9-aa40-d280-aa07-b75da792d74e" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="changelog">
<span id="id1"></span><h1>ChangeLog</h1>
<p>The following is a very high level overview of the changes in this extension. For more details, <a class="reference external" href="https://git.typo3.org/TYPO3CMS/Extensions/restdoc.git/log">read the online log</a>.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Release notes and possible quick fixes for published versions are available in the project&#8217;s wiki: <a class="reference external" href="http://forge.typo3.org/projects/extension-restdoc/wiki">http://forge.typo3.org/projects/extension-restdoc/wiki</a></p>
</div>
<table border="1" class="docutils">
<colgroup>
<col width="10%" />
<col width="90%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Version</th>
<th class="head">Changes</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>1.3.0</td>
<td><ul class="first last simple">
<li>Refactoring of the JSON reader</li>
<li>Compatible with official TYPO3 manuals</li>
</ul>
</td>
</tr>
<tr class="row-odd"><td>1.2.0</td>
<td><ul class="first last simple">
<li>Compatible with TYPO3 6.x (FAL)</li>
<li>Support for metadata and Sphinx advertisement (Wappalizer)</li>
<li>Built-in Sphinx search within the documentation</li>
</ul>
</td>
</tr>
<tr class="row-even"><td>1.1.0</td>
<td>Support for index and breadcrumb menu</td>
</tr>
<tr class="row-odd"><td>1.0.0</td>
<td>Better integration with TypoScript, extension is considered stable</td>
</tr>
<tr class="row-even"><td>0.1.0</td>
<td>First release on TER</td>
</tr>
</tbody>
</table>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="6727b25e-a0e3-9527-afeb-10545254e200" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     </node>
    </node>
   </node>
  </node>
  <node identifier="1ea63915-3383-300b-c778-f0fef2c1744f" type="TYPO3.DocsTypo3Org:Project" nodeName="flow" locale="">
   <properties>
    <title>TYPO3 Flow</title>
   </properties>
   <node identifier="4549dc53-4f80-e365-c7e5-3f9bb3b5a595" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
   <node identifier="dca88493-c925-c167-d0d3-6a8259f4a7a2" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
   <node identifier="6da01990-1a96-ed1d-f3ea-97b649703672" type="TYPO3.Neos.NodeTypes:Page" nodeName="references" locale="">
    <properties>
     <title>Reference Manuals</title>
    </properties>
    <node identifier="ed49e355-ca97-4bd7-25d1-ffd15d61b250" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
    <node identifier="7f857854-0661-b3f1-7ac9-2fe6b9c5917f" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
    <node identifier="c4025e9c-dad0-871e-f5ed-bd9012fcb19f" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="quickstart" locale="">
     <properties>
      <title>Quickstart</title>
     </properties>
     <node identifier="4d744632-d142-39fe-7ebe-4558793b3ae5" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
      <node identifier="70ae97d1-e0e1-8559-46b1-cbf694d2fbd3" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
       <properties>
        <text><![CDATA[<div class="section" id="quickstart">
<h1>Quickstart</h1>
<div class="section" id="what-is-in-this-guide">
<h2>What Is in This Guide?</h2>
<p>This guided tour gets you started with TYPO3 Flow by giving step-by-step instructions for the
development of a small sample application. It will give you a first overview of the basic
concepts and leaves the details to the full manual and more specific guides.</p>
<p>Be warned that your head will be buzzed with several new concepts. But after you made your
way through the whitewater you&#8217;ll surely ride the wave in no time!</p>
</div>
<div class="section" id="what-is-typo3-flow">
<h2>What Is TYPO3 Flow?</h2>
<p>TYPO3 Flow is a PHP-based application framework which is especially well-suited for
enterprise-grade applications. Its architecture and conventions keep your head clear and
let you focus on the essential parts of your application. Although stability, security and
performance are all important elements of the framework&#8217;s design, the fluent user
experience is the one underlying theme which rules them all.</p>
<p>As a matter of fact, TYPO3 Flow is easier to learn for PHP beginners than for veterans. It
takes a while to leave behind old paradigms and open up for new approaches. That being
said, developing with TYPO3 Flow is very intuitive and the basic principles can be learned
within a few hours. Even if you don&#8217;t decide to use TYPO3 Flow for your next project, there are
a lot of universal development techniques you can learn.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">This tutorial goes best with a Caffè Latte or, if it&#8217;s afternoon or late night
already, with a few shots of Espresso ...</p>
</div>
</div>
<div class="section" id="installing-typo3-flow">
<h2>Installing TYPO3 Flow</h2>
<p>Setting up TYPO3 Flow is pretty straight-forward. As a minimum requirement you will need:</p>
<ul class="simple">
<li>A web server (we recommend Apache with the mod_rewrite module enabled)</li>
<li>PHP 5.3.2 or later</li>
<li>A database supported by Doctrine DBAL, such as MySQL</li>
<li>Command line access</li>
</ul>
<p>Install Composer by following the <a class="reference external" href="http://getcomposer.org/download/">installation instructions</a>
which boils down to this in the simplest case:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">curl</span> <span class="o">-</span><span class="nx">s</span> <span class="nx">https</span><span class="o">://</span><span class="nx">getcomposer</span><span class="o">.</span><span class="nx">org</span><span class="o">/</span><span class="nx">installer</span> <span class="o">|</span> <span class="nx">php</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Feel free to install the composer command to a global location, by moving
the phar archive to e.g. /usr/local/bin/composer and making it executable.
The following documentation assumes <tt class="docutils literal"><span class="pre">composer</span></tt> is installed globally.</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Running <tt class="docutils literal"><span class="pre">composer</span> <span class="pre">selfupdate</span></tt> from time to time keeps it up to date
and can prevent errors caused by composer not understanding e.g. new
syntax in manifest files.</p>
</div>
<p>Then use Composer in a directory which will be accessible by your web server to download
and install all packages of the TYPO3 Flow Base Distribution. The following command will
clone the latest version, include development dependencies and keep git metadata for future use:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">composer</span> <span class="nx">create</span><span class="o">-</span><span class="nx">project</span> <span class="o">--</span><span class="nx">dev</span> <span class="o">--</span><span class="nx">keep</span><span class="o">-</span><span class="nx">vcs</span> <span class="nx">typo3</span><span class="o">/</span><span class="nx">flow</span><span class="o">-</span><span class="nx">base</span><span class="o">-</span><span class="nx">distribution</span> <span class="nx">Quickstart</span>
</pre></div>
</div>
<p>You will end up with a directory structure like this:</p>
<div class="highlight-none"><div class="highlight"><pre>htdocs/               &lt;-- depending on your web server
  Quickstart/
    Build/
    Configuration/
      Settings.yaml.example
      ...
    Packages/
      Framework/
        TYPO3.Flow/
        ...
    Web/              &lt;-- your virtual host root will point to this
      .htaccess
      index.php
    flow
    flow.bat
</pre></div>
</div>
</div>
<div class="section" id="setting-file-permissions">
<h2>Setting File Permissions</h2>
<p>You will access TYPO3 Flow from both, the command line and the web browser. In order to provide
write access to certain directories for both, you will need to set the file permissions
accordingly. But don&#8217;t worry, this is simply done by changing to the TYPO3 Flow base directory
(<tt class="docutils literal"><span class="pre">Quickstart</span></tt> in the above example) and calling the following command:</p>
<p>command line:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">./</span><span class="nx">flow</span> <span class="nx">core</span><span class="o">:</span><span class="nx">setfilepermissions</span> <span class="nx">john</span> <span class="nx">www</span><span class="o">-</span><span class="nx">data</span> <span class="nx">www</span><span class="o">-</span><span class="nx">data</span>
</pre></div>
</div>
<p>Please replace john by your own username. The second argument is supposed to be the
username of your web server and the last one specifies the web server&#8217;s group. For most
installations on Mac OS X this would be both _www instead of www-data.</p>
<p>It can and usually will happen that TYPO3 Flow is launched from the command line by a different
user. All users who plan using TYPO3 Flow from the command line need to join the web server&#8217;s
group. On a Linux machine this can be done by typing:</p>
<p>command line:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">sudo</span> <span class="nx">usermod</span> <span class="o">-</span><span class="nx">a</span> <span class="o">-</span><span class="nx">G</span> <span class="nx">_www</span> <span class="nx">john</span>
</pre></div>
</div>
<p>On a Mac you can add a user to the web group with the following command:</p>
<p>command line:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">sudo</span> <span class="nx">dscl</span> <span class="o">.</span> <span class="o">-</span><span class="nx">append</span> <span class="o">/</span><span class="nx">Groups</span><span class="o">/</span><span class="nx">_www</span> <span class="nx">GroupMembership</span> <span class="nx">johndoe</span>
</pre></div>
</div>
<p>You will have to exit your shell / terminal window and open it again for the
new group membership to take effect.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Setting file permissions is not necessary and not possible on Windows machines.
For Apache to be able to create symlinks, you need to use Windows Vista (or
newer) and Apache needs to be started with Administrator privileges.</p>
</div>
</div>
<div class="section" id="setting-up-a-virtual-host">
<h2>Setting up a virtual host</h2>
<p>It is very much recommended to create a virtual host configuration for Apache
that uses the Web folder as the document root. This has a number of reasons:</p>
<ul class="simple">
<li>it makes for nicer URLs</li>
<li>it is <strong>more secure</strong> because that way access to anything else through the
web is not possible</li>
</ul>
<p>The latter point is really important!</p>
<p>For the rest of this tutorial we assume you have created a virtual host
that can be reached through <tt class="docutils literal"><span class="pre">http://quickstart/</span></tt>.</p>
</div>
<div class="section" id="testing-the-installation">
<h2>Testing the Installation</h2>
<div class="figure">
<a href="_Resources/Persistent/171d28a305880faec5f0878b840b571e874bea16/Welcome.png" data-lightbox="image-534802259fb0d"><img alt="The TYPO3 Flow Welcome Screen" class="screenshot-fullsize" src="_Resources/Persistent/deb57001465c82cf03a2601e4521531ee9e5139a/Welcome.png" style="width: 710px" /></a>
<p class="caption">The TYPO3 Flow Welcome Screen</p>
</div>
<p>If your system is configured correctly you should now be able to access the Welcome
screen:</p>
<div class="highlight-text"><div class="highlight"><pre>http://quickstart/
</pre></div>
</div>
<p>If you did not follow our advice to create a virtual host, point your browser to the
<tt class="docutils literal"><span class="pre">Web</span></tt> directory of your TYPO3 Flow installation throughout this tutorial, for example:</p>
<div class="highlight-text"><div class="highlight"><pre>http://localhost/Quickstart/Web/
</pre></div>
</div>
<p>The result should look similar to the screen you see in the screenshot. If something went
wrong, it usually can be blamed on a misconfigured web server or insufficient file
permissions.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If all you get is a 404, you might need to edit the <tt class="docutils literal"><span class="pre">.htaccess</span></tt> file in the
<tt class="docutils literal"><span class="pre">Web</span></tt> folder to adjust the <tt class="docutils literal"><span class="pre">RewriteBase</span></tt> directive as needed.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Depending on your environment (especially on Windows systems) you might need to set the
path to the PHP binary in <tt class="docutils literal"><span class="pre">Configuration/Settings.yaml</span></tt>. If you copied the provided
example Settings you only need to uncomment the corresponding lines and adjust the path.</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">There are some friendly ghosts in our <a class="reference external" href="http://flow.typo3.org/support">IRC channel</a> and in the <a class="reference external" href="http://flow.typo3.org/support">users mailing list</a>
– they will gladly help you out if you describe your problem as precisely as possible.</p>
</div>
<p class="rubric">Some Note About Speed</p>
<p>The first request will usually take quite a while because TYPO3 Flow does a lot of heavy
lifting in the background. It analyzes code, builds up reflection caches and applies
security rules. During all the following examples you will work in the so called
Development Context. It makes development very convenient but feels a lot slower than
the Production Context – the one you will obviously use for the application in
production.</p>
</div>
<div class="section" id="kickstarting-a-package">
<h2>Kickstarting a Package</h2>
<p>The actual code of an application and its resources – such as images, style sheets and
templates – are bundled into packages. Each package is identified by a globally unique
package key, which consists of your company or domain name (the so called vendor name)
and further parts you choose for naming the package.</p>
<p>Let&#8217;s create a Demo package for our fictive company Acme:</p>
<div class="highlight-none"><div class="highlight"><pre>$ ./flow kickstart:package Acme.Demo
Created .../Acme.Demo/Classes/Acme/Demo/Controller/StandardController.php
Created .../Acme.Demo/Resources/Private/Templates/Standard/Index.html
</pre></div>
</div>
<p>The Kickstarter will create a new package directory in Packages/Application/ resulting
in the following structure:</p>
<div class="highlight-text"><div class="highlight"><pre>Packages/
  Application/
    Acme.Demo/
      Classes/Acme/Demo/
      Configuration/
      Documentation/
      Meta/
      Resources/
      Tests/
</pre></div>
</div>
<p>The <strong class="command">kickstart:package</strong> command also generates a sample controller which displays
some content. You should be able to access it through the following URL:</p>
<div class="highlight-text"><div class="highlight"><pre>http://quickstart/Acme.Demo
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>In case your web server lacks mod_rewrite, it could be that you need to call this to access
the controller:</p>
<div class="highlight-text"><div class="highlight"><pre>http://quickstart/index.php/Acme.Demo
</pre></div>
</div>
<p class="last">If this the case, keep in mind to add <tt class="docutils literal"><span class="pre">index.php</span></tt> to the following URLs in this
Quickstart tutorial.</p>
</div>
</div>
<div class="section" id="hello-world">
<h2>Hello World</h2>
<p>Let&#8217;s use the StandardController for some more experiments. After opening the respective
class file in Packages/Application/Acme.Demo/Classes/Acme/Demo/Controller/ you should find the
method indexAction() which is responsible for the output you&#8217;ve just seen in your web
browser:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Index action</span>
<span class="sd"> *</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;foos&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
                <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span>
        <span class="p">));</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Accepting some kind of user input is essential for most applications and TYPO3 Flow does a
great deal of processing and sanitizing any incoming data. Try it out – create a new
action method like this one:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Hello action</span>
<span class="sd"> *</span>
<span class="sd"> * @param string $name Your name</span>
<span class="sd"> * @return string The hello</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">helloAction</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">.</span> <span class="nv">$name</span> <span class="o">.</span> <span class="s1">&#39;!&#39;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p class="last">Always make sure to properly document all your functions and class properties. This
will not only help other developers to understand your code, but is also essential for
TYPO3 Flow to work properly: In the above example TYPO3 Flow will, for example, determine that
the expected type of the parameter $name is string and adjust some validation
rules accordingly.</p>
</div>
<p>Now test the new action by passing it a name like in the following URL:</p>
<div class="highlight-text"><div class="highlight"><pre>http://quickstart/Acme.Demo/Standard/hello?name=Robert
</pre></div>
</div>
<p>The path segments of this URL tell TYPO3 Flow to which controller and action the web request
should be dispatched to. In our example the parts are:</p>
<ul class="simple">
<li>Acme.Demo (package key)</li>
<li>Standard (controller name)</li>
<li>hello (action name)</li>
</ul>
<p>If everything went fine, you should be greeted by a friendly &#8220;<cite>Hello John!</cite>&#8221; – if that&#8217;s
the name you passed to the action. Also try leaving out the name parameter in the URL –
TYPO3 Flow will complain about a missing argument.</p>
</div>
<div class="section" id="database-setup">
<h2>Database Setup</h2>
<p>One important design goal for TYPO3 Flow was to let a developer focus on the business logic and
work in a truly object-oriented fashion. While you develop a TYPO3 Flow application, you will
hardly note that content is actually stored in a database. Your code won&#8217;t contain any
SQL query and you don&#8217;t have to deal with setting up table structures.</p>
<p>But before you can store anything, you still need to set up a database and tell TYPO3 Flow how
to access it. The credentials and driver options need to be specified in the global
TYPO3 Flow settings.</p>
<p>After you have created an empty database and set up a user with sufficient access
rights, copy the file Configuration/Settings.yaml.example to
Configuration/Settings.yaml. Open and adjust the file to your needs – for a common MySQL
setup, it would look similar to this:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">persistence</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">backendOptions</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span> <span class="s">&#39;pdo_mysql&#39;</span>
        <span class="l-Scalar-Plain">dbname</span><span class="p-Indicator">:</span> <span class="s">&#39;quickstart&#39;</span> <span class="c1"># adjust to your database name</span>
        <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="s">&#39;root&#39;</span>         <span class="c1"># adjust to your database user</span>
        <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&#39;password&#39;</span> <span class="c1"># adjust to your database password</span>
        <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="s">&#39;127.0.0.1&#39;</span>    <span class="c1"># adjust to your database host</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>If you are not familiar with the <cite>YAML</cite> format yet, there are two things you should
know at least:</p>
<ul class="last simple">
<li>Indentation has a meaning: by different levels of indentation, a structure is
defined.</li>
<li>Spaces, not tabs: you must indent with exactly 2 spaces per level, don&#8217;t use tabs.</li>
</ul>
</div>
<p>If you configured everything correctly, the following command will create the initial
table structure needed by TYPO3 Flow:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow doctrine:migrate
Migrating up to 2011xxxxx00 from 0

++ migrating 2011xxxxx00
        -&gt; CREATE TABLE flow_resource_resourcepointer <span class="o">(</span><span class="nb">hash </span>VARCHAR<span class="o">(</span>255<span class="o">)</span> NOT NULL, PRIMARY
        -&gt; CREATE TABLE flow_resource_resource <span class="o">(</span>persistence_object_identifier VARCHAR<span class="o">(</span>40<span class="o">)</span>
...
++ finished in 0.76
</pre></div>
</div>
</div>
<div class="section" id="storing-objects">
<h2>Storing Objects</h2>
<p>Let&#8217;s take a shortcut here – instead of programming your own controller, model and view
just generate some example with the kickstarter:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow kickstart:actioncontroller --generate-actions --generate-related Acme.Demo CoffeeBean
Created .../Acme.Demo/Classes/Acme/Demo/Domain/Model/CoffeeBean.php
Created .../Acme.Demo/Classes/Acme/Demo/Domain/Repository/CoffeeBeanRepository.php
Created .../Acme.Demo/Classes/Acme/Demo/Controller/CoffeeBeanController.php
Created .../Acme.Demo/Resources/Private/Layouts/Default.html
Created .../Acme.Demo/Resources/Private/Templates/CoffeeBean/Index.html
Created .../Acme.Demo/Resources/Private/Templates/CoffeeBean/New.html
Created .../Acme.Demo/Resources/Private/Templates/CoffeeBean/Edit.html
Created .../Acme.Demo/Resources/Private/Templates/CoffeeBean/Show.html
</pre></div>
</div>
<p>Whenever a model is created or modified, the database structure needs to be adjusted to
fit the new PHP code. This is something you should do consciously because existing data
could be altered or removed – therefore this step isn&#8217;t taken automatically by TYPO3 Flow.</p>
<p>The kickstarter created a new model representing a coffee bean. For promoting the new
structure to the database, just run the <strong class="command">doctrine:update</strong> command:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow doctrine:update
Executed a database schema update.
</pre></div>
</div>
<p>A quick glance at the table structure (using your preferred database management tool) will
reveal that a new table for coffee beans has been created.</p>
<p>The controller rendered by the kickstarter provides some very basic functionality for
creating, editing and deleting coffee beans. Try it out by accessing this URL:</p>
<div class="highlight-text"><div class="highlight"><pre>http://quickstart/Acme.Demo/CoffeeBean
</pre></div>
</div>
<p>Create a few coffee beans, edit and delete them and take a look at the database tables
if you can&#8217;t resist ...</p>
<div class="figure">
<a href="_Resources/Persistent/267681094e8aac7ddbd13408b2c32f4a6c4f11ec/CoffeeBeanController.png" data-lightbox="image-53480225a1a90"><img alt="List and create coffee beans" class="screenshot-fullsize" src="_Resources/Persistent/c2a2f24db0517ab0dcf468cb9a9030d5608588c4/CoffeeBeanController.png" style="width: 710px" /></a>
<p class="caption">List and create coffee beans</p>
</div>
</div>
<div class="section" id="a-closer-look-at-the-example">
<h2>A Closer Look at the Example</h2>
<p>In case you have been programming PHP for a while, you might be used to tackle many
low-level tasks yourself: Rendering HTML forms, retrieving and validating input from the
superglobals <tt class="docutils literal"><span class="pre">$_GET</span></tt>, <tt class="docutils literal"><span class="pre">$_POST</span></tt> and <tt class="docutils literal"><span class="pre">$_FILES</span></tt>, validating the input, creating SQL
queries for storing the input in the database, checking for Cross-Site Scripting,
Cross-Site Request Forgery, SQL-Injection and much more.</p>
<p>With this background, the following complete code listing powering the previous example
may seem a bit odd, if not magical to you. Take a close look at each of the methods –
can you imagine what they do?</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * CoffeeBean controller for the Acme.Demo package</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">CoffeeBeanController</span> <span class="k">extends</span> <span class="nx">ActionController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         * @var \Acme\Demo\Domain\Repository\CoffeeBeanRepository</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$coffeeBeanRepository</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Shows a list of coffee beans</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;coffeeBeans&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">coffeeBeanRepository</span><span class="o">-&gt;</span><span class="na">findAll</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Shows a single coffee bean object</span>
<span class="sd">         *</span>
<span class="sd">         * @param \Acme\Demo\Domain\Model\CoffeeBean $coffeeBean The coffee bean to show</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">showAction</span><span class="p">(</span><span class="nx">CoffeeBean</span> <span class="nv">$coffeeBean</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;coffeeBean&#39;</span><span class="p">,</span> <span class="nv">$coffeeBean</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Shows a form for creating a new coffee bean object</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">newAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Adds the given new coffee bean object to the coffee bean repository</span>
<span class="sd">         *</span>
<span class="sd">         * @param \Acme\Demo\Domain\Model\CoffeeBean $coffeeBean A new coffee bean to add</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">createAction</span><span class="p">(</span><span class="nx">CoffeeBean</span> <span class="nv">$newCoffeeBean</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">coffeeBeanRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$newCoffeeBean</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Created a new coffee bean.&#39;</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Shows a form for editing an existing coffee bean object</span>
<span class="sd">         *</span>
<span class="sd">         * @param \Acme\Demo\Domain\Model\CoffeeBean $coffeeBean The coffee bean to edit</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">editAction</span><span class="p">(</span><span class="nx">CoffeeBean</span> <span class="nv">$coffeeBean</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;coffeeBean&#39;</span><span class="p">,</span> <span class="nv">$coffeeBean</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Updates the given coffee bean object</span>
<span class="sd">         *</span>
<span class="sd">         * @param \Acme\Demo\Domain\Model\CoffeeBean $coffeeBean The coffee bean to update</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">updateAction</span><span class="p">(</span><span class="nx">CoffeeBean</span> <span class="nv">$coffeeBean</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">coffeeBeanRepository</span><span class="o">-&gt;</span><span class="na">update</span><span class="p">(</span><span class="nv">$coffeeBean</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Updated the coffee bean.&#39;</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Removes the given coffee bean object from the coffee bean repository</span>
<span class="sd">         *</span>
<span class="sd">         * @param \Acme\Demo\Domain\Model\CoffeeBean $coffeeBean The coffee bean to delete</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">deleteAction</span><span class="p">(</span><span class="nx">CoffeeBean</span> <span class="nv">$coffeeBean</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">coffeeBeanRepository</span><span class="o">-&gt;</span><span class="na">remove</span><span class="p">(</span><span class="nv">$coffeeBean</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Deleted a coffee bean.&#39;</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You will learn all the nitty-gritty details of persistence (that is storing and
retrieving objects in a database), Model-View Controller and validation in
<tt class="xref doc docutils literal"><span class="pre">The</span> <span class="pre">Definitive</span> <span class="pre">Guide</span></tt>. With some hints
for each of the actions of this controller though, you&#8217;ll get some first impression of
how basic operations like creating or deleting objects are handled in TYPO3 Flow.</p>
<p>Without further ado let&#8217;s take a closer look at some of the actions:</p>
<div class="section" id="indexaction">
<h3>indexAction</h3>
<p>The <tt class="docutils literal"><span class="pre">indexAction</span></tt> displays a list of coffee beans. All it does is fetching
all existing coffee beans from a repository and then handing them over to the template
for rendering.</p>
<p>The <tt class="docutils literal"><span class="pre">CoffeeBeanRepository</span></tt> takes care of storing and finding stored coffee beans. The
simplest operation it provides is the <tt class="docutils literal"><span class="pre">findAll()</span></tt> method which returns a list of all
existing <tt class="docutils literal"><span class="pre">CoffeeBean</span></tt> objects.</p>
<p>For consistency reasons only one instance of the <tt class="docutils literal"><span class="pre">CoffeeBeanRepository</span></tt> class may
exist at a time. Otherwise there would be multiple repositories storing <tt class="docutils literal"><span class="pre">CoffeeBean</span></tt>
objects – and which one would you then ask for retrieving a specific coffee bean back from
the database? The <tt class="docutils literal"><span class="pre">CoffeeBeanRepository</span></tt> is therefore tagged with an annotation
stating that only a single instance may exist at a time:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A repository for CoffeeBeans</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Scope(&quot;singleton&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">CoffeeBeanRepository</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Persistence\Repository</span> <span class="p">{</span>
</pre></div>
</div>
<p>Because PHP doesn&#8217;t support the concept of annotations natively, we are using doc
comments which are parsed by an annotation parser in TYPO3 Flow.</p>
<p>TYPO3 Flow&#8217;s object management detects the <tt class="docutils literal"><span class="pre">Scope</span></tt> annotation and takes care of
all the details. All you need to do in order to get the right <tt class="docutils literal"><span class="pre">CoffeeBeanRepository</span></tt>
instance is telling TYPO3 Flow to inject it into a class property you defined:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\Inject</span>
<span class="sd"> * @var \Acme\Demo\Domain\Repository\CoffeeBeanRepository</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$coffeeBeanRepository</span><span class="p">;</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">Inject</span></tt> annotation tells TYPO3 Flow to set the <tt class="docutils literal"><span class="pre">$coffeeBeanRepository</span></tt> right
after the <tt class="docutils literal"><span class="pre">CoffeeBeanController</span></tt> class has been instantiated.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">This feature is called Dependency Injection and is an important feature of TYPO3 Flow.
Although it is blindingly easy to use, you&#8217;ll want to read some more about it later
in the <tt class="xref doc docutils literal"><span class="pre">related</span> <span class="pre">section</span></tt> of
the main manual.</p>
</div>
<p>TYPO3 Flow adheres to the Model-View-Controller pattern – that&#8217;s why the actual output is not
generated by the action method itself. This task is delegated to the view, and that is,
by default, a Fluid template (Fluid is the name of the templating engine TYPO3 Flow uses).
Following the conventions, there should be a directory structure in the
<tt class="file docutils literal"><span class="pre">Resources/Private/Templates/</span></tt> folder of a package which corresponds to the
controllers and actions. For the <tt class="docutils literal"><span class="pre">index</span></tt> action of the <tt class="docutils literal"><span class="pre">CoffeeBeanController</span></tt> the
template <tt class="file docutils literal"><span class="pre">Resources/Private/Templates/CoffeeBean/Index.html</span></tt> will be used for
rendering.</p>
<p>Templates can display content which has been assigned to template variables. The
placeholder <tt class="docutils literal"><span class="pre">{name}</span></tt> will be replaced by the actual value of the template variable
<tt class="docutils literal"><span class="pre">name</span></tt> once the template is rendered. Likewise <tt class="docutils literal"><span class="pre">{coffeeBean.name}</span></tt> is substituted
by the value of the coffee bean&#8217;s <tt class="docutils literal"><span class="pre">name</span></tt> attribute.</p>
<p>The coffee beans retrieved from the repository are assigned to the template variable
<tt class="docutils literal"><span class="pre">coffeeBeans</span></tt>. The template in turn uses a for-each loop for rendering a list of coffee
beans:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;ul&gt;</span>
        <span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{coffeeBeans}&quot;</span> <span class="na">as=</span><span class="s">&quot;coffeeBean&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;li&gt;</span>
                        {coffeeBean.name}
                <span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;/f:for&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre></div>
</div>
</div>
<div class="section" id="showaction">
<h3>showAction</h3>
<p>The <tt class="docutils literal"><span class="pre">showAction</span></tt> displays a single coffee bean:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Shows a single coffee bean object</span>
<span class="sd"> *</span>
<span class="sd"> * @param \Acme\Demo\Domain\Model\CoffeeBean $coffeeBean The coffee bean to show</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">showAction</span><span class="p">(</span><span class="nx">CoffeeBean</span> <span class="nv">$coffeeBean</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;coffeeBean&#39;</span><span class="p">,</span> <span class="nv">$coffeeBean</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The corresponding template for this action is stored in this file:</p>
<div class="highlight-text"><div class="highlight"><pre>Acme.Demo/Resources/Private/Templates/CoffeeBean/Show.html`
</pre></div>
</div>
<p>This template produces a simple representation of the <tt class="docutils literal"><span class="pre">coffeeBean</span></tt> object.
Similar to the <tt class="docutils literal"><span class="pre">indexAction</span></tt> the coffee bean object is assigned to a Fluid variable:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;coffeeBean&#39;</span><span class="p">,</span> <span class="nv">$coffeeBean</span><span class="p">);</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">showAction</span></tt> method requires a <tt class="docutils literal"><span class="pre">CoffeeBean</span></tt> object as its method argument.
But we need to look into the template of the <tt class="docutils literal"><span class="pre">indexAction</span></tt> again to understand how
coffee beans are actually passed to the <tt class="docutils literal"><span class="pre">showAction</span></tt>.</p>
<p>In the list of coffee beans, rendered by the <tt class="docutils literal"><span class="pre">indexAction</span></tt>, each entry links to the
corresponding <tt class="docutils literal"><span class="pre">showAction</span></tt>. The links are rendered by a so-called view helper in the
Fluid template <tt class="file docutils literal"><span class="pre">Index.html</span></tt>:</p>
<div class="highlight-html"><div class="highlight"><pre>&lt;f:link.action action=&quot;show&quot; arguments=&quot;{coffeeBean: coffeeBean}&quot;&gt;…&lt;/f:link.action&gt;
</pre></div>
</div>
<p>The interesting part is the <tt class="docutils literal"><span class="pre">{coffeeBean:</span> <span class="pre">coffeeBean}</span></tt> argument assignment:
It makes sure that the <tt class="docutils literal"><span class="pre">CoffeeBean</span></tt> object, stored in the <tt class="docutils literal"><span class="pre">coffeeBean</span></tt>
template variable, will be passed to the <tt class="docutils literal"><span class="pre">showAction</span></tt> through a GET parameter.</p>
<p>Of course you cannot just put a PHP object like the coffee bean into a URL. That&#8217;s why
the view helper will render an address like the following:</p>
<div class="highlight-text"><div class="highlight"><pre>http://quickstart/acme.demo/coffeebean/show?
        coffeeBean%5B__identity%5D=910c2440-ea61-49a2-a68c-ee108a6ee429
</pre></div>
</div>
<p>Instead of the real PHP object, its Universally Unique Identifier (UUID) was included as
a GET parameter.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">That certainly is not a beautiful URL for a coffee bean – but you&#8217;ll learn how to
create nice ones in the main manual.</p>
</div>
<p>Before the <tt class="docutils literal"><span class="pre">showAction</span></tt> method is actually called, TYPO3 Flow will analyze the GET and POST
parameters of the incoming HTTP request and convert identifiers into real objects
again. By its UUID the coffee bean is retrieved from the <tt class="docutils literal"><span class="pre">CoffeeBeanRepository</span></tt> and
eventually passed to the action method:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">showAction</span><span class="p">(</span><span class="nx">CoffeeBean</span> <span class="nv">$coffeeBean</span><span class="p">)</span> <span class="p">{</span>
</pre></div>
</div>
</div>
<div class="section" id="newaction">
<h3>newAction</h3>
<p>The <tt class="docutils literal"><span class="pre">newAction</span></tt> contains no PHP code – all it does is displaying the corresponding
Fluid template which renders a form.</p>
</div>
<div class="section" id="createaction">
<h3>createAction</h3>
<p>The <tt class="docutils literal"><span class="pre">createAction</span></tt> is called when a form displayed by the <tt class="docutils literal"><span class="pre">newAction</span></tt> is submitted.
Like the <tt class="docutils literal"><span class="pre">showAction</span></tt> it expects a <tt class="docutils literal"><span class="pre">CoffeeBean</span></tt> as its argument:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Adds the given new coffee bean object to the coffee bean repository</span>
<span class="sd"> *</span>
<span class="sd"> * @param \Acme\Demo\Domain\Model\CoffeeBean $coffeeBean A new coffee bean to add</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">createAction</span><span class="p">(</span><span class="nx">CoffeeBean</span> <span class="nv">$newCoffeeBean</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">coffeeBeanRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$newCoffeeBean</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Created a new coffee bean.&#39;</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This time the argument contains not an existing coffee bean but a new one. TYPO3 Flow knows
that the expected type is <tt class="docutils literal"><span class="pre">CoffeeBean</span></tt> (by the type hint in the method and the comment)
and thus tries to convert the POST data sent by the form into a new <tt class="docutils literal"><span class="pre">CoffeeBean</span></tt> object.
All you need to do is adding it to the Coffee Bean Repository.</p>
</div>
<div class="section" id="editaction">
<h3>editAction</h3>
<p>The purpose of the <tt class="docutils literal"><span class="pre">editAction</span></tt> is to render a form pretty much like that one shown by
the <tt class="docutils literal"><span class="pre">newAction</span></tt>. But instead of empty fields, this form contains all the data from an
existing coffee bean, including a hidden field with the coffee bean&#8217;s UUID.</p>
<p>The edit template uses Fluid&#8217;s form view helper for rendering the form. The important bit
for the edit form is the form object assignment:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;f:form</span> <span class="na">action=</span><span class="s">&quot;update&quot;</span> <span class="na">object=</span><span class="s">&quot;{coffeeBean}&quot;</span> <span class="na">name=</span><span class="s">&quot;coffeeBean&quot;</span><span class="nt">&gt;</span>
        ...
<span class="nt">&lt;/f:form&gt;</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">object=&quot;{coffeeBean}&quot;</span></tt> attribute assignment tells the view helper to use the
<tt class="docutils literal"><span class="pre">coffeeBean</span></tt> template variable as its subject. The individual form elements, such
as the text box, can now refer to the coffee bean object properties:</p>
<div class="highlight-html"><div class="highlight"><pre>&lt;f:form.textbox property=&quot;name&quot; id=&quot;name&quot; /&gt;
</pre></div>
</div>
<p>On submitting the form, the user will be redirected to the <tt class="docutils literal"><span class="pre">updateAction</span></tt>.</p>
</div>
<div class="section" id="updateaction">
<h3>updateAction</h3>
<p>The <tt class="docutils literal"><span class="pre">updateAction</span></tt> receives the modified coffee bean through its <tt class="docutils literal"><span class="pre">$coffeeBean</span></tt>
argument:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Updates the given coffee bean object</span>
<span class="sd"> *</span>
<span class="sd"> * @param \Acme\Demo\Domain\Model\CoffeeBean $coffeeBean The coffee bean to update</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">updateAction</span><span class="p">(</span><span class="nx">CoffeeBean</span> <span class="nv">$coffeeBean</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">coffeeBeanRepository</span><span class="o">-&gt;</span><span class="na">update</span><span class="p">(</span><span class="nv">$coffeeBean</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Updated the coffee bean.&#39;</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Although this method looks quite similar to the <tt class="docutils literal"><span class="pre">showAction</span></tt>, there is an important
difference you should be aware of: The parameter passed to the <tt class="docutils literal"><span class="pre">showAction</span></tt>
is an already existing (that is, already persisted) coffee bean object with the
modifications submitted by the user already applied.</p>
<p>Any modifications to the <tt class="docutils literal"><span class="pre">CoffeBean</span></tt> object will be lost at the end of the request
unless you tell TYPO3 Flow explicitly to apply the changes:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">coffeeBeanRepository</span><span class="o">-&gt;</span><span class="na">update</span><span class="p">(</span><span class="nv">$coffeeBean</span><span class="p">);</span>
</pre></div>
</div>
<p>This allows for a very efficient dirty checking and is a safety measure - as it leaves
control over the changes in your hands.</p>
<p>Speaking about safety measures: it&#8217;s important to know that Flow supports the notion
of &#8220;safe request methods&#8221;. According to the HTTP 1.1 specification, GET and HEAD
requests should not modify data on the sever side. Since we consider this a good
principle, Flow will not persist any changes automatically if the request method
is &#8220;safe&#8221;. So ... don&#8217;t use regular links for deleting your coffee beans - send
a POST or DELETE request instead.</p>
</div>
</div>
<div class="section" id="next-steps">
<h2>Next Steps</h2>
<p>Congratulations! You already learned the most important concepts of TYPO3 Flow development.</p>
<p>Certainly this tutorial will have raised more questions than it answered. Some of
these concepts – and many more you will learn – take some time to get used to.
The best advice I can give you is to expect things to be rather simple and
not look out for the complicated solution (you know, the <em>not to see the wood for
the trees</em> thing ...).</p>
<p>Next you should experiment a bit with TYPO3 Flow on your own. After you&#8217;ve collected
even more questions, I suggest reading the
<tt class="xref doc docutils literal"><span class="pre">Getting</span> <span class="pre">Started</span> <span class="pre">Tutorial</span></tt>.</p>
<p>At the time of this writing, The Definitive Guide is not yet complete and still
contains a few rough parts. Also the Getting Started Tutorial needs some love
and restructuring. Still, it already may be a valuable source for further
information and I recommend reading it.</p>
<p>Get in touch with the growing TYPO3 Flow community and make sure to share your ideas
about how we can improve TYPO3 Flow and its documentation:</p>
<ul class="simple">
<li><a class="reference external" href="http://flow.typo3.org/support">IRC channel</a></li>
<li><a class="reference external" href="http://flow.typo3.org/support">users mailing list</a></li>
</ul>
<p>I am sure that, if you’re a passionate developer, you will love TYPO3 Flow – because it was
made with you, the developer, in mind.</p>
<p>Happy Flow Experience!</p>
<p>Robert on behalf of the TYPO3 Flow team</p>
</div>
</div>
]]></text>
        <title></title>
       </properties>
      </node>
     </node>
     <node identifier="e0e8d200-5ed5-21a3-6159-51e958d1df91" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
    </node>
    <node identifier="7f5e2f19-1932-8871-11dd-87748a8da483" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="the-definitive-guide" locale="">
     <properties>
      <title>The Definitive Guide</title>
     </properties>
     <node identifier="168263dc-8ff4-6f03-2b3f-efd4e536b264" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
      <node identifier="2f636ad2-5607-5f2b-41c7-38fb5d7c69a4" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
       <properties>
        <text><![CDATA[<div class="section" id="the-definitive-guide">
<h1>The Definitive Guide</h1>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/parti.html">Part I: Introduction and Fundamentals</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/introduction.html">Introduction</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/object-orientedprogramming.html">Object-Oriented Programming</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/essentialdesignpatterns.html">Essential Design Patterns</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/conceptsofmodernprogramming.html">Domain-Driven Design</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii.html">Part II: Getting Started</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/introduction.html">Introduction</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/requirements.html">Requirements</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/installation.html">Installation</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/configuration.html">Configuration</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/modeling.html">Modeling</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/kickstart.html">Kickstart</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/modelandrepository.html">Model and Repository</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/controller.html">Controller</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/view.html">View</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/validation.html">Validation</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/routing.html">Routing</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partii/summary.html">Summary</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii.html">Part III: Manual</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/architecturaloverview.html">Architectural Overview</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/bootstrapping.html">Bootstrapping</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/packagemanagement.html">Package Management</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/configuration.html">Configuration</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/objectmanagement.html">Object Framework</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/persistence.html">Persistence</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/http.html">HTTP Foundation</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/modelviewcontroller.html">Model View Controller</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/templating.html">Templating</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/validation.html">Validation</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/propertymapping.html">Property Mapping</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/resourcemanagement.html">Resource Management</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/routing.html">Routing</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/caching.html">Cache Framework</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/sessionhandling.html">Session Handling</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/commandline.html">Command Line</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/aspectorientedprogramming.html">Aspect-Oriented Programming</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/security.html">Security</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/internationalization.html">Internationalization &amp; Localization Framework</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/errorandexceptionhandling.html">Error and Exception Handling</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/logginganddebugging.html">Logging and Debugging (to be written)</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/signalsandslots.html">Signals and Slots</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/reflection.html">Reflection</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/filemonitoring.html">File Monitoring (to be written)</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/testing.html">Testing (to be written)</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/utilityfunctions.html">Utility Functions</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiv.html">Part IV: Deployment and Administration (to be written)</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv.html">Part V: Appendixes</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html">TYPO3 Flow Validator Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html">TYPO3 Flow Annotation Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html">TYPO3 Flow TypeConverter Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html">Fluid ViewHelper Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/commandreference.html">TYPO3 Flow Command Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/predefinedconstantsreference.html">Predefined Constants Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/contributingtotypo3flow.html">Contributing to TYPO3 Flow</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines.html">Coding Guidelines</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs.html">ChangeLogs</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html">TYPO3 Flow Validator Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html">TYPO3 Flow Annotation Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html">TYPO3 Flow TypeConverter Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html">Fluid ViewHelper Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/commandreference.html">TYPO3 Flow Command Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/predefinedconstantsreference.html">Predefined Constants Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/contributingtotypo3flow.html">Contributing to TYPO3 Flow</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines.html">Coding Guidelines</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs.html">ChangeLogs</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html">TYPO3 Flow Validator Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html">TYPO3 Flow Annotation Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html">TYPO3 Flow TypeConverter Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html">Fluid ViewHelper Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/commandreference.html">TYPO3 Flow Command Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/predefinedconstantsreference.html">Predefined Constants Reference</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/contributingtotypo3flow.html">Contributing to TYPO3 Flow</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines.html">Coding Guidelines</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/contributors.html">Contributors</a></li>
</ul>
</div>
</div>]]></text>
        <title></title>
       </properties>
      </node>
     </node>
     <node identifier="191a1aa4-2dd4-08c7-76d6-058aeef41fdf" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     <node identifier="5ec5bd2e-8a33-be27-765a-a028f75fa556" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="parti" locale="">
      <properties>
       <title>Part I: Introduction and Fundamentals</title>
      </properties>
      <node identifier="d4cb21dc-a9f8-55fa-3ccf-084696402d05" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="8d4be1e0-fda3-ef35-ccd6-dc39f805bce9" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="part-i-introduction-and-fundamentals">
<h1>Part I: Introduction and Fundamentals</h1>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/parti/introduction.html">Introduction</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/introduction.html#what-is-typo3-flow">What is TYPO3 Flow?</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/introduction.html#the-epic-forward">The Epic Forward</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/introduction.html#parts-of-the-guide">Parts of The Guide</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/parti/object-orientedprogramming.html">Object-Oriented Programming</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/object-orientedprogramming.html#why-object-orientation-after-all">Why Object Orientation after all?</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/object-orientedprogramming.html#classes-and-objects">Classes and Objects</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/object-orientedprogramming.html#inheritance-of-classes">Inheritance of Classes</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/object-orientedprogramming.html#visibilities-public-private-and-protected">Visibilities: public, private and protected</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/object-orientedprogramming.html#static-methods-and-properties">Static Methods and Properties</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/object-orientedprogramming.html#important-design-and-architectural-patterns">Important design- and architectural patterns</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/parti/essentialdesignpatterns.html">Essential Design Patterns</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/essentialdesignpatterns.html#typo3-flow-paradigm">TYPO3 Flow Paradigm</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/essentialdesignpatterns.html#aspect-oriented-programming">Aspect-Oriented Programming</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/essentialdesignpatterns.html#dependency-injection">Dependency Injection</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/essentialdesignpatterns.html#test-driven-development">Test Driven Development</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/essentialdesignpatterns.html#domain-driven-design">Domain Driven Design</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/parti/conceptsofmodernprogramming.html">Domain-Driven Design</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/conceptsofmodernprogramming.html#creating-a-ubiquitous-language">Creating a Ubiquitous Language</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/conceptsofmodernprogramming.html#modelling-the-domain">Modelling the domain</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/conceptsofmodernprogramming.html#life-cycle-of-objects">Life cycle of objects</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/parti/conceptsofmodernprogramming.html#how-typo3-flow-enables-domain-driven-design">How TYPO3 Flow enables Domain-Driven Design</a></li>
</ul>
</li>
</ul>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="7da184b5-70c5-713d-053d-676a7c72848e" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      <node identifier="83bba867-f92b-62e8-8a7f-c8a9673bf3a7" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="introduction" locale="">
       <properties>
        <title>Introduction</title>
       </properties>
       <node identifier="d62e7b2a-4ba9-d0a9-2bb2-436566b2d539" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="9f9de4ca-8f75-7934-416f-48e789f67ed0" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="introduction">
<h1>Introduction</h1>
<div class="section" id="what-is-typo3-flow">
<h2>What is TYPO3 Flow?</h2>
<p>TYPO3 Flow is a web application platform enabling developers to create excellent web
solutions. It gives you fast results. It is a reliable foundation for complex
applications. And it is backed by one of the biggest PHP communities.</p>
</div>
<div class="section" id="the-epic-forward">
<h2>The Epic Forward</h2>
<p>The Definitive Guide is meant to be a technical resource for documentation of
both TYPO3 Flow usage as well as the theories, patterns and practices to be used in
effective TYPO3 Flow development. While the community and the authors of this guide
will remain objective when presenting concepts, the information found herein
may be strongly biased both positively and negatively for and/or against
other known software development methods and practices. While the practices
adopted in this guide are not the only ones possible, nor necessarily the right
ones for all projects, they are the generally accepted &#8220;Best Practices&#8221; that
surround the design decisions and direction that have been taken by TYPO3 Flow and
its contributors to date.</p>
<p>The fanatical adoption of the processes, procedures and methodologies as
outlined in the guide will enabled you to work faster, smarter and produce the
best possible results when working within the TYPO3 Flow framework. TYPO3 Flow was
created to complete a missing piece not available to the PHP developer
community. Many of the comparable systems found in various other languages are
based on proprietary technologies or based on languages that require additional
layers or systems to build and run applications. A primary reason for this was
that due to some initial shortcomings of earlier versions of PHP, it was not
accepted as an &#8220;Enterprise&#8221; language as opposed to a .NET or Java.</p>
<p>With the emergence of PHP 5.3 and the feature set it has brought with it, a
better ecosystem of PHP frameworks is now possible. TYPO3 Flow aims to implement a
set of software design and development principles that have been proven to
produce organized, highly extensible applications which can evolve over time
with the demands and changes of their domain.</p>
</div>
<div class="section" id="parts-of-the-guide">
<h2>Parts of The Guide</h2>
<p><strong>Part I: Introduction and Fundamentals</strong></p>
<p>In this section, you will get an overview of the underlying patterns and
practices that are implemented into TYPO3 Flow at its core. After reading this
section, you should have a concise and informed understanding of theories and
methodologies that are involved in building a TYPO3 Flow application using
&#8220;Best Practices&#8221;.</p>
<p><strong>Part II: Getting Started</strong></p>
<p>In Getting Started, you will learn how to get a TYPO3 Flow application setup and
ready to go. You will also be introduced to the basic building blocks for a
TYPO3 Flow application and its packages.</p>
<p><strong>Part III: Manual</strong></p>
<p>As is the case with any manual, this section will focus on how to use the
various pieces and mechanisms found within TYPO3 Flow. This will include descriptions
of what each component does and example code of how to use or implement it into
your application.</p>
<p><strong>Part IV: Deployment and Administration</strong></p>
<p>Learning to build an application based on TYPO3 Flow is one thing, but equally
important is understanding how to deploy your application into the wild, and
then how to maintain and support it once it&#8217;s live. The guide has dedicated an
entire section to ensuring you know the ins and outs of publishing and
maintaining an application built on TYPO3 Flow.</p>
<p><strong>Part V: Appendixes</strong></p>
<p>Any framework is only as good as its ability to communicate clearly on the
frameworks intent and design to its community. While a ubiquitous language
around design patterns helps, the appendixes section aim to make getting to
specific documentation and topic references more efficient. This section is much
more effective when used after having read through the guide, acting as a quick
reference for previously learned concepts.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="2cf129d2-8609-ee29-ad8f-b488fc254425" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="0624fc7c-8266-19c9-de71-337bb61f56d3" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="object-orientedprogramming" locale="">
       <properties>
        <title>Object-Oriented Programming</title>
       </properties>
       <node identifier="39feb6a7-3531-48cd-03c5-596013005dc8" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="0165c8cf-895d-c81a-0dd1-85821edc0ff9" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="object-oriented-programming">
<h1>Object-Oriented Programming</h1>
<p>Object-oriented programming is a Programming Paradigm, applied in TYPO3 Flow and
the Packages built on it. In this section we will give an overview of the
basic concepts of Object Orientation.</p>
<p>Programs have a certain purpose, which is - generally speaking - to solve a
problem. &#8220;Problem&#8221; does not necessarily mean error or defect but rather an
actual task. This Problem usually has a concrete counterpart in real life.</p>
<p>A Program could for example take care of the task of booking a cruise in the
Indian Ocean. If so we obviously have a problem (a programmer that has been
working to much and finally decided to go on vacation) and a program, promising
recuperation by booking a coach on one of the luxury liners for him and
his wife.</p>
<p>Object Orientation assumes that a concrete problem is to be solved by a
program, and a concrete problem is caused by real objects. Therefore focus is
on the object. This can be abstract of course: it will not be something as
concrete as a car or a ship all the time, but can also be a reservation,
an account or a graphical symbol.</p>
<p>objects are &#8220;containers&#8221; for data and corresponding functionality. The data of
an object is stored in its <strong>Properties</strong>. The functionality is provided by
<strong>Methods</strong>, which can for example alter the properties of the object.
In regard to the cruise liner we can say, that it has a certain amount of
coaches, a length and width and a maximum speed. Further it has methods to
start the motor (and hopefully to stop it again also), change the direction as
well as to increase thrust, for you can reach your holiday destination
a bit faster.</p>
<div class="section" id="why-object-orientation-after-all">
<h2>Why Object Orientation after all?</h2>
<p>Surely some users will ask themselves why they should develop object oriented
in the first place. Why not (just like until now) keep on developing
procedural, thus stringing together functions.</p>
<p>If we look at the roughly 4.300 extensions available for TYPO3 CMS at the moment, we&#8217;ll see
that they are built with a class by default - but have been completed by the extension
developer in a procedural way in about 95% of all cases.</p>
<p>Procedural programming has some severe disadvantages though:</p>
<ul class="simple">
<li>Properties and methods belonging together with regard to content can not be united. This
methodology, called <strong>Encapsulation</strong> in Object Orientation, is necessary, if only
because of clear arrangement.</li>
<li>It is rather difficult to re-use code</li>
<li>All properties can be altered everywhere throughout the code. This leads to hard-to-find
errors.</li>
<li>Procedural code gets confusing easily. This is called Spaghetti code.</li>
</ul>
<p>Furthermore Object Orientation mirrors the real world: Real objects exist, and
they all have properties and (most of them) methods. This fact is now
represented in programming.</p>
<p>In the following we&#8217;ll talk about the object ship. We&#8217;ll invoke this object,
stock it with coaches, a motor and other useful stuff. Furthermore, there will
be functions, moving the ship, thus turning the motor on and off. Later we&#8217;ll
even create a luxury liner based on the general ship and equip it with a golf
simulator and satellite TV.</p>
<p>On the following pages, we&#8217;ll try to be as graphic as possible (but still
semantically correct) to familiarize you with object orientation. There is a
specific reason: The more you can identify with the object and its methods, the
more open you&#8217;ll be for the theory behind Object Oriented Programming.
Both is necessary for successful programming – even though you&#8217;ll often not be
able to imagine the objects you&#8217;ll later work with as clearly as in
our examples.</p>
</div>
<div class="section" id="classes-and-objects">
<h2>Classes and Objects</h2>
<p>Let&#8217;s now take a step back and imagine there&#8217;d be a blueprint for ships
in general. We now focus not the ship but this blueprint. It is called
<strong>class</strong>, in this case is is the class <tt class="docutils literal"><span class="pre">Ship</span></tt>. In PHP this is written as
follows;</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;?</span><span class="nx">php</span>

<span class="k">class</span> <span class="nc">Ship</span> <span class="p">{</span>

<span class="o">...</span>

<span class="p">}</span>

<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">In this piece of code we kept noting the necessary PHP tags at the
beginning and end. We will spare them in the following examples to make the
listings a bit shorter.</p>
</div>
<p>The key word <tt class="docutils literal"><span class="pre">class</span></tt> opens the class and inside the curly brackets properties
and methods are written. we&#8217;ll now add these properties and methods:</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Ship</span> <span class="p">{</span>

        <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$coaches</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$engineStatus</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$speed</span><span class="p">;</span>


        <span class="k">function</span> <span class="nf">startEngine</span><span class="p">()</span> <span class="p">{}</span>
        <span class="k">function</span> <span class="nf">stopEngine</span><span class="p">()</span> <span class="p">{}</span>
        <span class="k">function</span> <span class="nf">moveTo</span><span class="p">(</span><span class="nv">$location</span><span class="p">)</span> <span class="p">{}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>Our ship now has a name (<tt class="docutils literal"><span class="pre">$name</span></tt>), a number of coaches (<tt class="docutils literal"><span class="pre">$coaches</span></tt>) and a
speed (<tt class="docutils literal"><span class="pre">$speed</span></tt>). In addition we built in a variable, containing the status
of the engine (<tt class="docutils literal"><span class="pre">$engineStatus</span></tt>). A real ship, of course, has much more
properties, all important somehow –&nbsp;for our our abstraction these few will be
sufficient though. We&#8217;ll focus on why every property is marked with the key
word <tt class="docutils literal"><span class="pre">public</span></tt> further down.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">For methods and properties we use a notation called <strong>lowerCamelCase</strong>: The
first letter is lower case and all other parts are added without blank or
underscore in upper case. This is a convention used in TYPO3 Flow.</p>
</div>
<p>We can also switch on the engine (<tt class="docutils literal"><span class="pre">startEngine()</span></tt>), travel with the ship to
the desired destination (<tt class="docutils literal"><span class="pre">moveTo($location)</span></tt>) and switch off the engine
again (<tt class="docutils literal"><span class="pre">stopEngine()</span></tt>). Note that all methods are empty, i.e. we have no
content at all. We&#8217;ll change this in the following examples, of course. The
line containing method name and (if available) parameters is called method
signature or method head. Everything contained by the method ist called method
body accordingly.</p>
<p>Now we&#8217;ll finally create an object from our class. The class <tt class="docutils literal"><span class="pre">ship</span></tt> will be
the blueprint and <tt class="docutils literal"><span class="pre">$fidelio</span></tt> the concrete object.</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$fidelio</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ship</span><span class="p">();</span>

<span class="c1">// Display the object</span>
<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$fidelio</span><span class="p">);</span>
</pre></div>
</div>
<p>The key word new is used to create a concrete object from the class.
This object is also called <strong>Instance **and the creation process
consequentially **Instantiation</strong>. We can use the command <tt class="docutils literal"><span class="pre">var_dump()</span></tt> to
closely examine the object. We&#8217;ll see the following</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">object</span><span class="p">(</span><span class="nx">Ship</span><span class="p">)</span><span class="c1">#1 (3) {</span>

        <span class="p">[</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">NULL</span>

        <span class="p">[</span><span class="s2">&quot;coaches&quot;</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">NULL</span>

        <span class="p">[</span><span class="s2">&quot;engineStatus&quot;</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">NULL</span>

        <span class="p">[</span><span class="s2">&quot;speed&quot;</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">NULL</span>

<span class="p">}</span>
</pre></div>
</div>
<p>We can clearly see that our object has 4 properties with a concrete value, at
the moment still NULL, for we did not yet assign anything. We can instantiate
as many objects from a class as we like, and every single one will differ from
the others – even if all of the properties have the same values.</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$fidelio1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ship</span><span class="p">();</span>
<span class="nv">$fidelio2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ship</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$fidelio1</span> <span class="o">===</span> <span class="nv">$fidelio2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">&#39;objects are identical!&#39;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">&#39;objects are not identical!&#39;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In this example the output is <tt class="docutils literal"><span class="pre">objects</span> <span class="pre">are</span> <span class="pre">not</span> <span class="pre">identical!</span></tt></p>
<div class="section" id="the-arrow-operator">
<h3>The arrow operator</h3>
<p>We are able to create an object now, but of course it&#8217;s properties are
still empty.We&#8217;ll hurry to change this by assigning values to the properties.
For this, we use a special operator, the so called arrow operator (-&gt;). We can
use it for getting access to the properties of an object or calling methods. In
the following example, we set the name of the ship and call some methods:</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$ship</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ship</span><span class="p">();</span>
<span class="nv">$ship</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="s2">&quot;FIDELIO&quot;</span><span class="p">;</span>

<span class="k">echo</span> <span class="s2">&quot;The ship&#39;s Name is &quot;</span><span class="o">.</span> <span class="nv">$ship</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>

<span class="nv">$ship</span><span class="o">-&gt;</span><span class="na">startEngine</span><span class="p">();</span>
<span class="nv">$ship</span><span class="o">-&gt;</span><span class="na">moveTo</span><span class="p">(</span><span class="s1">&#39;Bahamas&#39;</span><span class="p">);</span>
<span class="nv">$ship</span><span class="o">-&gt;</span><span class="na">stopEngine</span><span class="p">();</span>
</pre></div>
</div>
</div>
<div class="section" id="this">
<h3>$this</h3>
<p>Using the arrow operator we can now comfortably access properties and methods
of an object. But what to do, if we want to do this from inside a method, e.g.
to set <tt class="docutils literal"><span class="pre">$speed</span> <span class="pre">``inside</span> <span class="pre">of</span> <span class="pre">the</span> <span class="pre">method</span> <span class="pre">``startEngine()</span></tt>? We don&#8217;t know at this
point, how an object to be instantiated later will be called. So we need a
mechanism to do this independent from the name. This is done with the special
variable <tt class="docutils literal"><span class="pre">$this</span></tt>.</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Ship</span> <span class="p">{</span>

        <span class="o">...</span>

        <span class="k">public</span> <span class="nv">$speed</span><span class="p">;</span>

        <span class="o">...</span>

        <span class="k">function</span> <span class="nf">startEngine</span><span class="p">()</span> <span class="p">{</span>

                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">speed</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>

        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>With <tt class="docutils literal"><span class="pre">$this-&gt;speed</span></tt> you can access the property speed in the actual object,
independently of it&#8217;s name.</p>
</div>
<div class="section" id="constructor">
<h3>Constructor</h3>
<p>It can be very useful to initialize an object at the Moment of
instantiating it. Surely there will be a certain number of coaches built in
right away, when a new cruise liner is created - so that the future guest will
not be forced to sleep in emergency accommodation. So we can define the number
of coaches right when instantiating. The processing of the given value is done
in a method automatically called on creation of an object, the so called
<strong>Constructor</strong>. This special method always has the name <tt class="docutils literal"><span class="pre">__construct()</span></tt> (the
first two characters are underscores).</p>
<p>The values received from instantiating are now passed on to the constructor as
Argument and then assigned to the properties <tt class="docutils literal"><span class="pre">$coaches</span> <span class="pre">``respectively</span> <span class="pre">``$name</span></tt>.</p>
</div>
</div>
<div class="section" id="inheritance-of-classes">
<h2>Inheritance of Classes</h2>
<p>With the class we created we can already do a lot. We can create many ships and
send them to the oceans of the world. But of course the shipping company always
works on improving the offer of cruise liners. Increasingly big and beautiful
ships are built. Also new offers for the passengers are added. FIDELIO2, for
example, even has a little golf course based on deck.</p>
<p>If we look behind the curtain of this new luxury liner though, we find that the
shipping company only took a ship type FIDELIO and altered it a bit. The basis
is the same. Therefore it makes no sense to completely redefine the new ship –
instead we use the old definition and just add the golf course – just as the
shipping company did. Technically speaking we extend an &#8220;old&#8221; class definition
by using the key word <tt class="docutils literal"><span class="pre">extends</span></tt>.</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">LuxuryLiner</span> <span class="k">extends</span> <span class="nx">Ship</span> <span class="p">{</span>

        <span class="k">public</span> <span class="nv">$luxuryCoaches</span><span class="p">;</span>

        <span class="k">function</span> <span class="nf">golfSimulatorStart</span><span class="p">()</span> <span class="p">{</span>

                <span class="k">echo</span> <span class="s1">&#39;Golf simulator on ship &#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">.</span> <span class="s1">&#39;</span>
<span class="s1">                started.&#39;</span><span class="p">;</span>

        <span class="p">}</span>

        <span class="k">function</span> <span class="nf">golfSimulatorStop</span><span class="p">()</span> <span class="p">{</span>

                <span class="k">echo</span> <span class="s1">&#39;Golf simulator on ship &#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">.</span> <span class="s1">&#39;</span>
<span class="s1">                stopped.&#39;</span><span class="p">;</span>

        <span class="p">}</span>

<span class="p">}</span>

<span class="nv">$luxuryShip</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LuxuryLiner</span><span class="p">(</span><span class="s1">&#39;FIDELIO2&#39;</span><span class="p">,</span><span class="s1">&#39;600&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>Our new luxury liner comes into existence as easy as that. We define, that the
luxury liner just extends the Definition of the class <tt class="docutils literal"><span class="pre">Ship</span></tt>. The extended
class (in or example <tt class="docutils literal"><span class="pre">Ship</span></tt>) is called <strong>parent class **or **superclass</strong>.
The class formed by Extension (in our example <tt class="docutils literal"><span class="pre">LuxuryLiner</span></tt>) is called
<strong>child class **or **sub class</strong>.</p>
<p>The class <tt class="docutils literal"><span class="pre">LuxuryLiner</span></tt> now contains the complete configuration of the base
class <tt class="docutils literal"><span class="pre">Ship</span></tt> (including all properties and methods) and defines additional
properties (like the amount of luxury coaches in <tt class="docutils literal"><span class="pre">$luxuryCoaches</span></tt>) and
additional methods (like <tt class="docutils literal"><span class="pre">golfSimulatorStart()</span></tt> and <tt class="docutils literal"><span class="pre">golfSimulatorStop()</span></tt>).
Inside these methods you can again access the properties and methods of the
parent class by using <tt class="docutils literal"><span class="pre">$this</span></tt>.</p>
<div class="section" id="overriding-properties-and-methods">
<h3>Overriding Properties and Methods</h3>
<p>Inside an inherited class you can not only access properties and methods of the
parent class or define new ones. It&#8217;s even possible to override the original
properties and methods. This can be very useful, e.g. for giving a method of
a child class a new functionality. Let&#8217;s have a look at the method
<tt class="docutils literal"><span class="pre">startEngine()</span></tt> for example:</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Ship</span> <span class="p">{</span>
   <span class="o">...</span>
   <span class="nv">$engineStatus</span> <span class="o">=</span> <span class="s1">&#39;OFF&#39;</span><span class="p">;</span>
   <span class="o">...</span>
   <span class="k">function</span> <span class="nf">startEngine</span><span class="p">()</span> <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">engineStatus</span> <span class="o">=</span> <span class="s1">&#39;ON&#39;</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="o">...</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Luxusliner</span> <span class="k">extends</span> <span class="nx">Ship</span> <span class="p">{</span>
   <span class="o">...</span>
   <span class="nv">$additionalEngineStatus</span> <span class="o">=</span> <span class="s1">&#39;OFF&#39;</span><span class="p">;</span>
   <span class="o">...</span>
   <span class="k">function</span> <span class="nf">startEngine</span><span class="p">()</span> <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">engineStatus</span> <span class="o">=</span> <span class="s1">&#39;ON&#39;</span><span class="p">;</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">additionalEngineStatus</span> <span class="o">=</span> <span class="s1">&#39;ON&#39;</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Our luxury liner (of course) has an additional motor, so this has to be
switched on also, if the method <tt class="docutils literal"><span class="pre">startEngine()</span></tt> is called. The child class
now overrides the method of the parent class and so only the method
<tt class="docutils literal"><span class="pre">startEngine()</span></tt> of the child class is called.</p>
</div>
<div class="section" id="access-to-the-parent-class-through-parent">
<h3>Access to the parent class through &#8220;parent&#8221;</h3>
<p>Overriding a method comes in handy, but has a serious disadvantage. When
changing the method <tt class="docutils literal"><span class="pre">startEngine()</span></tt> in the parent class, we&#8217;d also have to
change the method in the child class. This is not only a source for errors but
also kind of inconvenient. It would be better to just call the method of the
parent class and then add additional code before or after the call. That&#8217;s
exactly what can be done by using the key word <tt class="docutils literal"><span class="pre">parent</span></tt>. With
<tt class="docutils literal"><span class="pre">parent::methodname()</span></tt> the method of the parent class can be accessed
comfortably - so our former example can be re-written in a smarter way:</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Ship</span> <span class="p">{</span>
   <span class="o">...</span>
   <span class="nv">$engineStatus</span> <span class="o">=</span> <span class="s1">&#39;OFF&#39;</span><span class="p">;</span>
   <span class="o">...</span>
   <span class="k">function</span> <span class="nf">startEngine</span><span class="p">()</span> <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">engineStatus</span> <span class="o">=</span> <span class="s1">&#39;ON&#39;</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="o">...</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Luxusliner</span> <span class="k">extends</span> <span class="nx">Ship</span> <span class="p">{</span>
   <span class="o">...</span>
   <span class="nv">$additionalEngineStatus</span> <span class="o">=</span> <span class="s1">&#39;OFF&#39;</span><span class="p">;</span>
   <span class="o">...</span>
   <span class="k">function</span> <span class="nf">startEngine</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">parent</span><span class="o">::</span><span class="na">startEngine</span><span class="p">();</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">additionalEngineStatus</span> <span class="o">=</span> <span class="s1">&#39;ON&#39;</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="abstract-classes">
<h3>Abstract classes</h3>
<p>Sometimes it is useful to define &#8220;placeholder methods&#8221; in the parent class
which are filled in the child class. These &#8220;placeholders&#8221; are called
<strong>abstract methods</strong>. A class containing abstract methods is called <strong>abstract
class</strong>. For our ship there could be a method <tt class="docutils literal"><span class="pre">setupCoaches()</span></tt>. Each type of
ship is to be handled differently for each has a proper configuration. So each
ship must have such a method but the concrete implementation is to be done
separately for each ship type.</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Ship</span> <span class="p">{</span>
<span class="o">...</span>
   <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">setupCoaches</span><span class="p">();</span>
   <span class="p">}</span>
   <span class="k">abstract</span> <span class="k">function</span> <span class="nf">setupCoaches</span><span class="p">();</span>
<span class="o">...</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Luxusliner</span> <span class="k">extends</span> <span class="nx">Ship</span> <span class="p">{</span>
<span class="o">...</span>
   <span class="k">function</span> <span class="nf">setupCoaches</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">echo</span> <span class="s1">&#39;Coaches are being set up&#39;</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$luxusschiff</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Luxusliner</span><span class="p">();</span>
</pre></div>
</div>
<p>In the parent class we have defined only the body of the
method <tt class="docutils literal"><span class="pre">setupCoaches()</span></tt>. The key word <tt class="docutils literal"><span class="pre">abstract</span></tt> makes sure that the method
must be implemented in the child class. So using abstract classes, we can
define which methods have to be present later without having to implement them
right away.</p>
</div>
<div class="section" id="interfaces">
<h3>Interfaces</h3>
<p>Interfaces are a special case of abstract classes in which <strong>all methods</strong> are
abstract. Using Interfaces, specification and implementation of functionality
can be kept apart. In our cruise example we have some ships supporting
satellite TV and some who don&#8217;t. The ships who do, have the methods
<tt class="docutils literal"><span class="pre">enableTV()</span></tt> and <tt class="docutils literal"><span class="pre">disableTV()</span></tt>. It is useful to define an interface
for that:</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">interface</span> <span class="nx">SatelliteTV</span> <span class="p">{</span>
   <span class="k">public</span> <span class="k">function</span> <span class="nf">enableTV</span><span class="p">();</span>
   <span class="k">public</span> <span class="k">function</span> <span class="nf">disableTV</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Luxusliner</span> <span class="k">extends</span> <span class="nx">Ship</span> <span class="k">implements</span> <span class="nx">SatelliteTV</span> <span class="p">{</span>

   <span class="k">protected</span> <span class="nv">$tvEnabled</span> <span class="o">=</span> <span class="k">FALSE</span><span class="p">;</span>

   <span class="k">public</span> <span class="k">function</span> <span class="nf">enableTV</span><span class="p">()</span> <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tvEnabled</span> <span class="o">=</span> <span class="k">TRUE</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">public</span> <span class="k">function</span> <span class="nf">disableTV</span><span class="p">()</span> <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tvEnabled</span> <span class="o">=</span> <span class="k">FALSE</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Using the key word <tt class="docutils literal"><span class="pre">implements</span></tt> it is made sure, that the class implements
the given interface. All methods in the interface definition then have to be
realized. The object <tt class="docutils literal"><span class="pre">LuxuryLiner</span></tt> now is of the type <tt class="docutils literal"><span class="pre">Ship</span></tt> but also of
the type <tt class="docutils literal"><span class="pre">SatelliteTV</span></tt>. It is also possible to implement not only one
interface class but multiple, separated by comma. Of course interfaces can also
be inherited by other interfaces.</p>
</div>
</div>
<div class="section" id="visibilities-public-private-and-protected">
<h2>Visibilities: public, private and protected</h2>
<p>Access to properties and methods can be restricted by different visibilities to
hide implementation details of a class. The meaning of a class can be
communicated better like this, for implementation details in internal methods
can not be accessed from outside. The following visibilities exist:</p>
<ul class="simple">
<li><strong>public</strong>: properties and methods with this visibility can be accessed
from outside the object. If no Visibility is defined, the behavior of
<tt class="docutils literal"><span class="pre">public</span></tt> is used.</li>
<li><strong>protected</strong>: properties and methods with visibility <tt class="docutils literal"><span class="pre">protected</span></tt> can
only be accessed from inside the class and it&#8217;s child classes.</li>
<li><strong>private</strong>: properties and methods set to <tt class="docutils literal"><span class="pre">private</span></tt> can only be
accessed from inside the class itself, not from child classes.</li>
</ul>
<div class="section" id="access-to-properties">
<h3>Access to Properties</h3>
<p>This small example demonstrates how to work with protected properties:</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Ship</span> <span class="p">{</span>
   <span class="k">protected</span> <span class="nv">$coaches</span><span class="p">;</span>
   <span class="o">...</span>
   <span class="k">abstract</span> <span class="k">protected</span> <span class="k">function</span> <span class="nf">setupCoaches</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Luxusliner</span> <span class="k">extends</span> <span class="nx">Ship</span> <span class="p">{</span>
   <span class="k">protected</span> <span class="k">function</span> <span class="nf">setupCoaches</span><span class="p">()</span> <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">coaches</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$luxusliner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Luxusliner</span><span class="p">(</span><span class="s1">&#39;Fidelio&#39;</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
<span class="k">echo</span> <span class="s1">&#39;Number of coaches: &#39;</span> <span class="o">.</span> <span class="nv">$luxusliner</span><span class="o">-&gt;</span><span class="na">coaches</span><span class="p">;</span> <span class="c1">// Does NOT work!</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">LuxuryLiner</span></tt> may alter the property <tt class="docutils literal"><span class="pre">coaches</span></tt>, for this is <tt class="docutils literal"><span class="pre">protected</span></tt>.
If it was <tt class="docutils literal"><span class="pre">private</span></tt> no access from inside of the child class would
be possible. Access from outside of the hierarchy of inheritance (like in the
last line of the example) is not possible. It would only be possible if the
property was <tt class="docutils literal"><span class="pre">public</span></tt>.</p>
<p>We recommend to define all properties as <tt class="docutils literal"><span class="pre">protected</span></tt>. Like that, they can not
be altered any more from outside and you should use special methods (called
getter and setter) to alter or read them. We&#8217;ll explain the use of these
methods in the following section.</p>
</div>
<div class="section" id="access-to-methods">
<h3>Access to Methods</h3>
<p>All methods the object makes available to the outside have to be defined as
<tt class="docutils literal"><span class="pre">public</span></tt>. All methods containing implementation details, e.g.
<tt class="docutils literal"><span class="pre">setupCoaches()</span></tt> in the above example, should be defined as <tt class="docutils literal"><span class="pre">protected</span></tt>.
The visibility <tt class="docutils literal"><span class="pre">private</span></tt> should be used most rarely, for it prevents methods
from being overwritten or extended.</p>
<p>Often you&#8217;ll have to read or set properties of an object from outside. So you&#8217;ll
need special methods that are able to set or get a property. These methods are
called <strong>setter</strong> respectively <strong>getter</strong>. See the example.</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Ship</span> <span class="p">{</span>

   <span class="k">protected</span> <span class="nv">$coaches</span><span class="p">;</span>
   <span class="k">protected</span> <span class="nv">$classification</span> <span class="o">=</span> <span class="s1">&#39;NORMAL&#39;</span><span class="p">;</span>

   <span class="k">public</span> <span class="k">function</span> <span class="nf">getCoaches</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">coaches</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="k">public</span> <span class="k">function</span> <span class="nf">setCoaches</span><span class="p">(</span><span class="nv">$numberOfCoaches</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nv">$numberOfCoaches</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">)</span> <span class="p">{</span>
                 <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">classification</span> <span class="o">=</span> <span class="s1">&#39;LARGE&#39;</span><span class="p">;</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">classification</span> <span class="o">=</span> <span class="s1">&#39;NORMAL&#39;</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">coaches</span> <span class="o">=</span> <span class="nv">$numberOfCoaches</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="k">public</span> <span class="k">function</span> <span class="nf">getClassification</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">classification</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>We now have a method <tt class="docutils literal"><span class="pre">setCoaches()</span></tt> which sets the number of coaches.
Furthermore it changes - depending on the number of coaches - the ship
category. You now see the advantage: When using methods to get and set the
properties, you can perform more complex operations, as e.g. setting of
dependent properties. This preserves consistency of the object. If you set
<tt class="docutils literal"><span class="pre">$coaches</span></tt> and <tt class="docutils literal"><span class="pre">$classification</span></tt> to <tt class="docutils literal"><span class="pre">public</span></tt>, we could set the number of
cabins to 1000 and classification to <tt class="docutils literal"><span class="pre">NORMAL</span></tt> - and our ship would end up
being inconsistent.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">In TYPO3 Flow you&#8217;ll find getter and setter methods all over. No property in
TYPO3 Flow is set to <tt class="docutils literal"><span class="pre">public</span></tt>.</p>
</div>
</div>
</div>
<div class="section" id="static-methods-and-properties">
<h2>Static Methods and Properties</h2>
<p>Until now we worked with objects, instantiated from classes. Sometimes though,
it does not make sense to generate a complete object, just to be able to use a
function of a class. For this php offers the possibility to directly access
properties and methods. These are then referred to as <tt class="docutils literal"><span class="pre">static</span> <span class="pre">properties</span></tt>
respectively <tt class="docutils literal"><span class="pre">static</span> <span class="pre">methods</span></tt>. Take as a rule of thumb: static properties are
necessary, every time two instances of a class are to have a common property.
Static methods are often used for function libraries.</p>
<p>Transferred to our example this means, that all ships are constructed by the
same shipyard. in case of technical emergency, all ships need to know the
actual emergency phone number of this shipyard. So we save this number in a
static property <tt class="docutils literal"><span class="pre">$shipyardSupportTelephoneNumber</span></tt>:</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Luxusliner</span> <span class="k">extends</span> <span class="nx">Ship</span> <span class="p">{</span>
   <span class="k">protected</span> <span class="k">static</span> <span class="nv">$shipyardSupportTelephoneNumber</span> <span class="o">=</span> <span class="s1">&#39;+49 30 123456&#39;</span><span class="p">;</span>

   <span class="k">public</span> <span class="k">function</span> <span class="nf">reportTechnicalProblem</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">echo</span> <span class="s1">&#39;On the ship &#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">.</span> <span class="s1">&#39; a problem has been discovered.</span>
<span class="s1">                Please inform &#39;</span> <span class="o">.</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$shipyardSupportTelephoneNumber</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">setShipyardSupportTelephoneNumber</span><span class="p">(</span><span class="nv">$newNumber</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">self</span><span class="o">::</span><span class="nv">$shipyardSupportTelephoneNumber</span> <span class="o">=</span> <span class="nv">$newNumber</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$fidelio</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Luxusliner</span><span class="p">(</span><span class="s1">&#39;Fidelio&#39;</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
<span class="nv">$figaro</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Luxusliner</span><span class="p">(</span><span class="s1">&#39;Figaro&#39;</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

<span class="nv">$fidelio</span><span class="o">-&gt;</span><span class="na">reportTechnicalProblem</span><span class="p">();</span>
<span class="nv">$figaro</span><span class="o">-&gt;</span><span class="na">reportTechnicalProblem</span><span class="p">();</span>

<span class="nx">Luxusliner</span><span class="o">::</span><span class="na">setShipyardSupportTelephoneNumber</span><span class="p">(</span><span class="s1">&#39;+01 1000&#39;</span><span class="p">);</span>

<span class="nv">$fidelio</span><span class="o">-&gt;</span><span class="na">reportTechnicalProblem</span><span class="p">();</span>
<span class="nv">$figaro</span><span class="o">-&gt;</span><span class="na">reportTechnicalProblem</span><span class="p">();</span>

<span class="c1">// Output</span>
<span class="nx">On</span> <span class="nx">the</span> <span class="nx">ship</span> <span class="nx">Fidelio</span> <span class="nx">a</span> <span class="nx">problem</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">discovered</span><span class="o">.</span> <span class="nx">Please</span> <span class="nx">inform</span> <span class="o">+</span><span class="mi">49</span> <span class="mi">30</span> <span class="mi">123456</span>
<span class="nx">On</span> <span class="nx">the</span> <span class="nx">ship</span> <span class="nx">Figaro</span> <span class="nx">a</span> <span class="nx">problem</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">discovered</span><span class="o">.</span> <span class="nx">Please</span> <span class="nx">inform</span> <span class="o">+</span><span class="mi">49</span> <span class="mi">30</span> <span class="mi">123456</span>
<span class="nx">On</span> <span class="nx">the</span> <span class="nx">ship</span> <span class="nx">Fidelio</span> <span class="nx">a</span> <span class="nx">problem</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">discovered</span><span class="o">.</span> <span class="nx">Please</span> <span class="nx">inform</span> <span class="o">+</span><span class="mo">01</span> <span class="mi">1000</span>
<span class="nx">On</span> <span class="nx">the</span> <span class="nx">ship</span> <span class="nx">Figaro</span> <span class="nx">a</span> <span class="nx">problem</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">discovered</span><span class="o">.</span> <span class="nx">Please</span> <span class="nx">inform</span> <span class="o">+</span><span class="mo">01</span> <span class="mi">1000</span>
</pre></div>
</div>
<p>What happens here? We instantiate two different ships, which both have a problem
and do contact the shipyard. Inside the method <tt class="docutils literal"><span class="pre">reportTechnicalProblem()</span></tt> you
see that if you want to use static properties, you have to trigger them with the
key word <tt class="docutils literal"><span class="pre">self::</span></tt>. If the emergency phone number now changes, the shipyard has
to tell all the ships about the new number. For this it uses the
<strong>static method</strong> <tt class="docutils literal"><span class="pre">setShipyardSupportTelephoneNumber($newNumber)</span></tt>. For the
method is static, it is called through the scheme <tt class="docutils literal"><span class="pre">classname::methodname()</span></tt>,
in our case <tt class="docutils literal"><span class="pre">LuxuryLiner::setShipyardSupportTelephoneNumber(...)</span></tt>.
If you check the latter two problem reports, you see that all instances of the
class use the new phone number. So both ship objects have access to the same
static variable <tt class="docutils literal"><span class="pre">$shipyardSupportTelephoneNumber</span></tt>.</p>
</div>
<div class="section" id="important-design-and-architectural-patterns">
<h2>Important design- and architectural patterns</h2>
<p>In software engineering you&#8217;ll sooner or later stumble upon design problems that
are connatural and solved in a similar way. Clever people thought about <strong>design
patterns</strong> aiming to be a general solution to a problem. Each design pattern is
so to speak a solution template for a specific problem. We by now have multiple
design patterns that are successfully approved in practice and therefore have
found there way in modern programming and especially TYPO3 Flow. In the following we
don&#8217;t want to focus on concrete implementation of the design patterns, for this
knowledge is not necessary for the usage of TYPO3 Flow. Nevertheless deeper knowledge
in design patterns in general is indispensable for modern programming style, so
it might be fruitful for you to learn about them.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Further information about design patterns can e.g. be found on
<a class="reference external" href="http://sourcemaking.com/">http://sourcemaking.com/</a> or in the book <strong>PHP Design Patterns</strong> by Stephan
Schmidt, published by O&#8217;Reilly.</p>
</div>
<p>From the big number of design patterns, we will have a closer look on two that
are essential when programming with TYPO3 Flow: <strong>Singleton</strong> &amp; <strong>Prototype</strong>.</p>
<div class="section" id="singleton">
<h3>Singleton</h3>
<p>This design pattern makes sure, that only one instance of a class  can exist
<strong>at a time</strong>. In TYPO3 Flow you can mark a class as singleton by annotating it
with <tt class="docutils literal"><span class="pre">&#64;Flow\Scope(&quot;singleton&quot;)</span></tt>. An example: our luxury liners are all constructed
in the same shipyard. So there is no sense in having more than one instance of
the shipyard object:</p>
<p>PHP Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\Scope(&quot;singleton&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">LuxuslinerShipyard</span> <span class="p">{</span>
   <span class="k">protected</span> <span class="nv">$numberOfShipsBuilt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

   <span class="k">public</span> <span class="k">function</span> <span class="nf">getNumberOfShipsBuilt</span><span class="p">()</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">numberOfShipsBuilt</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="k">public</span> <span class="k">function</span> <span class="nf">buildShip</span><span class="p">()</span> <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">numberOfShipsBuilt</span><span class="o">++</span><span class="p">;</span>
          <span class="c1">// Schiff bauen und zurückgeben</span>
   <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$luxuslinerShipyard</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LuxuslinerShipyard</span><span class="p">();</span>
<span class="nv">$luxuslinerShipyard</span><span class="o">-&gt;</span><span class="na">buildShip</span><span class="p">();</span>

<span class="nv">$theSameLuxuslinerShipyard</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LuxuslinerShipyard</span><span class="p">();</span>
<span class="nv">$theSameLuxuslinerShipyard</span><span class="o">-&gt;</span><span class="na">buildShip</span><span class="p">();</span>

<span class="k">echo</span> <span class="nv">$luxuslinerShipyard</span><span class="o">-&gt;</span><span class="na">getNumberOfShipsBuilt</span><span class="p">();</span> <span class="c1">// 2</span>
<span class="k">echo</span> <span class="nv">$theSameLuxuslinerShipyard</span><span class="o">-&gt;</span><span class="na">getNumberOfShipsBuilt</span><span class="p">();</span> <span class="c1">// 2</span>
</pre></div>
</div>
</div>
<div class="section" id="prototype">
<h3>Prototype</h3>
<p>Prototype is sort of the antagonist to Singleton. While for each class only one
object is instantiated when using Singleton, it is explicitly allowed to have
multiple instances when using Prototype. Each class annotated with
<tt class="docutils literal"><span class="pre">&#64;Flow\Scope(&quot;prototype&quot;)</span></tt> is of type <strong>Prototype</strong>. Since this is the default
scope, you can safely leave this one out.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Originally for the design pattern <strong>Prototype</strong> is specified, that a new
object is to be created by cloning an object prototype. We use Prototype as
counterpart to Singleton, without a concrete pattern implementation in the
background, though. For the functionality we experience, this does not make
any difference: We invariably get back a new instance of a class.</p>
</div>
<p>Now that we refreshed your knowledge of object oriented programming, we can
take a look at the deeper concepts of TYPO3 Flow: Domain Driven Design,
Model View Controller and Test Driven Development. You&#8217;ll spot the basics we
just talked about in the following frequently.</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="75f3bb7f-2a82-6198-7ae0-c41ebcc4a2b1" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="007d2a31-4ca4-c17f-6c41-693bc8cf8a5c" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="essentialdesignpatterns" locale="">
       <properties>
        <title>Essential Design Patterns</title>
       </properties>
       <node identifier="a80bf9c8-d169-c707-5c9e-e63f1f9c57fa" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="ea8e15e6-cd4f-9d9d-8653-944d2b43acf0" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="essential-design-patterns">
<h1>Essential Design Patterns</h1>
<div class="section" id="typo3-flow-paradigm">
<h2>TYPO3 Flow Paradigm</h2>
<p>TYPO3 Flow was designed from the ground up to be modular, adaptive and agile to
enable developers of all skill levels to build maintainable, extensible and
robust software through the implementation of several proven design paradigms.
Building software based on these principles will allow for faster, better
performing applications that can be extended to meet changing requirements while
avoiding inherent problems introduced by traditional legacy code maintenance.
TYPO3 Flow aims to make what you &#8220;should&#8221; do what you &#8220;want&#8221; to do by providing the
framework and community around best practices in the respective essential design
patterns.</p>
</div>
<div class="section" id="aspect-oriented-programming">
<h2>Aspect-Oriented Programming</h2>
<p>Aspect-Oriented Programming (AOP) is a programming paradigm which complements
Object-Oriented Programming (OOP) by separating concerns of a software
application to improve modularization. The separation of concerns (SoC) aims for
making a software easier to maintain by grouping features and behavior into
manageable parts which all have a specific purpose and business to take care of.</p>
<p>OOP already allows for modularizing concerns into distinct methods, classes and
packages. However, some concerns are difficult to place as they cross the
boundaries of classes and even packages. One example for such a cross-cutting
concern is security: Although the main purpose of a Forum package is to display
and manage posts of a forum, it has to implement some kind of security to assert
that only moderators can approve or delete posts. And many more packages need a
similar functionality for protect the creation, deletion and update of records. .
AOP enables you to move the security (or any other) aspect into its own package
and leave the other objects with clear responsibilities, probably not
implementing any security themselves.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Planning out the purpose and use cases of a package before you create it will
allow for backwards compatibility by creating an unchanging interface for
independent classes to consume.</p>
</div>
</div>
<div class="section" id="dependency-injection">
<h2>Dependency Injection</h2>
<p>In AOP there is focus on building reusable components that can be wired together
to create a cohesive architecture. This goal becomes increasingly difficult
because as the size and complexity of an application expands, so does its
dependencies. One technique to aliviate dependency management is through
Dependency Injection (DI).</p>
<p>Dependency Injection (DI) is a technique by which a package can request and gain
access to another package simply by asking the injector. An injector is the
service provided within a framework to instantiate and provide access to
package interfaces upon request.</p>
<p>DI enables a package to control what dependencies it requires while allowing the
framework or another third party system to handle the fullfillment of each
dependency. This is know as Inversion of Control (IoC). IoC delegates the
responsibility of dependency resolution to the framework while each package
specifies which dependencies it needs.</p>
<p>AOP provides a means for interaction between packages through various interfaces
and aspect. Without Dependency Injection AOP would suffer from creating
untestable code by requiring you to manage dependencies in the constructor
and thus breaking the Law of Demeter by allowing a package to &#8220;look&#8221; for
its dependencies with a system instead of &#8220;asking&#8221; for them through the
autonomous injector.</p>
</div>
<div class="section" id="test-driven-development">
<h2>Test Driven Development</h2>
<p>Test Driven Development (TDD) is a means in which a developer can explore,
implement and verify various independent pieces of an application in order to
deliver stable and maintainable code. TDD has become popular in mainstream
development because the first step required is to think about what the purpose
of a class or method is in the scope of your package&#8217;s feature requirements
incrementally, revising and refining small pieces of code while maintaining
overall integrity of the system as whole.</p>
<div class="section" id="five-steps-of-test-driven-development">
<h3>Five Steps of Test Driven Development</h3>
<ol class="arabic simple">
<li><strong>Think</strong>: Before you write anything, consider what is required of the code
you are about to create.</li>
<li><strong>Frame</strong>: Write the simplest test possible, less than five lines of code or
so that describe what you expect the method to do.</li>
<li><strong>Fulfill</strong>: Again, write a small amount of code to meet the expectations of
your test so that is passes. (It&#8217;s acceptable to hard code variables and
returns as you explore and think about the method, cleaning it up as you go.)</li>
<li><strong>Re-factor</strong>: Now that you have a simple passing test, you know that your
code as it stands works and can work on making it better while keeping an
eye on if it breaks of not. Think about ways to improve your code by removing
duplication and other &#8220;ugly&#8221; code until you feel it looks correct. Re-run the
tests and make sure it still passes, if not, fix it.</li>
<li><strong>Repeat</strong>: Do it again. Look at your test to make sure you are testing what
it should do, not what it is doing. Add to your test if you find something
missing and continue looping through the process until you&#8217;re happy that the
code can&#8217;t be made any clearer with its current set of requirements. The more
times you repeat, the better the resulting code will be.</li>
</ol>
</div>
</div>
<div class="section" id="domain-driven-design">
<h2>Domain Driven Design</h2>
<p>Domain-driven Design (DDD) is a practice where an implementation is deeply
coupled with the evolving business model within its respective domain.
Typically when working with DDD, technical experts are paired with a domain
experts to ensure that each iteration of a system is getting closer to the core
problem.</p>
<dl class="docutils">
<dt>DDD relies on the following foundational elements:</dt>
<dd><ul class="first last simple">
<li><strong>Domain</strong>: An ontology of concepts related to a specific area of
knowledge and information.</li>
<li><strong>Model</strong>: An abstract system that describes the various aspects of a
domain.</li>
<li><strong>Ubiquitous Language</strong>: A glossary of language structured around a
domain model to connect all aspects of a model with uniformed definitions.</li>
<li><strong>Context</strong>: The relative position in which an expression of words are
located that determine it&#8217;s overall meaning.</li>
</ul>
</dd>
</dl>
<p>In DDD the Domain Model that is formed is a guide or measure of the overall
implementation of an applications relationship to the core requirements of the
problem it is trying to solve. DDD is not a specific technique or way of
developing software, it is a system to ensure that the desired result and end
result of a development iteration or aligned. For this reason, DDD is often
coupled with TDD and AOP.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="7aec2549-f23e-ef2f-1cca-f35964168606" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="873f5bb7-48ec-00b0-39d6-e8a5f8014c89" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="conceptsofmodernprogramming" locale="">
       <properties>
        <title>Domain-Driven Design</title>
       </properties>
       <node identifier="d60777dd-33f7-bbf0-d308-f6f8d2ad9c47" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="abf9842f-f0e1-954b-e05d-9c596a0f9885" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<span class="target" id="ch-concepts-of-modern-programming"></span><div class="section" id="domain-driven-design">
<h1>Domain-Driven Design</h1>
<p>Domain-Driven Design is a development technique which focuses on understanding
the customer&#8217;s problem domain. It not only contains a set of technical
ideas, but it also consists of techniques to structure the creativity in
the development process.</p>
<p>The key of Domain-Driven Design is understanding the customers
needs, and also the environment in which the customer works. The problem
which the to-be-written program should solve is called the
problem domain, and in Domain-Driven Design,
development is guided by the exploration of the problem domain.</p>
<p>While talking to the customer to understand his needs and wishes,
the developer creates a model which reflects the current understanding
of the problem. This model is called Domain Model
because it should accurately reflect the problem domain of the customer.
Then, the domain model is tested with real use-cases, trying to
understand if it fits to the customer&#8217;s processes and way of working.
Then, the model is refined again &#8211; and the whole process of discussion
with the customer starts again. Thus, Domain-Driven Design is an
iterative approach to software development.</p>
<p>Still, Domain-Driven Design is very pragmatic, as code is created
very early on (instead of extensive requirements specifications); and
real-world problems thus occur very early in the development process,
where they can be easily corrected. Normally, it takes some iterations
of model refinement until a domain model adequately reflects the problem
domain, focusing on the important properties, and leaving out
unimportant ones.</p>
<p>In the following sections, some core components of Domain-Driven
Design are explained. It starts with an approach to create a ubiquitous
language, and then focuses on the technical realization of the domain
model. After that, it is quickly explained how TYPO3 Flow enables
Domain-Driven Design, such that the reader gets a more practical
understanding of it.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">We do not explain all details of Domain-Driven Design in this
work, as only parts of it are important for the general understanding
needed for this work. More information can be found at [Evans].</p>
</div>
<div class="section" id="creating-a-ubiquitous-language">
<h2>Creating a Ubiquitous Language</h2>
<p>In a typical enterprise software project, a multitude of
different roles are involved: For instance, the customer is an expert
in his business, and he wants to use software to solve a certain
problem for him. Thus, he has a very clear idea on the interactions of
the to-be-created software with the environment, and he is one of the
people who need to use the software on a daily basis later on. Because
he has much knowledge about how the software is used, we call him the
Domain Expert.</p>
<p>On the other hand, there are the developers who actually need to
implement the software. While they are very skilled in applying
certain technologies, they often are no experts in the problem domain.
Now, developers and domain experts speak a very different language,
and misconceptions happen very often.</p>
<p>To reduce miscommunication, a <em>ubiquitous
language</em> should be formed, in which key terms of the
problem domain are described in a language understandable to both the
domain expert and the developer. Thus, the developers learn to use the
correct language of the problem domain right from the beginning, and
can express themselves in a better way when discussing with the domain
expert. Furthermore, they should also use the ubiquitous language
throughout all parts of the project: Not only in communication, design
documents and documentation, but the key terms should also appear in
the domain model. Names of classes, methods and properties are also
part of the ubiquitous language.</p>
<p>By using the language of the domain expert also in the code, it
is possible to discuss about difficult-to-specify functionality by
looking at the code together with the domain expert. This is
especially helpful for complex calculations or difficult-to-specify
condition rules. Thus, the domain expert can decide whether the
business logic was correctly implemented.</p>
<p>Creating a ubiquitous language involves creating a glossary, in
which the key terms are explained in a way both understandable to the
domain expert and the developer. This glossary is also updated
throughout the project, to reflect new insights gained in the
development process.</p>
</div>
<div class="section" id="modelling-the-domain">
<h2>Modelling the domain</h2>
<p>Now, while discussing the problem with the domain expert, the
developer starts to create the domain model, and refines it step by
step. Usually, UML is employed for that, which just contains the
relevant information of the problem domain.</p>
<p>The domain model consists of objects (as DDD is a technique for
object-oriented languages), the so-called <em>Domain
Objects</em>.</p>
<p>There are two types of domain objects, called
Entities and Value Objects.
If a domain object has a certain identity which
stays the same as the objects changes its state, the object is an
entity. Otherwise, if the identity of an object
is built from all properties, it is a
value object. We will now explain these two types
of objects in detail, including practical use-cases.</p>
<p>Furthermore, association mapping is explained, and aggregates
are introduced as a way to further structure the code.</p>
<div class="section" id="entities">
<h3>Entities</h3>
<p>Entities have a unique identity, which stays the same despite
of changes in the properties of the object. For example, a user can
have a user name as identity, a student a matriculation ID.
Although properties of the objects can change over time (for example
the student changes his courses), it is still the same object. Thus,
the above examples are entities.</p>
<p>The identity of an object is given by an immutable property or
a combination of them. In some use-cases it can make a lot of sense
to define identity properties in a way which is <em>meaningful
in the domain context</em>: If building an application which
interfaces with a package tracking system, the tracking ID of a
package should be used as identity inside the system. Doing so will
reduce the risk of inconsistent data, and can also speed up
access.</p>
<p>For some domain objects like a <tt class="docutils literal"><span class="pre">Person</span></tt>, it is
highly dependent on the problem domain what should be used as
identity property. In an internet forum, the e-mail address is often
used as identity property for people, while when implementing an
e-government application, one might use the passport ID to uniquely
identify citizens (which nobody would use in the web forum because
its data is too sensible).</p>
<p>In case the developer does not specify an identity property,
the framework assigns a universally unique identifier (UUID) to the
object at creation time.</p>
<p>It is important to stress that identity properties need to be
set at object creation time, i.e. inside the
constructor of an object, and are not allowed to change throughout
the whole object lifetime. As we will see later, the object will be
referenced using its identity properties, and a change of an
identity property would effectively wipe one object and create a new
one without updating dependent objects, leaving the system in an
inconsistent state.</p>
<p>In a typical system, many domain objects will be
entities. However, for some use-cases, another
type is a lot better suited: Value objects, which are explained in
the next section.</p>
</div>
<div class="section" id="value-objects">
<h3>Value Objects</h3>
<p>PHP provides several value types which it supports internally:
Integer, float, string, float and array. However, it is often the
case that you need more complex types of values inside your domain.
These are being represented using <em>value
objects</em>.</p>
<p>The identity of a value object is defined by <em>all its
properties</em>. Thus, two objects are equal if all properties
are equal. For instance, in a painting program, the concept of
color needs to be somewhere implemented. A
color is only represented through its value, for instance using RGB
notation. If two colors have the same RGB values, they are
effectively similar and do not need to be distinguished
further.</p>
<p>Value objects do not only contain data, they can potentially
contain very much logic, for example for converting the color value
to another color space like HSV or CMYK, even taking color profiles
into account.</p>
<p>As all properties of a value object are part of its identity,
they are not allowed to be changed after the object&#8217;s creation.
Thus, value objects are immutable. The only way
to &#8220;change&#8221; a value object is to create a new one using the old one
as basis. For example, there might be a method <tt class="docutils literal"><span class="pre">mix</span></tt> on
the <tt class="docutils literal"><span class="pre">Color</span></tt> object, which takes another
<tt class="docutils literal"><span class="pre">Color</span></tt> object and mixes both colors. Still, as the
internal state is not allowed to change, the mix method
will effectively return a new <tt class="docutils literal"><span class="pre">Color</span></tt> object containing
the mixed color values.</p>
<p>As value objects have a very straightforward semantic
definition (similar to the simple data types in many programming
languages), they can easily be created, cloned or transferred to
other subsystems or other computers. Furthermore, it is clearly
communicated that such objects are simple
values.</p>
<p>Internally, frameworks can optimize the use of value objects
by re-using them whenever possible, which can greatly reduce the
amount of memory needed for applications.</p>
</div>
<div class="section" id="entity-or-value-object">
<h3>Entity or Value Object?</h3>
<p>An object can not be ultimately categorized into either
being an entity or a value object &#8211; it depends greatly on the use
case. An example illustrates this: For many applications which
need to store an address, this address is
clearly a value object - all properties like street, number, or
city contribute to the identity of the object, and the
address is only used as container for these
properties.</p>
<p>However, if implementing an application for a postal service
which should optimize letter delivery, not only the address, but
also the person delivering to this location should be stored. This
name of the postman does not belong to the identity of the object,
and can change over time &#8211; a clear sign of
Address being an entity in this case. So,
generally it often depends on the use-case whether an object is an
entity or value object.</p>
<p>People new to Domain-Driven Design often tend to overuse
entities, as this is what people coming from a relational database
background are used to.</p>
</div>
<div class="section" id="associations">
<h3>Associations</h3>
<p>Now, after explaining the two types of domain objects, we will
look at a particularly important implementation area: Associations
between objects.</p>
<p>Domain objects have relationships between them. In the domain
language, these relations are expressed often as follows: A
consists of B, C has D, E
processes F, G belongs to
H. These relations are called associations in
the domain model.</p>
<p>In the real world, relationships are often inherently
bidirectional, are only active for a certain time span, and can
contain further information. However, when modelling these
relationships as associations, it is important to simplify them as
much as possible, encoding only the relevant information into the
domain model.</p>
<p>Especially complex to implement are bidirectional many-to-many
relations, as they can be traversed in both directions, and consist
of two lists of objects which have to be kept in sync manually in
most programming languages (such as Java or PHP).</p>
<p>Still, especially in the first iterations of refining the
domain model, many-to-many relations are very common. The following
questions can help to simplify them:</p>
<ul class="simple">
<li>Is the association relevant for the core functionality of
the application?
If it is only used in rare use cases and there is another
way to receive the needed information, it is often better to
drop the association altogether.</li>
<li>For bidirectional associations, can they be converted to
unidirectional associations, because there is a main traversal
direction?
Traversing the other direction is still possible by
querying the underlying persistence system.</li>
<li>Can the association be qualified more restrictively, for
example by adding multiplicities on each side?</li>
</ul>
<p>The more simple the association is, the more directly it can
be mapped to code, and the more clear the intent is.</p>
</div>
<div class="section" id="aggregates">
<h3>Aggregates</h3>
<p>When building a complex domain model, it will contain a lot of
classes, all being on the same hierarchy level. However, often it is
the case that certain objects are parts of a bigger object. For
example, when modeling a <tt class="docutils literal"><span class="pre">Car</span></tt> domain object for a car
repair shop, it might make sense to also model the wheels and the
engine. As they are a part of the car, this understanding should be
also reflected in our model.</p>
<p>Such a part-whole relationship of closely related objects is
called Aggregate. An aggregate contains a root,
the so-called Aggregate Root, which is
responsible for the integrity of the child-objects. Furthermore, the
whole aggregate has only one identity visible to the outside: The
identity of the aggregate root object. Thus, objects outside of the
aggregate are only allowed to persistently reference the aggregate
root, and not one of the inner objects.</p>
<p>For the <tt class="docutils literal"><span class="pre">Car</span></tt> example this means that a
<tt class="docutils literal"><span class="pre">ServiceStation</span></tt> object should not reference the engine
directly, but instead reference the <tt class="docutils literal"><span class="pre">Car</span></tt> through its
external identity. If it still needs access to the
engine, it can retrieve it through the <tt class="docutils literal"><span class="pre">Car</span></tt>
object.</p>
<p>These referencing rules effectively structure the domain model
on a more fine-grained level, which reduces the complexity of the
application.</p>
</div>
</div>
<div class="section" id="life-cycle-of-objects">
<h2>Life cycle of objects</h2>
<p>Objects in the real world have a certain life cycle. A car is
built, then it changes during its lifetime, and in the end it is
scrapped. In Domain-Driven Design, the life cycle of domain objects is
very similar:</p>
<div class="figure" id="fig-lifecycle1">
<a href="_Resources/Persistent/35427e3e767248e8b6db9aef767d14aaf028f641/ddd-lifecycle1.png" data-lightbox="image-534852a96f05a"><img alt="Simplified life cycle of objects" class="screenshot-detail" src="_Resources/Persistent/7738983355bd72b5ca57fd0b6d32b10311b0382a/ddd-lifecycle1.png" style="width: 710px" /></a>
<p class="caption">Simplified life cycle of objects</p>
</div>
<p>Because of performance reasons, it is not feasible to keep all
objects in memory forever. Some kind of persistent storage, like a
database, is needed. Objects which are not needed at the current point
in time should be persistently stored, and only transformed into
objects when needed. Thus, we need to expand the <tt class="docutils literal"><span class="pre">active</span></tt>
state from <a class="reference internal" href="#fig-lifecycle1">Simplified life cycle of objects</a> to contain some more
substates. These are shown below:</p>
<div class="figure">
<a href="_Resources/Persistent/9557bc674b4cdb2cc4dd563ee6748fd613f1df36/ddd-lifecycle2.png" data-lightbox="image-534852a971145"><img alt="The real life cycle of objects" class="screenshot-detail" src="_Resources/Persistent/8a13ed730cb61def7fe11f621d9b450c78d277b2/ddd-lifecycle2.png" style="width: 710px" /></a>
<p class="caption">The real life cycle of objects</p>
</div>
<p>If an object is newly created, it is
transient, so it is being deleted from memory at
the end of the current request. If an object is needed permanently
across requests, it needs to be transformed to a <em>persistent
object</em>. This is the responsibility of
Repositories, which allow to persistently store
and retrieve domain objects.</p>
<p>So, if an object is added to a repository,
this repository becomes responsible for saving the object.
Furthermore, it is also responsible for persisting further changes to
the object throughout its lifetime, automatically updating the
database as needed.</p>
<p>For retrieving objects, repositories provide a query language.
The repository automatically handles the database retrieval, and makes
sure that each entity is only once in memory.</p>
<p>Despite the object being created and retrieved multiple times
during its lifecycle, it logically continues to exist, even when it is
stored in the database. It is only because of performance and safety
reasons that is is not stored in main memory, but in a database. Thus,
Domain-Driven Design distinguishes creation of an
object from reconstitution from database: In the
first case, the constructor is called, in the second case the
constructor is not called as the object is only converted from another
representation form.</p>
<p>In order to remove a persistent object, it needs to be removed
from the repository responsible for it, and then at the end of the
request, the object is transparently removed from the database.</p>
<p>For each aggregate, there is exactly one
repository responsible which can be used to fetch the
aggregate root object.</p>
</div>
<div class="section" id="how-typo3-flow-enables-domain-driven-design">
<h2>How TYPO3 Flow enables Domain-Driven Design</h2>
<p>TYPO3 Flow is a web development framework written in PHP, with
Domain-Driven Design as its core principle. We will now show in what
areas TYPO3 Flow supports Domain-Driven Design.</p>
<p>First, the developer can directly focus on creating the domain
model, using unit testing to implement the use-cases needed. While he
is creating the domain model, he can use plain PHP functionality,
without caring about any particular framework. The PHP domain model he
creates just consists of plain PHP objects, with no base class or
other magic functionality involved. Thus, he can fully concentrate on
domain modelling, without thinking about infrastructure yet.</p>
<p>This is a core principle of TYPO3 Flow: All parts of it strive for
maximum focus and cleanness of the domain model, keeping the developer
focused on the correct implementation of it.</p>
<p>Furthermore, the developer can use source code annotations to
attach metadata to classes, methods or properties. This functionality
can be used to mark objects as entity or value object, and to add
validation rules to properties. In the domain object below,
a sample of such an annotated class is given. As PHP does not have a
language construct for annotations, this is emulated by TYPO3 Flow by
parsing the source code comments.</p>
<p>In order to mark a domain object as <em>aggregate
root</em>, only a repository has to be created for it, based on
a certain naming convention. Repositories are the easiest way to make domain
objects persistent, and TYPO3 Flow provides a base class containing generic
<tt class="docutils literal"><span class="pre">findBy*</span></tt> methods. Furthermore, it supports a
domain-specific language for building queries which can be used for
more complex queries, as shown in below in the <tt class="docutils literal"><span class="pre">AccountRepository</span></tt>.</p>
<p>Now, this is all the developer needs to do in order to
persistently store domain objects. The database tables are created
automatically, and all objects get a UUID assigned (as we did not
specify an identity property).</p>
<p>A simple domain object being marked as entity, and validation:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\Entity</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Account</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var string</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$firstName</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @var string</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$lastName</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @var string</span>
<span class="sd">         * @Flow\Validate(type=&quot;EmailAddress&quot;)</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$email</span><span class="p">;</span>

        <span class="o">...</span> <span class="nx">getters</span> <span class="k">and</span> <span class="nx">setters</span> <span class="k">as</span> <span class="nx">well</span> <span class="k">as</span> <span class="nx">other</span> <span class="nx">functions</span> <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>A simple repository:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">AccountRepository</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Persistence\Repository</span> <span class="p">{</span>

                <span class="c1">// by extending from the base repository, there is automatically a</span>
                <span class="c1">// findBy* method available for every property, i.e. findByFirstName(&quot;Sebastian&quot;)</span>
                <span class="c1">// will return all accounts with the first name &quot;Sebastian&quot;.</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">findByName</span><span class="p">(</span><span class="nv">$firstName</span><span class="p">,</span> <span class="nv">$lastName</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createQuery</span><span class="p">();</span>
                <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">matching</span><span class="p">(</span>
                        <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">logicalAnd</span><span class="p">(</span>
                                <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">equals</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">,</span> <span class="nv">$firstName</span><span class="p">),</span>
                                <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">equals</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">,</span> <span class="nv">$lastName</span><span class="p">)</span>
                        <span class="p">)</span>
                <span class="p">);</span>
                <span class="k">return</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>From the infrastructure perspective, TYPO3 Flow is structured as MVC
framework, with the model being the Domain-Driven Design techniques.
However, also in the controller and the view layer, the system has a
strong support for domain objects: It can transparently convert
objects to simple types, which can then be sent to the client&#8217;s
browser. It also works the other way around: Simple types will be
converted to objects whenever possible, so the developer can deal with
objects in an end-to-end fashion.</p>
<p>Furthermore, TYPO3 Flow has an Aspect-Oriented Programming framework
at its core, which makes it easy to separate cross-cutting concerns.
There is a security framework in place (built upon AOP) where the
developer can declaratively define access rules for his domain
objects, and these are enforced automatically, without any checks
needed in the controller or the model.</p>
<p>There are a lot more features to show, like rapid prototyping
support, dependency injection, a signal-slots system and a
custom-built template engine, but all these should only aid the
developer in focusing on the problem domain and writing decoupled and
extensible code.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="07dfd423-8b10-bf65-94e7-da37e2035d7d" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
     </node>
     <node identifier="3274c906-1fcb-5e4e-f278-2b3f4ef24681" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="partii" locale="">
      <properties>
       <title>Part II: Getting Started</title>
      </properties>
      <node identifier="04940268-c4f8-a8ba-fc7a-495fb42e0b1a" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="b8282fd9-8435-72d6-d3d7-c4c2020b92d5" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="part-ii-getting-started">
<h1>Part II: Getting Started</h1>
<p>This tutorial gets you started with TYPO3 Flow. The most important concepts such as
the MVC framework, object management, persistence and templating are explained
on the basis of a sample application.</p>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/introduction.html">Introduction</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/requirements.html">Requirements</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/configuration.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/modeling.html">Modeling</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/kickstart.html">Kickstart</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/modelandrepository.html">Model and Repository</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/controller.html">Controller</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/view.html">View</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/validation.html">Validation</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/routing.html">Routing</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partii/summary.html">Summary</a></li>
</ul>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="5d3a78f6-1959-d9fc-8d9d-a760b4ab2f8e" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      <node identifier="af5f353c-c039-d907-21fd-b7490d02aa80" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="introduction" locale="">
       <properties>
        <title>Introduction</title>
       </properties>
       <node identifier="72f8648a-73e5-dc1f-17a5-5a0e4a33257e" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="06770c51-7c24-18bd-558a-09d875c9d1a3" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="introduction">
<h1>Introduction</h1>
<div class="section" id="what-s-typo3-flow">
<h2>What&#8217;s TYPO3 Flow</h2>
<p>TYPO3 Flow is a PHP-based application framework. It is especially well-suited for
enterprise-grade applications and explicitly supports Domain-Driven Design, a
powerful software design philosophy. Convention over configuration, Test-Driven
Development, Continuous Integration and an easy-to-read source code are other
important principles we follow for the development of TYPO3 Flow. Needless to say,
TYPO3 Flow provides you with a full-stack MVC framework for building
state-of-the-art web applications. More exciting though are the first class
Dependency Injection support and the Aspect-Oriented Programming capabilities
which can be used without a single line of configuration.</p>
</div>
<div class="section" id="what-s-in-this-tutorial">
<h2>What&#8217;s in this tutorial?</h2>
<p>This tutorial explains all the steps to get you started with your very own
first TYPO3 Flow project.</p>
<p>Please bring your own computer, a reasonable knowledge of PHP and HTML and at
least some initial experience with object-oriented programming. In return
you&#8217;ll surely get some new insights into modern programming paradigms and how
to produce clean code in no time.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If you&#8217;re stuck at some point or stumble over some weirdnesses during the
tutorial, please let us know! We appreciate any feedback in our mailing
lists, as a ticket in our issue tracker or via private email. <a class="footnote-reference" href="#id2" id="id1">[1]</a></p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">This tutorial goes best with a Caffè Latte or, if it&#8217;s afternoon or late night
already, with a few shots of Espresso ...</p>
</div>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>I&#8217;ll read any feedback you send me to <a class="reference external" href="flow/references/the-definitive-guide/partii/mailto:robert&.html#37;&#52;&#48;typo3&#46;org">robert<span>&#64;</span>typo3<span>&#46;</span>org</a> but I don&#8217;t always manage to answer quickly.</td></tr>
</tbody>
</table>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="96a35363-c168-9c05-d183-06c1fccf25e2" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="d9093dbd-b6cb-4672-77ae-6e39d0dd165e" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="requirements" locale="">
       <properties>
        <title>Requirements</title>
       </properties>
       <node identifier="620a0f8a-ed96-59a2-d923-851ea4160cc9" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="cb08caac-3f0e-3423-760d-b14f5402309c" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="requirements">
<h1>Requirements</h1>
<p>TYPO3 Flow is being developed and tested on multiple platforms and pretty easy to set
up. Nevertheless we recommend that you go through the following list before installing
TYPO3 Flow, because a server with exotic php.ini settings or wrong file permissions can
easily spoil your day.</p>
<div class="section" id="server-environment">
<h2>Server Environment</h2>
<p>Not surprisingly, you&#8217;ll need a web server for running your TYPO3 Flow-based web
application. We recommend Apache (though IIS and others work too – we just
haven&#8217;t really tested them). Please make sure that the
<a class="reference external" href="http://httpd.apache.org/docs/current/mod/mod_rewrite.html">mod_rewrite</a> module is
enabled.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">To enable TYPO3 Flow to create symlinks on Windows Server 2008 and higher you need
to do some extra configuration. In IIS you need to configure <cite>Authentication</cite> for
your site configuration to use a specific user in the <cite>Anonymous Authentication</cite>
setting. The configured user should also be allowed to create symlinks using the
local security policy <cite>Local Policies &gt; User Rights Assignments &gt; Create symbolic links</cite></p>
</div>
<p>TYPO3 Flow&#8217;s persistence mechanism requires a <a class="reference external" href="http://www.doctrine-project.org/projects/dbal.html">database supported by Doctrine DBAL</a>.</p>
</div>
<div class="section" id="php">
<h2>PHP</h2>
<p>TYPO3 Flow was one of the first PHP projects taking advantage of namespaces and
other features introduced in PHP version 5.3. So, make sure you have PHP 5.3.2 or later
available on your web server. Make sure your PHP CLI binary is the same version!</p>
<p>The default settings and extensions of the PHP distribution should work fine
with TYPO3 Flow but it doesn&#8217;t hurt checking if the PHP modules <tt class="docutils literal"><span class="pre">mbstring</span></tt>, <tt class="docutils literal"><span class="pre">tokenizer</span></tt>
and <tt class="docutils literal"><span class="pre">pdo_mysql</span></tt> are enabled, especially if you compiled PHP yourself.
You should (not only because of TYPO3 Flow) turn off magic quotes in your php.ini
(<tt class="docutils literal"><span class="pre">magic_quotes_gpc</span> <span class="pre">=</span> <span class="pre">off</span></tt>).</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Make sure the PHP functions <tt class="docutils literal"><span class="pre">system()</span></tt>, <tt class="docutils literal"><span class="pre">shell_exec()</span></tt>,
<tt class="docutils literal"><span class="pre">escapeshellcmd()</span></tt> and <tt class="docutils literal"><span class="pre">escapeshellarg()</span></tt> are not disabled in you PHP
installation. They are required for the system to run.</p>
</div>
<p>The development context might need more than the default amount of memory.
At least during development you should raise the memory limit to about 250 MB
in your php.ini file.</p>
<p>In case you get a fatal error message saying something like <tt class="docutils literal"><span class="pre">Maximum</span> <span class="pre">function</span> <span class="pre">nesting</span>
<span class="pre">level</span> <span class="pre">of</span> <span class="pre">'100'</span> <span class="pre">reached,</span> <span class="pre">aborting!</span></tt>, check your php.ini file for settings regarding
Xdebug and modify/add a line <tt class="docutils literal"><span class="pre">xdebug.max_nesting_level</span> <span class="pre">=</span> <span class="pre">500</span></tt> (suggested value).</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="9d61da2a-08f2-88d9-051b-9b237ca84557" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="107d8ff2-8bac-1d17-8720-94f6cda47205" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="installation" locale="">
       <properties>
        <title>Installation</title>
       </properties>
       <node identifier="69f4dcc2-42d5-a659-fc70-c177b6eab0e4" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="d4f7bb2b-9721-804d-10a3-7d64c3943c80" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="installation">
<h1>Installation</h1>
<div class="section" id="typo3-flow-download">
<h2>TYPO3 Flow Download</h2>
<p>Flow uses <a class="reference external" href="http://getcomposer.org">Composer</a> for dependency management, which is a separate command line tool.
Install it by following the <a class="reference external" href="http://getcomposer.org/download/">installation instructions</a>
which boil down to this in the simplest case:</p>
<div class="highlight-none"><div class="highlight"><pre>curl -s https://getcomposer.org/installer | php
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Feel free to install the composer command to a global location, by moving
the phar archive to e.g. /usr/local/bin/composer and making it executable.
The following documentation assumes <tt class="docutils literal"><span class="pre">composer</span></tt> is installed globally.</p>
</div>
<p>Then use <a class="reference external" href="http://getcomposer.org">Composer</a> in a directory which will be accessible by your web server to download
and install all packages of the TYPO3 Flow Base Distribution. The following command will
clone the 2.0.0 version, include development dependencies and keep git metadata for future use:</p>
<div class="highlight-none"><div class="highlight"><pre>composer create-project --dev --keep-vcs typo3/flow-base-distribution tutorial 2.0.0
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Throughout this tutorial we assume that you installed the TYPO3 Flow distribution in
/var/apache2/htdocs/tutorial and that /var/apache2/htdocs is the document root
of your web server. On a Windows machine you might use c:\xampp\htdocs instead.</p>
</div>
<p>To update all dependencies, run this from the top-level folder of the distribution:</p>
<div class="highlight-none"><div class="highlight"><pre>composer update
</pre></div>
</div>
</div>
<div class="section" id="directory-structure">
<h2>Directory Structure</h2>
<p>Let&#8217;s take a look at the directory structure of a TYPO3 Flow application:</p>
<table border="1" class="docutils">
<colgroup>
<col width="18%" />
<col width="82%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Directory</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>Configuration/</td>
<td>Application specific configuration, grouped by contexts</td>
</tr>
<tr class="row-odd"><td>Data/</td>
<td>Persistent and temporary data, including caches, logs, resources and the database</td>
</tr>
<tr class="row-even"><td>Packages/</td>
<td>Contains sub directories which in turn contain package directories</td>
</tr>
<tr class="row-odd"><td>Packages/Framework/</td>
<td>Packages which are part of the official TYPO3 Flow distribution</td>
</tr>
<tr class="row-even"><td>Packages/Application/</td>
<td>Application specific packages</td>
</tr>
<tr class="row-odd"><td>Packages/Libraries/</td>
<td>3rd party libraries</td>
</tr>
<tr class="row-even"><td>Web/</td>
<td>Public web root</td>
</tr>
</tbody>
</table>
<p>A TYPO3 Flow application usually consists of the above directories. As you see, most
of them contain data which is specific to your application, therefore upgrading
the TYPO3 Flow distribution is a matter of updating Packages/Framework/  and
Packages/Libraries/ when a new release is available.</p>
<p>TYPO3 Flow is a package based system which means that all code, documentation and
other resources are bundled in packages. Each package has its own directory
with a defined sub structure. Your own PHP code and resources will usually end
up in a package residing below Packages/Application/.</p>
</div>
<div class="section" id="file-permissions">
<h2>File Permissions</h2>
<p>Most of the directories and files must be readable and writable for the user
you&#8217;re running TYPO3 Flow with. This user will usually be the same one running your
web server (<tt class="docutils literal"><span class="pre">httpd</span></tt>, <tt class="docutils literal"><span class="pre">www</span></tt>, <tt class="docutils literal"><span class="pre">_www</span></tt> or <tt class="docutils literal"><span class="pre">www-data</span></tt> on most Unix based systems). However it
can and usually will happen that TYPO3 Flow is launched from the command line by a
different user. Therefore it is important that both, the web server user and
the command line user are members of a common group and the file permissions
are set accordingly.</p>
<p>We recommend setting ownership of directories and files to the web server&#8217;s
group. All users who also need to launch TYPO3 Flow must also be added this group.
But don&#8217;t worry, this is simply done by changing to the TYPO3 Flow base directory
and calling the following command (this command must be called as super user):</p>
<div class="highlight-none"><div class="highlight"><pre>sudo ./flow core:setfilepermissions john www-data www-data
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Setting file permissions is not necessary and not possible on Windows machines.
For Apache to be able to create symlinks, you need to use Windows Vista (or
newer) and Apache needs to be started with Administrator privileges.</p>
</div>
<p>Now that the file permissions are set, all users who plan using TYPO3 Flow from the
command line need to join the web server&#8217;s group. On a Linux machine this can
be done by typing:</p>
<div class="highlight-none"><div class="highlight"><pre>sudo usermod -a -G _www john
</pre></div>
</div>
<p>On a Mac you can add a user to the web group with the following command:</p>
<div class="highlight-none"><div class="highlight"><pre>sudo dscl . -append /Groups/_www GroupMembership johndoe
</pre></div>
</div>
<p>You will have to exit your shell / terminal window and open it again for the
new group membership to take effect.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">In this example the web user was <tt class="docutils literal"><span class="pre">_www</span></tt> and the web group
is called <tt class="docutils literal"><span class="pre">_www</span></tt> as well (that&#8217;s the case on a Mac using
<a class="reference external" href="http://www.macports.org/">MacPorts</a> ). On your system the user or group
might be <tt class="docutils literal"><span class="pre">www-data</span></tt>, <tt class="docutils literal"><span class="pre">httpd</span></tt> or the like - make sure to find out and
specify the correct user and group for your environment.</p>
</div>
</div>
<div class="section" id="web-server-configuration">
<h2>Web Server Configuration</h2>
<p>As you have seen previously, TYPO3 Flow uses a directory called Web as the public
web root. We highly recommend that you create a virtual host which points to
this directory and thereby assure that all other directories are not accessible
from the web. For testing purposes on your local machine it is okay (but not
very convenient) to do without a virtual host, but don&#8217;t try that on a public
server!</p>
<div class="section" id="setting-up-a-virtual-host">
<h3>Setting Up a Virtual Host</h3>
<p>Assuming that you chose Apache 2 as your web server, simply create a new virtual
host by adding the following directions to your Apache configuration
(<tt class="docutils literal"><span class="pre">conf/extra/httpd-vhosts.conf</span></tt> on many systems; make sure it is actually
loaded with <tt class="docutils literal"><span class="pre">Include</span></tt> in <tt class="docutils literal"><span class="pre">httpd.conf</span></tt>):</p>
<p>httpd.conf:</p>
<div class="highlight-none"><div class="highlight"><pre>&lt;VirtualHost *:80&gt;
        DocumentRoot /var/apache2/htdocs/tutorial/Web/
        ServerName dev.tutorial.local
&lt;/VirtualHost&gt;
</pre></div>
</div>
<p>This virtual host will later be accessible via the URL <a class="reference external" href="http://dev.tutorial.local">http://dev.tutorial.local</a>.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">TYPO3 Flow runs per default in the <tt class="docutils literal"><span class="pre">Development</span></tt> context. That&#8217;s why the ServerName
in this example is  <em>dev.*tutorial.local. Later you will add another virtual
host for the ``Production`` context. The concept of contexts is explained in the
next section *Configuration</em>.</p>
</div>
<p>Because TYPO3 Flow provides an <tt class="docutils literal"><span class="pre">.htaccess</span></tt> file with <tt class="docutils literal"><span class="pre">mod_rewrite</span></tt> rules in it,
you need to make sure that the directory grants the neccessary rights:</p>
<p>httpd.conf:</p>
<div class="highlight-none"><div class="highlight"><pre>&lt;Directory /var/apache2/htdocs/tutorial/&gt;
        AllowOverride FileInfo Options=MultiViews
&lt;/Directory&gt;
</pre></div>
</div>
<p>The way TYPO3 Flow addresses resources on the web makes it incompatible with the <tt class="docutils literal"><span class="pre">MultiViews</span></tt>
feature of Apache. This needs to be turned off, the default <tt class="docutils literal"><span class="pre">.htaccess</span></tt> file distributed
with TYPO3 Flow contains this code already</p>
<div class="highlight-none"><div class="highlight"><pre>&lt;IfModule mod_negotiation.c&gt;

        # prevents Apache&#39;s automatic file negotiation, it breaks resource URLs
        Options -MultiViews

&lt;/IfModule&gt;
</pre></div>
</div>
</div>
<div class="section" id="configure-a-context">
<h3>Configure a Context</h3>
<p>As you&#8217;ll learn soon, TYPO3 Flow can be launched in different <strong>contexts</strong>, the most
popular being <tt class="docutils literal"><span class="pre">Production</span></tt>, <tt class="docutils literal"><span class="pre">Development</span></tt> and <tt class="docutils literal"><span class="pre">Testing</span></tt>. Although there
are various ways to choose the current context, the most convenient is to setup
a dedicated virtual host defining an environment variable. Just add the
following virtual host to your Apache configuration:</p>
<p>httpd.conf:</p>
<div class="highlight-none"><div class="highlight"><pre>&lt;VirtualHost *:80&gt;
        DocumentRoot /var/apache2/htdocs/tutorial/Web/
        ServerName tutorial.local
        SetEnv FLOW_CONTEXT Production
&lt;/VirtualHost&gt;
</pre></div>
</div>
<p>You&#8217;ll be able to access the same application running in <tt class="docutils literal"><span class="pre">Production</span></tt>
context by accessing the URL <a class="reference external" href="http://tutorial.local">http://tutorial.local</a>. What&#8217;s left is telling
your operating system that the invented domain names can be found on your local
machine. Add the following line to your /etc/hosts file
(C:windowssystem32driversetchosts on Windows):</p>
<p>hosts:</p>
<div class="highlight-none"><div class="highlight"><pre>127.0.0.1 tutorial.local dev.tutorial.local
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If you decided to skip setting up virtual hosts earlier on, you can
enable the <tt class="docutils literal"><span class="pre">Production</span></tt> context by editing the <tt class="docutils literal"><span class="pre">.htaccess</span></tt> file in the
<tt class="docutils literal"><span class="pre">Web</span></tt> directory and remove the comment sign in front of the <tt class="docutils literal"><span class="pre">SetEnv</span></tt>
line:</p>
</div>
<p>.htaccess:</p>
<div class="highlight-none"><div class="highlight"><pre># You can specify a default context by activating this option:
SetEnv FLOW_CONTEXT Production
</pre></div>
</div>
</div>
<div class="section" id="welcome-to-typo3-flow">
<h3>Welcome to TYPO3 Flow</h3>
<p>Restart Apache and test your new configuration by accessing
<a class="reference external" href="http://dev.tutorial.local">http://dev.tutorial.local</a> in a web browser. You should be greeted by TYPO3 Flow&#8217;s
welcome screen:</p>
<div class="figure">
<a href="_Resources/Persistent/171d28a305880faec5f0878b840b571e874bea16/Welcome.png" data-lightbox="image-534852ab354f3"><img alt="The TYPO3 Flow Welcome screen" class="screenshot-fullsize" src="_Resources/Persistent/deb57001465c82cf03a2601e4521531ee9e5139a/Welcome.png" style="width: 710px" /></a>
<p class="caption">The TYPO3 Flow Welcome screen</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If you get in trouble during the installation check out the <a class="reference external" href="http://wiki.typo3.org/Flow_Installation_Hints">installation hints</a> on the TYPO3 wiki. On
Windows you will most likely have to check the section Running on Windows OS&#8217;s
of that page.</p>
</div>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="54c98757-9e41-3bbd-93b6-4c3487561879" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="d3998113-795e-6594-6c04-2d877c817c3a" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="configuration" locale="">
       <properties>
        <title>Configuration</title>
       </properties>
       <node identifier="50a2aef2-5756-df0f-7c45-4cc5c130fc21" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="8684f1df-b93a-9f61-071f-d5eb5ec1bcf1" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="configuration">
<h1>Configuration</h1>
<div class="section" id="contexts">
<h2>Contexts</h2>
<p>Once you start developing an application you&#8217;ll want to launch it in different
contexts: in a production context the configuration must be optimized for speed
and security while in a development context debugging capabilities and
convenience are more important. TYPO3 Flow supports the notion of contexts which
allow for bundling configuration for different purposes. Each TYPO3 Flow request
acts in exactly one context. However, it is possible to use the same
installation on the same server in distinct contexts by accessing it through a
different host name, port or passing special arguments.</p>
<div class="admonition-why-do-i-want-contexts admonition">
<p class="first admonition-title">Why do I want contexts?</p>
<p>Imagine your application is running on a live server and your customer
reports a bug. No matter how hard you try, you can&#8217;t reproduce the issue on
your local development server. Now contexts allow you to enter the live
application on the production server in a development context without
anyone noticing – both contexts run in parallel. This effectively allows
you to debug an application in its realistic environment (although you
still should do the actual development on a dedicated machine ...).</p>
<p class="last">An additional use for context is the simplified staging of your application.
You&#8217;ll want almost the same configuration on your production and your
development server - but not exactly the same. The live environment will
surely access a different database or might require other authentication
methods. What you do in this case is sharing most of the configuration and
define the difference in dedicated contexts.</p>
</div>
<p>TYPO3 Flow provides configuration for the Production and Development context.
In the standard distribution a reasonable configuration is defined for
each context:</p>
<ul class="simple">
<li>In the <strong>Production context</strong> all caches are enabled, logging is reduced to
a minimum and only generic, friendly error messages are displayed to the
user (more detailed descriptions end up in the log).</li>
<li>In <strong>Development context</strong> caches are active but a smart monitoring service
flushes caches automatically if PHP code or configuration has been altered.
Error messages and exceptions are displayed verbosely and additional aids
are given for effective development.</li>
</ul>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If TYPO3 Flow throws some strange errors at you after you made code changes,
make sure to either manually flush the cache or run the application in
<tt class="docutils literal"><span class="pre">Development</span></tt> context - because caches are not flushed automatically
in <tt class="docutils literal"><span class="pre">Production</span></tt> context.</p>
</div>
<p>The configuration for each context is located in directories of the same name:</p>
<p><strong>Context Configurations</strong></p>
<table border="1" class="docutils">
<colgroup>
<col width="34%" />
<col width="66%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Directory</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>Configuration/</td>
<td>Global configuration, for all contexts</td>
</tr>
<tr class="row-odd"><td>Configuration/Development/</td>
<td>Configuration for the <tt class="docutils literal"><span class="pre">Development</span></tt> context</td>
</tr>
<tr class="row-even"><td>Configuration/Production/</td>
<td>Configuration for the <tt class="docutils literal"><span class="pre">Production</span></tt> context</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="configuring-typo3-flow">
<h2>Configuring TYPO3 Flow</h2>
<p>One thing you certainly need to adjust is the database configuration. Aside from that
TYPO3 Flow should work fine with the default configuration delivered with the distribution.
However, there are many switches you can adjust: specify another location for logging,
select a faster cache backend and much more.</p>
<p>The easiest way to find out which options are available is taking a look at the default
configuration of the TYPO3 Flow package and other packages. The respective files are located in
<tt class="docutils literal"><span class="pre">Packages/Framework/&lt;packageKey&gt;/Configuration/</span></tt>. Don&#8217;t modify these files directly but
rather copy the setting you&#8217;d like to change and insert it into a file within the global
or context configuration directories.</p>
<p>TYPO3 Flow uses the YAML format <a class="footnote-reference" href="#id2" id="id1">[1]</a> for its configuration files. If you never edited
a YAML file, there are two things you should know at least:</p>
<ul class="simple">
<li>Indentation has a meaning: by different levels of indentation, a structure is
defined.</li>
<li>Spaces, not tabs: you must indent with exactly 2 spaces per level, don&#8217;t use tabs.</li>
</ul>
<p>More detailed information about TYPO3 Flow&#8217;s configuration management can be found
in the <a class="reference external" href="http://flow.typo3.org/documentation/">Reference Manual</a>.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>If you&#8217;re running TYPO3 Flow on a Windows machine, you do have to make some
adjustments to the standard configuration because it will cause problems
with long paths and filenames. By default TYPO3 Flow caches files within the
<tt class="docutils literal"><span class="pre">Data/Temporary/&lt;Context&gt;/Caches/</span></tt> directory
whose absolute path can eventually become too long for Windows.</p>
<p>To avoid errors you should change the cache configuration so it points to a
location with a very short absolute file path, for example <tt class="docutils literal"><span class="pre">C:\\tmp\\</span></tt>.
Do that by adding the following to the file <tt class="docutils literal"><span class="pre">Configuration/Settings.yaml</span></tt>:</p>
<p>Configuration/Settings.yaml:</p>
<div class="last highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">utility</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">temporaryDirectoryBase</span><span class="p-Indicator">:</span> <span class="s">&#39;C\\:tmp\\&#39;</span>
</pre></div>
</div>
</div>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p>Parsing the YAML configuration files takes a bit of time which remarkably
slows down the initialization of TYPO3 Flow. That&#8217;s why all configuration is
cached by default when TYPO3 Flow is running in Production context. Because this
cache cannot be cleared automatically it is important to know that changes
to any configuration file won&#8217;t have any effect until you manually flush
the respective caches.</p>
<p class="last">To avoid any hassle we recommend that you stay in Development context
throughout this tutorial.</p>
</div>
<div class="section" id="database-setup">
<h3>Database Setup</h3>
<p>Before you can store anything, you need to set up a database and tell TYPO3 Flow how
to access it. The credentials and driver options need to be specified in the global
TYPO3 Flow settings.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">You should make it a habit to specify database settings in context-specific
configuration files. This makes sure your functional tests will never accidentally
truncate your production database. The same line of thought makes sense for other
options as well, e.g. mail server settings.</p>
</div>
<p>After you have created an empty database and set up a user with sufficient access
rights, copy the file <tt class="docutils literal"><span class="pre">Configuration/Development/Settings.yaml.example</span></tt> to
<tt class="docutils literal"><span class="pre">Configuration/Development/Settings.yaml</span></tt>. Open and adjust the file to your needs -
for a common MySQL setup, it would look similar to this:</p>
<p>Configuration/Development/Settings.yaml:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">persistence</span><span class="p-Indicator">:</span>
     <span class="l-Scalar-Plain">backendOptions</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">dbname</span><span class="p-Indicator">:</span> <span class="s">&#39;gettingstarted&#39;</span>
      <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="s">&#39;myuser&#39;</span>
      <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&#39;mypassword&#39;</span>
</pre></div>
</div>
<p>For global settings and Production context, the relevant files would be directly
in <tt class="docutils literal"><span class="pre">Configuration</span></tt> respectively <tt class="docutils literal"><span class="pre">Configuration/Production`</span></tt>.`</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Configure your MySQL server to use the <tt class="docutils literal"><span class="pre">utf8_unicode_ci</span></tt> collation by default if possible!</p>
</div>
<p>If you configured everything correctly, the following command will create the initial
table structure needed by TYPO3 Flow:</p>
<div class="highlight-none"><div class="highlight"><pre>$ ./flow doctrine:migrate
Migrating up to 2011xxxxxxxxxx from 0

++ migrating 20110613223837
        -&gt; CREATE TABLE flow_resource_resourcepointer (hash VARCHAR(255) NOT NULL, PRIMARY
        -&gt; CREATE TABLE flow_resource_resource (persistence_object_identifier VARCHAR(40)

...

  ------------------------

++ finished in 4.97
++ 5 migrations executed
++ 28 sql queries
</pre></div>
</div>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td><strong>YAML Ain&#8217;t Markup Language</strong> <a class="reference external" href="http://yaml.org">http://yaml.org</a></td></tr>
</tbody>
</table>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="5cdb5f29-ba8c-531c-5324-da5880b7e08e" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="f5476c2b-1a77-5b06-396c-58ef176d0413" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="modeling" locale="">
       <properties>
        <title>Modeling</title>
       </properties>
       <node identifier="d72bd999-caf8-1e58-1f8b-567c726ba9de" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="8fa2878b-d6f0-056b-b04e-1a9c061b589d" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="modeling">
<h1>Modeling</h1>
<p>Before we kickstart our first application, let&#8217;s have a quick look in what
TYPO3 Flow differs from other frameworks.</p>
<p>We claim that TYPO3 Flow <strong>lets you concentrate on the essential</strong> and in fact this
is one major design goal we followed in the making of TYPO3 Flow. There are many
factors which can distract developers from their principal task to create an
application solving real-world problems. Most of them are infrastructure-
related and reappear in almost every project: security, database, validation,
persistence, logging, visualization and much more. TYPO3 Flow preaches legible code,
well-proven design patterns, true object orientation and provides first class
support for Domain-Driven Design. And it takes care of most of the cross-cutting
concerns, separating them from the business logic of the application. <a class="footnote-reference" href="#id7" id="id1">[1]</a> <a class="footnote-reference" href="#id8" id="id2">[2]</a></p>
<div class="section" id="domain-driven-design">
<h2>Domain-Driven Design</h2>
<p>Every software aims to solve problems within its subject area – its domain –
for its users. All the product&#8217;s other functions are just padding which serves
to further this aim. If the domain of your software is the booking of hotel
rooms, the reservation and cancellation of rooms are two of your main tasks.
However, the presentation of booking forms or the logging of security-relevant
occurrences do not belong to the domain ‘hotel room bookings’ and primarily
serve to support the main task.</p>
<p>Most of the time it is easy to check whether a function belongs to a domain:
imagine that you are booking a room from a receptionist. He is capable of
accomplishing the task and will readily meet your request. Now imagine how this
employee would react if you asked him to render a booking form or to cache
requests. These tasks fall outside his domain. Only in the rarest cases this is
the domain of an application ‘software’. Rather most programs offer solutions
for real life processes.</p>
<p>To master the complexity of your application it is therefore essential to
neatly separate areas which concern the domain from the code and which merely
serves the infrastructure. For this you will need a layered architecture – an
approach that has worked for decades. Even if you have not previously divided
code into layers consciously, the mantra ‘model view controller’ should fall
easily from your lips <a class="footnote-reference" href="#id9" id="id3">[3]</a> . For the model, which is part of this MVC pattern,
is at best a model of part of a domain. As a <strong>domain model</strong> it is separated
from the other applications and resides in its own layer, the <strong>domain layer</strong>.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Of course there is much more to say about Domain-Driven Design which
doesn&#8217;t belong in this tutorial. A good starter is the <a class="reference internal" href="flow/references/the-definitive-guide/partii/../parti/conceptsofmodernprogramming.html#ch-concepts-of-modern-programming">section about DDD</a>
in the TYPO3 Flow documentation.</p>
</div>
</div>
<div class="section" id="domain-model">
<h2>Domain Model</h2>
<p>Our first TYPO3 Flow application will be a blog system. Not because programming
blogs is particularly fancy but because you will
a) feel instantly at home with the domain and
b) it is comparable with tutorials you might know from other frameworks.</p>
<p>So, what does our model look like? Our blog has a number of posts, written by a
certain author, with a title, publishing date and the actual post content. Each
post can be tagged with an arbitrary number of tags. Finally, visitors of the
blog may comment blog posts.</p>
<p>A first sketch shows which domain models (classes) we will need:</p>
<div class="figure">
<img alt="A simple model" class="screenshot-detail" src="_Resources/Persistent/327aada18e3d61c17d9cfdc266323c0e32960d5a/DomainModel-1.png" style="width: 317px" />
<p class="caption">A simple model</p>
</div>
<p>Let&#8217;s add some properties to each of the models:</p>
<div class="figure">
<img alt="Domain Mode with properties" class="screenshot-detail" src="_Resources/Persistent/2504672baa607c6e65c492bf890df55a6b790806/DomainModel-2.png" style="width: 400px" />
<p class="caption">Domain Model with properties</p>
</div>
<p>To be honest, the above model is not the best example of a rich Domain Model,
compared to Active Records which usually contain not only properties but also
methods. <a class="footnote-reference" href="#id10" id="id4">[4]</a> For simplicity we also defined properties like <tt class="docutils literal"><span class="pre">author</span></tt> as simple
strings – you&#8217;d rather plan in a dedicated <tt class="docutils literal"><span class="pre">Author</span></tt> object in a real-world model.</p>
</div>
<div class="section" id="repositories">
<h2>Repositories</h2>
<p>Now that you have the models (conceptually) in place, you need to think about
how you will access them. One thing you&#8217;ll do is implementing a getter and
setter method for each property you want to be accessible from the outside.
You&#8217;ll end up with a lot of methods like <tt class="docutils literal"><span class="pre">getTitle</span></tt>, <tt class="docutils literal"><span class="pre">setAuthor</span></tt>,
<tt class="docutils literal"><span class="pre">addComment</span></tt> and the like <a class="footnote-reference" href="#id11" id="id5">[5]</a> . Posts (i.e. <tt class="docutils literal"><span class="pre">Post</span></tt> objects) are stored in
a <tt class="docutils literal"><span class="pre">Blog</span></tt> object in an array or better in an
<tt class="docutils literal"><span class="pre">Doctrine/Common/Collections/Collection</span></tt> <a class="footnote-reference" href="#id12" id="id6">[6]</a> instance. For retrieving all posts
from a given Blog all you need to do is calling the <tt class="docutils literal"><span class="pre">getPosts</span></tt> method of the
Blog in question:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$posts</span> <span class="o">=</span> <span class="nv">$blog</span><span class="o">-&gt;</span><span class="na">getPosts</span><span class="p">();</span>
</pre></div>
</div>
<p>Executing <tt class="docutils literal"><span class="pre">getComments</span></tt> on the Post would return all related comments:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$comments</span> <span class="o">=</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">getComments</span><span class="p">();</span>
</pre></div>
</div>
<p>In the same manner <tt class="docutils literal"><span class="pre">getTags</span></tt> returns all tags attached to a given Post. But
how do you retrieve the active Blog object?</p>
<p>All objects which can&#8217;t be found by another object need to be stored in a
repository. In TYPO3 Flow each repository is responsible for exactly one kind of an
object (i.e. one class). Let&#8217;s look at the relation between the <tt class="docutils literal"><span class="pre">BlogRepository</span></tt>
and the <tt class="docutils literal"><span class="pre">Blog</span></tt>:</p>
<div class="figure">
<img alt="Blog Repository and Blog" class="screenshot-detail" src="_Resources/Persistent/584114524344db059bb1d61606832a6a43880584/DomainModel-3.png" style="width: 390px" />
<p class="caption">Blog Repository and Blog</p>
</div>
<p>As you see, the <tt class="docutils literal"><span class="pre">BlogRepository</span></tt> provides methods for adding, removing and
finding blogs. In our example application only one blog at a time is supported
so all we need is a function to find the <strong>active</strong> blog – even though the
repository can contain more than one blog.</p>
<p>Now, what if you want to display a list of the 5 latest posts, no matter what
blog they belong to? One option would be to find all blogs, iterate over their
posts and inspect each <tt class="docutils literal"><span class="pre">date</span></tt> property to create a list of the 5 most recent
posts. Sounds slow? It is.</p>
<p>A much better way to find objects by a given criteria is querying a competent
repository. Therefore, if you want to display a list of the 5 latest posts, you
better create a dedicated <tt class="docutils literal"><span class="pre">PostRepository</span></tt> which provides a specialized
<tt class="docutils literal"><span class="pre">findRecentByBlog</span></tt> method:</p>
<div class="figure">
<img alt="A dedicated Post Repository" class="screenshot-detail" src="_Resources/Persistent/960d8af8bfe7f0d4f35b93c05d94fa591c19cff5/DomainModel-4.png" style="width: 466px" />
<p class="caption">A dedicated Post Repository</p>
</div>
<p>I silently added the <tt class="docutils literal"><span class="pre">findPrevious</span></tt> and <tt class="docutils literal"><span class="pre">findNext</span></tt> methods because you will
later need them for navigating between posts.</p>
</div>
<div class="section" id="aggregates">
<h2>Aggregates</h2>
<p>With the Post Repository you&#8217;re now able to find posts independently from the
Blog. There&#8217;s no strict rule for when a model requires its own repository. If
you want to display comments independently from their posts and blogs, you&#8217;d
surely need a Comment Repository, too. In this sample application you can do
without it and find the comments you need by calling a getter method on
the Post.</p>
<p>All objects which can only be found through a foreign repository, form an
Aggregate. The object having its own repository (in this case <tt class="docutils literal"><span class="pre">Post</span></tt>) becomes
the <strong>Aggregate Root</strong>:</p>
<div class="figure">
<a href="_Resources/Persistent/abb312af612931987696cac95f6b2d382bb7f9d0/DomainModel-5.png" data-lightbox="image-534852ac2718c"><img alt="The Post Aggregate" class="screenshot-detail" src="_Resources/Persistent/e62cd5ac71e6d3a9a9ed728b7577805c3ca67154/DomainModel-5.png" style="width: 710px" /></a>
<p class="caption">The Post Aggregate</p>
</div>
<p>The concept of aggregates simplifies the overall model because all objects of
an aggregate can be seen as a whole: on deleting a post, the framework also
deletes all associated comments and tags because it knows that no direct
references from outside the aggregate boundary may exist.</p>
<p>Something to keep in mind is the opposite behavior the framework applies, when
a repository for an object exists: any changes to it must be registered with that
repository, as any persistence cascading of changes stops at aggregate boundaries.</p>
<p>Enough for the modeling part. You&#8217;ll surely want some more classes later but
first let&#8217;s get our hands dirty and start with the actual implementation!</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id7" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td><a class="reference external" href="http://en.wikipedia.org/wiki/Domain-driven_design">http://en.wikipedia.org/wiki/Domain-driven_design</a></td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id8" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td>Note that we don&#8217;t use these techniques for academic reasons.
Personally I have never attended a lecture about software design – I
just love clean code due to the advantages I discovered in my real-
world projects.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id9" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id3">[3]</a></td><td>If it doesn&#8217;t, we recommend reading our introductory sections about MVC
in the <a class="reference internal" href="flow/references/the-definitive-guide/partii/../partiii/modelviewcontroller.html">TYPO3 Flow reference</a>.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id10" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id4">[4]</a></td><td>see <a class="reference external" href="http://en.wikipedia.org/wiki/Active_record_pattern">http://en.wikipedia.org/wiki/Active_record_pattern</a></td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id11" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id5">[5]</a></td><td>Of course we considered magic getters and setters. But then, how do you
restrict read or write access to single properties?
Furthermore, magic methods are notably slower and you loose the benefit
of your IDE&#8217;s autocompletion feature. Fortunately IDEs like Netbeans or
Zend Studio provide functions to create getters and
setters automatically.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id12" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id6">[6]</a></td><td>see <a class="reference external" href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html#collections">http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html#collections</a></td></tr>
</tbody>
</table>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="6dfc3562-d748-ff6b-5b86-777886f14fc7" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="a0ab8e9c-1d59-430a-35f2-855a590e66db" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="kickstart" locale="">
       <properties>
        <title>Kickstart</title>
       </properties>
       <node identifier="7440070e-61f2-079b-7b53-901daa1c53c9" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="97e38bce-1aa9-4ddb-5b6f-f0f76ad62e46" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="kickstart">
<h1>Kickstart</h1>
<p>TYPO3 Flow makes it easy to start with a new application. The <tt class="docutils literal"><span class="pre">Kickstart</span></tt> package provides
template based scaffolding for generating an initial layout of packages, controllers,
models and views.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">At the time of this writing these functions are only available through TYPO3 Flow&#8217;s command
line interface. This might change in the future as a graphical interface to the
kickstarter is developed.</p>
</div>
<div class="section" id="command-line-tool">
<h2>Command Line Tool</h2>
<p>The script flow resides in the main directory of the TYPO3 Flow distribution.
From a shell you should be able to run the script by entering <tt class="docutils literal"><span class="pre">./flow</span></tt>:</p>
<div class="highlight-none"><div class="highlight"><pre>myhost:tutorial johndoe$ ./flow
TYPO3 Flow 1.2.0 (&quot;Development&quot; context)
usage: ./flow &lt;command identifier&gt;

See &#39;./flow help&#39; for a list of all available commands.
</pre></div>
</div>
<p>To get an overview of all available commands, enter <tt class="docutils literal"><span class="pre">./flow</span> <span class="pre">help</span></tt>:</p>
<div class="highlight-none"><div class="highlight"><pre>myhost:tutorial johndoe$ ./flow help
TYPO3 Flow 1.2.0 (&quot;Development&quot; context)
usage: ./flow &lt;command identifier&gt;

The following commands are currently available:

PACKAGE &quot;TYPO3.FLOW&quot;:
-------------------------------------------------------------------------------
* flow:cache:flush                         Flush all caches
  cache:warmup                             Warm up caches

* flow:core:setfilepermissions             Adjust file permissions for CLI and
                                           web server access
* flow:core:shell                          Run the interactive Shell

  doctrine:validate                        Validate the class/table mappings
  doctrine:create                          Create the database schema
  doctrine:update                          Update the database schema
  doctrine:entitystatus                    Show the current status of entities
                                           and mappings
  doctrine:dql                             Run arbitrary DQL and display
                                           results
  doctrine:migrationstatus                 Show the current migration status
  doctrine:migrate                         Migrate the database schema
  doctrine:migrationexecute                Execute a single migration
  doctrine:migrationversion                Mark/unmark a migration as migrated
  doctrine:migrationgenerate               Generate a new migration

  help                                     Display help for a command

  package:create                           Create a new package
  package:delete                           Delete an existing package
  package:activate                         Activate an available package
  package:deactivate                       Deactivate a package
  package:list                             List available packages
  package:import                           Import a package from a remote
                                           location

  routing:list                             List the known routes

  security:importpublickey                 Import a public key
  security:importprivatekey                Import a private key


PACKAGE &quot;TYPO3.KICKSTART&quot;:
-------------------------------------------------------------------------------
  kickstart:package                        Kickstart a new package
  kickstart:actioncontroller               Kickstart a new action controller
  kickstart:commandcontroller              Kickstart a new command controller
  kickstart:model                          Kickstart a new domain model
  kickstart:repository                     Kickstart a new domain repository

* = compile time command

See &#39;./flow help &lt;commandidentifier&gt;&#39; for more information about a specific command.
</pre></div>
</div>
<p>Depending on your TYPO3 Flow version you&#8217;ll see more or less the above available
commands listed.</p>
</div>
<div class="section" id="kickstart-the-package">
<h2>Kickstart the package</h2>
<p>Let&#8217;s create a new package <strong>Blog</strong> inside the Vendor namespace <strong>TYPO3</strong>:</p>
<div class="highlight-none"><div class="highlight"><pre>myhost:tutorial johndoe$ ./flow kickstart:package TYPO3.Blog
</pre></div>
</div>
<p>The kickstarter will create two files:</p>
<div class="highlight-none"><div class="highlight"><pre>Created .../TYPO3.Blog/Classes/TYPO3/Blog/Controller/StandardController.php
Created .../TYPO3.Blog/Resources/Private/Templates/Standard/Index.html
</pre></div>
</div>
<p>and the directory Packages/Application/TYPO3.Blog/ should now contain the
skeleton of the future <tt class="docutils literal"><span class="pre">Blog</span></tt> package:</p>
<div class="highlight-none"><div class="highlight"><pre>myhost:tutorial johndoe$ cd Packages/Application/
myhost:Application johndoe$ find TYPO3.Blog
TYPO3.Blog
TYPO3.Blog/Classes
TYPO3.Blog/Classes/TYPO3/Blog/Controller
TYPO3.Blog/Classes/TYPO3/Blog/Controller/StandardController.php
TYPO3.Blog/Configuration
TYPO3.Blog/Documentation
TYPO3.Blog/Resources
TYPO3.Blog/Resources/Private
TYPO3.Blog/Resources/Private/Templates
TYPO3.Blog/Resources/Private/Templates/Standard
TYPO3.Blog/Resources/Private/Templates/Standard/Index.html
TYPO3.Blog/Tests
TYPO3.Blog/Tests/Functional
TYPO3.Blog/Tests/Unit
</pre></div>
</div>
<p>Switch to your web browser and check at <a class="reference external" href="http://dev.tutorial.local/typo3.blog">http://dev.tutorial.local/typo3.blog</a> if the
generated controller produces some output:</p>
<div class="figure">
<a href="_Resources/Persistent/cc0cce8970daa90f3a75c1708b78f605c49b5c7e/FreshBlogPackage.png" data-lightbox="image-534852aba2993"><img alt="A freshly created Fluid template" class="screenshot-fullsize" src="_Resources/Persistent/e087e618b1360196509c34448ff9070de0d4699e/FreshBlogPackage.png" style="width: 710px" /></a>
<p class="caption">A freshly created Fluid template</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If you get an error at this point, like a &#8220;404 Not Found&#8221; this could be
caused by outdated cache entries. Because TYPO3 Flow should be running in
<tt class="docutils literal"><span class="pre">Development</span></tt> context at this point, it is supposed to detect changes to
code and resource files, but this seems to sometimes fail... Before you go
crazy looking for an error on your side, <strong>try clearing the cache manually</strong>
by removing the contents of <tt class="docutils literal"><span class="pre">Data/Temporary/</span></tt>.</p>
</div>
</div>
<div class="section" id="kickstart-controllers">
<h2>Kickstart Controllers</h2>
<p>If you look at the drawing of our overall model you&#8217;ll notice that you need controllers
for the most important domain model, being <tt class="docutils literal"><span class="pre">Post</span></tt>. We also need a <tt class="docutils literal"><span class="pre">SetupController</span></tt>
which initially sets up the blog. Create them with the kickstarter as well:</p>
<div class="highlight-none"><div class="highlight"><pre>myhost:tutorial johndoe$ ./flow kickstart:actioncontroller TYPO3.Blog Setup
</pre></div>
</div>
<p>resulting in:</p>
<div class="highlight-none"><div class="highlight"><pre>Created .../TYPO3.Blog/Classes/TYPO3/Blog/Controller/SetupController.php
Created .../TYPO3.Blog/Resources/Private/Templates/Setup/Index.html
</pre></div>
</div>
<p>For the <tt class="docutils literal"><span class="pre">PostController</span></tt> we know that we&#8217;ll need some standard actions, so let&#8217;s
have them created as well:</p>
<div class="highlight-none"><div class="highlight"><pre>myhost:tutorial johndoe$ ./flow kickstart:actioncontroller --generate-actions --generate-related TYPO3.Blog Post
</pre></div>
</div>
<p>resulting in:</p>
<div class="highlight-none"><div class="highlight"><pre>Created .../TYPO3.Blog/Classes/TYPO3/Blog/Domain/Model/Post.php
Created .../TYPO3.Blog/Classes/TYPO3/Blog/Domain/Repository/PostRepository.php
Created .../TYPO3.Blog/Classes/TYPO3/Blog/Controller/PostController.php
Created .../TYPO3.Blog/Resources/Private/Layouts/Default.html
Created .../TYPO3.Blog/Resources/Private/Templates/Post/Index.html
Created .../TYPO3.Blog/Resources/Private/Templates/Post/New.html
Created .../TYPO3.Blog/Resources/Private/Templates/Post/Edit.html
Created .../TYPO3.Blog/Resources/Private/Templates/Post/Show.html
</pre></div>
</div>
<p>These new controllers can now be accessed via</p>
<ul class="simple">
<li><a class="reference external" href="http://dev.tutorial.local/typo3.blog/setup">http://dev.tutorial.local/typo3.blog/setup</a> and</li>
<li><a class="reference external" href="http://dev.tutorial.local/typo3.blog/post">http://dev.tutorial.local/typo3.blog/post</a></li>
</ul>
<p>respectively.</p>
<p>Please delete the file <tt class="docutils literal"><span class="pre">StandardController.php</span></tt> and its corresponding template
directory as you won&#8217;t need them for our sample application <a class="footnote-reference" href="#id2" id="id1">[1]</a>.</p>
</div>
<div class="section" id="kickstart-models-and-repositories">
<h2>Kickstart Models and Repositories</h2>
<p>The kickstarter can also generate models and repositories, as you have seen above
when using the <tt class="docutils literal"><span class="pre">--generate-related</span></tt> option while kickstarting the <tt class="docutils literal"><span class="pre">PostController</span></tt>.
Of course that can also be done specifically with the <tt class="docutils literal"><span class="pre">kickstart:model</span></tt> command.</p>
<p>Before we do this, you should have a look at the next section on models and repositories.</p>
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>If you know you won&#8217;t be using the StandardController, you can create a
completely empty package with the <tt class="docutils literal"><span class="pre">package:create</span></tt> command.</td></tr>
</tbody>
</table>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="79d2ba12-f440-256c-09b9-e807abbc9cce" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="4c5d8e02-dedb-ee2f-8c98-d74eee4cd902" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="modelandrepository" locale="">
       <properties>
        <title>Model and Repository</title>
       </properties>
       <node identifier="5b677c84-27ae-4616-22a3-9699148f31d9" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="10d6bbe5-94cb-f827-6553-6fa036a9b95f" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="model-and-repository">
<h1>Model and Repository</h1>
<p>Usually this would now be the time to write a database schema which contains
table definitions and lays out relations between the different tables. But
TYPO3 Flow doesn&#8217;t deal with tables. You won&#8217;t even access a database manually nor
will you write SQL. The very best is if you completely forget about tables and
databases and think only in terms of objects.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p><strong>Code Examples</strong></p>
<p>The following sections contain a lot of code which we&#8217;ll go through step
by step. To make things a little simpler, the code has been simplified a
little, e.g. by leaving out some non-essential properties and methods.
If you want to follow the example closely or to peek at the final code,
check the CheatSheet folder.</p>
<p>It contains everything explained in this tutorial, and more. To be on the
safe side, do not copy the code explained here into new files, but rather
copy the needed files from there to &#8220;your&#8221; sandbox project.</p>
<p class="last">To see the full-scale code of the Blog as used by some of us, take a look at
the <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Blog.git">Blog package</a> in
our Git repository.</p>
</div>
<p>Domain models are really the heart of your application and therefore it is
vital that this layer stays clean and legible. In a TYPO3 Flow application a model
is just a plain old PHP object <a class="footnote-reference" href="#id4" id="id1">[1]</a>. There&#8217;s no need to write a schema
definition, subclass a special base model or implement a required interface.
All TYPO3 Flow requires from you as a specification for a model is a proper
documented PHP class containing properties.</p>
<p>All your domain models need a place to live. The directory structure and filenames follow
the conventions of our <a class="reference external" href="http://flow.typo3.org/documentation/codingguidelines">Coding Guidelines</a> which basically means that the
directories reflect the classes&#8217; namespace while the filename is identical to the class
name. The base directory for the domain models is <tt class="docutils literal"><span class="pre">Classes/&lt;VendorName&gt;/&lt;PackageName&gt;/Domain/Model/</span></tt>.</p>
<div class="section" id="blog-model">
<h2>Blog Model</h2>
<p>The code for your <tt class="docutils literal"><span class="pre">Blog</span></tt> model can be kickstarted like this:</p>
<div class="highlight-none"><div class="highlight"><pre>myhost:tutorial johndoe$ ./flow kickstart:model TYPO3.Blog Blog title:string \
description:string &#39;posts:\Doctrine\Common\Collections\Collection&#39;
</pre></div>
</div>
<p>That command will output the created file and a hint:</p>
<div class="highlight-none"><div class="highlight"><pre>Created .../TYPO3.Blog/Classes/TYPO3/Blog/Domain/Model/Blog.php
As a new model was generated, don&#39;t forget to update the database schema with the respective doctrine:* commands.
</pre></div>
</div>
<p>Open the generated file and complete it to look like the following:</p>
<p>Classes/TYPO3/Blog/Domain/Model/Blog.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">...</span>

<span class="k">class</span> <span class="nc">Blog</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * The blog&#39;s title.</span>
<span class="sd">         *</span>
<span class="sd">         * @var string</span>
<span class="sd">         * @Flow\Validate(type=&quot;Text&quot;)</span>
<span class="sd">         * @Flow\Validate(type=&quot;StringLength&quot;, options={ &quot;minimum&quot;=1, &quot;maximum&quot;=80 })</span>
<span class="sd">         * @ORM\Column(length=80)</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$title</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * A short description of the blog</span>
<span class="sd">         *</span>
<span class="sd">         * @var string</span>
<span class="sd">         * @Flow\Validate(type=&quot;Text&quot;)</span>
<span class="sd">         * @Flow\Validate(type=&quot;StringLength&quot;, options={ &quot;maximum&quot;=150 })</span>
<span class="sd">         * @ORM\Column(length=150)</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$description</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * The posts contained in this blog</span>
<span class="sd">         *</span>
<span class="sd">         * @var \Doctrine\Common\Collections\Collection&lt;\TYPO3\Blog\Domain\Model\Post&gt;</span>
<span class="sd">         * @ORM\OneToMany(mappedBy=&quot;blog&quot;)</span>
<span class="sd">         * @ORM\OrderBy({&quot;date&quot; = &quot;DESC&quot;})</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$posts</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Constructs a new Blog</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">posts</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Doctrine\Common\Collections\ArrayCollection</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="o">...</span>

        <span class="sd">/**</span>
<span class="sd">         * Adds a post to this blog</span>
<span class="sd">         *</span>
<span class="sd">         * @param \TYPO3\Blog\Domain\Model\Post $post</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">addPost</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">setBlog</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">posts</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Removes a post from this blog</span>
<span class="sd">         *</span>
<span class="sd">         * @param \TYPO3\Blog\Domain\Model\Post $post</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">removePost</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">posts</span><span class="o">-&gt;</span><span class="na">removeElement</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
        <span class="p">}</span>

<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</div>
<p>Please remove the <tt class="docutils literal"><span class="pre">setPosts</span></tt> method as we don&#8217;t want that to be possible.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>The <cite>&#64;Flow…</cite> and <cite>&#64;ORM…</cite> strings in the code are called Annotations.
They are namespaced like PHP classes, so for the above code to work you
<strong>must</strong> add a line like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="nx">ORM</span><span class="p">;</span>
</pre></div>
</div>
<p class="last">to the files as well. Add it right after the <cite>use</cite> statement for the TYPO3 Flow
annotations that is already there.</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p><strong>Namespaces</strong></p>
<p class="last">Namespaces have been introduced in PHP 5.3. If you&#8217;re unfamiliar with its
funny backslash syntax you might want to have a look at the
<a class="reference external" href="http://php.net/manual/en/language.namespaces.php">PHP manual</a>.</p>
</div>
<p>As you can see there&#8217;s nothing really fancy in it, the class mostly consists of
getters and setters. Let&#8217;s take a closer look at the model line-by-line:</p>
<p>Classes/TYPO3/Blog/Domain/Model/Blog.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">TYPO3\Blog\Domain\Model</span><span class="p">;</span>
</pre></div>
</div>
<p>This namespace declaration must be the very first code in your file.</p>
<p>Classes/TYPO3/Blog/Domain/Model/Blog.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A blog</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Entity</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Blog</span> <span class="p">{</span>
</pre></div>
</div>
<p>On the first glance this looks like a regular comment block, but it&#8217;s not. This
comment contains <strong>annotations</strong> which are an important building block in
TYPO3 Flow&#8217;s configuration mechanism.</p>
<p>The annotation marks this class as an entity. This is an important piece
of information for the persistence framework because it declares that</p>
<ul class="simple">
<li>this model is an <strong>entity</strong> according to the concepts of Domain-Driven
Design</li>
<li>instances of this class can be persisted (i.e. stored in the database)</li>
<li>According to DDD, an entity is an object which has an identity, that
is even if two objects with the same values exist, their identity matters.</li>
</ul>
<p>The model&#8217;s properties are implemented as regular class properties:</p>
<p>Classes/TYPO3/Blog/Domain/Model/Blog.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * The blog&#39;s title.</span>
<span class="sd"> *</span>
<span class="sd"> * @var string</span>
<span class="sd"> * @Flow\Validate(type=&quot;Text&quot;)</span>
<span class="sd"> * @Flow\Validate(type=&quot;StringLength&quot;, options={ &quot;minimum&quot;=1, &quot;maximum&quot;=80 })</span>
<span class="sd"> * @ORM\Column(length=80)</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$title</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * A short description of the blog</span>
<span class="sd"> *</span>
<span class="sd"> * @var string</span>
<span class="sd"> * @Flow\Validate(type=&quot;Text&quot;)</span>
<span class="sd"> * @Flow\Validate(type=&quot;StringLength&quot;, options={ &quot;maximum&quot;=150 })</span>
<span class="sd"> * @ORM\Column(length=150)</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$description</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * The posts contained in this blog</span>
<span class="sd"> *</span>
<span class="sd"> * @var \Doctrine\Common\Collections\Collection&lt;\TYPO3\Blog\Domain\Model\Post&gt;</span>
<span class="sd"> * @ORM\OneToMany(mappedBy=&quot;blog&quot;)</span>
<span class="sd"> * @ORM\OrderBy({&quot;date&quot; = &quot;DESC&quot;})</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$posts</span><span class="p">;</span>
</pre></div>
</div>
<p>Each property comes with a <tt class="docutils literal"><span class="pre">&#64;var</span></tt> annotation which declares its type. Any type is fine,
be it simple types like <tt class="docutils literal"><span class="pre">string</span></tt>, <tt class="docutils literal"><span class="pre">integer</span></tt>, <tt class="docutils literal"><span class="pre">boolean</span></tt> or classes like <tt class="docutils literal"><span class="pre">\DateTime</span></tt>
and <tt class="docutils literal"><span class="pre">\TYPO3\Foo\Domain\Model\Bar</span></tt>.</p>
<p>The <tt class="docutils literal"><span class="pre">&#64;var</span></tt> annotation of the <tt class="docutils literal"><span class="pre">$posts</span></tt> property differs a bit from the remaining
comments when it comes to the type. This property holds a list of <tt class="docutils literal"><span class="pre">Post</span></tt> objects
contained by this blog – in fact this could easily have been an array. However, an array
does not allow the collection to be persisted by Doctrine 2 properly. We therefore use a
<tt class="docutils literal"><span class="pre">Doctrine\Common\Collections\Collection</span></tt> <a class="footnote-reference" href="#id5" id="id2">[2]</a> instance. The class name bracketed by the
less-than and greater-than signs gives an important hint on the content of the collection
(or array). There are a few situations in which TYPO3 Flow relies on this information.</p>
<p>The <tt class="docutils literal"><span class="pre">OneToMany</span></tt> annotation is Doctrine 2 specific and provides more detail on the
type association a property represents. In this case it tells Doctrine that a <tt class="docutils literal"><span class="pre">Blog</span></tt> may
be associated with many <tt class="docutils literal"><span class="pre">Post</span></tt> instances, but those in turn may only belong to one
<tt class="docutils literal"><span class="pre">Blog</span></tt>. Furthermore the <tt class="docutils literal"><span class="pre">mappedBy</span></tt> attribute says the association is bidirectional and
refers to the property <tt class="docutils literal"><span class="pre">$blog</span></tt> in the <tt class="docutils literal"><span class="pre">Post</span></tt> class.</p>
<p>The <tt class="docutils literal"><span class="pre">OrderBy</span></tt> annotation is regular Doctrine 2 functionality and makes sure the
posts are always ordered by their date property when the collection is loaded.</p>
<p>The remaining code shouldn&#8217;t hold any surprises - it only serves for setting and
retrieving the blog&#8217;s properties. This again, is no requirement by TYPO3 Flow - if you don&#8217;t
want to expose your properties it&#8217;s fine to not define any setters or getters at all. The
persistence framework uses other ways to access the properties&#8217; values ...</p>
<p>We need a model for the posts as well, so kickstart it like this:</p>
<div class="highlight-none"><div class="highlight"><pre>./flow kickstart:model --force TYPO3.Blog Post \
        &#39;blog:\TYPO3\Blog\Domain\Model\Blog&#39; \
        title:string \
        linkTitle:string \
        date:\DateTime \
        author:string \
        content:string
</pre></div>
</div>
<p>Note that we use the <tt class="docutils literal"><span class="pre">--force</span></tt> option to overwrite the model - it was created along with
the Post controller earlier because we used the <tt class="docutils literal"><span class="pre">--generate-related</span></tt> flag.</p>
<p>Adjust the generated code as follows:</p>
<p>Classes/TYPO3/Blog/Domain/Model/Post.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * The blog</span>
<span class="sd"> * @var \TYPO3\Blog\Domain\Model\Blog</span>
<span class="sd"> * @ORM\ManyToOne(inversedBy=&quot;posts&quot;)</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$blog</span><span class="p">;</span>

<span class="o">...</span>

<span class="sd">/**</span>
<span class="sd"> * The content</span>
<span class="sd"> * @var string</span>
<span class="sd"> * @ORM\Column(type=&quot;text&quot;)</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$content</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * Constructs this post</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\DateTime</span><span class="p">();</span>
<span class="p">}</span>

<span class="o">...</span>

<span class="sd">/**</span>
<span class="sd"> * Sets this Post&#39;s title</span>
<span class="sd"> *</span>
<span class="sd"> * @param string $title The Post&#39;s title</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">setTitle</span><span class="p">(</span><span class="nv">$title</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">linkTitle</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">linkTitle</span> <span class="o">=</span> <span class="nx">strtolower</span><span class="p">(</span><span class="nb">preg_replace</span><span class="p">(</span><span class="s1">&#39;/[^a-zA-Z0-9\-]/&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="nv">$title</span><span class="p">)));</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="o">...</span>

<span class="sd">/**</span>
<span class="sd"> * Get the Post&#39;s link title</span>
<span class="sd"> *</span>
<span class="sd"> * @return string The Post&#39;s link title</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">getLinkTitle</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">linkTitle</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">linkTitle</span> <span class="o">=</span> <span class="nx">strtolower</span><span class="p">(</span><span class="nb">preg_replace</span><span class="p">(</span><span class="s1">&#39;/[^a-zA-Z0-9\-]/&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">)));</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">linkTitle</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="blog-repository">
<h2>Blog Repository</h2>
<p>According to our earlier reasonings, you need a repository for storing the blog:</p>
<div class="figure">
<img alt="Blog Repository and Blog" class="screenshot-detail" src="_Resources/Persistent/584114524344db059bb1d61606832a6a43880584/DomainModel-3.png" style="width: 390px" />
<p class="caption">Blog Repository and Blog</p>
</div>
<p>A repository acts as the bridge between the holy lands of business logic
(domain models) and the dirty underground of infrastructure (data storage).
This is the only place where queries to the persistence framework take place -
you never want to have those in your domain models.</p>
<p>Similar to models the directory for your repositories is <tt class="docutils literal"><span class="pre">Classes/TYPO3/Blog/Domain/Repository/</span></tt>.
You can kickstart the repository with:</p>
<div class="highlight-none"><div class="highlight"><pre>myhost:tutorial johndoe$ ./flow kickstart:repository TYPO3.Blog Blog
</pre></div>
</div>
<p>This will generate a vanilla repository for blogs containing this code:</p>
<p>Classes/TYPO3/Blog/Domain/Repository/BlogRepository.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">namespace</span> <span class="nx">TYPO3\Blog\Domain\Repository</span><span class="p">;</span>

<span class="cm">/*                                                                        *</span>
<span class="cm"> * This script belongs to the TYPO3 Flow package &quot;TYPO3.Blog&quot;.            *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> *                                                                        */</span>

<span class="sd">/**</span>
<span class="sd"> * A repository for Blogs</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Scope(&quot;singleton&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">BlogRepository</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Persistence\Repository</span> <span class="p">{</span>

        <span class="c1">// add customized methods here</span>

<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</div>
<p>As you see there&#8217;s no code you need to write for the standard cases because
the base repository already comes with methods like <tt class="docutils literal"><span class="pre">add</span></tt>, <tt class="docutils literal"><span class="pre">remove</span></tt>,
<tt class="docutils literal"><span class="pre">findAll</span></tt>, <tt class="docutils literal"><span class="pre">findBy*</span></tt> and <tt class="docutils literal"><span class="pre">findOneBy*</span></tt> <a class="footnote-reference" href="#id6" id="id3">[3]</a> methods.</p>
<p>Remember that a repository can only store one kind of an object, in this case
blogs. The type is derived from the repository name: because you named this
repository <tt class="docutils literal"><span class="pre">BlogRepository</span></tt> TYPO3 Flow assumes that it&#8217;s supposed to store
<tt class="docutils literal"><span class="pre">Blog</span></tt> objects.</p>
<p>To finish up, open the repository for our posts (which was generated along with the Post
controller we kickstarted earlier) and add the following find methods to the generated
code:</p>
<p>Classes/TYPO3/Blog/Domain/Repository/PostRepository.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Finds posts by the specified blog</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Blog $blog The blog the post must refer to</span>
<span class="sd"> * @param integer $limit The number of posts to return at max</span>
<span class="sd"> * @return \TYPO3\Flow\Persistence\QueryResultInterface The posts</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findByBlog</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Blog</span> <span class="nv">$blog</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createQuery</span><span class="p">();</span>
        <span class="k">return</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">matching</span><span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="na">equals</span><span class="p">(</span><span class="s1">&#39;blog&#39;</span><span class="p">,</span> <span class="nv">$blog</span><span class="p">))</span>
                <span class="o">-&gt;</span><span class="na">setOrderings</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;date&#39;</span> <span class="o">=&gt;</span> <span class="nx">QueryInterface</span><span class="o">::</span><span class="na">ORDER_DESCENDING</span><span class="p">))</span>
                <span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * Finds the previous of the given post</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $post The reference post</span>
<span class="sd"> * @return \TYPO3\Blog\Domain\Model\Post</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findPrevious</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createQuery</span><span class="p">();</span>
        <span class="k">return</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">matching</span><span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="na">lessThan</span><span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">getDate</span><span class="p">()))</span>
                <span class="o">-&gt;</span><span class="na">setOrderings</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;date&#39;</span> <span class="o">=&gt;</span> <span class="nx">\TYPO3\Flow\Persistence\QueryInterface</span><span class="o">::</span><span class="na">ORDER_DESCENDING</span><span class="p">))</span>
                <span class="o">-&gt;</span><span class="na">execute</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">getFirst</span><span class="p">();</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * Finds the post next to the given post</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $post The reference post</span>
<span class="sd"> * @return \TYPO3\Blog\Domain\Model\Post</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findNext</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createQuery</span><span class="p">();</span>
        <span class="k">return</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">matching</span><span class="p">(</span><span class="nv">$query</span><span class="o">-&gt;</span><span class="na">greaterThan</span><span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">getDate</span><span class="p">()))</span>
                <span class="o">-&gt;</span><span class="na">setOrderings</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;date&#39;</span> <span class="o">=&gt;</span> <span class="nx">\TYPO3\Flow\Persistence\QueryInterface</span><span class="o">::</span><span class="na">ORDER_ASCENDING</span><span class="p">))</span>
                <span class="o">-&gt;</span><span class="na">execute</span><span class="p">()</span>
                <span class="o">-&gt;</span><span class="na">getFirst</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>We love to call them POPOs, similar to POJOs
<a class="reference external" href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">http://en.wikipedia.org/wiki/Plain_Old_Java_Object</a></td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id5" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td><a class="reference external" href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html#collections">http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html#collections</a></td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id6" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id3">[3]</a></td><td><tt class="docutils literal"><span class="pre">findBy*</span></tt> and <tt class="docutils literal"><span class="pre">findOneBy*</span></tt> are magic methods provided by the base
repository which allow you to find objects by properties. The
<tt class="docutils literal"><span class="pre">BlogRepository</span></tt> for example would allow you to call magic methods
like <tt class="docutils literal"><span class="pre">findByDescription('foo')</span></tt> or <tt class="docutils literal"><span class="pre">findOneByTitle('bar')</span></tt>.</td></tr>
</tbody>
</table>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="35c6d55a-6ae1-ae26-95c7-e0f050cceaea" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="5b05c315-e181-505b-6b2f-5d95e7675c31" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="controller" locale="">
       <properties>
        <title>Controller</title>
       </properties>
       <node identifier="aa0341c4-e925-4e25-edfb-625015e1cbad" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="616bf931-7256-d2b4-a42d-56d067686d1f" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="controller">
<h1>Controller</h1>
<p>Now that we have the first models and repositories in place we can almost move forward to
creating our first controller.</p>
<div class="section" id="setup-controller">
<h2>Setup Controller</h2>
<p>The <tt class="docutils literal"><span class="pre">SetupController</span></tt> will be in charge of creating a <tt class="docutils literal"><span class="pre">Blog</span></tt> object, setting a title
and description and storing it in the <tt class="docutils literal"><span class="pre">BlogRepository</span></tt>. The kickstarter created a very
basic setup controller containing only one action, the <tt class="docutils literal"><span class="pre">indexAction</span></tt>. Let&#8217;s create and
store a new blog once the index action is called:</p>
<p>Classes/TYPO3/Blog/Controller/SetupController.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">namespace</span> <span class="nx">TYPO3\Blog\Controller</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">TYPO3\Flow\Annotations</span> <span class="k">as</span> <span class="nx">Flow</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="k">class</span> <span class="nc">SetupController</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Mvc\Controller\ActionController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         * @var \TYPO3\Blog\Domain\Repository\BlogRepository</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$blogRepository</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         * @var \TYPO3\Blog\Domain\Repository\PostRepository</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$postRepository</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Sets up a fresh blog and creates a sample post.</span>
<span class="sd">         *</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">removeAll</span><span class="p">();</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">postRepository</span><span class="o">-&gt;</span><span class="na">removeAll</span><span class="p">();</span>

                <span class="nv">$blog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\TYPO3\Blog\Domain\Model\Blog</span><span class="p">();</span>
                <span class="nv">$blog</span><span class="o">-&gt;</span><span class="na">setTitle</span><span class="p">(</span><span class="s1">&#39;My Blog&#39;</span><span class="p">);</span>
                <span class="nv">$blog</span><span class="o">-&gt;</span><span class="na">setDescription</span><span class="p">(</span><span class="s1">&#39;A blog about Foo, Bar and Baz.&#39;</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$blog</span><span class="p">);</span>

                <span class="nv">$post</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\TYPO3\Blog\Domain\Model\Post</span><span class="p">();</span>
                <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">setAuthor</span><span class="p">(</span><span class="s1">&#39;John Doe&#39;</span><span class="p">);</span>
                <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">setTitle</span><span class="p">(</span><span class="s1">&#39;Example Post&#39;</span><span class="p">);</span>
                <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">setContent</span><span class="p">(</span><span class="s1">&#39;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&#39;</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">postRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>

                <span class="nv">$blog</span><span class="o">-&gt;</span><span class="na">addPost</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>

                <span class="k">return</span> <span class="s1">&#39;Successfully created a blog&#39;</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</div>
<p>You can probably figure out easily what the <tt class="docutils literal"><span class="pre">indexAction</span></tt> does – it empties the
<tt class="docutils literal"><span class="pre">BlogRepository</span></tt> and <tt class="docutils literal"><span class="pre">PostRepository</span></tt>, creates a new <tt class="docutils literal"><span class="pre">Blog</span></tt> object and adds it to
the <tt class="docutils literal"><span class="pre">BlogRepository</span></tt>. In addition a sample blog post is created and added to the
<tt class="docutils literal"><span class="pre">PostRepository</span></tt> and blog. Note that if you had omitted the lines:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$blog</span><span class="p">);</span>
</pre></div>
</div>
<p>and</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">postRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
</pre></div>
</div>
<p>the blog and the post would have been created in memory but not persisted to
the database.</p>
<p>Using the blog and post repository sounds plausible, but where do you get the
repositories from?</p>
<p>Classes/TYPO3/Blog/Controller/SetupController.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\Inject</span>
<span class="sd"> * @var \TYPO3\Blog\Domain\Repository\BlogRepository</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$blogRepository</span><span class="p">;</span>
</pre></div>
</div>
<p>The property declarations for <tt class="docutils literal"><span class="pre">$blogRepository</span></tt> (and <tt class="docutils literal"><span class="pre">$postRepository</span></tt>) is marked with
an <tt class="docutils literal"><span class="pre">Inject</span></tt> annotation. This signals to the object framework: I need the blog
repository here, please make sure it&#8217;s stored in this member variable. In effect TYPO3 Flow
will inject the blog repository into the <tt class="docutils literal"><span class="pre">$blogRepository</span></tt> property right after your
controller has been instantiated. And because the blog repository&#8217;s scope is singleton
<a class="footnote-reference" href="#id4" id="id1">[1]</a>, the framework will always inject the same instance of the repository.</p>
<p>There&#8217;s a lot more to discover about <strong>Dependency Injection</strong> and we recommend
that you read the whole chapter about objects in the
<a class="reference external" href="http://flow.typo3.org/documentation/guide">TYPO3 Flow guide</a> once you start with
your own coding.</p>
<p>To create the required database tables we now use the command line support to generate the
tables for our package:</p>
<div class="highlight-none"><div class="highlight"><pre>myhost:tutorial johndoe$ ./flow doctrine:update
</pre></div>
</div>
<p>Try out the <tt class="docutils literal"><span class="pre">SetupController</span></tt> by accessing
<a class="reference external" href="http://dev.tutorial.local/typo3.blog/setup/index">http://dev.tutorial.local/typo3.blog/setup/index</a>. If all went right you should see the
Successfully created a blog message on your screen. In order to find this blog again, we
add a method <tt class="docutils literal"><span class="pre">findActive</span></tt> to the <tt class="docutils literal"><span class="pre">BlogRepository</span></tt>:</p>
<p>Classes/TYPO3/Blog/Domain/Repository/BlogRepository.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Finds the active blog.</span>
<span class="sd"> *</span>
<span class="sd"> * As of now only one Blog is supported anyway so we just assume that only one</span>
<span class="sd"> * Blog object resides in the Blog Repository.</span>
<span class="sd"> *</span>
<span class="sd"> * @return \TYPO3\Blog\Domain\Model\Blog The active blog or FALSE if none exists</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findActive</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createQuery</span><span class="p">();</span>
        <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">setLimit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
        <span class="k">return</span> <span class="nv">$result</span><span class="o">-&gt;</span><span class="na">getFirst</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This is all we need for moving on to something more visible: the blog posts.</p>
</div>
<div class="section" id="basic-post-controller">
<h2>Basic Post Controller</h2>
<p>Now let us add some more code to .../Classes/TYPO3/Blog/Controller/PostController.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">...</span>

<span class="k">class</span> <span class="nc">PostController</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Mvc\Controller\ActionController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var \TYPO3\Blog\Domain\Repository\BlogRepository</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$blogRepository</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Index action</span>
<span class="sd">         *</span>
<span class="sd">         * @return string HTML code</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$blog</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">findActive</span><span class="p">();</span>
                <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;</span>
<span class="s1">                        &lt;h1&gt;Posts of &quot;&#39;</span> <span class="o">.</span> <span class="nv">$blog</span><span class="o">-&gt;</span><span class="na">getTitle</span><span class="p">()</span> <span class="o">.</span> <span class="s1">&#39;&quot;&lt;/h1&gt;</span>
<span class="s1">                        &lt;ol&gt;&#39;</span><span class="p">;</span>

                <span class="k">foreach</span> <span class="p">(</span><span class="nv">$blog</span><span class="o">-&gt;</span><span class="na">getPosts</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nv">$output</span> <span class="o">.=</span> <span class="s1">&#39;&lt;li&gt;&#39;</span> <span class="o">.</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">getTitle</span><span class="p">()</span> <span class="o">.</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="nv">$output</span> <span class="o">.=</span> <span class="s1">&#39;&lt;/ol&gt;&#39;</span><span class="p">;</span>

                <span class="k">return</span> <span class="nv">$output</span><span class="p">;</span>
        <span class="p">}</span>

<span class="o">...</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">indexAction</span></tt> retrieves the active blog from the <tt class="docutils literal"><span class="pre">BlogRepository</span></tt> and
outputs the blog&#8217;s title and post titles <a class="footnote-reference" href="#id5" id="id2">[2]</a>. A quick look
at <a class="reference external" href="http://dev.tutorial.local/typo3.blog/post">http://dev.tutorial.local/typo3.blog/post</a> <a class="footnote-reference" href="#id6" id="id3">[3]</a> confirms that the
<tt class="docutils literal"><span class="pre">SetupController</span></tt> has indeed created the blog and post:</p>
<div class="figure">
<a href="_Resources/Persistent/1cdadaa04a9a2e07a1d6dbf35e08a1f2756df5a3/MyFirstBlog.png" data-lightbox="image-534852aac4674"><img alt="Output of the indexAction" class="screenshot-fullsize" src="_Resources/Persistent/dfd268bc00630abce6cabe0ac444097ed85b9b31/MyFirstBlog.png" style="width: 710px" /></a>
<p class="caption">Output of the indexAction</p>
</div>
</div>
<div class="section" id="create-action">
<h2>Create Action</h2>
<p>In the <tt class="docutils literal"><span class="pre">SetupController</span></tt> we have seen how a new blog and a post can be
created and filled with some hardcoded values. At least the posts should,
however, be filled with values provided by the blog author, so we need to pass
the new post as an argument to a <tt class="docutils literal"><span class="pre">createAction</span></tt> in the <tt class="docutils literal"><span class="pre">PostController</span></tt>:</p>
<p>Classes/TYPO3/Blog/Controller/PostController.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// ...</span>

<span class="sd">/**</span>
<span class="sd"> * Creates a new post</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $newPost</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">createAction</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$newPost</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$blog</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">findActive</span><span class="p">();</span>
        <span class="nv">$blog</span><span class="o">-&gt;</span><span class="na">addPost</span><span class="p">(</span><span class="nv">$newPost</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">postRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$newPost</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Created a new post.&#39;</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">createAction</span></tt> expects a parameter <tt class="docutils literal"><span class="pre">$post</span></tt> which is the <tt class="docutils literal"><span class="pre">Post</span></tt> object
to be persisted. The code is quite straight-forward: add the post to the blog,
add a message to some flash message stack and redirect to the index action.
Try calling the <tt class="docutils literal"><span class="pre">createAction</span></tt> now by accessing
<a class="reference external" href="http://dev.tutorial.local/typo3.blog/post/create">http://dev.tutorial.local/typo3.blog/post/create</a>:</p>
<div class="figure">
<a href="_Resources/Persistent/2595fbc2f3ba088cb9f904fc3ea5ade80429eb79/CreateActionWithoutArgument.png" data-lightbox="image-534852aac643f"><img alt="Create action called without argument" class="screenshot-fullsize" src="_Resources/Persistent/b4f72ad056402a7da074893e34f8068f78bc3125/CreateActionWithoutArgument.png" style="width: 710px" /></a>
<p class="caption">Create action called without argument</p>
</div>
<p>TYPO3 Flow analyzed the new method signature and automatically registered <tt class="docutils literal"><span class="pre">$post</span></tt>
as a required argument for <tt class="docutils literal"><span class="pre">createAction</span></tt>. Because no such argument was
passed to the action, the controller exits with an error.</p>
<p>So, how do you create a new post? You need to create some HTML form which
allows you to enter the post details and then submits the information to the
<tt class="docutils literal"><span class="pre">createAction</span></tt>. But you don&#8217;t want the controller rendering such a
form – this is clearly a task for the view!</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id4" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>Remember, prototype is the default object scope and because the
<tt class="docutils literal"><span class="pre">BlogRepository</span></tt> does contain a <tt class="docutils literal"><span class="pre">Scope</span></tt> annotation, it has the
singleton scope instead.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id5" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td>Don&#8217;t worry, the action won&#8217;t stay like this – of course later we&#8217;ll
move all HTML rendering code to a dedicated view.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id6" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id3">[3]</a></td><td>The typo3.blog stands for the package TYPO3.Blog and post specifies the
controller PostController.</td></tr>
</tbody>
</table>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="89b02490-1ed5-3258-4172-ce73be4f0f05" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="fffa15ba-9496-4a38-725a-d2fa7f214ece" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="view" locale="">
       <properties>
        <title>View</title>
       </properties>
       <node identifier="264f6e81-004a-185a-8e70-8047e3b32a64" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="0c5e9776-5d06-8fa4-dd07-5c82f7402f61" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="view">
<h1>View</h1>
<p>The view&#8217;s responsibility is solely the visual presentation of data provided by
the controller. In TYPO3 Flow views are cleanly decoupled from the rest of the MVC
framework. This allows you to either take advantage of Fluid (TYPO3 Flow&#8217;s template
engine), write your own custom PHP view class or use almost any other template
engine by writing a thin wrapper building a bridge between TYPO3 Flow&#8217;s interfaces
and the template engine&#8217;s functions. In this tutorial we focus on Fluid-based
templates as this is what you usually want to use.</p>
<div class="section" id="resources">
<h2>Resources</h2>
<p>Before we design our first Fluid template we need to spend a thought on the
resources our template is going to use (I&#8217;m talking about all the images, style
sheets and javascript files which are referred to by your HTML code).
You remember that only the <tt class="docutils literal"><span class="pre">Web</span></tt> directory is accessible from the web, right?
And the resources are part of the package and thus hidden from the public.
That&#8217;s why TYPO3 Flow comes with a powerful resource manager whose main task is to
manage access to your package&#8217;s resources.</p>
<p>The deal is this: All files which are located in the <strong>public resources directory</strong>
of your package will automatically be mirrored to the public resources
directory below the <tt class="docutils literal"><span class="pre">Web</span></tt> folder. Let&#8217;s take a look at the directory layout of
the Blog package:</p>
<table border="1" class="docutils">
<caption>Directory structure of a TYPO3 Flow package</caption>
<colgroup>
<col width="25%" />
<col width="75%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Directory</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>Classes/</td>
<td>All the .php class files of your package</td>
</tr>
<tr class="row-odd"><td>Documentation/</td>
<td>The package&#8217;s manual and other documentation</td>
</tr>
<tr class="row-even"><td>Meta/</td>
<td>Package.xml and other package meta information</td>
</tr>
<tr class="row-odd"><td>Resources/</td>
<td>Top folder for resources</td>
</tr>
<tr class="row-even"><td>Resources/Public/</td>
<td>Public resources - will be mirrored to the Web directory</td>
</tr>
<tr class="row-odd"><td>Resources/Private/</td>
<td>Private resources - won&#8217;t be mirrored to the Web directory</td>
</tr>
</tbody>
</table>
<p>No matter what files and directories you create below <tt class="docutils literal"><span class="pre">Resources/Public/</span></tt> - all
of them will be symlinked to <tt class="docutils literal"><span class="pre">Web/_Resources/Static/Packages/TYPO3.Blog/</span></tt> on
the next hit.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">There are more possible directories in a package and we do have some
conventions for naming certain sub directories. All that is explained in
fine detail in the <a class="reference external" href="http://flow.typo3.org/documentation/">TYPO3 Flow reference manual</a>.</p>
</div>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p class="last">For the blog example in this tutorial we created some style sheets
and icons. If you&#8217;d like to brush up the following examples a little, then
it&#8217;s now time to copy <tt class="docutils literal"><span class="pre">Resources/Public/</span></tt> in the CheatSheet to your
blog&#8217;s public resources folder
(<tt class="docutils literal"><span class="pre">Packages/Application/TYPO3.Blog/Resources/Public/</span></tt>).</p>
</div>
</div>
<div class="section" id="layouts">
<h2>Layouts</h2>
<p>Fluid knows the concepts of layouts, templates and partials. Usually all of
them are just plain HTML files which contain special tags known by the Fluid
template view. The following figure illustrates the use of layout, template and
partials in our blog example:</p>
<div class="figure">
<img alt="Layout, Template and Partial" class="screenshot-fullsize" src="_Resources/Persistent/b4fea7c346a881825a6d7534b1a4ff89844aaace/LayoutTemplatePartial.png" style="width: 645px" />
<p class="caption">Layout, Template and Partial</p>
</div>
<p>A Fluid layout provides the basic layout of the output which is supposed to be
shared by multiple templates. You will use the same layout throughout this
tutorial - only the templates will change depending on the current controller
and action. Elements shared by multiple templates can be extracted as a partial
to assure consistency and avoid duplication.</p>
<p>Let&#8217;s build a simple layout for your blog. You only need to adjust the file called
<tt class="docutils literal"><span class="pre">Default.html</span></tt> inside the <tt class="docutils literal"><span class="pre">TYPO3.Blog/Resources/Private/Layouts</span></tt> directory to contain
the following code:</p>
<p>Resources/Private/Layouts/Default.html:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html</span>
<span class="cp">         PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span>
<span class="cp">         &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span> <span class="na">xml:lang=</span><span class="s">&quot;en&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;head&gt;</span>
                <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;f:base</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;title&gt;</span>{blog.title}<span class="nt">&lt;/title&gt;</span>
                <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{f:uri.resource(path: &#39;Blog.css&#39;)}&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">media=</span><span class="s">&quot;all&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/head&gt;</span>
        <span class="nt">&lt;body&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;f:if</span> <span class="na">condition=</span><span class="s">&quot;{blog}&quot;</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;f:link.action</span> <span class="na">action=</span><span class="s">&quot;index&quot;</span> <span class="na">controller=</span><span class="s">&quot;Post&quot;</span><span class="nt">&gt;</span>
                                        <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>{blog.title}<span class="nt">&lt;/h1&gt;&lt;/f:link.action&gt;</span>
                                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;description&quot;</span><span class="nt">&gt;</span>{blog.description}<span class="nt">&lt;/p&gt;</span>
                        <span class="nt">&lt;/f:if&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;maincontainer&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;mainbox&quot;</span><span class="nt">&gt;&lt;f:render</span> <span class="na">section=</span><span class="s">&quot;mainbox&quot;</span> <span class="nt">/&gt;&lt;/div&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;clear&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://flow.typo3.org&quot;</span><span class="nt">&gt;</span>Powered by TYPO3 Flow
                                <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;{f:uri.resource(path: &#39;TYPO3-Flow-Logo-11px.png&#39;)}&quot;</span> <span class="na">width=</span><span class="s">&quot;11&quot;</span> <span class="na">height=</span><span class="s">&quot;11&quot;</span> <span class="nt">/&gt;</span>
                        <span class="nt">&lt;/a&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div>
<p>On first sight this looks like plain HTML code, but you&#8217;ll surely notice the
various <tt class="docutils literal"><span class="pre">&lt;f:</span> <span class="pre">...</span> <span class="pre">&gt;</span></tt> tags. Fluid provides a range of view helpers which are
addressed by these tags. By default they live in the <tt class="docutils literal"><span class="pre">f</span></tt> namespace resulting
in tags like <tt class="docutils literal"><span class="pre">&lt;f:base&gt;</span></tt> or <tt class="docutils literal"><span class="pre">&lt;f:if&gt;</span></tt>. You can define your own namespaces
and even develop your own view helpers, but for now let&#8217;s look at what you used
in your layout:</p>
<p>The first Fluid tag used is the <tt class="docutils literal"><span class="pre">&lt;f:base&gt;</span></tt> tag. This tag instructs Fluid to
render an HTML <tt class="docutils literal"><span class="pre">&lt;base&gt;</span></tt> tag containing the correct absolute base URI for your
site – in your case resulting in:</p>
<p>Resources/Private/Layouts/Default.html:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;base</span> <span class="na">href=</span><span class="s">&quot;http://dev.tutorial.local/&quot;</span><span class="nt">&gt;&lt;/base&gt;</span>
</pre></div>
</div>
<p>The second occurrence of Fluid markup is actually no tag but a
variable accessor:</p>
<p>Resources/Private/Layouts/Default.html:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;title&gt;</span>{blog.title}<span class="nt">&lt;/title&gt;</span>
</pre></div>
</div>
<p>As you will see in a minute, Fluid allows your controller to define variables
for the template view. In order to display the blog&#8217;s name, you&#8217;ll need to make
sure that your controller assigns the current <tt class="docutils literal"><span class="pre">Blog</span></tt> object to the template
variable <tt class="docutils literal"><span class="pre">blog</span></tt>. The value of such a variable can be inserted anywhere in
your layout, template or partial by inserting the variable name wrapped by
curly braces. However, in the above case <tt class="docutils literal"><span class="pre">blog</span></tt> is not a value you can output
right away – it&#8217;s an object. Fortunately Fluid can display properties of an
object which are accessible through a getter function: to display the blog
title, you just need to note down <tt class="docutils literal"><span class="pre">{blog.title}</span></tt>.</p>
<p>The third appearance of Fluid syntax is an alternative way to address view
helpers, the view helper shorthand syntax:</p>
<p>Resources/Private/Layouts/Default.html:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{f:uri.resource(path: &#39;Blog.css&#39;)}&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>This instructs the URI view helper to create a relative resource URL pointing
to your style sheet. The generated HTML code will look like this:</p>
<p>Resources/Private/Layouts/Default.html:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;Resources/Packages/TYPO3.Blog/Blog.css&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>If you look at the remaining markup of the layout you&#8217;ll find more uses of view
helpers, including conditions and link generation. There&#8217;s only one more view
helper you need to know about before proceeding with our first template,
the <strong>render</strong> view helper:</p>
<p>Resources/Private/Layouts/Default.html:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;f:render</span> <span class="na">section=</span><span class="s">&quot;mainbox&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>This tag tells Fluid to insert the section <tt class="docutils literal"><span class="pre">mainbox</span></tt> defined in the current
template at this place. For this to work there must be a section with the
specified name in the template referring to the layout – because that&#8217;s the way
it works: A template declares on which layout it is based on, defines sections
which in return are included by the layout. Confusing? Let&#8217;s look at a
concrete example.</p>
</div>
<div class="section" id="templates">
<h2>Templates</h2>
<p>Templates are, as already mentioned, tailored to a specific action. The action
controller chooses the right template automatically according to the current
package, controller and action - if you follow the naming conventions. Let&#8217;s
replace the automatically generated template for the Post controller&#8217;s index
action in <tt class="docutils literal"><span class="pre">TYPO3.Blog/Resources/Private/Templates/Post/Index.html</span></tt> by some more
meaningful HTML:</p>
<p>Resources/Private/Templates/Post/Index.html:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:layout</span> <span class="na">name=</span><span class="s">&quot;Default&quot;</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;f:section</span> <span class="na">name=</span><span class="s">&quot;mainbox&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;f:flashMessages</span> <span class="na">class=</span><span class="s">&quot;flashmessages&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;f:if</span> <span class="na">condition=</span><span class="s">&quot;{posts}&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;f:then&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;navigation&quot;</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;buttons&quot;</span><span class="nt">&gt;&lt;f:link.action</span> <span class="na">action=</span><span class="s">&quot;new&quot;</span> <span class="na">controller=</span><span class="s">&quot;Post&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;{f:uri.resource(path: &#39;Icons/FamFamFam/page_add.png&#39;)}&quot;</span> <span class="na">title=</span><span class="s">&quot;Create a new post&quot;</span><span class="nt">/&gt;&lt;/f:link.action&gt;&lt;/span&gt;</span>
                                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;clear&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
                        <span class="nt">&lt;/div&gt;</span>
                        <span class="nt">&lt;ol</span> <span class="na">class=</span><span class="s">&quot;posts&quot;</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{posts}&quot;</span> <span class="na">as=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
                                        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
                                                <span class="nt">&lt;h2&gt;</span>
                                                        <span class="nt">&lt;f:link.action</span> <span class="na">action=</span><span class="s">&quot;show&quot;</span> <span class="na">controller=</span><span class="s">&quot;Post&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{post: post}&quot;</span><span class="nt">&gt;</span>{post.title}<span class="nt">&lt;/f:link.action&gt;</span>
                                                <span class="nt">&lt;/h2&gt;</span>
                                                <span class="nt">&lt;f:render</span> <span class="na">partial=</span><span class="s">&quot;PostMetaData&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{post: post}&quot;</span><span class="nt">/&gt;</span>
                                                <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;&lt;f:format.crop</span> <span class="na">maxCharacters=</span><span class="s">&quot;500&quot;</span><span class="nt">&gt;</span>{post.content}<span class="nt">&lt;/f:format.crop&gt;</span> <span class="nt">&lt;f:link.action</span> <span class="na">action=</span><span class="s">&#39;show&#39;</span> <span class="na">arguments=</span><span class="s">&#39;{post: post,}&#39;</span><span class="nt">&gt;</span>More<span class="nt">&lt;/f:link.action&gt;&lt;/p&gt;</span>
                                        <span class="nt">&lt;/li&gt;</span>
                                <span class="nt">&lt;/f:for&gt;</span>
                        <span class="nt">&lt;/ol&gt;</span>
                <span class="nt">&lt;/f:then&gt;</span>
                <span class="nt">&lt;f:else&gt;</span>
                        <span class="nt">&lt;p&gt;</span>This blog currently doesn&#39;t contain any posts. <span class="nt">&lt;f:link.action</span> <span class="na">action=</span><span class="s">&quot;new&quot;</span> <span class="na">controller=</span><span class="s">&quot;Post&quot;</span><span class="nt">&gt;</span>Create the first post<span class="nt">&lt;/f:link.action&gt;&lt;/p&gt;</span>
                <span class="nt">&lt;/f:else&gt;</span>
        <span class="nt">&lt;/f:if&gt;</span>
<span class="nt">&lt;/f:section&gt;</span>
</pre></div>
</div>
<p>There you have it: In the first line of your template there&#8217;s a reference to
the master layout. All HTML code is wrapped in a <tt class="docutils literal"><span class="pre">&lt;f:section&gt;</span></tt> tag. Even
though this is the way you usually want to design templates, you should know
that using layouts is not mandatory – you could equally put all your code into
one template and omit the <tt class="docutils literal"><span class="pre">&lt;f:layout&gt;</span></tt> and <tt class="docutils literal"><span class="pre">&lt;f:section&gt;</span></tt> tags.</p>
<p>Take a quick look at the template. You&#8217;ll note that we&#8217;re using a new view
helper right at the top – <tt class="docutils literal"><span class="pre">flashMessages</span></tt> generates an unordered list with
all flash messages. Well, maybe you remember this line in the <tt class="docutils literal"><span class="pre">createAction</span></tt>
of our <tt class="docutils literal"><span class="pre">PostController</span></tt>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Created a new post.&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Flash messages are a great way to display success or error messages to
the user. And because they are so useful, TYPO3 Flow provides a <tt class="docutils literal"><span class="pre">FlashMessageContainer</span></tt>
with some helper methods and Fluid offers the <tt class="docutils literal"><span class="pre">flashMessages</span></tt> view helper.
Therefore, if you create a new post, you&#8217;ll see the message <em>Your new post was
created</em> at the top of your blog index on the next hit.</p>
<p>The main job of this template is to display a list of the most recent posts.
An <tt class="docutils literal"><span class="pre">&lt;f:if&gt;</span></tt> condition makes sure that the list of posts is only rendered if
<tt class="docutils literal"><span class="pre">posts</span></tt> actually contains posts. But currently the view doesn&#8217;t know anything
about posts - you need to adapt the <tt class="docutils literal"><span class="pre">indexAction</span></tt> of the <tt class="docutils literal"><span class="pre">PostController</span></tt>
to assign blogs to the view:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">*</span><span class="nx">Classes</span><span class="o">/</span><span class="nx">TYPO3</span><span class="o">/</span><span class="nx">Blog</span><span class="o">/</span><span class="nx">Controller</span><span class="o">/</span><span class="nx">PostController</span><span class="o">.</span><span class="nx">php</span><span class="o">*:</span>
</pre></div>
</div>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * List action for this controller. Displays latest posts</span>
<span class="sd"> *</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$blog</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">findActive</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;blog&#39;</span><span class="p">,</span> <span class="nv">$blog</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;posts&#39;</span><span class="p">,</span> <span class="nv">$blog</span><span class="o">-&gt;</span><span class="na">getPosts</span><span class="p">());</span>
<span class="p">}</span>
</pre></div>
</div>
<p>To fully understand the above code you need to know two facts:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">$this-&gt;view</span></tt> is automatically set by the action controller and
points to a Fluid template view.</li>
<li>if an action method returns <tt class="docutils literal"><span class="pre">NULL</span></tt>, the controller will automatically
call <tt class="docutils literal"><span class="pre">$this-&gt;view-&gt;render()</span></tt> after executing the action.</li>
</ul>
<p>After creating the folder <tt class="docutils literal"><span class="pre">Resources/Private/Partials/</span></tt> add the following to a file named
<tt class="docutils literal"><span class="pre">PostMetaData.html</span></tt>:</p>
<p>Resources/Private/Partials/PostMetaData.html:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;metadata&quot;</span><span class="nt">&gt;</span>
        Published on <span class="nt">&lt;f:format.date</span> <span class="na">format=</span><span class="s">&#39;d.m.Y&#39;</span><span class="nt">&gt;</span>{post.date}<span class="nt">&lt;/f:format.date&gt;</span> by {post.author}
        <span class="nt">&lt;f:link.action</span> <span class="na">action=</span><span class="s">&quot;show&quot;</span> <span class="na">controller=</span><span class="s">&quot;Post&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{post: post}&quot;</span> <span class="na">section=</span><span class="s">&quot;comments&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;../../Public/Icons/FamFamFam/comments.png&quot;</span> <span class="na">title=</span><span class="s">&quot;Comments&quot;</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;f:if</span> <span class="na">condition=</span><span class="s">&quot;{post.numberOfComments} &gt; 0&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;f:then&gt;</span>
                                <span class="nt">&lt;f:if</span> <span class="na">condition=</span><span class="s">&quot;{post.numberOfComments} == 1&quot;</span><span class="nt">&gt;</span>
                                        <span class="nt">&lt;f:then&gt;</span>{post.numberOfComments} comment<span class="nt">&lt;/f:then&gt;</span>
                                        <span class="nt">&lt;f:else&gt;</span>{post.numberOfComments} comments<span class="nt">&lt;/f:else&gt;</span>
                                <span class="nt">&lt;/f:if&gt;</span>
                        <span class="nt">&lt;/f:then&gt;</span>
                        <span class="nt">&lt;f:else&gt;</span>No comments<span class="nt">&lt;/f:else&gt;</span>
                <span class="nt">&lt;/f:if&gt;</span>
        <span class="nt">&lt;/f:link.action&gt;</span>
        <span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;f:if</span> <span class="na">condition=</span><span class="s">&quot;{post.category}&quot;</span><span class="nt">&gt;</span>Filed under: <span class="nt">&lt;f:link.action</span> <span class="na">action=</span><span class="s">&quot;index&quot;</span> <span class="na">controller=</span><span class="s">&quot;Post&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{category: post.category.name}&quot;</span> <span class="na">format=</span><span class="s">&quot;html&quot;</span><span class="nt">&gt;</span>{post.category}<span class="nt">&lt;/f:link.action&gt;&lt;/f:if&gt;</span>
        <span class="nt">&lt;f:if</span> <span class="na">condition=</span><span class="s">&quot;{post.tags}&quot;</span><span class="nt">&gt;</span>
                | Tags: <span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{post.tags}&quot;</span> <span class="na">as=</span><span class="s">&quot;tag&quot;</span><span class="nt">&gt;&lt;f:link.action</span> <span class="na">action=</span><span class="s">&quot;index&quot;</span> <span class="na">controller=</span><span class="s">&quot;Post&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{tag: tag.name}&quot;</span> <span class="nt">&gt;</span>{tag.name}<span class="nt">&lt;/f:link.action&gt;</span> <span class="nt">&lt;/f:for&gt;</span>
        <span class="nt">&lt;/f:if&gt;</span>
<span class="nt">&lt;/p&gt;</span>
</pre></div>
</div>
<p>Now you should now see the list of recent posts by accessing <a class="reference external" href="http://dev.tutorial.local/typo3.blog/post">http://dev.tutorial.local/typo3.blog/post</a>:</p>
<div class="figure">
<a href="_Resources/Persistent/97253d873ccd3b525ed598fe1e308f2788927e6b/PostIndex.png" data-lightbox="image-534852ad555c7"><img alt="The list of blog posts" class="screenshot-fullsize" src="_Resources/Persistent/39a82456c81f6f7fed853951ac77fc597038fc93/PostIndex.png" style="width: 710px" /></a>
<p class="caption">The list of blog posts</p>
</div>
<p>Creating a new post won&#8217;t work yet because, you even though there exists a <tt class="docutils literal"><span class="pre">newAction</span></tt> already, the template for it doesn&#8217;t contain a <tt class="docutils literal"><span class="pre">mainbox</span></tt> section yet:</p>
<div class="figure">
<a href="_Resources/Persistent/40c71dff35a88a04bfa8c4b7d476d9a309faa98f/NoNewActionMainbox.png" data-lightbox="image-534852ad57166"><img alt="Error on missing &quot;mainbox&quot; section" class="screenshot-fullsize" src="_Resources/Persistent/d282422e6337ea117d8845cf48339ee1514cb62a/NoNewActionMainbox.png" style="width: 710px" /></a>
<p class="caption">Error on missing &#8220;mainbox&#8221; section</p>
</div>
</div>
<div class="section" id="forms">
<h2>Forms</h2>
<div class="section" id="create-a-new-post">
<h3>Create a New Post</h3>
<p>Time to create a form which allows you to enter details for a new post.
The first component you need is the <tt class="docutils literal"><span class="pre">newAction</span></tt> whose sole purpose is
displaying the form:</p>
<p>Classes/TYPO3/Blog/Controller/PostController.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Shows a form for creating a new post object</span>
<span class="sd"> *</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">newAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$blog</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">findActive</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;blog&#39;</span><span class="p">,</span> <span class="nv">$blog</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>No code? Almost no code. What will happen is this: the action controller selects the
<tt class="docutils literal"><span class="pre">New.html</span></tt> template and assigns it to <tt class="docutils literal"><span class="pre">$this-&gt;view</span></tt> which will automatically
be rendered after <tt class="docutils literal"><span class="pre">newAction</span></tt> has been called. That&#8217;s enough for displaying
the form. The only thing we need to assign here is the <tt class="docutils literal"><span class="pre">blog</span></tt>, otherwise the title
and description in our header (defined in <tt class="docutils literal"><span class="pre">Master.html</span></tt>) would be empty.</p>
<p>The second component is the actual form. Adjust the template  <tt class="docutils literal"><span class="pre">New.html</span></tt> in
the <tt class="docutils literal"><span class="pre">Resources/Public/Templates/Post/</span></tt> folder:</p>
<p>Resources/Public/Templates/Post/New.html:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:layout</span> <span class="na">name=</span><span class="s">&quot;Default&quot;</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;f:section</span> <span class="na">name=</span><span class="s">&quot;mainbox&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;flow-firstHeader&quot;</span><span class="nt">&gt;</span>Create a new post<span class="nt">&lt;/h2&gt;</span>
        <span class="nt">&lt;f:flashMessages</span> <span class="na">class=</span><span class="s">&quot;flashmessages&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;f:form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;create&quot;</span> <span class="na">object=</span><span class="s">&quot;{newPost}&quot;</span> <span class="na">name=</span><span class="s">&quot;newPost&quot;</span> <span class="na">enctype=</span><span class="s">&quot;multipart/form-data&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;f:form.hidden</span> <span class="na">name=</span><span class="s">&quot;blog&quot;</span> <span class="na">value=</span><span class="s">&quot;{blog}&quot;</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;author&quot;</span><span class="nt">&gt;</span>Author<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;f:form.textfield</span> <span class="na">property=</span><span class="s">&quot;author&quot;</span> <span class="na">id=</span><span class="s">&quot;author&quot;</span> <span class="nt">/&gt;&lt;br</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>Title<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;f:form.textfield</span> <span class="na">property=</span><span class="s">&quot;title&quot;</span> <span class="na">id=</span><span class="s">&quot;title&quot;</span> <span class="nt">/&gt;&lt;br</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;linkTitle&quot;</span><span class="nt">&gt;</span>Link Title (optional)<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;f:form.textfield</span> <span class="na">property=</span><span class="s">&quot;linkTitle&quot;</span> <span class="na">id=</span><span class="s">&quot;linkTitle&quot;</span> <span class="nt">/&gt;&lt;br</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>Content<span class="nt">&lt;/label&gt;&lt;br</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;f:form.textarea</span> <span class="na">property=</span><span class="s">&quot;content&quot;</span> <span class="na">rows=</span><span class="s">&quot;5&quot;</span> <span class="na">cols=</span><span class="s">&quot;40&quot;</span> <span class="na">id=</span><span class="s">&quot;content&quot;</span> <span class="nt">/&gt;&lt;br</span> <span class="nt">/&gt;</span>
                <span class="nt">&lt;f:form.submit</span> <span class="na">value=</span><span class="s">&quot;Submit post&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/f:form&gt;</span>
<span class="nt">&lt;/f:section&gt;</span>
</pre></div>
</div>
<p>Here is how it works: The <tt class="docutils literal"><span class="pre">&lt;f:form&gt;</span></tt> view helper renders a form tag. Its
attributes are similar to the action link view helper you might have seen in
previous examples: <tt class="docutils literal"><span class="pre">action</span></tt> specifies the action to be called on submission
of the form, <tt class="docutils literal"><span class="pre">controller</span></tt> would specify the controller and <tt class="docutils literal"><span class="pre">package</span></tt> the
package respectively. If <tt class="docutils literal"><span class="pre">controller</span></tt> or <tt class="docutils literal"><span class="pre">package</span></tt> are not set, the URI
builder will assume the current controller or package respectively.
<tt class="docutils literal"><span class="pre">name</span></tt> finally declares the name of the form and at the same time specifies
<strong>the name of the action method argument</strong> which will receive the form values.</p>
<p>It is important to know that the whole form is (usually) bound to one object
and that the values of the form&#8217;s elements become property values of
this object. In this example the form contains (property) values for a
post object. The form&#8217;s elements are named after the class properties of the
<tt class="docutils literal"><span class="pre">Post</span></tt> domain model: <tt class="docutils literal"><span class="pre">blog</span></tt>, <tt class="docutils literal"><span class="pre">author</span></tt>, <tt class="docutils literal"><span class="pre">title</span></tt>, <tt class="docutils literal"><span class="pre">content</span></tt> and
<tt class="docutils literal"><span class="pre">relatedPosts</span></tt>. Let&#8217;s look at the <tt class="docutils literal"><span class="pre">createAction</span></tt> again:</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Mind that <tt class="docutils literal"><span class="pre">newPost</span></tt> is not assigned to the view in this example. Assigning
this object is only needed if you have set default values to your model
properties. So if you for example have a <tt class="docutils literal"><span class="pre">protected</span> <span class="pre">$foo</span> <span class="pre">=</span> <span class="pre">TRUE</span></tt>
definition in your model, a <tt class="docutils literal"><span class="pre">&lt;f:form.checkbox</span> <span class="pre">property=&quot;foo&quot;</span> <span class="pre">/&gt;</span></tt> will not
be checked by default, unless you instantiate <tt class="docutils literal"><span class="pre">$newPost</span></tt> in your index
action and assign it to the view.</p>
</div>
<p>Classes/TYPO3/Blog/Controller/PostController.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Creates a new post</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $post</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">createAction</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$newPost</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$blog</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">findActive</span><span class="p">();</span>
        <span class="nv">$blog</span><span class="o">-&gt;</span><span class="na">addPost</span><span class="p">(</span><span class="nv">$newPost</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">postRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$newPost</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Created a new post.&#39;</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>It&#8217;s important that the <tt class="docutils literal"><span class="pre">createAction</span></tt> uses the type hint
<tt class="docutils literal"><span class="pre">\TYPO3\Blog\Domain\Model\Post</span></tt> and comes with a proper <tt class="docutils literal"><span class="pre">&#64;param</span></tt> annotation
because this is how TYPO3 Flow determines the type to which the submitted form
values must be converted. Because this action requires a <tt class="docutils literal"><span class="pre">Post</span></tt> it gets a
post (object) - as long as the property names of the object and the form match.</p>
<p>Time to test your new <tt class="docutils literal"><span class="pre">newAction</span></tt> and its template – click on the little plus
sign above the first post lets the <tt class="docutils literal"><span class="pre">newAction</span></tt> render this form:</p>
<div class="figure">
<img alt="Form to create a new post" class="screenshot-detail" src="_Resources/Persistent/5ddd1697d21682a06d962f252fd156399aa2cf41/CreateNewPost.png" style="width: 508px" />
<p class="caption">Form to create a new post</p>
</div>
<p>Enter some data and click the submit button:</p>
<div class="figure">
<a href="_Resources/Persistent/cca8533005ac04bf10b7b5fe7ad7ab7e4084e053/CreatedNewPost.png" data-lightbox="image-534852ad59ed5"><img alt="A new post has been created" class="screenshot-fullsize" src="_Resources/Persistent/1a85642b88aeb133aa069d802b7e86167311a4de/CreatedNewPost.png" style="width: 710px" /></a>
<p class="caption">A new post has been created</p>
</div>
<p>You should now find your new post in the list of posts.</p>
</div>
<div class="section" id="edit-a-post">
<h3>Edit a Post</h3>
<p>While you&#8217;re dealing with forms you should also create form for editing an
existing post. The <tt class="docutils literal"><span class="pre">editAction</span></tt> will display this form.</p>
<p>This is pretty straight forward: we add a link to each post in the Index.html
template which passes an argument <tt class="docutils literal"><span class="pre">$post</span></tt> to the edit action and the action
on its part assigns the blog to the template.</p>
<p>First you need to add the &#8220;edit&#8221; link to the post index template:</p>
<p>Resources/Public/Templates/Post/Index.html:</p>
<div class="highlight-xml"><div class="highlight"><pre>...
                <span class="nt">&lt;h2&gt;</span>
                        <span class="nt">&lt;f:link.action</span> <span class="na">action=</span><span class="s">&quot;show&quot;</span> <span class="na">controller=</span><span class="s">&quot;Post&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{post: post}&quot;</span><span class="nt">&gt;</span>{post.title}<span class="nt">&lt;/f:link.action&gt;</span>
                        <span class="nt">&lt;f:link.action</span> <span class="na">action=</span><span class="s">&quot;edit&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{post: post}&quot;</span> <span class="na">controller=</span><span class="s">&quot;Post&quot;</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;{f:uri.resource(path: &#39;Icons/FamFamFam/page_edit.png&#39;)}&quot;</span> <span class="na">title=</span><span class="s">&quot;Edit this post&quot;</span><span class="nt">/&gt;</span>
                        <span class="nt">&lt;/f:link.action&gt;</span>
                <span class="nt">&lt;/h2&gt;</span>
...
</pre></div>
</div>
<p>The modified template will now render a little pencil next to each post:</p>
<div class="figure">
<img alt="Edit links next to posts" class="screenshot-detail" src="_Resources/Persistent/c8d6759de09907ef0eb17f2d77ff98084d3063b3/PostEditLink.png" style="width: 507px" />
<p class="caption">Edit links next to posts</p>
</div>
<p>Adjust the template <tt class="docutils literal"><span class="pre">Templates/Post/Edit.html</span></tt> and insert the following
HTML code:</p>
<p>Resources/Public/Templates/Post/Edit.html:</p>
<div class="highlight-html"><div class="highlight"><pre>&lt;f:layout name=&quot;Default&quot; /&gt;

&lt;f:section name=&quot;mainbox&quot;&gt;
        &lt;h2 class=&quot;flow-firstHeader&quot;&gt;Edit post &quot;{post.title}&quot;&lt;/h2&gt;
        &lt;f:form method=&quot;post&quot; action=&quot;update&quot; object=&quot;{post}&quot; name=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
                &lt;label for=&quot;author&quot;&gt;Author&lt;/label&gt;&lt;br /&gt;
                &lt;f:form.textfield property=&quot;author&quot; id=&quot;author&quot; /&gt;&lt;br /&gt;
                &lt;label for=&quot;title&quot;&gt;Title&lt;/label&gt;&lt;br /&gt;
                &lt;f:form.textfield property=&quot;title&quot; id=&quot;title&quot; /&gt;&lt;br /&gt;
                &lt;label for=&quot;linkTitle&quot;&gt;Link Title (optional)&lt;/label&gt;&lt;br /&gt;
                &lt;f:form.textfield property=&quot;linkTitle&quot; id=&quot;linkTitle&quot; /&gt;&lt;br /&gt;
                &lt;label for=&quot;content&quot;&gt;Content&lt;/label&gt;&lt;br /&gt;
                &lt;f:form.textarea property=&quot;content&quot; rows=&quot;5&quot; cols=&quot;40&quot; id=&quot;content&quot; /&gt;&lt;br /&gt;
                &lt;f:form.submit value=&quot;Update&quot;/&gt;
        &lt;/f:form&gt;
&lt;/f:section&gt;
</pre></div>
</div>
<p>Most of this should already look familiar. However, there is a tiny difference
to the <tt class="docutils literal"><span class="pre">new</span></tt> form you created earlier: in this edit form you added
<tt class="docutils literal"><span class="pre">object=&quot;{post}&quot;</span></tt> to the <tt class="docutils literal"><span class="pre">&lt;f:form&gt;</span></tt> tag. This attribute binds the variable
<tt class="docutils literal"><span class="pre">{post}</span></tt> to the form and it simplifies the further definition of the
form&#8217;s elements. Each element – in our case the text box and the text
area – comes with a <tt class="docutils literal"><span class="pre">property</span></tt> attribute declaring the name of the property
which is supposed to be displayed and edited by the respective element.</p>
<p>Because you specified <tt class="docutils literal"><span class="pre">property=&quot;title&quot;</span></tt> for the text box, Fluid will fetch
the value of the post&#8217;s <tt class="docutils literal"><span class="pre">title</span></tt> property and display it as the default value
for the rendered text box. The resulting <tt class="docutils literal"><span class="pre">input</span></tt> tag will also contain the
name <tt class="docutils literal"><span class="pre">&quot;title&quot;</span></tt> due to the <tt class="docutils literal"><span class="pre">property</span></tt> attribute you defined. The <tt class="docutils literal"><span class="pre">id</span></tt>
attribute only serves as a target for the <tt class="docutils literal"><span class="pre">label</span></tt> tag and is not required
by Fluid.</p>
<p>What&#8217;s missing now is a small adjustment to the PHP code displaying the edit form:</p>
<p>Classes/TYPO3/Blog/Controller/PostController.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Shows a form for editing an existing post object</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $post The post to edit</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">editAction</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$blog</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">findActive</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;blog&#39;</span><span class="p">,</span> <span class="nv">$blog</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Enough theory, let&#8217;s try out the edit form in practice. A click on the edit
link of your list of posts should result in a screen similar to this:</p>
<div class="figure">
<a href="_Resources/Persistent/bddce91e1c5df56d1f44af1baba650e827a2cad2/EditPost.png" data-lightbox="image-534852ad5cb60"><img alt="The edit form for a post" class="screenshot-fullsize" src="_Resources/Persistent/7e9f25642b7dbf329de9aa5660be2ef93b31638e/EditPost.png" style="width: 710px" /></a>
<p class="caption">The edit form for a post</p>
</div>
<p>When you submit the form you call the <tt class="docutils literal"><span class="pre">updateAction</span></tt>:</p>
<p>Classes/TYPO3/Blog/Controller/PostController.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Updates the given post object</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $post The post to update</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">updateAction</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">postRepository</span><span class="o">-&gt;</span><span class="na">update</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Updated the post.&#39;</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Quite easy as well, isn&#8217;t it? The <tt class="docutils literal"><span class="pre">updateAction</span></tt> expects the edited post as
its argument and passes it to the repository&#8217;s <tt class="docutils literal"><span class="pre">update</span></tt> method (note that we
used the <tt class="docutils literal"><span class="pre">PostRepository</span></tt>!). Before we disclose the secret how this magic
actually works behind the scenes try out if updating the post really works:</p>
<div class="figure">
<img alt="The post has been edited" class="screenshot-detail" src="_Resources/Persistent/944d34ba2992adedbe476c4abe19a7afd895f3f9/UpdatedPost.png" style="width: 481px" />
<p class="caption">The post has been edited</p>
</div>
</div>
<div class="section" id="a-closer-look-on-updates">
<h3>A Closer Look on Updates</h3>
<p>Although updating objects is very simple on the user&#8217;s side (that&#8217;s where
you live), it is a bit complex on behalf of the framework. You may skip this
section if you like - but if you dare to take a quick look behind the scenes to
get a better understanding of the mechanism  behind the <tt class="docutils literal"><span class="pre">updateAction</span></tt>
read on ...</p>
<p>The <tt class="docutils literal"><span class="pre">updateAction</span></tt> expects one argument, namely the <strong>edited post</strong>. &#8220;Edited
post&#8221; means that this is a <tt class="docutils literal"><span class="pre">Post</span></tt> object which already contains the values
submitted by the edit form.</p>
<p>These modifications will <strong>not be persisted</strong> automatically. To persist the
changes to the post object, call the PostRepository&#8217;s <tt class="docutils literal"><span class="pre">update</span></tt> method. It schedules
an object for the dirty check at the end of the request.</p>
<p>If all these details didn&#8217;t scare you, you might now ask yourself how TYPO3 Flow
could know that the <tt class="docutils literal"><span class="pre">updateAction</span></tt> expects a modified object and not the original?
Great question. And the answer is – literally – hidden in the form generated
by Fluid&#8217;s form view helper:</p>
<p>HTML Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;post/update&quot;</span><span class="o">&gt;</span>
   <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;post[__identity]&quot;</span>
                <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;2d064493-ce45-4bc9-9d0c-38e40f2c4afe&quot;</span> <span class="o">/&gt;</span>
   <span class="o">...</span>
<span class="o">&lt;/</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Fluid automatically renders a hidden field containing information about the
technical identity of the form&#8217;s object, if the object is an original, previously
retrieved from a repository.</p>
<p>On receiving a request, the MVC framework checks if a special identity field
(such as the above hidden field) is present and if further properties have been
submitted. This results in three different cases:</p>
<table border="1" class="docutils">
<caption>Create, Show, Update detection</caption>
<colgroup>
<col width="26%" />
<col width="21%" />
<col width="53%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Situation</th>
<th class="head">Case</th>
<th class="head">Consequence</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>identity missing,
properties present</td>
<td>New /
Create</td>
<td>Create a completely new object and
set the given properties</td>
</tr>
<tr class="row-odd"><td>identity present,
properties missing</td>
<td>Show /
Delete / ...</td>
<td>Retrieve original object with
given identifier</td>
</tr>
<tr class="row-even"><td>identity present,
properties present</td>
<td>Edit /
Update</td>
<td>Retrieve original object, and set the
given properties</td>
</tr>
</tbody>
</table>
<p>Because the edit form contained both identity and properties, TYPO3 Flow prepared an
instance with the given properties for our <tt class="docutils literal"><span class="pre">updateAction</span></tt>.</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="2a622dc4-fe6a-022a-7992-09c866b00741" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="e7738989-e75b-f38e-950c-1524b7401139" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="validation" locale="">
       <properties>
        <title>Validation</title>
       </properties>
       <node identifier="b0137282-7ad6-75ff-a77f-b34de050d843" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="cd46386e-d132-b880-2382-3351db822c70" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="validation">
<h1>Validation</h1>
<p>Hopefully the examples of the previous chapters made you shudder or at least
raised some questions. Although it&#8217;s surely nice to have one-liners for actions
like <tt class="docutils literal"><span class="pre">create</span></tt> and <tt class="docutils literal"><span class="pre">update</span></tt> we need some more code to validate the incoming
values before they are eventually persisted. You need to make sure  that a post
title only consists of regular characters and spaces, at least 3 and at maximum
50 (depending on your preference) and doesn&#8217;t contain any HTML or other
evil markup.</p>
<p>But do you really want all these checks in your action methods? Shouldn&#8217;t we
rather separate the concerns <a class="footnote-reference" href="#id2" id="id1">[1]</a> of the action methods (show, create,
update, ...) from others like validation, logging and security?</p>
<p>Fortunately TYPO3 Flow&#8217;s validation framework doesn&#8217;t ask you to add any additional
PHP code to your action methods. Validation has been extracted as a separated
concern which does it&#8217;s job almost transparently to the developer.</p>
<div class="section" id="declaring-validation-rules">
<h2>Declaring Validation Rules</h2>
<p>When we&#8217;re talking about validation, we usually refer to validating <strong>models</strong>.
The rules defining how a model should be validated can be classified into
three types:</p>
<ul class="simple">
<li><strong>Base Properties</strong> – a set of rules defining the minimum requirements
on the properties of a model which must be met before a model may
be persisted.</li>
<li><strong>Base Model</strong> – a set of rules or custom validator enforcing the
minimum requirements on the combination of properties of a model which
must be met before a model may be persisted.</li>
<li><strong>Supplemental</strong> – a set of rules defining additional requirements on
a model for a specific situation, for example for a certain
action method.</li>
</ul>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Base model and supplemental rules are not covered by this tutorial.</p>
</div>
<p>Rules for the base properties are defined directly in the model in form
of annotations:</p>
<p>Classes/TYPO3/Blog/Domain/Model/Post.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @var string</span>
<span class="sd"> * @Flow\Validate(type=&quot;NotEmpty&quot;)</span>
<span class="sd"> * @Flow\Validate(type=&quot;StringLength&quot;, options={ &quot;minimum&quot;=5, &quot;maximum&quot;=100 })</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$title</span><span class="p">;</span>

<span class="o">...</span>

<span class="sd">/**</span>
<span class="sd"> * @var string</span>
<span class="sd"> * @Flow\Validate(type=&quot;NotEmpty&quot;)</span>
<span class="sd"> * @Flow\Validate(type=&quot;StringLength&quot;, options={ &quot;minimum&quot;=2, &quot;maximum&quot;=50 })</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$author</span><span class="p">;</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">Validate</span></tt> annotations define one or more validation rules which should apply to a
property. Multiple rules can be defined in dedicated lines by further <tt class="docutils literal"><span class="pre">Validate</span></tt>
annotations.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>Per convention, every validator allows (passes) empty values, i.e. empty strings or
NULL values. This is for achieving fields which are not mandatory, but if filled in,
must satisfy a given validation. Consider an email address field for example which
is not mandatory, but has to match an email pattern as soon as filled in.</p>
<p>If you want to make a field mandatory at all, use the <tt class="docutils literal"><span class="pre">NotEmpty</span></tt> validator in addition,
like in the example above.</p>
<p class="last">The technical background is the <tt class="docutils literal"><span class="pre">acceptsEmptyValues</span></tt> property of the AbstractValidator,
being <tt class="docutils literal"><span class="pre">TRUE</span></tt> per default. When writing customized validators, it&#8217;s basically possible
to set this field to <tt class="docutils literal"><span class="pre">FALSE</span></tt>, however this is not generally recommended due to the convention
that every validator could principally be empty.</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>TYPO3 Flow provides a range of built-in validators which can be found in the
FlowValidationValidator sub package. The names used in the
<tt class="docutils literal"><span class="pre">type</span></tt> attributes are just the unqualified class names of these validators.</p>
<p class="last">It is possible and very simple to program custom validators by implementing
the <tt class="docutils literal"><span class="pre">TYPO3\Flow\Validation\Validator\ValidatorInterface</span></tt>.
Such validators must, however, be referred to by their fully qualified
class name (i.e. including the namespace).</p>
</div>
<p>Make sure the above validation rules are set in your <tt class="docutils literal"><span class="pre">Post</span></tt> model, click on the
plus sign above the list of posts and submit the empty form. If all went fine,
you should end up again in the <strong>new post</strong> form, with the tiny difference
that the text boxes for title and author are now framed in red:</p>
<div class="figure">
<img alt="Validation errors shown in form" class="screenshot-detail" src="_Resources/Persistent/65d9a417a9174d0b792ac5cc7b05cccd170975bc/CreateNewPostValidationError1.png" style="width: 422px" />
<p class="caption">Validation errors shown in form</p>
</div>
</div>
<div class="section" id="displaying-validation-errors">
<h2>Displaying Validation Errors</h2>
<p>The validation rules seem to be in effect but the output could be a bit more
meaningful. Please open the New.html template file again because we&#8217;d like
to display a list of error messages for exactly this case when the form has
been submitted but contained errors.</p>
<p>Fluid comes with a specialized view helper which allows for iterating over
validation errors. Just add the <tt class="docutils literal"><span class="pre">&lt;f:form.errors&gt;</span></tt> view helper to your
New.html template as shown in this example:</p>
<p>Resources/Private/Templates/Post/New.html:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:layout</span> <span class="na">name=</span><span class="s">&quot;Default&quot;</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;f:section</span> <span class="na">name=</span><span class="s">&quot;mainbox&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;flow-firstHeader&quot;</span><span class="nt">&gt;</span>Create a new post<span class="nt">&lt;/h2&gt;</span>
        <span class="nt">&lt;f:flashMessages</span> <span class="na">class=</span><span class="s">&quot;flashmessages&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;f:form.validationResults</span> <span class="na">for=</span><span class="s">&quot;newPost&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;f:if</span> <span class="na">condition=</span><span class="s">&quot;{validationResults.flattenedErrors}&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;dl&gt;</span>
                                        <span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{validationResults.flattenedErrors}&quot;</span> <span class="na">key=</span><span class="s">&quot;propertyPath&quot;</span> <span class="na">as=</span><span class="s">&quot;errors&quot;</span><span class="nt">&gt;</span>
                                                <span class="nt">&lt;dt&gt;</span>{propertyPath}<span class="nt">&lt;/dt&gt;</span>
                                                <span class="nt">&lt;dd&gt;</span>
                                                        <span class="nt">&lt;ul&gt;</span>
                                                                <span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{errors}&quot;</span> <span class="na">as=</span><span class="s">&quot;error&quot;</span><span class="nt">&gt;</span>
                                                                        <span class="nt">&lt;li&gt;</span>{error -&gt; f:translate(id: error.code, arguments: error.arguments, package: &#39;TYPO3.Flow&#39;, source: &#39;ValidationErrors&#39;)}<span class="nt">&lt;/li&gt;</span>
                                                                <span class="nt">&lt;/f:for&gt;</span>
                                                        <span class="nt">&lt;/ul&gt;</span>
                                                <span class="nt">&lt;/dd&gt;</span>
                                        <span class="nt">&lt;/f:for&gt;</span>
                                <span class="nt">&lt;/dl&gt;</span>
                        <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;/f:if&gt;</span>
        <span class="nt">&lt;/f:form.validationResults&gt;</span>

...
</pre></div>
</div>
<p>Similar to the <tt class="docutils literal"><span class="pre">&lt;f:for&gt;</span></tt> view helper <tt class="docutils literal"><span class="pre">&lt;f:form.errors&gt;</span></tt> defines a loop
iterating over validation errors. The attribute <tt class="docutils literal"><span class="pre">as</span></tt> is optional and if it&#8217;s
not specified (like in the above example) <tt class="docutils literal"><span class="pre">as=&quot;error&quot;</span></tt> is assumed.</p>
<p>To clearly understand this addition to the template you need to know that
errors can be nested: There is a global error object containing the errors of
the different domain objects (such as <tt class="docutils literal"><span class="pre">newPost</span></tt>) which contain errors for
each property which in turn can be multiple errors per property.</p>
<p>After saving the modified template and submitting the empty form again you
should see some more verbose error messages:</p>
<div class="figure">
<img alt="More verbose validation errors shown in form" class="screenshot-detail" src="_Resources/Persistent/abf71451fa99d2d6f17ffed18335da4930425a17/CreateNewPostValidationError2.png" style="width: 484px" />
<p class="caption">More verbose validation errors shown in form</p>
</div>
</div>
<div class="section" id="validating-updated-arguments">
<h2>Validating Updated Arguments</h2>
<p>Now that you know how validation errors can be displayed, you should add a
<tt class="docutils literal"><span class="pre">&lt;f:form.errors&gt;</span></tt> view helper to the Edit.html template as well:</p>
<p>Resources/Private/Templates/Post/Edit.html:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:layout</span> <span class="na">name=</span><span class="s">&quot;Default&quot;</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;f:section</span> <span class="na">name=</span><span class="s">&quot;mainbox&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;flow-firstHeader&quot;</span><span class="nt">&gt;</span>Edit post <span class="ni">&amp;quot;</span>{post.title}<span class="ni">&amp;quot;</span><span class="nt">&lt;/h2&gt;</span>
        <span class="nt">&lt;f:flashMessages</span> <span class="na">class=</span><span class="s">&quot;flashmessages&quot;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;f:form.validationResults</span> <span class="na">for=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;f:if</span> <span class="na">condition=</span><span class="s">&quot;{validationResults.flattenedErrors}&quot;</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{validationResults.flattenedErrors}&quot;</span> <span class="na">key=</span><span class="s">&quot;propertyPath&quot;</span> <span class="na">as=</span><span class="s">&quot;errors&quot;</span><span class="nt">&gt;</span>{propertyPath}: <span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{errors}&quot;</span> <span class="na">as=</span><span class="s">&quot;error&quot;</span><span class="nt">&gt;</span>{error}<span class="nt">&lt;/f:for&gt;&lt;/f:for&gt;</span>
                        <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;/f:if&gt;</span>
        <span class="nt">&lt;/f:form.validationResults&gt;</span>

...
</pre></div>
</div>
<p>Try updating a post with an empty title and you should see the following:</p>
<div class="figure">
<img alt="Infinite loop in update action" class="screenshot-detail" src="_Resources/Persistent/842a6e7ebb7666564fd32755e4a8e58f80187a87/UpdateActionInfiniteLoop.png" style="width: 608px" />
<p class="caption">Infinite loop in update action</p>
</div>
<p>Can you imagine what happened? Let&#8217;s look at the <tt class="docutils literal"><span class="pre">editAction</span></tt> again:</p>
<p>Classes/TYPO3/Blog/Controller/PostController.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Shows a form for editing an existing post object</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $post The post to edit</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">editAction</span><span class="p">(</span><span class="nx">Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$blog</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">findActive</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;blog&#39;</span><span class="p">,</span> <span class="nv">$blog</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>When you started to edit the post, the <tt class="docutils literal"><span class="pre">editAction</span></tt> received the original
<tt class="docutils literal"><span class="pre">Post</span></tt> object as its argument. The object was assigned to the Fluid template
which displayed its current property values. Now you submitted the form with an
empty title resulting in a new request, this time with the <tt class="docutils literal"><span class="pre">updateAction</span></tt> as
its target.</p>
<p>Before the <tt class="docutils literal"><span class="pre">updateAction</span></tt> could be called, TYPO3 Flow analyzed the
incoming request. And because it recognized one argument as a <tt class="docutils literal"><span class="pre">Post</span></tt> object,
it invoked the respective validation rules – which failed due to the
empty title. In these cases TYPO3 Flow forwards the request to the referring action
which is, in this case, the <tt class="docutils literal"><span class="pre">editAction</span></tt>.</p>
<p>The <tt class="docutils literal"><span class="pre">editAction</span></tt> expects a (valid) post as its argument but unfortunately the
post is not valid. Because for TYPO3 Flow this action call is like any other action
call it does not execute the <tt class="docutils literal"><span class="pre">editAction</span></tt> but instead tries to dispatch the
request to another action which can handle the error. This is, unfortunately,
still the <tt class="docutils literal"><span class="pre">editAction</span></tt> which in the end results in an infinite loop.</p>
<p>So the problem is that TYPO3 Flow tries to validate the <tt class="docutils literal"><span class="pre">$post</span></tt> argument for the
<tt class="docutils literal"><span class="pre">editAction</span></tt> although we don&#8217;t need a valid post at this point. What&#8217;s
important is that the post submitted to``updateAction`` or <tt class="docutils literal"><span class="pre">createAction</span></tt> is
valid, but we don&#8217;t really care about the <tt class="docutils literal"><span class="pre">editAction</span></tt> or <tt class="docutils literal"><span class="pre">newAction</span></tt> which
only displays the form.</p>
<p>There&#8217;s a very simple remedy to this problem: don&#8217;t validate the post. With one
additional annotation the whole mechanism works as expected:</p>
<p>Classes/TYPO3/Blog/Controller/PostController.php:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Shows a form for editing an existing post object</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $post The post to edit</span>
<span class="sd"> * @Flow\IgnoreValidation(&quot;$post&quot;)</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">editAction</span><span class="p">(</span><span class="nx">Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$blog</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">blogRepository</span><span class="o">-&gt;</span><span class="na">findActive</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;blog&#39;</span><span class="p">,</span> <span class="nv">$blog</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Now the <tt class="docutils literal"><span class="pre">editAction</span></tt> can be called even though <tt class="docutils literal"><span class="pre">$post</span></tt> is not valid and the
error message is displayed above the edit form.</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>See also: <a class="reference external" href="http://en.wikipedia.org/wiki/Separation_of_concerns">Separation of Concerns (Wikipedia)</a></td></tr>
</tbody>
</table>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="a449a779-4f73-c567-6c0d-65f8c745fbbc" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="5e574be1-a275-8ecc-7ea0-fb59034361ce" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="routing" locale="">
       <properties>
        <title>Routing</title>
       </properties>
       <node identifier="4290ac9a-1d48-9664-a4d4-bd78e04ce3ec" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="d7bb9354-2829-2dcc-f48f-38428973f3b7" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="routing">
<h1>Routing</h1>
<p>Although the basic functions like creating or updating a post work well
already, the URIs still have a little blemish. The index of posts can only be
reached by the cumbersome address <a class="reference external" href="http://dev.tutorial.local/typo3.blog/post">http://dev.tutorial.local/typo3.blog/post</a>
and the URL for editing a post refers to the post&#8217;s UUID instead of the
human-readable identifier.</p>
<p>TYPO3 Flow&#8217;s routing mechanism allows for beautifying these URIs by simple but
powerful configuration options.</p>
<div class="section" id="post-index-route">
<h2>Post Index Route</h2>
<p>Our first task is to simplify accessing the list of posts. For that you need to
edit a file called Routes.yaml in the global Configuration/ directory
(located at the same level like the Data and Packages directories).
This file already contains a few routes which we ignore for the time being.</p>
<p>Please insert the following configuration at the top of the file (before the
TYPO3CR route) and make sure that you use spaces exactly like in the example
(remember, spaces have a meaning in YAML files and tabs are not allowed):</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Post</span><span class="nv"> </span><span class="s">index&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span>    <span class="s">&#39;posts&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;TYPO3.Blog&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Post&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;index&#39;</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;html&#39;</span>
</pre></div>
</div>
<p>This configuration adds a new route to the list of routes (<tt class="docutils literal"><span class="pre">-</span></tt> creates a new
list item). The route becomes active if a requests matches the pattern defined
by the <tt class="docutils literal"><span class="pre">uriPattern</span></tt>. In this example the URI <a class="reference external" href="http://dev.tutorial.local/posts">http://dev.tutorial.local/posts</a>
would match.</p>
<p>If the URI matches, the route&#8217;s default values for package, controller action
and format are set and the request dispatcher will choose the right
controller accordingly.</p>
<p>Try calling <a class="reference external" href="http://dev.tutorial.local/posts">http://dev.tutorial.local/posts</a> now –
you should see the list of posts produced by the <tt class="docutils literal"><span class="pre">PostController</span></tt>&#8216;s
<tt class="docutils literal"><span class="pre">indexAction</span></tt>.</p>
</div>
<div class="section" id="composite-routes">
<h2>Composite Routes</h2>
<p>As you can imagine, you rarely define only one route per package and storing
all routes in one file can easily become confusing. To keep the global
Routes.yaml clean you may define sub routes which include - if their own URI
pattern matches - further routes provided by your package.</p>
<p>The Flow sub route configuration for example includes further routes if
the URI path starts with the string &#8216;<tt class="docutils literal"><span class="pre">TYPO3CR</span></tt>&#8216;. Only the URI part contained
in the less-than and greater-than signs will be passed to the sub routes:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="c1">##</span>
<span class="c1"># Flow subroutes</span>
<span class="c1">#</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Flow&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;&lt;FlowSubroutes&gt;&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;html&#39;</span>
  <span class="l-Scalar-Plain">subRoutes</span><span class="p-Indicator">:</span>
    <span class="s">&#39;FlowSubroutes&#39;</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">package</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3.Flow&#39;</span>
</pre></div>
</div>
<p>Let&#8217;s define a similar configuration for the Blog package. Please replace
the YAML code you just inserted (the blog index route) by the following sub
route configuration:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="c1">##</span>
<span class="c1"># Blog subroutes</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Blog&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;&lt;BlogSubroutes&gt;&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3.Blog&#39;</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span>  <span class="s">&#39;html&#39;</span>
  <span class="l-Scalar-Plain">subRoutes</span><span class="p-Indicator">:</span>
    <span class="s">&#39;BlogSubroutes&#39;</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">package</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3.Blog&#39;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">We use &#8220;<tt class="docutils literal"><span class="pre">BlogSubroutes</span></tt>&#8221; here as name for the sub routes. You can name this as you like but it has to be
the same in <tt class="docutils literal"><span class="pre">uriPattern</span></tt> and <tt class="docutils literal"><span class="pre">subRoutes</span></tt>.</p>
</div>
<p>For this to work you need to create a new Routes.yaml file in the
Configuration folder of your Blog package
(Packages/Application/TYPO3.Blog/Configuration/Routes.yaml) and paste the
route you already created:</p>
<p>Configuration/Routes.yaml:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="c1">#                                                                        #</span>
<span class="c1"># Routes configuration for the Blog package                              #</span>
<span class="c1">#                                                                        #</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Post</span><span class="nv"> </span><span class="s">index&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span>    <span class="s">&#39;posts&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;TYPO3.Blog&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Post&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;index&#39;</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;html&#39;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">As the defaults for <tt class="docutils literal"><span class="pre">&#64;package</span></tt> and <tt class="docutils literal"><span class="pre">&#64;format</span></tt> are already defined in the parent route,
you can omit them in the sub route.</p>
</div>
</div>
<div class="section" id="an-action-route">
<h2>An Action Route</h2>
<p>The URI pointing to the <tt class="docutils literal"><span class="pre">newAction</span></tt> is still <a class="reference external" href="http://dev.tutorial.local/typo3.blog/post/new">http://dev.tutorial.local/typo3.blog/post/new</a>
so let&#8217;s beautify the action URIs as well by inserting a new route before the
&#8216;<tt class="docutils literal"><span class="pre">Blogs</span></tt>&#8216; route:</p>
<p>Configuration/Routes.yaml:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Post</span><span class="nv"> </span><span class="s">actions&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span>    <span class="s">&#39;posts/{@action}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Post&#39;</span>
</pre></div>
</div>
<p>Reload the post index and check out the new URI of the <tt class="docutils literal"><span class="pre">createAction</span></tt> - it&#8217;s
a bit shorter now:</p>
<div class="figure">
<img alt="A nice &quot;create&quot; route" class="screenshot-detail" src="_Resources/Persistent/e7abaf99bd790bdf144a6b9a3b70cb1621c4128e/PostActionRoute1URI.png" style="width: 246px" />
<p class="caption">A nice &#8220;create&#8221; route</p>
</div>
<p>However, the edit link still looks it bit ugly:</p>
<div class="highlight-none"><div class="highlight"><pre>http://dev.tutorial.local/post/edit?post%5B__identity%5D=229e2b23-b6f3-4422-8b7a-efb196dbc88b
</pre></div>
</div>
<p>For getting rid of this long identifier we need the help of a new route that can handle
the post object.</p>
</div>
<div class="section" id="object-route-parts">
<h2>Object Route Parts</h2>
<p>Our goal is to produce an URI like:</p>
<div class="highlight-none"><div class="highlight"><pre>http://dev.tutorial.local/post/2010/01/18/post-title/edit
</pre></div>
</div>
<p>and use this as our edit link. That&#8217;s done by adding following route at the
<strong>top of the file</strong>:</p>
<p>Configuration/Routes.yaml:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Single</span><span class="nv"> </span><span class="s">post</span><span class="nv"> </span><span class="s">actions&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span>     <span class="s">&#39;posts/{post}/{@action}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span>  <span class="s">&#39;Post&#39;</span>
  <span class="l-Scalar-Plain">routeParts</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">post</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">objectType</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3\Blog\Domain\Model\Post&#39;</span>
      <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;{date:Y}/{date:m}/{date:d}/{title}&#39;</span>
</pre></div>
</div>
<p>The &#8220;<tt class="docutils literal"><span class="pre">Single</span> <span class="pre">post</span> <span class="pre">actions</span></tt>&#8221; route now handles all actions where a post needs to
be specified (i.e. show, edit, update and delete).</p>
<p>Finally, now that you copied and pasted so much code, you should try out the
new routing setup ...</p>
</div>
<div class="section" id="more-on-routing">
<h2>More on Routing</h2>
<p>The more an application grows, the more complex routing can become and
sometimes you&#8217;ll wonder which route TYPO3 Flow eventually chose. One way to get
this information is looking at the log file which is by default
located in Data/Logs/System_Development.log:</p>
<div class="figure">
<a href="_Resources/Persistent/8c1d9436839f24d47112ed9a9480e3e1a3513b6a/RoutingLogTail.png" data-lightbox="image-534852ac9aaa4"><img alt="Routing entries in the system log" class="screenshot-fullsize" src="_Resources/Persistent/a217972fc52d13397fc9071e59a8a7361233bc33/RoutingLogTail.png" style="width: 710px" /></a>
<p class="caption">Routing entries in the system log</p>
</div>
<p>More information on routing can be found in the <a class="reference internal" href="flow/references/the-definitive-guide/partii/../partiii/routing.html">The Definitive Guide</a>.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="602db520-7ef3-1a8f-df9a-a530b210e957" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="3c36cd62-7149-b9bb-357c-ad4d601a90b2" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="summary" locale="">
       <properties>
        <title>Summary</title>
       </properties>
       <node identifier="d3af5727-dcb1-fa33-4ca5-6b93ee9897bf" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="a2fa3f05-691d-1a31-655c-60401c66cbe7" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="summary">
<h1>Summary</h1>
<div class="section" id="next-steps">
<h2>Next Steps</h2>
<p>This is the end of the Getting Started Tutorial. You now have a first
impression of what a TYPO3 Flow application looks like and how the most important
modules of TYPO3 Flow work together.</p>
<p>You now have two options for delving further into TYPO3 Flow programming:</p>
<ul class="simple">
<li>Start completing the missing functionality on your own and while you
do, read further parts of the TYPO3 Flow reference manual</li>
<li>Install the finished blog example and explore its code by reading and
modifying it</li>
</ul>
<p>If you can&#8217;t wait to see the finished blog all you need to do is:</p>
<ul class="simple">
<li>Delete your blog package (that is Packages/Application/TYPO3.Blog/) and then</li>
<li>Clone the Blog package from git://git.typo3.org/Packages/TYPO3.Blog.git</li>
</ul>
</div>
<div class="section" id="feedback">
<h2>Feedback</h2>
<p>The TYPO3 Flow core team and I are curious about getting your feedback! If you have any
questions, are stuck at some point or just want to let me know how you liked the tutorial
please write to the
<a class="reference external" href="http://flow.typo3.org/support">TYPO3 Flow mailing list</a> or drop me a line via <a class="reference external" href="flow/references/the-definitive-guide/partii/mailto:robert&.html#37;&#52;&#48;typo3&#46;org">robert<span>&#64;</span>typo3<span>&#46;</span>org</a>.</p>
<p>And if you love TYPO3 Flow like we do, spread the word in your blog or through your
favorite social network ...</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="9ed484c2-78dd-a500-9a75-60254158484c" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
     </node>
     <node identifier="bfcfd58f-7230-9da7-824f-b135e1fc36e5" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="partiii" locale="">
      <properties>
       <title>Part III: Manual</title>
      </properties>
      <node identifier="96f56a9a-4f96-1b18-3eec-c70a10371f15" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="14afc7fb-aef1-2a33-d55b-5d32f1ec87ce" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="part-iii-manual">
<h1>Part III: Manual</h1>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/architecturaloverview.html">Architectural Overview</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/bootstrapping.html">Bootstrapping</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/packagemanagement.html">Package Management</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/configuration.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/objectmanagement.html">Object Framework</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/persistence.html">Persistence</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/http.html">HTTP Foundation</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/modelviewcontroller.html">Model View Controller</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/templating.html">Templating</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/validation.html">Validation</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/propertymapping.html">Property Mapping</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/resourcemanagement.html">Resource Management</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/routing.html">Routing</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/caching.html">Cache Framework</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/sessionhandling.html">Session Handling</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/commandline.html">Command Line</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/aspectorientedprogramming.html">Aspect-Oriented Programming</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/security.html">Security</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/internationalization.html">Internationalization &amp; Localization Framework</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/errorandexceptionhandling.html">Error and Exception Handling</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/logginganddebugging.html">Logging and Debugging (to be written)</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/signalsandslots.html">Signals and Slots</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/reflection.html">Reflection</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/filemonitoring.html">File Monitoring (to be written)</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/testing.html">Testing (to be written)</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partiii/utilityfunctions.html">Utility Functions</a></li>
</ul>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="2b072643-f60e-0ee1-f69c-7ff826e5a39b" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      <node identifier="5f5618ed-5620-36e4-53e6-43deb6bf2dfb" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="architecturaloverview" locale="">
       <properties>
        <title>Architectural Overview</title>
       </properties>
       <node identifier="461ba038-22d6-17e7-3ad3-d75a51df31c7" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="297102d0-4aa6-56c4-a9a9-25bd9bc332c8" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="architectural-overview">
<h1>Architectural Overview</h1>
<p>TYPO3 Flow is a PHP-based application framework. It is especially well-suited
for enterprise-grade applications and explicitly supports Domain-Driven
Design, a powerful software design philosophy. Convention over
configuration, Test-Driven Development, Continuous Integration and an
easy-to-read source code are other important principles we follow for
the development of TYPO3 Flow.</p>
<p>Although we created TYPO3 Flow as the foundation for the TYPO3 Content
Management System, its approach is general enough to be useful as a
basis for any other PHP application. We&#8217;re happy to share the TYPO3 Flow
framework with the whole PHP community and are looking forward to the
hundreds of new features and enhancements contributed as packages by
other enthusiastic developers. In fact most of the packages which will
be developed for the TYPO3 CMS can be used in any other TYPO3 Flow-based
application. In essence this reflects the vision of the TYPO3 project:
&#8220;Inspiring People to Share&#8221;.</p>
<p>This reference describes all features of TYPO3 Flow and provides you with
in-depth information. If you&#8217;d like to get a feeling for TYPO3 Flow and get
started quickly, we suggest that you try out our Getting Started
tutorial first.</p>
<div class="section" id="system-parts">
<h2>System Parts</h2>
<p>The TYPO3 Flow framework is composed of the following submodules:</p>
<ul class="simple">
<li>The TYPO3 Flow Bootstrap takes care of configuring and initializing the
whole framework.</li>
<li>The Package Manager allows you to download, install, configure and
uninstall packages.</li>
<li>The Object Manager is in charge of building, caching and combining
objects.</li>
<li>The Configuration framework reads and cascades various kinds of
configuration from different sources and provides access to it.</li>
<li>The Resource module contains functions for publishing, caching,
securing and retrieving resources.</li>
<li>The HTTP component is a standards-compliant implementation of a
number of RFCs around HTTP, Cookies, content negotiation and more.</li>
<li>The MVC framework takes care of requests and responses and provides
you with a powerful, easy-to use Model-View-Controller
implementation.</li>
<li>The Cli module provides a very easy way to implement CLI commands
using TYPO3 Flow, including built-in help based on code documentation.</li>
<li>The Cache framework provides different kinds of caches with can be
combined with a selection of cache backends.</li>
<li>The Error module handles errors and exceptions and provides utility
classes for this purpose.</li>
<li>The Log module provides simple but powerful means to log any kind
of event or signal into different types of backends.</li>
<li>The Signal Slot module implements the event-driven concept of
signals and slots through AOP aspects.</li>
<li>The Validation module provides a validation and filtering framework
with built-in rules as well as support for custom validation of any
object.</li>
<li>The Property module implements the concept of property editors and
is used for setting and retrieving object properties.</li>
<li>The Reflection API complements PHP&#8217;s built-in reflection support by
advanced annotation handling and a cached reflection service.</li>
<li>The AOP framework enables you to use the powerful techniques of
Aspect Oriented Programming.</li>
<li>The Persistence module allows you to transparently persist your
objects following principles of Domain Driven Design.</li>
<li>The Security framework enforces security policies and provides an
API for managing those.</li>
<li>The Session framework takes care of session handling and storing
session information in different backends</li>
<li>The I18n service manages languages and other regional settings
and makes them accessible to other packages and TYPO3 Flow sub packages.</li>
<li>The Utility module is a library of useful general-purpose functions
for file handling, algorithms, environment abstraction and more.</li>
</ul>
<p>If you are overwhelmed by the amount of information in this reference,
just keep in mind that you don&#8217;t need to know all of it to write your
own TYPO3 Flow packages. You can always come back and look up a specific
topic once you need to know about it - that&#8217;s what references are for.</p>
<p>But even if you don&#8217;t need to know everything, we recommend that you get
familiar with the concepts of each module and read the whole manual.
This way you make sure that you don&#8217;t miss any of the great features
TYPO3 Flow provides and hopefully feel inspired to produce clean and
easy-maintainable code.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="c5633cf9-cd8b-f999-d6fd-28d5897dfe8b" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="769d7924-43d2-7491-7270-692f460c38de" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="bootstrapping" locale="">
       <properties>
        <title>Bootstrapping</title>
       </properties>
       <node identifier="150a6a5b-04fe-06fb-331e-124e608523d6" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="9da44eb7-980c-7369-f4fc-a87dee0202c8" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="bootstrapping">
<span id="ch-bootstrapping"></span><h1>Bootstrapping</h1>
<p>This chapter outlines the bootstrapping mechanism TYPO3 Flow uses on each request
to initialize vital parts of the framework and the application. It explains
the built-in request handlers which effectively control the boot sequence and
demonstrates how custom request handlers can be developed and registered.</p>
<div class="section" id="the-typo3-flow-application-context">
<h2>The TYPO3 Flow Application Context</h2>
<p>Each request, no matter if it runs from the command line or through HTTP,
runs in a specific application context. TYPO3 Flow provides exactly three built-in
contexts:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">Development</span></tt> (default) - used for development</li>
<li><tt class="docutils literal"><span class="pre">Production</span></tt> - should be used for a live site</li>
<li><tt class="docutils literal"><span class="pre">Testing</span></tt> - is used for functional tests</li>
</ul>
<p>The context TYPO3 Flow runs in is specified through the environment variable
<tt class="docutils literal"><span class="pre">FLOW_CONTEXT</span></tt>. It can be set per command at the command line or be part of the
web server configuration:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1"># run the TYPO3 Flow CLI commands in production context</span>
<span class="nx">FLOW_CONTEXT</span><span class="o">=</span><span class="nx">Production</span> <span class="o">./</span><span class="nx">flow</span> <span class="nx">help</span>

<span class="c1"># In your Apache configuration, you usually use:</span>
<span class="nx">SetEnv</span> <span class="nx">FLOW_CONTEXT</span> <span class="nx">Production</span>
</pre></div>
</div>
<div class="section" id="custom-contexts">
<h3>Custom Contexts</h3>
<p>In certain situations, more specific contexts are desirable:</p>
<ul class="simple">
<li>a staging system may run in a Production context, but requires a different set of
credentials than the production server.</li>
<li>developers working on a project may need different application specific settings
but prefer to maintain all configuration files in a common Git repository.</li>
</ul>
<p>By defining custom contexts which inherit from one of the three base contexts,
more specific configuration sets can be realized.</p>
<p>While it is not possible to add new &#8220;top-level&#8221; contexts at the same level like
Production and Testing, you can create arbitrary sub-contexts, just by
specifying them like <tt class="docutils literal"><span class="pre">&lt;MainContext&gt;/&lt;SubContext&gt;</span></tt>.</p>
<p>For a staging environment a custom context <tt class="docutils literal"><span class="pre">Production/Staging</span></tt> may provide the
necessary settings while the <tt class="docutils literal"><span class="pre">Production/Live</span></tt> context is used on the live instance.</p>
<p>Each sub context inherits the configuration from the parent context, which is
explained in full detail inside the Configuration chapter.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">This even works recursively, so if you have a multiple-server staging
setup, you could use the context Production/Staging/Server1 and
Production/Staging/Server2 if both staging servers needed different
configuration.</p>
</div>
</div>
</div>
<div class="section" id="boot-sequence">
<h2>Boot Sequence</h2>
<p>There are basically two types of requests which are handled by a TYPO3 Flow
application:</p>
<ul class="simple">
<li>command line requests are passed to the <tt class="docutils literal"><span class="pre">flow.php</span></tt> script which
resides in the <tt class="docutils literal"><span class="pre">Scripts</span></tt> folder of the TYPO3 Flow package</li>
<li>HTTP requests are first taken care of by the <tt class="docutils literal"><span class="pre">index.php</span></tt> script
in the public <tt class="docutils literal"><span class="pre">Web</span></tt> directory.</li>
</ul>
<p>Both scripts set certain environment variables and then instantiate and run the
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Core\Bootstrap</span></tt> class.</p>
<p>The bootstrap&#8217;s <tt class="docutils literal"><span class="pre">run()</span></tt> method initializes the bare minimum needed for any
kind of operation. When it did that, it determines the actual request
handler which takes over the control of the further boot sequence and
handling the request.</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">Scripts</span><span class="o">::</span><span class="na">initializeClassLoader</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
        <span class="nx">Scripts</span><span class="o">::</span><span class="na">initializeSignalSlot</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
        <span class="nx">Scripts</span><span class="o">::</span><span class="na">initializePackageManagement</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">activeRequestHandler</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">resolveRequestHandler</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">activeRequestHandler</span><span class="o">-&gt;</span><span class="na">handleRequest</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The request handler in charge executes a sequence of steps which need to be
taken for initializing TYPO3 Flow for the purpose defined by the specialized
request handler. TYPO3 Flow&#8217;s <tt class="docutils literal"><span class="pre">Bootstrap</span></tt> class provides convenience methods for
building such a sequence and the result can be customized by adding further
or removing unnecessary steps.</p>
<p>After initialization, the request handler takes the necessary steps to handle
the request, does or does not echo a response and finally exits the
application. Control is not returned to the bootstrap again, but a request
handler should call the bootstrap&#8217;s <tt class="docutils literal"><span class="pre">shutdown()</span></tt> method in order to cleanly
shut down important parts of the framework.</p>
</div>
<div class="section" id="run-levels">
<h2>Run Levels</h2>
<p>There are two pre-defined levels to which TYPO3 Flow can be initialized:</p>
<ul class="simple">
<li>compiletime brings TYPO3 Flow into a state which allows for code generation
and other low-level tasks which can only be done while TYPO3 Flow is not yet
fully ready for serving user requests. Compile time has only limited support
for Dependency Injection and lacks support for many other functions such as
Aspect-Oriented Programming and Security.</li>
<li>runtime brings TYPO3 Flow into a state which is fully capable of handling user
requests and is optimized for speed. No changes to any of the code caches
or configuration related to code is allowed during runtime.</li>
</ul>
<p>The bootstrap&#8217;s methods <tt class="docutils literal"><span class="pre">buildCompiletimeSequence()</span></tt> and
<tt class="docutils literal"><span class="pre">buildRuntimeSequence()</span></tt> conveniently build a sequence which brings TYPO3 Flow
into either state on invocation.</p>
</div>
<div class="section" id="request-handlers">
<h2>Request Handlers</h2>
<p>A request handler is in charge of executing the boot sequence and ultimately
answering the request it was designed for. It must implement the
<tt class="docutils literal"><span class="pre">\TYPO3\Flow\Core\RequestHandlerInterface</span></tt> interface which,
among others, contains the following methods:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">handleRequest</span><span class="p">();</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">canHandleRequest</span><span class="p">();</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">getPriority</span><span class="p">();</span>
</pre></div>
</div>
<p>On trying to find a suitable request handler, the bootstrap asks each
registered request handler if it can handle the current request
using <tt class="docutils literal"><span class="pre">canHandleRequest()</span></tt> – and if it can,
how eager it is to do so through <tt class="docutils literal"><span class="pre">getPriority()</span></tt>. It then passes control to the
request handler which is most capable of responding to the request by
calling <tt class="docutils literal"><span class="pre">handleRequest()</span></tt>.</p>
<p>Request handlers must first be registered in order to be considered during the
resolving phase. Registration is done in the <tt class="docutils literal"><span class="pre">Package</span></tt> class of the package
containing the request handler:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Package</span> <span class="k">extends</span> <span class="nx">BasePackage</span> <span class="p">{</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">boot</span><span class="p">(</span><span class="nx">\TYPO3\Flow\Core\Bootstrap</span> <span class="nv">$bootstrap</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$bootstrap</span><span class="o">-&gt;</span><span class="na">registerRequestHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">\Acme\Foo\BarRequestHandler</span><span class="p">(</span><span class="nv">$bootstrap</span><span class="p">));</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">The TYPO3 Flow package contains meaningful working examples for registration of
request handlers and building boot sequences. A good starting point is
the <tt class="docutils literal"><span class="pre">\TYPO3\Flow\Package</span></tt> class where the request handlers are
registered.</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="6fb68ee1-6a3e-3590-9369-f53e7bed0cd6" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="9c8de496-225d-359c-a8ca-8e12af3e20c4" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="packagemanagement" locale="">
       <properties>
        <title>Package Management</title>
       </properties>
       <node identifier="918d22af-113e-8032-8c0a-014a9b3620c8" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="bae3ca85-78b2-f2ba-2e9d-5b4f3133c5d8" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="package-management">
<h1>Package Management</h1>
<p>TYPO3 Flow is a package-based system. In fact, TYPO3 Flow itself is just a package as well - but
obviously an important one. Packages act as a container for different matters: Most of
them contain PHP code which adds certain functionality, others only contain documentation
and yet other packages consist of templates, images or other resources.</p>
<div class="section" id="package-locations">
<h2>Package Locations</h2>
<div class="section" id="framework-and-application-packages">
<h3>Framework and Application Packages</h3>
<p>TYPO3 Flow packages are located in a sub folder of the Packages/ directory. A typical
application (such as TYPO3 Neos for example) will use the core packages which are bundled with
TYPO3 Flow and use additional packages which are specific to the application. The framework
packages are kept in a directory called Framework while the application specific
packages reside in the Application directory. This leads to the following
folder structure:</p>
<dl class="docutils">
<dt>Configuration/</dt>
<dd>The global configuration folder</dd>
<dt>Data/</dt>
<dd>The various data folders, temporary as well as persistent</dd>
<dt>Packages/</dt>
<dd><dl class="first last docutils">
<dt>Framework/</dt>
<dd>The Framework directory contains packages of the TYPO3 Flow distribution.</dd>
<dt>Application/</dt>
<dd>The Application directory contains your own / application specific packages.</dd>
<dt>Libraries/</dt>
<dd>The Libraries directory contains 3rd party packages.</dd>
</dl>
</dd>
</dl>
</div>
<div class="section" id="additional-package-locations">
<h3>Additional Package Locations</h3>
<p>Apart from the Application, Framework and Libraries package directories you
may define your very own additional package locations by just creating
another directory in the application&#8217;s Packages directory. One
example for this is the TYPO3 Neos distribution, which expects packages with
website resources in a folder named Sites.</p>
<p>The location for Flow packages installed via Composer (as opposed to manually
placing them in a Packages/ sub folder) is determined by looking at the package
type in the manifest file. This would place a package into Packages/Acme:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;typo3-flow-acme&quot;</span>
</pre></div>
</div>
<p>If you would like to use <tt class="docutils literal"><span class="pre">package:create</span></tt> to create packages of this type in
Packages/Acme instead of the default location Packages/Application, add an
entry in the Settings.yaml of the package that expects packages of that type:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">:</span>
  <span class="nx">Flow</span><span class="o">:</span>
    <span class="nx">package</span><span class="o">:</span>
      <span class="nx">packagesPathByType</span><span class="o">:</span>
        <span class="s1">&#39;typo3-flow-acme&#39;</span><span class="o">:</span> <span class="s1">&#39;Acme&#39;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="package-directory-layout">
<h2>Package Directory Layout</h2>
<p>The TYPO3 Flow package directory structure follows a certain convention which has the advantage
that you don&#8217;t need to care about any package-related configuration. If you put your files
into the right directories, everything will just work.</p>
<p>The directory layout inside a TYPO3 Flow package is as follows:</p>
<dl class="docutils">
<dt>Classes/VendorName/PackageName</dt>
<dd><p class="first">This directory contains the actual source code for the package. Package authors
are free to add (only!) class or interface files directly to this directory or add
subdirectories to organize the content as necessary. All classes or interfaces
below this directory are handled by the autoloading mechanism and will be
registered at the object manager automatically (and will thus be considered
&#8220;registered objects&#8221;).</p>
<p class="last">One special file in here is the Package.php which contains the class with the
package&#8217;s bootstrap code (if needed).</p>
</dd>
<dt>Configuration</dt>
<dd>All kinds of configuration which are delivered with the package reside in this
directory. The configuration files are immutable and must not be changed by the
user or administrator. The most prominent configuration files are the
Objects.yaml file which may be used to configure the package&#8217;s objects and
the Settings.yaml file which contains general user-level settings.</dd>
<dt>Documentation</dt>
<dd>Holds the package documentation. Please refer to the Documenter&#8217;s Guide for
more details about the directories and files within this directory.</dd>
<dt>Resources</dt>
<dd><p class="first">Contains static resources the package needs, such as library code, template files,
graphics, ... In general, there is a distinction between public and private
resources.</p>
<dl class="last docutils">
<dt>Private</dt>
<dd><p class="first">Contains private resources for the package. All files inside this directory
will never be directly available from the web.</p>
<dl class="last docutils">
<dt>Installer/Distribution</dt>
<dd>The files in this directory are copied to the root of a Flow installation
when the package is installed or updated via <a class="reference external" href="http://getcomposer.org">Composer</a>. Anything in <tt class="docutils literal"><span class="pre">Defaults</span></tt>
is copied only, if the target does not exist (files are not overwritten).
Files in <tt class="docutils literal"><span class="pre">Essentials</span></tt> are overwritten and thus kept up-to-date with the
package they come from.</dd>
<dt>Templates</dt>
<dd>Template files used by the package should go here. If a user wants to modify
the template it will end up elsewhere and should be pointed to by some
configuration setting.</dd>
<dt>PHP</dt>
<dd>Should hold any PHP code that is an external library which should not be
handled by the object manager (at least not by default), is of procedural
nature or doesn&#8217;t belong into the classes directory for any other reason.</dd>
<dt>Java</dt>
<dd>Should hold any Java code needed by the package. Repeat and rinse for
Smalltalk, Modula, Pascal, ... ;)</dd>
</dl>
</dd>
<dt>Public</dt>
<dd><p class="first">Contains public resources for the package. All files in this directory
will be mirrored into TYPO3 Flow&#8217;s Web directory by the Resource Manager
(and therefore become accessible from the web). They will be delivered to
the client directly without further processing.</p>
<p>Although it is up to the package author to name the directories, we suggest the
following directories:</p>
<ul class="simple">
<li>Images</li>
<li>Styles</li>
<li>Scripts</li>
</ul>
<p>The general rule for this is: The folder uses the plural form of the resource type
it contains.</p>
<p class="last">Third party bundles that contain multiple resources such as <tt class="docutils literal"><span class="pre">jQuery</span> <span class="pre">UI</span></tt> or <tt class="docutils literal"><span class="pre">Twitter</span> <span class="pre">Bootstrap</span></tt>
should reside in a sub directory <tt class="docutils literal"><span class="pre">Libraries</span></tt>.</p>
</dd>
</dl>
</dd>
<dt>Tests</dt>
<dd><dl class="first last docutils">
<dt>Unit</dt>
<dd>Holds the unit tests for the package.</dd>
<dt>Functional</dt>
<dd>Holds the functional tests for the package.</dd>
</dl>
</dd>
</dl>
<p>As already mentioned, all classes which are found in the Classes directory will be
detected and registered. However, this only works if you follow the naming rules equally
for the class name as well as the filename. An example for a valid class name is
<tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\Controller\StandardController</span></tt> while the file containing this
class would be named StandardController.php and is expected to be in a directory
MyCompany.MyPackage/Classes/MyCompany/MyPackage/Controller.</p>
<p>All details about naming files, classes, methods and variables correctly can be found in
the TYPO3 Flow Coding Guidelines. You&#8217;re highly encouraged to read (and follow) them.</p>
</div>
<div class="section" id="package-keys">
<h2>Package Keys</h2>
<p>Package keys are used to uniquely identify packages and provide them with a namespace for
different purposes. They save you from conflicts between packages which were provided by
different parties.</p>
<p>We use vendor namespaces for package keys, i.e. all packages which are released
and maintained by the TYPO3 Neos and Flow core teams start with <tt class="docutils literal"><span class="pre">TYPO3.*</span></tt>. In your company
we suggest that you use your company name as vendor namespace.</p>
</div>
<div class="section" id="loading-order">
<h2>Loading Order</h2>
<p>The loading order of packages follows the dependency chain as defined in the composer
manifests involved.</p>
</div>
<div class="section" id="activating-and-deactivating-packages">
<h2>Activating and Deactivating Packages</h2>
<p>All directories which are found below the Packages folder can hold
packages. Just make sure that you created a composer.json file in the
root directory of your package.</p>
<p>If no PackageStates.php exists in your Configuration folder, it will be created
and all found packages will be activated. If PackageStates.php exists, you can use the
package manager to activate and deactivate packages through the TYPO3 Flow command line script.</p>
<p>The TYPO3 Flow command line interface is triggered through the flow script
in the main directory of the TYPO3 Flow distribution. From a Unix
shell you should be able to run the script by entering <tt class="docutils literal"><span class="pre">./flow</span></tt> (on windows,
use <tt class="docutils literal"><span class="pre">flow.bat</span></tt>).</p>
<p>To activate a package, use the <tt class="docutils literal"><span class="pre">package:activate</span></tt> command:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow package:activate &lt;PackageKey&gt;
</pre></div>
</div>
<p>To deactivate a package, use <tt class="docutils literal"><span class="pre">package:deactivate</span></tt>. For a listing of all packages
(active and inactive) use <tt class="docutils literal"><span class="pre">package:list</span></tt>.</p>
</div>
<div class="section" id="installing-a-package">
<h2>Installing a Package</h2>
<p>There are various ways of installing packages. They can just be copied to a folder in
Packages/, either manually or by some tool, or by keeping them in your project&#8217;s
SCM tool (directly or indirectly, via git submodules or svn:externals).</p>
<p>The true power of dependency management comes with the use of <a class="reference external" href="http://getcomposer.org">Composer</a>, though.
Installing a package through composer allows to install dependencies of that package
automatically as well.</p>
<p>If a package you would like to add is available on <a class="reference external" href="http://packagist.org">Packagist</a> it can be installed
by running:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">composer</span> <span class="k">require</span> <span class="o">&lt;</span><span class="nx">vendor</span><span class="o">/</span><span class="nx">package</span><span class="o">&gt;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If you need to install <a class="reference external" href="http://getcomposer.org">Composer</a> first, read the <a class="reference external" href="http://getcomposer.org/download/">installation instructions</a></p>
</div>
<p>In case a package is not available through <a class="reference external" href="http://packagist.org">Packagist</a>, you can still install via <a class="reference external" href="http://getcomposer.org">Composer</a>
as it supports direct fetching from popular SCM system. For this, define a repository entry
in your manifest to be able to use the package name as usual in the dependencies.</p>
<p>composer.json:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="s2">&quot;repositories&quot;</span><span class="o">:</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
        <span class="s2">&quot;url&quot;</span><span class="o">:</span> <span class="s2">&quot;git://github.com/acme/demo.git&quot;</span>
    <span class="p">},</span>
    <span class="err">…</span>
<span class="p">],</span>
<span class="err">…</span>
<span class="s2">&quot;require&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="err">…</span><span class="p">,</span>
    <span class="s2">&quot;acme/demo&quot;</span><span class="o">:</span> <span class="s2">&quot;dev-master&quot;</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="creating-a-new-package">
<h2>Creating a New Package</h2>
<p>Use the <tt class="docutils literal"><span class="pre">package:create</span></tt> command to create a new package:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow package:create Acme.Demo
</pre></div>
</div>
<p>This will create the package in Packages/Application. After that, adjust composer.json
to your needs. Apart from that no further steps are necessary.</p>
</div>
<div class="section" id="updating-packages">
<h2>Updating Packages</h2>
<p>The packages installed via <a class="reference external" href="http://getcomposer.org">Composer</a> can be updated with the command:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">composer</span> <span class="nx">update</span>
</pre></div>
</div>
</div>
<div class="section" id="package-meta-information">
<h2>Package Meta Information</h2>
<p>All packages need to provide some meta information to TYPO3 Flow. The data is split in two
files, depending on primary use.</p>
<div class="section" id="composer-json">
<h3>composer.json</h3>
<p>The <a class="reference external" href="http://getcomposer.org">Composer</a> manifest. It declares metadata like the name of a package as well
as dependencies, like needed PHP extensions, version constraints and other packages.
For details on the format and possibilities of that file, have a look at the <a class="reference external" href="http://getcomposer.org">Composer</a>
documentation.</p>
</div>
<div class="section" id="classes-vendorname-packagename-package-php">
<h3>Classes/VendorName/PackageName/Package.php</h3>
<p>This file contains bootstrap code for the package. If no bootstrap code is needed,
it does not need to exist.</p>
<p>Example: Minimal Package.php</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">namespace</span> <span class="nx">Acme\Demo</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">TYPO3\Flow\Package\Package</span> <span class="k">as</span> <span class="nx">BasePackage</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * The Acme.Demo Package</span>
<span class="sd"> *</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Package</span> <span class="k">extends</span> <span class="nx">BasePackage</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">        * Invokes custom PHP code directly after the package manager has been initialized.</span>
<span class="sd">        *</span>
<span class="sd">        * @param \TYPO3\Flow\Core\Bootstrap $bootstrap The current bootstrap</span>
<span class="sd">        * @return void</span>
<span class="sd">        */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">boot</span><span class="p">(</span><span class="nx">\TYPO3\Flow\Core\Bootstrap</span> <span class="nv">$bootstrap</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$bootstrap</span><span class="o">-&gt;</span><span class="na">registerRequestHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">\Acme\Demo\Quux\RequestHandler</span><span class="p">(</span><span class="nv">$bootstrap</span><span class="p">));</span>

                <span class="nv">$dispatcher</span> <span class="o">=</span> <span class="nv">$bootstrap</span><span class="o">-&gt;</span><span class="na">getSignalSlotDispatcher</span><span class="p">();</span>
                <span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;TYPO3\Flow\Mvc\Dispatcher&#39;</span><span class="p">,</span> <span class="s1">&#39;afterControllerInvocation&#39;</span><span class="p">,</span> <span class="s1">&#39;Acme\Demo\Baz&#39;</span><span class="p">,</span> <span class="s1">&#39;fooBar&#39;</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</div>
<p>The bootstrap code can be used to wire some signal to a slot or to register
request handlers (as shown above), or anything else that can must be done
early the bootstrap stage.</p>
</div>
</div>
<div class="section" id="using-3rd-party-packages">
<h2>Using 3rd Party Packages</h2>
<p>When using 3rd party packages via <a class="reference external" href="http://getcomposer.org">Composer</a> a variety of issues can come up.</p>
<div class="section" id="reflection-errors">
<h3>Reflection errors</h3>
<p>When a package includes tests and other resources Flow might run into trouble
when trying to reflect those. Since in most cases &#8220;fixing&#8221; such packages does
not make sense, a configuration option is provided to selectively ignore classes
from reflection. This allows a fine control going beyong simply disabling object
management (and thus features like DI and AOP) completely.</p>
<p>To exclude classes from object management (Reflection and Configuration building)
a sequence of package keys can be provided, each with a sequence of regular
expressions. Each regular expression will be tested against the list of fully
qualified class names in the package and classes will be excluded if matching:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">:</span>
  <span class="nx">Flow</span><span class="o">:</span>
    <span class="nx">object</span><span class="o">:</span>
      <span class="nx">excludeClasses</span><span class="o">:</span>
        <span class="s1">&#39;Acme.Broken&#39;</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;.*&#39;</span><span class="p">]</span>
        <span class="s1">&#39;other.weird.package&#39;</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Other\\Weird\\Package\\Tests\\.*&#39;</span><span class="p">]</span>
</pre></div>
</div>
</div>
<div class="section" id="class-loading">
<h3>Class loading</h3>
<p>In a composer manifest various ways of autloloading can be configured. Currently
Flow only supports PSR-0 autoloading and will only use the first entry given in
the manifest. This leads to issues when loading some packages:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="s2">&quot;autoload&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;psr-0&quot;</span><span class="o">:</span> <span class="p">{</span>
        <span class="s2">&quot;Guzzle</span><span class="se">\\</span><span class="s2">Tests&quot;</span><span class="o">:</span> <span class="s2">&quot;tests/&quot;</span><span class="p">,</span>
        <span class="s2">&quot;Guzzle&quot;</span><span class="o">:</span> <span class="s2">&quot;src/&quot;</span>
    <span class="p">}</span>
<span class="p">},</span>
</pre></div>
</div>
<p>In this case only the <tt class="docutils literal"><span class="pre">Guzzle\Tests</span></tt> entry will be used, leading to rather unexpected
results. This is of course an issue with the way Flow handles this, in the meantime
you need to adjust the manifest manually.</p>
<p>Other autoloading ways (classmap generation and files) are currently not supported by
Flow.</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="07c3cb88-0566-07dd-96f4-98e4115f7a11" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="b9c2b1c3-e8fd-e683-c40a-bfe0153394ea" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="configuration" locale="">
       <properties>
        <title>Configuration</title>
       </properties>
       <node identifier="0d40c5aa-8c4e-fc79-f20c-992bd695bc74" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="3b98a68e-eae7-57ca-ccfc-00db5ea4e21d" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="configuration">
<h1>Configuration</h1>
<p>Configuration is an important aspect of versatile applications. TYPO3 Flow provides you with
configuration mechanisms which have a small footprint and are convenient to use and
powerful at the same time. Hub for all configuration is the configuration manager which
handles alls configuration tasks like reading configuration, configuration cascading, and
(later) also writing configuration.</p>
<div class="section" id="file-locations">
<h2>File Locations</h2>
<p>There are several locations where configuration files may be placed. All of them are
scanned by the configuration manager during initialization and cascaded into a single
configuration tree. The following locations exist (listed in the order they are loaded,
i.e. later values override prior ones):</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">/Packages/&lt;PackageDirectoryAndName&gt;/Configuration/</span></tt></dt>
<dd>The Configuration directory of each package is scanned first. Only at this stage new
configuration options must be introduced (by defining a default value).</dd>
<dt><tt class="docutils literal"><span class="pre">/Configuration/</span></tt></dt>
<dd>Configuration in the global Configuration directory overrides the default settings
defined in the package&#8217;s configuration directories.</dd>
<dt><tt class="docutils literal"><span class="pre">/Packages/&lt;PackageDirectoryAndName&gt;/Configuration/&lt;ApplicationContext&gt;/</span></tt></dt>
<dd>There may exist a subdirectory for each application context (see TYPO3 Flow Bootstrap
section). This configuration is only loaded if TYPO3 Flow runs in the respective
application context.</dd>
<dt><tt class="docutils literal"><span class="pre">/Configuration/&lt;ApplicationContext&gt;/</span></tt></dt>
<dd>The context specific configuration again overrides the generic settings.</dd>
</dl>
<p>The configuration manager also considers custom contexts, such as <tt class="docutils literal"><span class="pre">Production/Live</span></tt>.
First, the base configuration is loaded, followed by the context specific configuration
for <tt class="docutils literal"><span class="pre">Production</span></tt> and <tt class="docutils literal"><span class="pre">Production/Live</span></tt>.</p>
<p>Flow&#8217;s configuration system does not support placing configuration files anywhere except
for in <tt class="docutils literal"><span class="pre">Configuration/</span></tt> or one of the context directories in <tt class="docutils literal"><span class="pre">Configuration/</span></tt>. Flow
only supports three top-level contexts: Production, Development, and Testing. These
folders are reserved for the Flow configuration system.</p>
</div>
<div class="section" id="configuration-files">
<h2>Configuration Files</h2>
<p>TYPO3 Flow distinguishes between different types of configuration. The most important type of
configuration are the settings, however other configuration types exist for special
purposes.</p>
<p>The configuration format is YAML and the configuration options of each type are
defined in their own dedicated file:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">Settings.yaml</span></tt></dt>
<dd>Contains user-level settings, i.e. configuration options the users or administrators
are meant to change. Settings are the highest level of system configuration.</dd>
<dt><tt class="docutils literal"><span class="pre">Routes.yaml</span></tt></dt>
<dd>Contains routes configuration. This routing information is parsed and used by the MVC
Web Routing mechanism. Refer to the <a class="reference internal" href="flow/references/the-definitive-guide/partiii/routing.html#ch-routing">Routing</a> chapter for more information.</dd>
<dt><tt class="docutils literal"><span class="pre">Objects.yaml</span></tt></dt>
<dd>Contains object configuration, i.e. options which configure objects and the
combination of those on a lower level. See the <a class="reference internal" href="flow/references/the-definitive-guide/partiii/objectmanagement.html#ch-object-management">Object Framework</a> chapter for more
information.</dd>
<dt><tt class="docutils literal"><span class="pre">Policy.yaml</span></tt></dt>
<dd>Contains the configuration of the security policies of the system. See the <a class="reference internal" href="flow/references/the-definitive-guide/partiii/security.html#ch-security">Security</a>
chapter for details.</dd>
<dt><tt class="docutils literal"><span class="pre">PackageStates.php</span></tt></dt>
<dd>Contains a list of packages and their current state, for  example if they are active
or not. Don&#8217;t edit this file directly, rather use the flow command line tool do
activate and deactivate packages.</dd>
<dt><tt class="docutils literal"><span class="pre">Caches.yaml</span></tt></dt>
<dd>Contains a list of caches which are registered automatically. Caches defined in this
configuration file are registered in an early stage of the boot process and profit
from mechanisms such as automatic flushing by the File Monitor. See the chapter about
the <a class="reference internal" href="flow/references/the-definitive-guide/partiii/caching.html#ch-caching">Cache Framework</a> for details.</dd>
<dt><tt class="docutils literal"><span class="pre">Views.yaml</span></tt></dt>
<dd>Contains configurations for Views, for example the lookup paths for templates.
See the <a class="reference internal" href="flow/references/the-definitive-guide/partiii/modelviewcontroller.html#ch-model-view-controller">Model View Controller</a> chapter for details.</dd>
</dl>
</div>
<div class="section" id="defining-configuration">
<h2>Defining Configuration</h2>
<div class="section" id="configuration-format">
<h3>Configuration Format</h3>
<p>The format of TYPO3 Flow&#8217;s configuration files is YAML. YAML is a well-readable format which is
especially well-suited for defining configuration. The full specification among with many
examples can be found on the <a class="reference external" href="http://www.yaml.org/">YAML website</a>. All important parts of the YAML
specification are supported by the parser used by TYPO3 Flow, it might happen though that some
exotic features won&#8217;t have the desired effect. At best you look at the configuration files
which come with the TYPO3 Flow distribution for getting more examples.</p>
<p><strong>Example: a package-level Settings.yaml</strong></p>
<div class="highlight-yaml"><div class="highlight"><pre>#                                                                        #
# Settings Configuration for the TYPO3.Viewhelpertest Package            #
#                                                                        #

TYPO3:
  Viewhelpertest:
    includeViewHelpers: [alias, base]

    xhprof:
      rootDirectory: &#39;&#39; # path to the XHProf library
      outputDirectory: %FLOW_PATH_DATA%Temporary/Viewhelpertest/XHProf/ # output directory

    profilingTemplatesDirectory: %FLOW_PATH_DATA%Temporary/Viewhelpertest/Fluidtemplates/
</pre></div>
</div>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">Always use two spaces for indentation in YAML files. The parser will not
accept indentation using tabs.</p>
</div>
</div>
<div class="section" id="constants">
<h3>Constants</h3>
<p>Sometimes it is necessary to use values in your configuration files which are defined as
PHP constants. These values can be included by special markers which are replaced by the
actual value during parse time. The format is <tt class="docutils literal"><span class="pre">%&lt;CONSTANT_NAME&gt;%</span></tt> where
<tt class="docutils literal"><span class="pre">&lt;CONSTANT_NAME&gt;</span></tt> is the name of a constant. Note that the constant name must be all
uppercase.</p>
<p>Some examples:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">%FLOW_PATH_WEB%</span></tt></dt>
<dd>Will be replaced by the path to the public web directory.</dd>
<dt><tt class="docutils literal"><span class="pre">%FLOW_PATH_DATA%</span></tt></dt>
<dd>Will be replaced by the path to the /Data/ directory.</dd>
<dt><tt class="docutils literal"><span class="pre">%PHP_VERSION%</span></tt></dt>
<dd>Will be replaced by the current PHP version.</dd>
<dt><tt class="docutils literal"><span class="pre">%TYPO3\Flow\Core\Bootstrap::MINIMUM_PHP_VERSION%</span></tt></dt>
<dd>Will be replaced by this class constant&#8217;s value. Note that
a leading namespace backslash is generally allowed as of PHP,
but is not recommended due to CGL (stringed class names should not
have a leading backslash).</dd>
</dl>
</div>
<div class="section" id="custom-configuration-types">
<h3>Custom Configuration Types</h3>
<p>Custom configuration types allow to extract parts of the system configuration into
separate files.</p>
<p>The following will register a new type <tt class="docutils literal"><span class="pre">Views</span></tt> for configuration, using the default
configuration processing handler. The code needs to be in your <tt class="docutils literal"><span class="pre">Package``s</span> <span class="pre">``boot()</span></tt>
method.</p>
<p><strong>Example: Register a custom configuration type</strong></p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$dispatcher</span> <span class="o">=</span> <span class="nv">$bootstrap</span><span class="o">-&gt;</span><span class="na">getSignalSlotDispatcher</span><span class="p">();</span>
<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;TYPO3\Flow\Configuration\ConfigurationManager&#39;</span><span class="p">,</span> <span class="s1">&#39;configurationManagerReady&#39;</span><span class="p">,</span>
        <span class="k">function</span> <span class="p">(</span><span class="nv">$configurationManager</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$configurationManager</span><span class="o">-&gt;</span><span class="na">registerConfigurationType</span><span class="p">(</span><span class="s1">&#39;Views&#39;</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">);</span>
</pre></div>
</div>
<p>This will allow to use the new configuration type <tt class="docutils literal"><span class="pre">Views</span></tt> in the same way as the other types
supported by Flow natively, as soon as you have a file named <tt class="docutils literal"><span class="pre">Views.yaml</span></tt> in your configuration
folder(s). See <a class="reference internal" href="#working-with-other-configuration">Working with other configuration</a> for details.</p>
<p>If you want to use a specific configuration processing type, you can pass it when registering
the configuration. The supported types are defined as <tt class="docutils literal"><span class="pre">CONFIGURATION_PROCESSING_TYPE_*</span></tt>
constants in <tt class="docutils literal"><span class="pre">ConfigurationManager</span></tt>.</p>
<p><strong>Example: Register a custom configuration type</strong></p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$dispatcher</span> <span class="o">=</span> <span class="nv">$bootstrap</span><span class="o">-&gt;</span><span class="na">getSignalSlotDispatcher</span><span class="p">();</span>
<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;TYPO3\Flow\Configuration\ConfigurationManager&#39;</span><span class="p">,</span> <span class="s1">&#39;configurationManagerReady&#39;</span><span class="p">,</span>
        <span class="k">function</span> <span class="p">(</span><span class="nv">$configurationManager</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$configurationManager</span><span class="o">-&gt;</span><span class="na">registerConfigurationType</span><span class="p">(</span>
                        <span class="s1">&#39;CustomObjects&#39;</span><span class="p">,</span>
                        <span class="nx">ConfigurationManager</span><span class="o">::</span><span class="na">CONFIGURATION_PROCESSING_TYPE_OBJECTS</span>
                <span class="p">);</span>
        <span class="p">}</span>
<span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="split-configuration-sources">
<h3>Split configuration sources</h3>
<p>For custom types it is possible to allow for split configuration sources. For the YAML
source used in Flow it allows to use the configuration type as a prefix for the
configuration filenames.</p>
<p><strong>Example: Register a custom configuration type, split-source</strong></p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$dispatcher</span> <span class="o">=</span> <span class="nv">$bootstrap</span><span class="o">-&gt;</span><span class="na">getSignalSlotDispatcher</span><span class="p">();</span>
<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;TYPO3\Flow\Configuration\ConfigurationManager&#39;</span><span class="p">,</span> <span class="s1">&#39;configurationManagerReady&#39;</span><span class="p">,</span>
        <span class="k">function</span> <span class="p">(</span><span class="nx">ConfigurationManager</span> <span class="nv">$configurationManager</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$configurationManager</span><span class="o">-&gt;</span><span class="na">registerConfigurationType</span><span class="p">(</span>
                        <span class="s1">&#39;Models&#39;</span><span class="p">,</span>
                        <span class="nx">ConfigurationManager</span><span class="o">::</span><span class="na">CONFIGURATION_PROCESSING_TYPE_DEFAULT</span><span class="p">,</span>
                        <span class="k">TRUE</span>
                <span class="p">);</span>
        <span class="p">}</span>
<span class="p">);</span>
</pre></div>
</div>
<p>The above code will lead to the following files being read, sorted by name and merged if the
configuration of type <tt class="docutils literal"><span class="pre">Models</span></tt> is requested:</p>
<div class="highlight-text"><div class="highlight"><pre>Configuration/
        Models.yaml
        Models.Foo.yaml
        Models.Bar.yaml
        Models.Quux.yaml
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Split configuration is only supported for the <tt class="docutils literal"><span class="pre">CONFIGURATION_PROCESSING_TYPE_DEFAULT</span></tt> and
<tt class="docutils literal"><span class="pre">CONFIGURATION_PROCESSING_TYPE_SETTINGS</span></tt> processing types.</p>
</div>
</div>
</div>
<div class="section" id="accessing-settings">
<h2>Accessing Settings</h2>
<p>In almost all cases, TYPO3 Flow will automatically provide you with the right configuration.</p>
<p>What you usually want to work with are <tt class="docutils literal"><span class="pre">settings</span></tt>, which are application-specific to
your package. The following example demonstrates how to let TYPO3 Flow inject the settings
of a classes&#8217; package and output some option value:</p>
<p><strong>Example: Settings Injection</strong></p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Acme</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Demo</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">administrator</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="s">&#39;john@doe.com&#39;</span>
      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;John</span><span class="nv"> </span><span class="s">Doe&#39;</span>
</pre></div>
</div>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Acme\Demo</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var array</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$settings</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Inject the settings</span>
<span class="sd">         *</span>
<span class="sd">         * @param array $settings</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">injectSettings</span><span class="p">(</span><span class="k">array</span> <span class="nv">$settings</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="o">=</span> <span class="nv">$settings</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Outputs some settings of the &quot;Demo&quot; package.</span>
<span class="sd">         *</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">theMethod</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">echo</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">[</span><span class="s1">&#39;administrator&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]);</span>
                <span class="k">echo</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">[</span><span class="s1">&#39;administrator&#39;</span><span class="p">][</span><span class="s1">&#39;email&#39;</span><span class="p">]);</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Injecting all settings creates tight coupling to the settings. If you only need
a few settings you might want to inject those specifically with the Inject
annotation described below.</p>
</div>
<div class="section" id="injection-of-single-settings-into-properties">
<h3>Injection of single settings into properties</h3>
<p>TYPO3 Flow provides a way to inject specific settings through the Inject annotation directly into your properties.
The annotation provides two options related to settings injection:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">setting</span></tt> specifies the path to the setting that should be injected</li>
<li><tt class="docutils literal"><span class="pre">package</span></tt> is optional and specifies the package to get the setting from. Defaults to the package the current
class belongs to.</li>
</ul>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">As a best-practice for testing and extensibility you should also provide setters for
any setting you add to your class, although this is not required for the injection
to work.</p>
</div>
<p><strong>Example: single setting injection</strong></p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Acme</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Demo</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">administrator</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;John</span><span class="nv"> </span><span class="s">Doe&#39;</span>
<span class="l-Scalar-Plain">SomeOther</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Package</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="s">&#39;john@doe.com&#39;</span>
</pre></div>
</div>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Acme\Demo</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var string</span>
<span class="sd">         * @Flow\Inject(setting=&quot;administrator.name&quot;)</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$name</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @var string</span>
<span class="sd">         * @Flow\Inject(setting=&quot;email&quot;, package=&quot;SomeOther.Package&quot;)</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$email</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Set the name</span>
<span class="sd">         *</span>
<span class="sd">         * @param string $name</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">setName</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Set the email</span>
<span class="sd">         *</span>
<span class="sd">         * @param string $email</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">setEmail</span><span class="p">(</span><span class="nv">$email</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">email</span> <span class="o">=</span> <span class="nv">$email</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Outputs some settings of the &quot;Demo&quot; package.</span>
<span class="sd">         *</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">theMethod</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>
                <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">email</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="working-with-other-configuration">
<h3>Working with other configuration</h3>
<p>Although infrequently necessary, it is also possible to retrieve options of the more
special configuration types. The <tt class="docutils literal"><span class="pre">ConfigurationManager</span></tt> provides a method called
<tt class="docutils literal"><span class="pre">getConfiguration()</span></tt> for this purpose. The result this method returns depends on the
actual configuration type you are requesting.</p>
<p>Bottom line is that you should be highly aware of what you&#8217;re doing when working with
these special options and that they might change in a later version of TYPO3 Flow. Usually
there are much better ways to get the desired information (e.g. ask the Object Manager for
object configuration).</p>
</div>
</div>
<div class="section" id="configuration-cache">
<h2>Configuration Cache</h2>
<p>Parsing the YAML configuration files takes a bit of time which remarkably slows down the
initialization of TYPO3 Flow. That&#8217;s why all configuration is cached by default when TYPO3 Flow is
running in Production context. Because this cache cannot be cleared automatically it is
important to know that changes to any configuration file won&#8217;t have any effect until you
manually flush the respective caches.</p>
<p>This feature can be configured through a switch in the Settings.yaml file:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">configuration</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">compileConfigurationFiles</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TRUE</span>
</pre></div>
</div>
<p>When enabled, the configuration manager will compile all loaded configuration into a PHP
file which will be loaded in subsequent calls instead of parsing the YAML files again.</p>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p class="last">Once the configuration is cached changes to the YAML files don&#8217;t have any effect.
Therefore in order to switch off the configuration cache again you need to disable the
feature in the YAML file and flush all caches afterwards manually.</p>
</div>
<p>In order to flush caches, use the following command:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow flow:cache:flush
</pre></div>
</div>
</div>
<div class="section" id="configuration-validation">
<h2>Configuration Validation</h2>
<p>Errors in configuration can lead to hard to spot errors and seemingly random
weird behavior. TYPO3 Flow therefore comes with a general purpose array validator
which can check PHP arrays for validity according to some schema.</p>
<p>This validator is used in the <tt class="docutils literal"><span class="pre">configuration:validate</span></tt> command:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="err">$</span> <span class="o">./</span><span class="nx">flow</span> <span class="nx">configuration</span><span class="o">:</span><span class="nx">validate</span> <span class="o">--</span><span class="nx">type</span> <span class="nx">Settings</span>
<span class="nx">Validating</span> <span class="nx">configuration</span> <span class="k">for</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;Settings&quot;</span>

<span class="mi">16</span> <span class="nx">schema</span> <span class="nx">files</span> <span class="nx">were</span> <span class="nx">found</span><span class="o">:</span>
 <span class="o">-</span> <span class="nx">package</span><span class="o">:</span><span class="s2">&quot;TYPO3.Flow&quot;</span> <span class="nx">schema</span><span class="o">:</span><span class="s2">&quot;Settings/TYPO3.Flow.aop&quot;</span> <span class="o">-&gt;</span> <span class="na">is</span> <span class="nx">valid</span>
<span class="err">…</span>
 <span class="o">-</span> <span class="nx">package</span><span class="o">:</span><span class="s2">&quot;TYPO3.Flow&quot;</span> <span class="nx">schema</span><span class="o">:</span><span class="s2">&quot;Settings/TYPO3.Flow.utility&quot;</span> <span class="o">-&gt;</span> <span class="na">is</span> <span class="nx">valid</span>

<span class="nx">The</span> <span class="nx">configuration</span> <span class="nx">is</span> <span class="nx">valid</span><span class="o">!</span>
</pre></div>
</div>
<p>See the command help for details on how to use the validation.</p>
<div class="section" id="writing-schemata">
<h3>Writing Schemata</h3>
<p>The schema format is adapted from the <a class="reference external" href="http://json-schema.org">JSON Schema standard</a>;
currently the Parts 5.1 to 5.25 of the json-schema specification are implemented,
with the following deviations from the specification:</p>
<ul class="simple">
<li>The &#8220;type&#8221; constraint is required for all properties.</li>
<li>The validator only executes the checks that make sense for a specific type,
see list of possible contstraints below.</li>
<li>The &#8220;format&#8221; constraint for string type has additional class-name and
instance-name options.</li>
<li>The &#8220;dependencies&#8221; constraint of the spec is not implemented.</li>
<li>Similar to &#8220;patternProperties&#8221; &#8220;formatProperties&#8221; can be specified specified
for dictionaries</li>
</ul>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p>While the <cite>configuration:validate</cite> command will stay like it is, the inner workings
of the schema validation are still subject to change. The location of schema files
and the syntax might be adjusted in the future, as we (and you) gather real-world
experience with this.</p>
<p class="last">With that out of the way: feel free to create custom schemata and let us know
of any issues you find or suggestion you have!</p>
</div>
<p>The schemas are searched in the path Resources/Private/Schema of all active
Packages. The schema-filenames must match the pattern
<tt class="docutils literal"><span class="pre">&lt;type&gt;.&lt;path&gt;.schema.yaml</span></tt>. The type and/or the path can also be expressed
as subdirectories of Resources/Private/Schema. So
Settings/TYPO3/Flow.persistence.schema.yaml will match the same paths as
Settings.TYPO3.Flow.persistence.schema.yaml or
Settings/TYPO3.Flow/persistence.schema.yaml.</p>
<p>Here is an example of a schema, from TYPO3.Flow.core.schema.yaml:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dictionary</span>
<span class="l-Scalar-Plain">additionalProperties</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">FALSE</span>
<span class="l-Scalar-Plain">properties</span><span class="p-Indicator">:</span>
  <span class="s">&#39;context&#39;</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span> <span class="nv">type</span><span class="p-Indicator">:</span> <span class="nv">string</span><span class="p-Indicator">,</span> <span class="nv">required</span><span class="p-Indicator">:</span> <span class="nv">TRUE</span> <span class="p-Indicator">}</span>
  <span class="s">&#39;phpBinaryPathAndFilename&#39;</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span> <span class="nv">type</span><span class="p-Indicator">:</span> <span class="nv">string</span><span class="p-Indicator">,</span> <span class="nv">required</span><span class="p-Indicator">:</span> <span class="nv">TRUE</span> <span class="p-Indicator">}</span>
</pre></div>
</div>
<p>It declares the constraints for the TYPO3.Flow.core setting:</p>
<ul class="simple">
<li>the setting is a dictionary (an associative array in PHP nomenclature)</li>
<li>properties not defined in the schema are not not allowed</li>
<li>the properties <tt class="docutils literal"><span class="pre">context</span></tt> and <tt class="docutils literal"><span class="pre">phpBinaryPathAndFilename</span></tt> are both required
and of type string</li>
</ul>
<p>General constraints for all types (for implementation see <tt class="docutils literal"><span class="pre">validate</span></tt> method in
<tt class="docutils literal"><span class="pre">SchemaValidator</span></tt>):</p>
<ul class="simple">
<li>type</li>
<li>disallow</li>
<li>enum</li>
</ul>
<p>Additional constraints allowed per type:</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">string:</th><td class="field-body">pattern, minLength, maxLength, format(date-time|date|time|uri|email|ipv4|ipv6|ip-address|host-name|class-name|interface-name)</td>
</tr>
<tr class="field-even field"><th class="field-name">number:</th><td class="field-body">maximum, minimum, exclusiveMinimum, exclusiveMaximum, divisibleBy</td>
</tr>
<tr class="field-odd field"><th class="field-name">integer:</th><td class="field-body">maximum, minimum, exclusiveMinimum, exclusiveMaximum, divisibleBy</td>
</tr>
<tr class="field-even field"><th class="field-name">boolean:</th><td class="field-body">&#8211;</td>
</tr>
<tr class="field-odd field"><th class="field-name">array:</th><td class="field-body">minItems, maxItems, items</td>
</tr>
<tr class="field-even field"><th class="field-name">dictionary:</th><td class="field-body">properties, patternProperties, formatProperties, additionalProperties</td>
</tr>
<tr class="field-odd field"><th class="field-name">null:</th><td class="field-body">&#8211;</td>
</tr>
<tr class="field-even field"><th class="field-name">any:</th><td class="field-body">&#8211;</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="242a8dc7-ff7b-e2f2-97ce-3b63697d2115" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="6ea6b5de-76c9-2168-a27e-ab7f6e853b73" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="objectmanagement" locale="">
       <properties>
        <title>Object Framework</title>
       </properties>
       <node identifier="d4208e0b-b317-ddc7-5655-84b5314bd5a8" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="a5b4935f-a364-2e85-74ac-aaee8e90f26c" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="object-framework">
<span id="ch-object-management"></span><h1>Object Framework</h1>
<p>The lifecycle of objects are managed centrally by the object framework. It offers
convenient support for Dependency Injection and provides some additional features such as
a caching mechanism for objects. Because all packages are built on this foundation it is
important to understand the general concept of objects in TYPO3 Flow.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">A very good start to understand the idea of Inversion of Control and Dependency
Injection is reading <a class="reference external" href="http://martinfowler.com/articles/injection.html">Martin Fowler&#8217;s article</a> on the topic.</p>
</div>
<div class="section" id="creating-objects">
<h2>Creating Objects</h2>
<p>In simple, self-contained applications, creating objects is as simple as using the <tt class="docutils literal"><span class="pre">new</span></tt>
operator. However, as the program gets more complex, a developer is confronted with
solving dependencies to other objects, make classes configurable (maybe through a factory
method) and finally assure a certain scope for the object (such as <tt class="docutils literal"><span class="pre">Singleton</span></tt> or
<tt class="docutils literal"><span class="pre">Prototype</span></tt>). Howard Lewis Ship explained this circumstances nicely in <a class="reference external" href="http://tapestryjava.blogspot.com/2004/08/dependency-injection-mirror-of-garbage.html">his blog</a>
(quite some time ago):</p>
<blockquote>
<div>Once you start thinking in terms of large numbers of objects, and a whole lot of just
in time object creation and configuration, the question of how to create a new object
doesn&#8217;t change (that&#8217;s what <tt class="docutils literal"><span class="pre">new</span></tt> is for) ... but the questions when and who
become  difficult to tackle. Especially when the when is very dynamic, due to
just-in-time instantiation, and the who is unknown, because there are so many places
a particular object may be used.</div></blockquote>
<p>The Object Manager is responsible for object building and dependency resolution (we&#8217;ll
discover shortly why dependency injection makes such a difference to your application
design). In order to fulfill its task, it is important that all objects are instantiated
only through the object framework.</p>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p>As a general rule of thumb for those not developing the TYPO3 Flow core itself but your very
own packages:</p>
<p class="last"><strong>Use Dependency Injection whenever possible for retrieving singletons.</strong></p>
</div>
<div class="section" id="object-scopes">
<h3>Object Scopes</h3>
<p>Objects live in a specific scope. The most commonly used are prototype and singleton:</p>
<table border="1" class="docutils">
<colgroup>
<col width="24%" />
<col width="76%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Scope</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>singleton</td>
<td>The object instance is unique during one request - each
injection by the Object Manager or explicit call of
<tt class="docutils literal"><span class="pre">get()</span></tt> returns the same instance. A request can be an
HTTP request or a run initiated from the command line.</td>
</tr>
<tr class="row-odd"><td>prototype (default)</td>
<td>The object instance is not unique - each injection or call of
the Object Factory&#8217;s <tt class="docutils literal"><span class="pre">create</span></tt> method returns a fresh instance.</td>
</tr>
<tr class="row-even"><td>session</td>
<td>The object instance is unique during the whole user session -
each injection or <tt class="docutils literal"><span class="pre">get()</span></tt> call returns the same instance.</td>
</tr>
</tbody>
</table>
<div class="admonition-background-objects-in-php admonition">
<p class="first admonition-title">Background: Objects in PHP</p>
<p>In PHP, objects of the scope <tt class="docutils literal"><span class="pre">prototype</span></tt> are created with the <tt class="docutils literal"><span class="pre">new</span></tt> operator:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$myFreshObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\MyCompany\MyPackage\MyClassName</span><span class="p">();</span>
</pre></div>
</div>
<p>In contrast to Prototype, the Singleton design pattern ensures that only one instance of a
class exists at a time. In PHP the Singleton pattern is often implemented by providing a
static function (usually called <tt class="docutils literal"><span class="pre">getInstance</span></tt>), which returns a unique instance of the
class:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Implementation of the Singleton pattern</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">ASingletonClass</span> <span class="p">{</span>

        <span class="k">protected</span> <span class="k">static</span> <span class="nv">$instance</span><span class="p">;</span>

        <span class="k">static</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">getInstance</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_object</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$instance</span><span class="p">))</span> <span class="p">{</span>
                        <span class="nx">self</span><span class="o">::</span><span class="nv">$instance</span> <span class="o">=</span> <span class="nv">$this</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$instance</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p class="last">Although this way of implementing the singleton will possibly not conflict with the Object
Manager, it is counterproductive to the integrity of the system and might raise problems
with unit testing (sometimes Singleton is referred to as an Anti Pattern).
The above examples are not recommended for the use within TYPO3 Flow applications.</p>
</div>
<p>The scope of an object is determined from its configuration (see also <a class="reference internal" href="#sect-configuring-objects">Configuring objects</a>).
The recommended way to specify the scope is the <tt class="docutils literal"><span class="pre">&#64;scope</span></tt> annotation:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * A sample class</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Scope(&quot;singleton&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Prototype is the default scope and is therefore assumed if no <tt class="docutils literal"><span class="pre">&#64;scope</span></tt> annotation or
other configuration was found.</p>
</div>
<div class="section" id="creating-prototypes">
<h3>Creating Prototypes</h3>
<p>To create prototype objects, just use the <tt class="docutils literal"><span class="pre">new</span></tt> operator as you are used to:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$myFreshObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\MyCompany\MyPackage\MyClassName</span><span class="p">();</span>
</pre></div>
</div>
<p>When you do this, some magic is going on behind the scenes which still makes sure the object
you get back is managed by the object framework. Thus, all dependencies are properly injected
into the object, lifecycle callbacks are fired, and you can use Aspect-Oriented Programming, etc.</p>
<div class="admonition-behind-the-scenes-of-the-object-framework admonition">
<p class="first admonition-title">Behind the scenes of the Object Framework</p>
<p>In order to provide the functionality that you can just use <tt class="docutils literal"><span class="pre">new</span></tt> to create new
prototype objects, a lot of advanced things happen behind the scenes.</p>
<p>TYPO3 Flow internally copies all classes to another file, and appends <tt class="docutils literal"><span class="pre">_Original</span></tt> to their
class name. Then, it creates a new class under the original name where all the magic is
happening.</p>
<p class="last">However, you as a user do not have to deal with that. The only thing you need to remember
is using <tt class="docutils literal"><span class="pre">new</span></tt> for creating new Prototype objects. And you might know this from PHP ;-)</p>
</div>
</div>
<div class="section" id="retrieving-singletons">
<h3>Retrieving Singletons</h3>
<p>The Object Manager maintains a registry of all instantiated singletons and ensures that
only one instance of each class exists. The preferred way to retrieve a singleton object
is dependency injection.</p>
<p>Example: Retrieving the Object Manager through dependency injection</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * A sample class</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">SampleClass</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var \TYPO3\Flow\Object\ObjectManagerInterface</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$objectManager</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Constructor.</span>
<span class="sd">         * The Object Manager will automatically be passed (injected) by the object</span>
<span class="sd">         * framework on instantiating this class.</span>
<span class="sd">         *</span>
<span class="sd">         * @param \TYPO3\Flow\Object\ObjectManagerInterface $objectManager</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">\TYPO3\Flow\Object\ObjectManagerInterface</span> <span class="nv">$objectManager</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">objectManager</span> <span class="o">=</span> <span class="nv">$objectManager</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Once the <tt class="docutils literal"><span class="pre">SampleClass</span></tt> is being instantiated, the object framework will automagically
pass a reference to the Object Manager (which is an object of scope singleton) as an
argument to the constructor. This kind of dependency injection is called
Constructor Injection and will be explained - together with other kinds of injection -
in one of the later sections.</p>
<p>Although dependency injection is what you should strive for, it might happen that you need
to retrieve object instances directly. The <tt class="docutils literal"><span class="pre">ObjectManager</span></tt> provides methods for
retrieving object instances for these rare situations. First, you need an instance of the
<tt class="docutils literal"><span class="pre">ObjectManager</span></tt> itself, again by taking advantage of constructor injection:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">\TYPO3\Flow\Object\ObjectManagerInterface</span> <span class="nv">$objectManager</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">objectManager</span> <span class="o">=</span> <span class="nv">$objectManager</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">In the text, we commonly refer to the <tt class="docutils literal"><span class="pre">ObjectManager</span></tt>. However, in your code, you should
always use the <tt class="docutils literal"><span class="pre">ObjectManagerInterface</span></tt> if you need an instance of the Object Manager injected.</p>
</div>
<p>To explicitly retrieve an object instance use the <tt class="docutils literal"><span class="pre">get()</span></tt> method:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$myObjectInstance</span> <span class="o">=</span> <span class="nv">$objectManager</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;MyCompany\MyPackage\MyClassName&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>It is not possible to pass arguments to the constructor of the object, as the object might
be already instantiated when you call <tt class="docutils literal"><span class="pre">get()</span></tt>. If the object needs constructor arguments,
these must be <a class="reference internal" href="#sect-objects-yaml">configured in Objects.yaml</a>.</p>
</div>
<div class="section" id="lifecycle-methods">
<h3>Lifecycle methods</h3>
<p>The lifecycle of an object goes through different stages. It boils down to the following
order:</p>
<ol class="arabic simple">
<li>Solve dependencies for constructor injection</li>
<li>Create an instance of the object class, injecting the constructor dependencies</li>
<li>Solve and inject dependencies for setter injection</li>
<li>Live a happy object-life and solve exciting tasks</li>
<li>Dispose the object instance</li>
</ol>
<p>Your object might want to take some action after certain of the above steps. Whenever one
of the following methods exists in the object class, it will be invoked after the related
lifecycle step:</p>
<ol class="arabic simple">
<li>No action after this step</li>
<li>During instantiation the function <tt class="docutils literal"><span class="pre">__construct()</span></tt> is called (by PHP itself),
dependencies are passed to the constructor arguments</li>
<li>After all dependencies have been injected (through constructor- or setter injection)
the object&#8217;s <tt class="docutils literal"><span class="pre">initializeObject()</span></tt> method is called. The name of this method is configurable
inside Objects.yaml. <tt class="docutils literal"><span class="pre">initializeObject()</span></tt> is also called if no dependencies were injected.</li>
<li>During the life of an object no special lifecycle methods are called</li>
<li>Before destruction of the object, the function <tt class="docutils literal"><span class="pre">shutdownObject()</span></tt> is called. The name of
this method is also configurable.</li>
<li>On disposal, the function <tt class="docutils literal"><span class="pre">__destruct()</span></tt> is called (by PHP itself)</li>
</ol>
<p>We strongly recommend that you use the <tt class="docutils literal"><span class="pre">shutdownObject</span></tt> method instead of PHP&#8217;s
<tt class="docutils literal"><span class="pre">__destruct</span></tt> method for shutting down your object. If you used <tt class="docutils literal"><span class="pre">__destruct</span></tt> it might
happen that important parts of the framework are already unavailable. Here&#8217;s a simple
example with all kinds of lifecycle methods:</p>
<p>Example: Sample class with lifecycle methods</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="k">protected</span> <span class="nv">$bar</span><span class="p">;</span>
        <span class="k">protected</span> <span class="nv">$identifier</span> <span class="o">=</span> <span class="s1">&#39;Untitled&#39;</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">echo</span> <span class="p">(</span><span class="s1">&#39;Constructing object ...&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">injectBar</span><span class="p">(</span><span class="nx">\MyCompany\MyPackage\BarInterface</span> <span class="nv">$bar</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span> <span class="o">=</span> <span class="nv">$bar</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">setIdentifier</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">identifier</span> <span class="o">=</span> <span class="nv">$identifier</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">initializeObject</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">echo</span> <span class="p">(</span><span class="s1">&#39;Initializing object ...&#39;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">shutdownObject</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">echo</span> <span class="p">(</span><span class="s1">&#39;Shutting down object ...&#39;</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">__destruct</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">echo</span> <span class="p">(</span><span class="s1">&#39;Destructing object ...&#39;</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Output:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Constructing</span> <span class="nx">object</span> <span class="o">...</span>
<span class="nx">Initializing</span> <span class="nx">object</span> <span class="o">...</span>
<span class="nx">Shutting</span> <span class="nx">down</span> <span class="nx">object</span> <span class="o">...</span>
<span class="nx">Destructing</span> <span class="nx">object</span> <span class="o">...</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="object-registration-and-api">
<h2>Object Registration and API</h2>
<div class="section" id="object-framework-api">
<h3>Object Framework API</h3>
<p>The object framework provides a lean API for registering, configuring and retrieving
instances of objects. Some of the methods provided are exclusively used within TYPO3 Flow
package or in test cases and should possibly not be used elsewhere. By offering
Dependency Injection, the object framework helps you to avoid creating rigid
interdependencies between objects and allows for writing code which is hardly or even not
at all aware of the framework it is working in. Calls to the Object Manager should
therefore be the exception.</p>
<p>For a list of available methods please refer to the API documentation of the interface
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Object\ObjectManagerInterface</span></tt>.</p>
</div>
<div class="section" id="object-names-vs-class-names">
<h3>Object Names vs. Class Names</h3>
<p>We first need to introduce some namings: A class name is the name of a PHP class, while an
object name is an identifier which is used inside the object framework to identify a certain
object.</p>
<p>By default, the object name is identical to the PHP class which contains the
object&#8217;s code. A class called <tt class="docutils literal"><span class="pre">MyCompany\MyPackage\MyImplementation</span></tt> will be
automatically available as an object with the exact same name. Every part of the system
which asks for an object with a certain name will therefore - by default - get an instance
of the class of that name.</p>
<p>It is possible to replace the original implementation of an
object by another one. In that case the class name of the new implementation will
naturally differ from the object name which stays the same at all times. In these cases it
is important to be aware of the fine difference between an object name and a class name.</p>
<p>All PHP interfaces for which only one implementation class exist are also automatically
registered as object names, with the implementation class being returned when asked
for an instance of the interface.</p>
<p>Thus, you can also ask for interface implementations:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$objectTypeInstance</span> <span class="o">=</span> <span class="nv">$objectManager</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;MyCompany\MyPackage\MyInterface&#39;</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If zero or more than one class implements the interface, the Object Manager will
throw an exception.</p>
</div>
<p>The advantage of programming against interfaces is the increased
flexibility: By referring to interfaces rather than classes it is possible to write code
depending on other classes without the need to be specific about the implementation. Which
implementation will actually be used can be set at a later point in time by simple means
of configuration.</p>
</div>
</div>
<div class="section" id="object-dependencies">
<h2>Object Dependencies</h2>
<p>The intention to base an application on a combination of packages and objects is to force
a clean separation of domains which are realized by dedicated objects. The less each
object knows about the internals of another object, the easier it is to modify or replace
one of them, which in turn makes the whole system flexible. In a perfect world, each of
the objects could be reused in a variety of contexts, for example independently from
certain packages and maybe even outside the TYPO3 Flow framework.</p>
<div class="section" id="dependency-injection">
<h3>Dependency Injection</h3>
<p>An important prerequisite for reusable code is already met by encouraging encapsulation
through object orientation. However, the objects are still aware of their environment as
they need to actively collaborate with other objects and the framework itself: An
authentication object will need a logger for logging intrusion attempts and the code of a
shop system hopefully consists of more than just one class. Whenever an object refers to
another directly, it adds more complexity and removes flexibility by opening new
interdependencies. It is very difficult or even impossible to reuse such hardwired classes
and testing them becomes a nightmare.</p>
<p>By introducing Dependency Injection, these interdependencies are minimized by inverting
the control over resolving the dependencies: Instead of asking for the instance of an
object actively, the depending object just gets one injected by the Object Manager.
This methodology is also referred to as the &#8220;<a class="reference external" href="http://en.wikipedia.org/wiki/Hollywood_Principle">Hollywood Principle</a>&#8221;: <em>Don&#8217;t call us,
we&#8217;ll call you.</em> It helps in the development of code with loose coupling and high
cohesion &#8212; or in short: It makes you a better programmer.</p>
<p>In the context of the previous example it means that the authentication object announces
that it needs a logger which implements a certain PHP interface (for example the
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Log\LoggerInterface</span></tt>).
The object itself has no control over what kind of logger (file-logger,
sms-logger, ...) it finally gets and it doesn&#8217;t have to care about it anyway as long as it
matches the expected API. As soon as the authentication object is instantiated, the object
manager will resolve these dependencies, prepare an instance of a logger and
inject it to the authentication object.</p>
<div class="admonition-reading-tip admonition">
<p class="first admonition-title">Reading Tip</p>
<p class="last"><a class="reference external" href="http://www.ddj.com/dept/java/184405016">An article</a> by Jonathan Amsterdam discusses the difference between creating an object
and requesting one (i.e. using <tt class="docutils literal"><span class="pre">new</span></tt> versus using dependency injection). It
demonstrates why <tt class="docutils literal"><span class="pre">new</span></tt> should be considered as a low-level tool and outlines issues
with polymorphism. He doesn&#8217;t mention dependency injection though ...</p>
</div>
<p>Dependencies on other objects can be declared in the object&#8217;s configuration (see <a class="reference internal" href="#sect-configuring-objects">Configuring objects</a>) or they can be solved automatically (so called autowiring).
Generally there are two modes of dependency injection supported by TYPO3 Flow:
Constructor Injection and Setter Injection.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Please note that Flow removes all injected properties before serializing an object.
Then after unserializing injections happen again. That means that injected properties are
fresh instances and do not keep any state from before the serialization. That hold true
also for Prototypes. If you want to keep a Prototype instance with its state throughout
a serialize/unserialize cycle you should not inject the Prototype but rather create it in
constructor of the object.</p>
</div>
</div>
<div class="section" id="constructor-injection">
<h3>Constructor Injection</h3>
<p>With constructor injection, the dependencies are passed as constructor arguments to the
depending object while it is instantiated. Here is an example of an object <tt class="docutils literal"><span class="pre">Foo</span></tt> which
depends on an object <tt class="docutils literal"><span class="pre">Bar</span></tt>:</p>
<p>Example: A simple example for Constructor Injection</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="k">protected</span> <span class="nv">$bar</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">\MyCompany\MyPackage\BarInterface</span> <span class="nv">$bar</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span> <span class="o">=</span> <span class="nv">$bar</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span><span class="o">-&gt;</span><span class="na">doSomethingElse</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>So far there&#8217;s nothing special about this class, the type hint just makes sure that an instance of
a class implementing the <tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\BarInterface</span></tt> is passed to the constructor.
However, this is already a quite flexible approach because the type of <tt class="docutils literal"><span class="pre">$bar</span></tt> can be
determined from outside by just passing one or the another implementation to the
constructor.</p>
<p>Now the TYPO3 Flow Object Manager does some magic: By a mechanism called Autowiring all
dependencies which were declared in a constructor will be injected automagically if the
constructor argument provides a type definition (i.e.
<tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\BarInterface</span></tt> in the above example). Autowiring is activated by
default (but can be switched off), therefore all you have to do is to write your
constructor method.</p>
<p>The object framework can also be configured manually to inject a certain object or object
type. You&#8217;ll have to do that either if you want to switch off autowiring or want to
specify a configuration which differs from would be done automatically.</p>
<p>Example: Objects.yaml file for Constructor Injection</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">MyCompany\MyPackage\Foo</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">1</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">object</span><span class="p-Indicator">:</span> <span class="s">&#39;MyCompany\MyPackage\Bar&#39;</span>
</pre></div>
</div>
<p>The three lines above define that an object instance of <tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\Bar</span></tt> must
be passed to the first argument of the constructor when an instance of the object
<tt class="docutils literal"><span class="pre">MyCompany\MyPackage\Foo</span></tt> is created.</p>
</div>
<div class="section" id="setter-injection">
<h3>Setter Injection</h3>
<p>With setter injection, the dependencies are passed by calling setter methods of the
depending object right after it has been instantiated. Here is an example of the <tt class="docutils literal"><span class="pre">Foo</span></tt>
class which depends on a <tt class="docutils literal"><span class="pre">Bar</span></tt> object - this time with setter injection:</p>
<p>Example: A simple example for Setter Injection</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="k">protected</span> <span class="nv">$bar</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">setBar</span><span class="p">(</span><span class="nx">\MyCompany\MyPackage\BarInterface</span> <span class="nv">$bar</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span> <span class="o">=</span> <span class="nv">$bar</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span><span class="o">-&gt;</span><span class="na">doSomethingElse</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Analog to the constructor injection example, a <tt class="docutils literal"><span class="pre">BarInterface</span></tt> compatible object is
injected into the <tt class="docutils literal"><span class="pre">Foo</span></tt> object. In this case, however, the injection only takes
place after the class has been instantiated and a possible constructor method has been
called. The necessary configuration for the above example looks like this:</p>
<p>Example: Objects.yaml file for Setter Injection</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">MyCompany\MyPackage\Foo</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">properties</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">bar</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">object</span><span class="p-Indicator">:</span> <span class="s">&#39;MyCompany\MyPackage\BarInterface&#39;</span>
</pre></div>
</div>
<p>Unlike constructor injection, setter injection like in the above example does not offer
the autowiring feature. All dependencies have to be declared explicitly in the object
configuration.</p>
<p>To save you from writing large configuration files, TYPO3 Flow supports a second
type of setter methods: By convention all methods whose name start with <tt class="docutils literal"><span class="pre">inject</span></tt> are
considered as setters for setter injection. For those methods no further configuration is
necessary, dependencies will be autowired (if autowiring is not disabled):</p>
<p>Example: The preferred way of Setter Injection, using an inject method</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="k">protected</span> <span class="nv">$bar</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">injectBar</span><span class="p">(</span><span class="nx">\MyCompany\MyPackage\BarInterface</span> <span class="nv">$bar</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span> <span class="o">=</span> <span class="nv">$bar</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span><span class="o">-&gt;</span><span class="na">doSomethingElse</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Note the new method name <tt class="docutils literal"><span class="pre">injectBar</span></tt> - for the above example no further configuration is
required. Using <tt class="docutils literal"><span class="pre">inject*</span></tt> methods is the preferred way for setter
injection in TYPO3 Flow.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If both, a <tt class="docutils literal"><span class="pre">set*</span></tt> and an <tt class="docutils literal"><span class="pre">inject*</span></tt> method exist for the same property, the
<tt class="docutils literal"><span class="pre">inject*</span></tt> method has precedence.</p>
</div>
</div>
<div class="section" id="constructor-or-setter-injection">
<h3>Constructor- or Setter Injection?</h3>
<p>The natural question which arises at this point is <em>Should I use constructor- or setter
injection?</em> There is no answer across-the-board &#8212; it mainly depends on the situation
and your preferences. The authors of the Java-based <a class="reference external" href="http://www.springframework.org">Spring Framework</a> for example
prefer Setter Injection for its flexibility. The more puristic developers of
<a class="reference external" href="http://www.picocontainer.org">PicoContainer</a> strongly plead for using Constructor Injection for its cleaner
approach. Reasons speaking in favor of constructor injections are:</p>
<ul class="simple">
<li>Constructor Injection makes a stronger dependency contract</li>
<li>It enforces a determinate state of the depending object:
using setter Injection, the injected object is only available after the constructor
has been called</li>
</ul>
<p>However, there might be situations in which constructor injection is not possible or
even cumbersome:</p>
<ul class="simple">
<li>If an object has many dependencies and maybe even many optional dependencies, setter
injection is a better solution.</li>
<li>Subclasses are not always in control over the arguments passed to the constructor or
might even be incapable of overriding the original constructor.
Then setter injection is your only chance to get dependencies injected.</li>
<li>Setter injection can be helpful to avoid circular dependencies between objects.</li>
<li>Setters provide more flexibility to unit tests than a fixed set of constructor
arguments</li>
</ul>
</div>
<div class="section" id="property-injection">
<h3>Property Injection</h3>
<p>Setter injection is the academic, clean way to set dependencies from outside. However,
writing these setters can become quite tiresome if all they do is setting the property.
For these cases TYPO3 Flow provides support for Property Injection:</p>
<p>Example: Example for Property Injection</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * An instance of a BarInterface compatible object.</span>
<span class="sd">         *</span>
<span class="sd">         * @var \MyCompany\MyPackage\BarInterface</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$bar</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span><span class="o">-&gt;</span><span class="na">doSomethingElse</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>You could say that property injection is the same like setter injection &#8212; just without the
setter. The <tt class="docutils literal"><span class="pre">Inject</span></tt> annotation tells the object framework that the property is
supposed to be injected and the <tt class="docutils literal"><span class="pre">&#64;var</span></tt> annotation specifies the type. Note that property
injection even works (and should only be used) with protected properties. The Objects.yaml
configuration for property injection is identical to the setter injection configuration.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If a setter method exists for the same property, it has precedence.</p>
</div>
<p>Setting properties directly, without a setter method, surely is convenient - but is it
clean enough? In general it is a bad idea to allow direct access to mutable properties
because you never know if at some point you need to take some action while a property is
set. And if thousands of users (or only five) use your API, it&#8217;s hard to change your
design decision in favor of a setter method.</p>
<p>However, we don&#8217;t consider injection methods as part of the public API. As you&#8217;ve seen,
TYPO3 Flow takes care of all the object dependencies and the only other code working with
injection methods directly are unit tests. Therefore we consider it safe to say that you
can still switch back from property injection to setter injection without problems if it
turns out that you really need it.</p>
</div>
<div class="section" id="lazy-dependency-injection">
<h3>Lazy Dependency Injection</h3>
<p>Using Property Injection is, in its current implementation, the most performant way
to inject a dependency. As an important additional benefit you also get Lazy
Dependency Injection: instead of loading the class of the dependency, instantiating
and intializing it, a <tt class="docutils literal"><span class="pre">proxy</span></tt> is injected instead. This object waits until it
will be accessed the first time. Once you start using the dependency, the proxy
will build or retrieve the real dependency, call the requested method and return
the result. On all following method calls, the real object will be used.</p>
<p>By default all dependencies injected through Property Injection are lazy. Usually
this process is fully transparent to the user, unless you start passing around
dependencies to other objects:</p>
<p>Example: Passing a dependency around</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * A dependency, injected lazily:</span>
<span class="sd">         *</span>
<span class="sd">         * @var \MyCompany\MyPackage\BarInterface</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$bar</span><span class="p">;</span>

        <span class="o">...</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">baz</span><span class="o">-&gt;</span><span class="na">doSomethingElse</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">);</span>
        <span class="p">}</span>

<span class="p">}</span>

<span class="k">class</span> <span class="nc">Baz</span> <span class="p">{</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomethingElse</span><span class="p">(</span><span class="nx">Bar</span> <span class="nv">$bar</span><span class="p">)</span> <span class="p">{</span>
                <span class="o">...</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>The above example will break: at the time you pass <tt class="docutils literal"><span class="pre">$this-&gt;bar</span></tt> to the
<tt class="docutils literal"><span class="pre">doSomethingElse()</span></tt> method, it is not yet a <tt class="docutils literal"><span class="pre">Bar</span></tt> object but a
<tt class="docutils literal"><span class="pre">DependencyProxy</span></tt> object. Because <tt class="docutils literal"><span class="pre">doSomethingElse()</span></tt> has a type hint requiring
a <tt class="docutils literal"><span class="pre">Bar</span></tt> object, PHP will issue a fatal error.</p>
<p>There are two ways to solve this:</p>
<ul class="simple">
<li>activating the dependency manually</li>
<li>turning off lazy dependency injection for this property</li>
</ul>
<p>Example: Manually activating a dependency</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * A dependency, injected lazily:</span>
<span class="sd">         *</span>
<span class="sd">         * @var \MyCompany\MyPackage\BarInterface</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$bar</span><span class="p">;</span>

        <span class="o">...</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span> <span class="nx">instanceof</span> <span class="nx">\TYPO3\Flow\Object\DependencyInjection\DependencyProxy</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span><span class="o">-&gt;</span><span class="na">_activateDependency</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">baz</span><span class="o">-&gt;</span><span class="na">doSomethingElse</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">);</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>In the example above, <tt class="docutils literal"><span class="pre">$this-&gt;bar</span></tt> is activated before it is passed to the next
method. It&#8217;s important to check if the object still is a proxy because otherwise
calling <tt class="docutils literal"><span class="pre">_activateDependency()</span></tt> will fail.</p>
<p>Example: Turning off lazy dependency injection</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * A dependency, injected eagerly</span>
<span class="sd">         *</span>
<span class="sd">         * @var \MyCompany\MyPackage\BarInterface</span>
<span class="sd">         * @Flow\Inject(lazy = FALSE)</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$bar</span><span class="p">;</span>

        <span class="o">...</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">baz</span><span class="o">-&gt;</span><span class="na">doSomethingElse</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">);</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>In the second solution, lazy dependency injection is turned off. This way you can
be sure that <tt class="docutils literal"><span class="pre">$this-&gt;bar</span></tt> always contains the object you expected, but you don&#8217;t
benefit from the speed optimizations.</p>
</div>
<div class="section" id="settings-injection">
<h3>Settings Injection</h3>
<p>No, this headline is not misspelled. TYPO3 Flow offers some convenient feature which allows for
automagically injecting the settings of the current package without the need to configure
the injection. If a class contains a method called <tt class="docutils literal"><span class="pre">injectSettings</span></tt> and autowiring is
not disabled for that object, the Object Builder will retrieve the settings of the package
the object belongs to and pass it to the <tt class="docutils literal"><span class="pre">injectSettings</span></tt> method.</p>
<p>Example: the magic injectSettings method</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="k">protected</span> <span class="nv">$settings</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">injectSettings</span><span class="p">(</span><span class="k">array</span> <span class="nv">$settings</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="o">=</span> <span class="nv">$settings</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
                <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">doSomething</span></tt> method will output the settings of the <tt class="docutils literal"><span class="pre">MyPackage</span></tt> package.</p>
</div>
<div class="section" id="required-dependencies">
<h3>Required Dependencies</h3>
<p>All dependencies defined in a constructor are, by its nature, required. If a dependency
can&#8217;t be solved by autowiring or by configuration, TYPO3 Flow&#8217;s object builder will throw an
exception.</p>
<p>Also autowired setter-injected dependencies are, by default, required. If the object
builder can&#8217;t autowire an object for an injection method, it will throw an exception.</p>
</div>
<div class="section" id="dependency-resolution">
<h3>Dependency Resolution</h3>
<p>The dependencies between objects are only resolved during the instantiation process.
Whenever a new instance of an object class needs to be created, the object configuration
is checked for possible dependencies. If there is any, the required objects are built and
only if all dependencies could be resolved, the object class is finally instantiated and
the dependency injection takes place.</p>
<p>During the resolution of dependencies it might happen that circular dependencies occur. If
an object <tt class="docutils literal"><span class="pre">A</span></tt> requires an object <tt class="docutils literal"><span class="pre">B</span></tt> to be injected to its constructor and then again object <tt class="docutils literal"><span class="pre">B</span></tt>
requires an object <tt class="docutils literal"><span class="pre">A</span></tt> likewise passed as a constructor argument, none of the two classes can
be instantiated due to the mutual dependency. Although it is technically possible (albeit
quite complex) to solve this type of reference, TYPO3 Flow&#8217;s policy is not to allow circular
constructor dependencies at all. As a workaround you can use setter injection instead
for either one or both of the objects causing the trouble.</p>
</div>
</div>
<div class="section" id="configuring-objects">
<span id="sect-configuring-objects"></span><h2>Configuring objects</h2>
<p>The behavior of objects significantly depends on their configuration. During the
initialization process all classes found in the various Classes/ directories are
registered as objects and an initial configuration is prepared. In a second step, other
configuration sources are queried for additional configuration options. Definitions found
at these sources are added to the base configuration in the following order:</p>
<ul class="simple">
<li>If they exist, the &lt;PackageName&gt;/Configuration/Objects.yaml will be included.</li>
<li>Additional configuration defined in the global Configuration/Objects.yaml directory is applied.</li>
<li>Additional configuration defined in the global Configuration/&lt;ApplicationScope&gt;/Objects.yaml directory is applied.</li>
</ul>
<p>Currently there are three important situations in which you want to configure objects:</p>
<ul class="simple">
<li>Override one object implementation with another</li>
<li>Set the active implementation for an object type</li>
<li>Explicitly define and configure dependencies to other objects</li>
</ul>
<div class="section" id="configuring-objects-through-objects-yaml">
<span id="sect-objects-yaml"></span><h3>Configuring Objects Through Objects.yaml</h3>
<p>If a file named Objects.yaml exists in the Configuration directory
of a package, it will be included during the configuration process. The YAML file should
stick to TYPO3 Flow&#8217;s general rules for YAML-based configuration.</p>
<p>Example: Sample Objects.yaml file</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="c1">#                                                                        #</span>
<span class="c1"># Object Configuration for the MyPackage package                         #</span>
<span class="c1">#                                                                        #</span>

<span class="c1"># @package MyPackage</span>

<span class="l-Scalar-Plain">MyCompany\MyPackage\Foo</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">1</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">object</span><span class="p-Indicator">:</span> <span class="s">&#39;MyCompany\MyPackage\Baz&#39;</span>
    <span class="l-Scalar-Plain">2</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">value</span><span class="p-Indicator">:</span> <span class="s">&quot;some string&quot;</span>
    <span class="l-Scalar-Plain">3</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">value</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
  <span class="l-Scalar-Plain">properties</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">bar</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">object</span><span class="p-Indicator">:</span> <span class="s">&#39;MyCompany\MyPackage\BarInterface&#39;</span>
    <span class="l-Scalar-Plain">enableCache</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">setting</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MyPackage.Cache.enable</span>
</pre></div>
</div>
</div>
<div class="section" id="configuring-objects-through-annotations">
<h3>Configuring Objects Through Annotations</h3>
<p>A very convenient way to configure certain aspects of objects are annotations. You write
down the configuration directly where it takes effect: in the class file. However, this
way of configuring objects is not really flexible, as it is hard coded. That&#8217;s why only
those options can be set through annotations which are part of the class design and won&#8217;t
change afterwards. Currently <tt class="docutils literal"><span class="pre">scope</span></tt>, <tt class="docutils literal"><span class="pre">inject</span></tt> and <tt class="docutils literal"><span class="pre">autowiring</span></tt> are the only
supported annotations.</p>
<p>It&#8217;s up to you defining the scope in the class directly or doing it in a Objects.yaml
configuration file – both have the same effect. We recommend using annotations in this
case, as the scope usually is a design decision which is very unlikely to be changed.</p>
<p>Example: Sample scope annotation</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * This is my great class.</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Scope(&quot;singleton&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>

<span class="p">}</span>
</pre></div>
</div>
<p>Example: Sample autowiring annotation for a class</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * This turns off autowiring for the whole class:</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Autowiring(false)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>

<span class="p">}</span>
</pre></div>
</div>
<p>Example: Sample autowiring annotation for a method</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * This turns off autowiring for a single method:</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Foo\Bar $bar</span>
<span class="sd"> * @Flow\Autowiring(false)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">injectMySpecialDependency</span><span class="p">(</span><span class="nx">\TYPO3\Foo\Bar</span> <span class="nv">$bar</span><span class="p">)</span> <span class="p">{</span>

<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="overriding-object-implementations">
<h3>Overriding Object Implementations</h3>
<p>One advantage of componentry is the ability to replace objects by others
without any bad impact on those parts depending on them.</p>
<p>A prerequisite for replaceable objects is that their classes implement a common
<a class="reference external" href="http://www.php.net/manual/en/language.oop5.interfaces.php">interface</a> which defines the public API of the original object. Other objects
which implement the same interface can then act as a true replacement for the
original object without the need to change code anywhere in the system. If this
requirement is met, the only necessary step to replace the original
implementation with a substitute is to alter the object configuration and set
the class name to the new implementation.</p>
<p>To illustrate this circumstance, consider the following classes.</p>
<p>Example: The Greeter object type</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">interface</span> <span class="nx">GreeterInterface</span> <span class="p">{</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">sayHelloTo</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Greeter</span> <span class="k">implements</span> <span class="nx">GreeterInterface</span> <span class="p">{</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">sayHelloTo</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">echo</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">.</span> <span class="nv">$name</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>During initialization the above <tt class="docutils literal"><span class="pre">Greeter</span></tt> class will automatically be
registered as the default implementation of
<tt class="docutils literal"><span class="pre">MyCompany\MyPackage\GreeterInterface</span></tt> and is available to other objects. In
the class code of another object you might find the following lines.</p>
<p>Example: Using the Greeter object type</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// Use setter injection for fetching an instance</span>
<span class="c1">// of \MyCompany\MyPackage\GreeterInterface:</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">injectGreeter</span><span class="p">(</span><span class="nx">\MyCompany\MyPackage\GreeterInterface</span> <span class="nv">$greeter</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">greeter</span> <span class="o">=</span> <span class="nv">$greeter</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">someAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">greeter</span><span class="o">-&gt;</span><span class="na">sayHelloTo</span><span class="p">(</span><span class="s1">&#39;Heike&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If we want to use the much better object
<tt class="docutils literal"><span class="pre">\TYPO3\OtherPackage\GreeterWithCompliments</span></tt>, the solution is to let the new
implementation implement the same interface.</p>
<p>Example: The improved Greeter object type</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">TYPO3\OtherPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">GreeterWithCompliments</span> <span class="k">implements</span> <span class="nx">\MyCompany\MyPackage\GreeterInterface</span> <span class="p">{</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">sayHelloTo</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">echo</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span> <span class="o">.</span> <span class="nv">$name</span> <span class="o">.</span> <span class="s1">&#39;! You look so great!&#39;</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Then we have to set which implementation of the <tt class="docutils literal"><span class="pre">MyCompany\MyPackage\GreeterInterface</span></tt>
should be active and are done:</p>
<p>Example: Objects.yaml file for object type definition</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">MyCompany\MyPackage\GreeterInterface</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">className</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3\OtherPackage\GreeterWithCompliments&#39;</span>
</pre></div>
</div>
<p>The the same code as above will get the improved <tt class="docutils literal"><span class="pre">GreeterWithCompliments</span></tt>
instead of the simple <tt class="docutils literal"><span class="pre">Greeter</span></tt> now.</p>
</div>
<div class="section" id="configuring-injection">
<h3>Configuring Injection</h3>
<p>The object framework allows for injection of straight values, objects (i.e. dependencies)
or settings either by passing them as constructor arguments during instantiation of the
object class or by calling a setter method which sets the wished property accordingly. The
necessary configuration for injecting objects is usually generated automatically by the
autowiring capabilities of the Object Builder. Injection of straight values or settings,
however, requires some explicit configuration.</p>
<div class="section" id="injection-values">
<h4>Injection Values</h4>
<p>Regardless of what injection type is used (constructor or setter injection), there are
three kinds of value which can be injected:</p>
<ul class="simple">
<li>value: static value of a simple type. Can be string, integer, boolean or array and is
passed on as is.</li>
<li>object: object name which represents a dependency.
Dependencies of the injected object are resolved and an instance of the object is
passed along.</li>
<li>setting: setting defined in one of the Settings.yaml files. A path separated by dots
specifies which setting to inject.</li>
</ul>
</div>
<div class="section" id="id1">
<h4>Constructor Injection</h4>
<p>Arguments for constructor injection are defined through the arguments option. Each
argument is identified by its position, counting starts with 1.</p>
<p>Example: Sample class for Constructor Injection</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="k">protected</span> <span class="nv">$bar</span><span class="p">;</span>
        <span class="k">protected</span> <span class="nv">$identifier</span><span class="p">;</span>
        <span class="k">protected</span> <span class="nv">$enableCache</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">\MyCompany\MyPackage\BarInterface</span> <span class="nv">$bar</span><span class="p">,</span> <span class="nv">$identifier</span><span class="p">,</span>
                    <span class="nv">$enableCache</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span> <span class="o">=</span> <span class="nv">$bar</span><span class="p">;</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">identifier</span> <span class="o">=</span> <span class="nv">$identifier</span><span class="p">;</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enableCache</span> <span class="o">=</span> <span class="nv">$enableCache</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span><span class="o">-&gt;</span><span class="na">doSomethingElse</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Example: Sample configuration for Constructor Injection</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">MyCompany\MyPackage\Foo</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">1</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">object</span><span class="p-Indicator">:</span> <span class="s">&#39;MyCompany\MyPackage\Bar&#39;</span>
    <span class="l-Scalar-Plain">2</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">value</span><span class="p-Indicator">:</span> <span class="s">&quot;some</span><span class="nv"> </span><span class="s">string&quot;</span>
    <span class="l-Scalar-Plain">3</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">setting</span><span class="p-Indicator">:</span> <span class="s">&quot;MyPackage.Cache.enable&quot;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">It is usually not necessary to configure injection of objects explicitly. It is much
more convenient to just declare the type of the constructor arguments (like
<tt class="docutils literal"><span class="pre">MyCompany\MyPackage\BarInterface</span></tt> in the above example) and let the autowiring
feature configure and resolve the dependencies for you.</p>
</div>
</div>
<div class="section" id="id2">
<h4>Setter Injection</h4>
<p>The following class and the related Objects.yaml file demonstrate the syntax for the
definition of setter injection:</p>
<p>Example: Sample class for Setter Injection</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">MyCompany\MyPackage</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Foo</span> <span class="p">{</span>

        <span class="k">protected</span> <span class="nv">$bar</span><span class="p">;</span>
        <span class="k">protected</span> <span class="nv">$identifier</span> <span class="o">=</span> <span class="s1">&#39;Untitled&#39;</span><span class="p">;</span>
        <span class="k">protected</span> <span class="nv">$enableCache</span> <span class="o">=</span> <span class="k">FALSE</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">injectBar</span><span class="p">(</span><span class="nx">\MyCompany\MyPackage\BarInterface</span> <span class="nv">$bar</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span> <span class="o">=</span> <span class="nv">$bar</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">setIdentifier</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">identifier</span> <span class="o">=</span> <span class="nv">$identifier</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">setEnableCache</span><span class="p">(</span><span class="nv">$enableCache</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enableCache</span> <span class="o">=</span> <span class="nv">$enableCache</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bar</span><span class="o">-&gt;</span><span class="na">doSomethingElse</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Example: Sample configuration for Setter Injection</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">MyCompany\MyPackage\Foo</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">properties</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">bar</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">object</span><span class="p-Indicator">:</span> <span class="s">&#39;MyCompany\MyPackage\Bar&#39;</span>
    <span class="l-Scalar-Plain">identifier</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">value</span><span class="p-Indicator">:</span> <span class="s">&#39;some</span><span class="nv"> </span><span class="s">string&#39;</span>
    <span class="l-Scalar-Plain">enableCache</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">setting</span><span class="p-Indicator">:</span> <span class="s">&#39;MyPackage.Cache.enable&#39;</span>
</pre></div>
</div>
<p>As you can see, it is important that a setter method with the same name as the property,
preceded by <tt class="docutils literal"><span class="pre">inject</span></tt> or <tt class="docutils literal"><span class="pre">set</span></tt> exists. It doesn&#8217;t matter though, if you choose <tt class="docutils literal"><span class="pre">inject</span></tt> or
<tt class="docutils literal"><span class="pre">set</span></tt>, except that <tt class="docutils literal"><span class="pre">inject</span></tt> has the advantage of being autowireable. As a rule of thumb we
recommend using <tt class="docutils literal"><span class="pre">inject</span></tt> for required dependencies and values and <tt class="docutils literal"><span class="pre">set</span></tt> for optional
properties.</p>
</div>
<div class="section" id="injection-of-objects-specified-in-settings">
<h4>Injection of Objects Specified in Settings</h4>
<p>In some cases it might be convenient to specify the name of the object to be injected in
the settings rather than in the objects configuration. This can be achieved by
specifying the settings path instead of the object name:</p>
<p>Example: Injecting an object specified in the settings</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">MyCompany\MyPackage\Foo</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">properties</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">bar</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">object</span><span class="p-Indicator">:</span> <span class="s">&#39;MyCompany.MyPackage.fooStuff.barImplementation&#39;</span>
</pre></div>
</div>
<p>Example: Settings.yaml of MyPackage</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">MyCompany</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">MyPackage</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">fooStuff</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">barImplementation</span><span class="p-Indicator">:</span> <span class="s">&#39;MyCompany\MyPackage\Bars\ASpecialBar&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="nested-object-configuration">
<h4>Nested Object Configuration</h4>
<p>While autowiring and automatic dependency injection offers a great deal of convenience, it
is sometimes necessary to have a fine grained control over which objects are injected with
which third objects injected.</p>
<p>Consider a TYPO3 Flow cache object, a <tt class="docutils literal"><span class="pre">VariableCache</span></tt> for example: the cache itself depends
on a cache backend which on its part requires a few settings passed to its constructor -
this readily prepared cache should now be injected into another object. Sounds complex?
With the objects configuration it is however possible to configure even that nested object
structure:</p>
<p>Example: Nesting object configuration</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">MyCompany\MyPackage\Controller\StandardController</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">properties</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">cache</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">object</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3\Flow\Cache\VariableCache&#39;</span>
        <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
          <span class="l-Scalar-Plain">1</span><span class="p-Indicator">:</span>
            <span class="l-Scalar-Plain">value</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MyCache</span>
          <span class="l-Scalar-Plain">2</span><span class="p-Indicator">:</span>
            <span class="l-Scalar-Plain">object</span><span class="p-Indicator">:</span>
              <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3\Flow\Cache\Backend\File&#39;</span>
              <span class="l-Scalar-Plain">properties</span><span class="p-Indicator">:</span>
                <span class="l-Scalar-Plain">cacheDirectory</span><span class="p-Indicator">:</span>
                  <span class="l-Scalar-Plain">value</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/tmp/</span>
</pre></div>
</div>
</div>
<div class="section" id="disabling-autowiring">
<h4>Disabling Autowiring</h4>
<p>Injecting dependencies is a common task. Because TYPO3 Flow can detect the type of dependencies
a constructor needs, it automatically configures the object to ensure that the necessary
objects are injected. This automation is called autowiring and is enabled by default for
every object. As long as autowiring is in effect, the Object Builder will try to autowire
all constructor arguments and all methods named after the pattern <tt class="docutils literal"><span class="pre">inject*</span></tt>.</p>
<p>If, for some reason, autowiring is not wanted, it can be disabled by setting an option in
the object configuration:</p>
<p>Example: Turning off autowiring support in Objects.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">MyCompany\MyPackage\MyObject</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">autowiring</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">off</span>
</pre></div>
</div>
<p>Autowiring can also be switched off through the <tt class="docutils literal"><span class="pre">&#64;autowiring</span> <span class="pre">off</span></tt> annotation - either
in the documentation block of a whole class or of a single method. For the latter the
annotation only has an effect when used in comment blocks of a constructor or of a method
whose name starts with <tt class="docutils literal"><span class="pre">inject</span></tt>.</p>
</div>
</div>
<div class="section" id="custom-factories">
<h3>Custom Factories</h3>
<p>Complex objects might require a custom factory which takes care of all important settings
and dependencies. As we have seen previously, a logger consists of a frontend, a backend
and configuration options for that backend. Instead of creating and configuring these
objects on your own, you can use the <tt class="docutils literal"><span class="pre">TYPO3\Flow\Log\LoggerFactory</span></tt> which provides a
convenient <tt class="docutils literal"><span class="pre">create</span></tt> method taking care of all the rest:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$myCache</span> <span class="o">=</span> <span class="nv">$loggerFactory</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;Flow_System&#39;</span><span class="p">,</span> <span class="s1">&#39;TYPO3\Flow\Log\Logger&#39;</span><span class="p">,</span>
    <span class="s1">&#39;TYPO3\Flow\Log\Backend\FileBackend&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span> <span class="err">…</span> <span class="p">));</span>
</pre></div>
</div>
<p>It is possible to specify for each object if it should be created by a custom factory
rather than the Object Builder. Consider the following configuration:</p>
<p>Example: Sample configuration for a Custom Factory</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3\Flow\Log\SystemLoggerInterface</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">scope</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">singleton</span>
  <span class="l-Scalar-Plain">factoryObjectName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3\Flow\Log\LoggerFactory</span>
  <span class="l-Scalar-Plain">factoryMethodName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">create</span>
</pre></div>
</div>
<p>From now on the LoggerFactory&#8217;s <tt class="docutils literal"><span class="pre">create</span></tt> method will be called each time an object of
type <tt class="docutils literal"><span class="pre">SystemLoggerInterface</span></tt> needs to be instantiated. If arguments were passed to the
<tt class="docutils literal"><span class="pre">ObjectManagerInterface::get()</span></tt> method or defined in the configuration, they will be
passed through to the custom factory method:</p>
<p>Example: YAML configuration for a Custom Factory with default arguments</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3\Flow\Log\SystemLoggerInterface</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">scope</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">singleton</span>
  <span class="l-Scalar-Plain">factoryObjectName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3\Flow\Log\LoggerFactory</span>
  <span class="l-Scalar-Plain">arguments</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">1</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">value</span><span class="p-Indicator">:</span> <span class="s">&#39;Flow_System&#39;</span>
    <span class="l-Scalar-Plain">2</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">value</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3\Flow\Log\Logger&#39;</span>
    <span class="l-Scalar-Plain">3</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">value</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3\Flow\Log\Backend\FileBackend&#39;</span>
    <span class="l-Scalar-Plain">4</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">setting</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3.Flow.log.systemLogger.backendOptions</span>
</pre></div>
</div>
<p>Example: PHP code using the custom factory</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$myCache</span> <span class="o">=</span> <span class="nv">$objectManager</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;TYPO3\Flow\Log\SystemLoggerInterface&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p><tt class="docutils literal"><span class="pre">$objectManager</span></tt> is a reference to the <tt class="docutils literal"><span class="pre">TYPO3\Flow\Object\ObjectManager</span></tt>.
The required arguments are automatically built from the values defined in the
object configuration.</p>
</div>
<div class="section" id="name-of-lifecycle-methods">
<h3>Name of Lifecycle Methods</h3>
<p>The default name of a lifecycle methods is <tt class="docutils literal"><span class="pre">initializeObject</span></tt> and <tt class="docutils literal"><span class="pre">shutdownObject</span></tt>.
If these methods exist, the initialization method will be called after the object has been
instantiated or recreated and all dependencies are injected and the shutdown method is
called before the Object Manager quits its service.</p>
<p>As the initialization method is being called after creating an object and after
recreating/reconstituting an object, there are cases where different code should be
executed. That is why the initialization method gets a parameter, which is one of the
<tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\ObjectManagerInterface::INITIALIZATIONCAUSE_*</span></tt> constants:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\ObjectManagerInterface::INITIALIZATIONCAUSE_CREATED</span></tt></dt>
<dd>If the object is newly created (i.e. the constructor has been called)</dd>
<dt><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\ObjectManagerInterface::INITIALIZATIONCAUSE_RECREATED</span></tt></dt>
<dd>If the object has been recreated/reconstituted (i.e. the constructor has not been
called)</dd>
</dl>
<p>The name of both methods is configurable per object for situations you don&#8217;t have control
over the name of your initialization method (maybe, because you are integrating legacy
code):</p>
<p>Example: Objects.yaml configuration of the initialization and shutdown method</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">MyCompany\MyPackage\MyObject</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">lifecycleInitializationMethod</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myInitializeMethodName</span>
  <span class="l-Scalar-Plain">lifecycleShutdownMethod</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">myShutdownMethodName</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="static-method-result-compilation">
<h2>Static Method Result Compilation</h2>
<p>Some part of a Flow application may rely on data which is static during runtime,
but which cannot or should not be hardcoded.</p>
<p>One example is the validation rules generated by the MVC framework for arguments of
a controller action: the base information (PHP methods for the actions, type hints
and arguments of these methods) is static. However, the validation rules should be
determined automatically by the framework instead of being configured or hardcoded
elsewhere. On the other hand, generating validation rules during runtime unnecessarily
slows down the application. The solution is static method result compilation.</p>
<p>A method which generates data based on information already known at compile time
can usually be made static. Consider the following example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Returns a map of action method names and their parameters.</span>
<span class="sd"> *</span>
<span class="sd"> * @return array Array of method parameters by action name</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">getActionMethodParameters</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$methodParameters</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reflectionService</span><span class="o">-&gt;</span><span class="na">getMethodParameters</span><span class="p">(</span><span class="nb">get_class</span><span class="p">(</span><span class="nv">$this</span><span class="p">),</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">actionMethodName</span><span class="p">);</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$methodParameters</span> <span class="k">as</span> <span class="nv">$parameterName</span> <span class="o">=&gt;</span> <span class="nv">$parameterInfo</span><span class="p">)</span> <span class="p">{</span>
          <span class="o">...</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$methodParameters</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In the example above, <tt class="docutils literal"><span class="pre">getActionMethodParameters()</span></tt> returns data needed during
runtime which could easily be pre-compiled.</p>
<p>By annotating the method with <tt class="docutils literal"><span class="pre">&#64;Flow\CompileStatic</span></tt> and transforming it into a
static method which does not depend on runtime services like persistence, security
and so on, the performance in production context can be improved:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Returns a map of action method names and their parameters.</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Flow\Object\ObjectManagerInterface $objectManager</span>
<span class="sd"> * @return array Array of method parameters by action name</span>
<span class="sd"> * @Flow\CompileStatic</span>
<span class="sd"> */</span>
<span class="k">static</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">getActionMethodParameters</span><span class="p">(</span><span class="nv">$objectManager</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$reflectionService</span> <span class="o">=</span> <span class="nv">$objectManager</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;TYPO3\Flow\Reflection\ReflectionService&#39;</span><span class="p">);</span>
        <span class="nv">$className</span> <span class="o">=</span> <span class="nb">get_called_class</span><span class="p">();</span>
        <span class="nv">$methodParameters</span> <span class="o">=</span> <span class="nv">$reflectionService</span><span class="o">-&gt;</span><span class="na">getMethodParameters</span><span class="p">(</span><span class="nv">$className</span><span class="p">,</span> <span class="nb">get_class_methods</span><span class="p">(</span><span class="nv">$className</span><span class="p">));</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$methodParameters</span> <span class="k">as</span> <span class="nv">$parameterName</span> <span class="o">=&gt;</span> <span class="nv">$parameterInfo</span><span class="p">)</span> <span class="p">{</span>
          <span class="o">...</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$methodParameters</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The results of methods annotated with <tt class="docutils literal"><span class="pre">CompileStatic</span></tt> will only be compile in
<tt class="docutils literal"><span class="pre">Production</span></tt> context. When Flow is started in a different context, the method
will be executed during each run.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The static method must except exactly one argument which is the TYPO3 Flow
Object Manager. You cannot use a type hint at this point (for the <tt class="docutils literal"><span class="pre">$objectManager</span></tt>
argument) because the argument passed could actually be a <tt class="docutils literal"><span class="pre">DependencyProxy</span></tt> and
not the real ObjectManager. Please refer to the section about Lazy Dependency
Injection for more information about <tt class="docutils literal"><span class="pre">DependencyProxy</span></tt>.</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="c27db03b-06a7-b51e-8da4-a6d21951558c" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="b6855a6a-89c7-e74b-f26c-2ddfacb1fcee" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="persistence" locale="">
       <properties>
        <title>Persistence</title>
       </properties>
       <node identifier="c9302522-8e37-1400-f3bb-143ae88b0d34" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="485a4d07-4582-b1be-f074-108958352d93" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="persistence">
<h1>Persistence</h1>
<p>This chapter explains how to use object persistence in TYPO3 Flow. To do this, it focuses on
the persistence based on the Doctrine 2 ORM first. There is another mechanism available,
called Generic persistence, which can be used to add your own persistence backends to
TYPO3 Flow. It is explained separately later in the chapter.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If you have experience with Doctrine 2 already, your knowledge can
be applied fully in TYPO3 Flow. If you have not worked with Doctrine 2 in the
past, it might be helpful to learn more about it, as that might clear up
questions this documentation might leave open.</p>
</div>
<div class="section" id="introductory-example">
<h2>Introductory Example</h2>
<p>Let&#8217;s look at the following example as an introduction to how TYPO3 Flow handles persistence.
We have a domain model of a Blog, consisting of Blog, Post, Comment and Tag objects:</p>
<div class="figure">
<img alt="The objects of the Blog domain model" class="screenshot-detail" src="_Resources/Persistent/459bcdb77d7e49c947c9efdd953cfc9e3f97af39/Persistence-BlogDomainModel.png" style="width: 513px" />
<p class="caption">The objects of the Blog domain model</p>
</div>
<p>Connections between those objects are built (mostly) by simple references in PHP, as a
look at the <tt class="docutils literal"><span class="pre">addPost()</span></tt> method of the <tt class="docutils literal"><span class="pre">Blog</span></tt> class shows:</p>
<p>Example: The Blog&#8217;s addPost() method</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $post</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">addPost</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">setBlog</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">posts</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The same principles are applied to the rest of the classes, resulting in an object tree of
a blog object holding several posts, those in turn having references to their associated
comments and tags.</p>
<p>But now we need to make sure the <tt class="docutils literal"><span class="pre">Blog</span></tt> and the data in it are still available the next
time we need them. In the good old days of programming you might have
added some ugly database calls all over the system at this point. In the currently
widespread practice of loving Active Record you&#8217;d still add <tt class="docutils literal"><span class="pre">save()</span></tt> methods to all or most
of your objects. But can it be even easier?</p>
<p>To access an object you need to hold some reference to it. You can get that reference by
creating an object or by following some reference to it from some object you already have.
This leaves you at a point where you need to find that &#8220;first object&#8221;. This is done by
using a Repository. A Repository is the librarian of your system, knowing about all the
objects it manages. In our model the <tt class="docutils literal"><span class="pre">Blog</span></tt> is the entry point to our object tree,
so we will add a <tt class="docutils literal"><span class="pre">BlogRepository</span></tt>, allowing us to find <tt class="docutils literal"><span class="pre">Blog</span></tt> instances by the criteria we need.</p>
<p>Now, before we can find a <tt class="docutils literal"><span class="pre">Blog</span></tt>, we need to create and save one. What we do is create the
object and <tt class="docutils literal"><span class="pre">add</span></tt> it to the <tt class="docutils literal"><span class="pre">BlogRepository</span></tt>. This will automagically persist your Blog
and you can retrieve it again later.</p>
<p>For all that magic to work as expected, you need to give some hints. This doesn&#8217;t mean you
need to write tons of XML, a few annotations in your code are enough:</p>
<p>Example: Persistence-related annotations in the Blog class</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">TYPO3\Blog\Domain\Model</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * A Blog object</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Entity</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Blog</span> <span class="p">{</span>

    <span class="sd">/**</span>
<span class="sd">     * @var string</span>
<span class="sd">     * @Flow\Validate(type=&quot;Text&quot;)</span>
<span class="sd">     * @Flow\Validate(type=&quot;StringLength&quot;, options={ &quot;minimum&quot;=1, &quot;maximum&quot;=80 })</span>
<span class="sd">     * @ORM\Column(length=80)</span>
<span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$title</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @var \Doctrine\Common\Collections\ArrayCollection&lt;\TYPO3\Blog\Domain\Model\Post&gt;</span>
<span class="sd">     * @ORM\OneToMany(mappedBy=&quot;blog&quot;)</span>
<span class="sd">     * @ORM\OrderBy({&quot;date&quot; = &quot;DESC&quot;})</span>
<span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$posts</span><span class="p">;</span>

    <span class="o">...</span>

<span class="p">}</span>
</pre></div>
</div>
<p>The first annotation to note is the <tt class="docutils literal"><span class="pre">Entity</span></tt> annotation, which tells the persistence
framework it needs to persist <tt class="docutils literal"><span class="pre">Blog</span></tt> instances if they have been added to a Repository. In
the <tt class="docutils literal"><span class="pre">Blog</span></tt> class we have some member variables, they are persisted as well by default. The
persistence framework knows their types by looking at the <tt class="docutils literal"><span class="pre">&#64;var</span></tt>  annotation you use anyway
when documenting your code (you do document your code, right?).</p>
<p>The Column annotation on <tt class="docutils literal"><span class="pre">$title</span></tt> is an optimization since we allow only 80 chars
anyway. In case of the <tt class="docutils literal"><span class="pre">$posts</span></tt> property the persistence framework persists the objects held
in that <tt class="docutils literal"><span class="pre">ArrayCollection</span></tt> as independent objects in a one-to-many relationship. Apart from those
annotations your domain object&#8217;s code is completely unaware of the persistence infrastructure.</p>
<p>Let&#8217;s conclude by taking a look at the BlogRepository code:</p>
<p>Example: Code of a simple BlogRepository</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A BlogRepository</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Scope(&quot;singleton&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">BlogRepository</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Persistence\Repository</span> <span class="p">{</span>
<span class="p">}</span>
</pre></div>
</div>
<p>As you can see we get away with very little code by simply extending the TYPO3 Flow-provided
repository class, and still we already have methods like <tt class="docutils literal"><span class="pre">findAll()</span></tt> and even magic
calls like <tt class="docutils literal"><span class="pre">findOneBy&lt;PropertyName&gt;()</span></tt> available. If we need some specialized find
methods in our repository, we can make use of the query building API:</p>
<p>Example: Using the query building API in a Repository</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A PostRepository</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">PostRepository</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Persistence\Repository</span> <span class="p">{</span>

    <span class="sd">/**</span>
<span class="sd">     * Finds posts by the specified tag and blog</span>
<span class="sd">     *</span>
<span class="sd">     * @param \TYPO3\Blog\Domain\Model\Tag $tag</span>
<span class="sd">     * @param \TYPO3\Blog\Domain\Model\Blog $blog The blog the post must refer to</span>
<span class="sd">     * @return \TYPO3\Flow\Persistence\QueryResultInterface The posts</span>
<span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">findByTagAndBlog</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Tag</span> <span class="nv">$tag</span><span class="p">,</span>
      <span class="nx">\TYPO3\Blog\Domain\Model\Blog</span> <span class="nv">$blog</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$query</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createQuery</span><span class="p">();</span>
        <span class="k">return</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">matching</span><span class="p">(</span>
            <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">logicalAnd</span><span class="p">(</span>
                <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">equals</span><span class="p">(</span><span class="s1">&#39;blog&#39;</span><span class="p">,</span> <span class="nv">$blog</span><span class="p">),</span>
                <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">contains</span><span class="p">(</span><span class="s1">&#39;tags&#39;</span><span class="p">,</span> <span class="nv">$tag</span><span class="p">)</span>
            <span class="p">)</span>
        <span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setOrderings</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
            <span class="s1">&#39;date&#39;</span> <span class="o">=&gt;</span> <span class="nx">\TYPO3\Flow\Persistence\QueryInterface</span><span class="o">::</span><span class="na">ORDER_DESCENDING</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If you like to do things the hard way you can get away with implementing
<tt class="docutils literal"><span class="pre">\TYPO3\Flow\Persistence\RepositoryInterface</span></tt> yourself, though that is
something the normal developer never has to do.</p>
</div>
<div class="section" id="basics-of-persistence-in-typo3-flow">
<h2>Basics of Persistence in TYPO3 Flow</h2>
<div class="section" id="on-the-principles-of-ddd">
<h3>On the Principles of DDD</h3>
<p>From Evans, the rules we need to enforce include:</p>
<ul class="simple">
<li>The root Entity has global identity and is ultimately responsible for checking
invariants.</li>
<li>Root Entities have global identity. Entities inside the boundary have local identity,
unique only within the Aggregate.</li>
<li>Nothing outside the Aggregate boundary can hold a reference to anything inside, except
to the root Entity. The root Entity can hand references to the internal Entities to
other objects, but they can only use them transiently (within a single method or
block).</li>
<li>Only Aggregate Roots can be obtained directly with database queries. Everything else
must be done through traversal.</li>
<li>Objects within the Aggregate can hold references to other Aggregate roots.</li>
<li>A delete operation must remove everything within the Aggregate boundary all at once.</li>
<li>When a change to any object within the Aggregate boundary is committed, all invariants
of the whole Aggregate must be satisfied.</li>
</ul>
</div>
<div class="section" id="on-the-relationship-between-adding-and-retrieving">
<h3>On the relationship between adding and retrieving</h3>
<p>When you <tt class="docutils literal"><span class="pre">add()</span></tt> something to a repository and do a <tt class="docutils literal"><span class="pre">findAll()</span></tt> immediately
afterwards, you might be surprised: the freshly added object will not be found. This is
not a bug, but a decision we took on purpose. Here is why.</p>
<p>When you add an object to a repository, it is added to the internal identity map and will
be persisted later (when <tt class="docutils literal"><span class="pre">persistAll()</span></tt> is called). It is therefore still in a transient
state - but all query operations go directly to the underlying data storage, because we
need to check that anyway. So instead of trying to query the in-memory objects we decided
to ignore transient objects for queries <a class="footnote-reference" href="#id7" id="id1">[1]</a>.</p>
<p>If you need to query for objects you just created, feel free to have the
<tt class="docutils literal"><span class="pre">PersistenceManager</span></tt> injected and use <tt class="docutils literal"><span class="pre">persistAll()</span></tt> in your code.</p>
</div>
<div class="section" id="how-changes-are-persisted">
<h3>How changes are persisted</h3>
<p>When you <tt class="docutils literal"><span class="pre">add</span></tt> or <tt class="docutils literal"><span class="pre">remove</span></tt> an object to or from a repository, the object will be added to
or removed from the underlying persistence as expected upon <tt class="docutils literal"><span class="pre">persistAll</span></tt>. But what about
changes to already persisted objects? As we have seen, those changes are only persisted, if
the changed object is given to <tt class="docutils literal"><span class="pre">update</span></tt> on the corresponding repository.</p>
<p>Now, for objects that have no corresponding repository, how are changes persisted? In the
same way you fetch those objects from their parent - by traversal. TYPO3 Flow follows references
from objects managed in a repository (aggregate roots) for all persistence operations,
unless the referenced object itself is an aggregate root.</p>
<p>When using the Doctrine 2 persistence, this is done by virtually creating cascade attributes
on the mapped associations. That means if you changed an object attached to some aggregate
root, you need to hand that aggregate root to <tt class="docutils literal"><span class="pre">update</span></tt> for the change to be persisted.</p>
</div>
<div class="section" id="safe-request-methods-are-read-only">
<h3>Safe request methods are read-only</h3>
<p>According to the HTTP 1.1 specification, so called &#8220;safe request methods&#8221; (usually
GET or HEAD requests) should not change your data on the server side and should be
considered read-only. If you need to add, modify or remove data, you should use the
respective request methods (POST, PUT, DELETE and PATCH).</p>
<p>Flow supports this principle because it helps making your application more secure
and perform better. In practice that means for any Flow application: if the current
request is a &#8220;safe request method&#8221;, the persistence framework will NOT trigger
<tt class="docutils literal"><span class="pre">persistAll()</span></tt> at the end of the script run.</p>
<p>You are free to call <tt class="docutils literal"><span class="pre">PersistenceManager-&gt;persistAll()</span></tt> manually or use whitelisted objects
if you need to store some data during a safe request (for example, logging some data
for your analytics).</p>
</div>
<div class="section" id="whitelisted-objects">
<h3>Whitelisted objects</h3>
<p>There are rare cases which still justify persisting objects during safe requests. For example,
your application might want to generate thumbnails of images during a GET request and persist
the resulting Resource objects.</p>
<p>For these cases it is possible to whitelist specific objects via the Persistence Manager:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">persistenceManager</span><span class="o">-&gt;</span><span class="na">whitelistObject</span><span class="p">(</span><span class="nv">$thumbnail</span><span class="p">);</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">persistenceManager</span><span class="o">-&gt;</span><span class="na">whitelistObject</span><span class="p">(</span><span class="nv">$thumbnail</span><span class="o">-&gt;</span><span class="na">getResource</span><span class="p">());</span>
</pre></div>
</div>
<p>Be very careful and think twice before using this method since many security measures are
not active during &#8220;safe&#8221; request methods.</p>
</div>
</div>
<div class="section" id="conventions-for-file-and-class-names">
<h2>Conventions for File and Class Names</h2>
<p>To allow TYPO3 Flow to detect the object type a repository is responsible for, certain
conventions need to be followed:</p>
<ul class="simple">
<li>Domain models should reside in a Domain/Model directory</li>
<li>Repositories should reside in a Domain/Repository directory and be named
<tt class="docutils literal"><span class="pre">&lt;ModelName&gt;Repository</span></tt></li>
<li>Aside from <tt class="docutils literal"><span class="pre">Model</span></tt> versus <tt class="docutils literal"><span class="pre">Repository</span></tt> the qualified class class names should be the
same for corresponding classes</li>
<li>Repositories must implement <tt class="docutils literal"><span class="pre">\TYPO3\Flow\Persistence\RepositoryInterface</span></tt> (which is
already the case when extending <tt class="docutils literal"><span class="pre">\TYPO3\Flow\Persistence\Repository</span></tt> or
<tt class="docutils literal"><span class="pre">\TYPO3\Flow\Persistence\Doctrine\Repository</span></tt>)</li>
</ul>
<p>Example: Conventions for model and repository naming</p>
<div class="highlight-text"><div class="highlight"><pre>\TYPO3
  \Blog
    \Domain
      \Model
        Blog
        Post
      \Repository
        BlogRepository
        PostRepository
</pre></div>
</div>
<p>Another way to bind a repository to a model is to define a class constant named
<tt class="docutils literal"><span class="pre">ENTITY_CLASSNAME</span></tt> in your repository and give it the desired model name as value. This
should be done only when following the conventions outlined above is not feasible.</p>
</div>
<div class="section" id="lazy-loading">
<h2>Lazy Loading</h2>
<p>Lazy Loading is a feature that can be equally helpful and dangerous when it comes to
optimizing your application. TYPO3 Flow defaults to lazy loading when using Doctrine, i.e. it
loads all the data in an object as soon as you fetch the object from the persistence layer
but does not fetch data of associated objects. This avoids massive amounts of objects
being reconstituted if you have a large object tree. Instead it defers property thawing in
objects until the point when those properties are really needed.</p>
<p>The drawback of this: If you access associated objects, each access will fire a request to
the persistent storage now. So there might be situations when eager loading comes in
handy to avoid excessive database roundtrips. Eager loading is the default when using the
Generic persistence mechanism and can be achieved for the Doctrine 2 ORM by using join
operations in DQL or specifying the fetch mode in the mapping configuration.</p>
</div>
<div class="section" id="doctrine-persistence">
<h2>Doctrine Persistence</h2>
<p>Doctrine 2 ORM is used by default in TYPO3 Flow. Aside from very few internal changes it
consists of the regular Doctrine ORM, DBAL, Migrations and Common libraries and is tied
into TYPO3 Flow by some glue code and (most important) a custom annotation driver for metadata
consumption.</p>
<div class="section" id="requirements-and-restrictions">
<h3>Requirements and restrictions</h3>
<p>There are some rules imposed by Doctrine (and/or TYPO3 Flow) you need to follow for your
entities (and value objects). Most of them are good practice anyway, and thus are not
really restrictions.</p>
<ul class="simple">
<li>Entity classes must not be <tt class="docutils literal"><span class="pre">final</span></tt> or contain <tt class="docutils literal"><span class="pre">final</span></tt> methods.</li>
<li>Persistent properties of any entity class should always be <tt class="docutils literal"><span class="pre">protected</span></tt>, not <tt class="docutils literal"><span class="pre">public</span></tt>,
otherwise lazy-loading might not work as expected.</li>
<li>Implementing <tt class="docutils literal"><span class="pre">__clone()</span></tt> or <tt class="docutils literal"><span class="pre">__wakeup()</span></tt> is not a problem with TYPO3 Flow, as the
instances always have an identity. If using your own identity properties, you must
wrap any code you intend to run in those methods in an identity check.</li>
<li>Entity classes in a class hierarchy that inherit directly or indirectly from one another
must not have a mapped property with the same name.</li>
<li>Entities cannot use <tt class="docutils literal"><span class="pre">func_get_args()</span></tt> to implement variable parameters. The proxies
generated by Doctrine do not support this for performance reasons and your code might
actually fail to work when violating this restriction.</li>
</ul>
<p>Persisted instance variables must be accessed only from within the entity instance itself,
not by clients of the entity. The state of the entity should be available to clients only through
the entity’s methods, i.e. getter/setter methods or other business methods.</p>
<p>Collection-valued persistent fields and properties must be defined in terms of the
<tt class="docutils literal"><span class="pre">Doctrine\Common\Collections\Collection</span></tt> interface. The collection implementation type
may be used by the application to initialize fields or properties before the entity is
made persistent. Once the entity becomes managed (or detached), subsequent access must
happen through the interface type.</p>
</div>
<div class="section" id="metadata-mapping">
<h3>Metadata mapping</h3>
<p>The Doctrine 2 ORM needs to know a lot about your code to be able to persist it. Natively
Doctrine 2 supports the use of annotations, XML, YAML and PHP to supply that information.
In TYPO3 Flow, only annotations are supported, as this aligns with the philosophy behind the
framework.</p>
<div class="section" id="annotations-for-the-doctrine-persistence">
<h4>Annotations for the Doctrine Persistence</h4>
<p>The following table lists the most common annotations used by the persistence framework
with their name, scope and meaning:</p>
<p><cite>Persistence-related code annotations</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="21%" />
<col width="12%" />
<col width="67%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Annotation</th>
<th class="head">Scope</th>
<th class="head">Meaning</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">Entity</span></tt></td>
<td>Class</td>
<td>Declares a class as an Entity.</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">ValueObject</span></tt></td>
<td>Class</td>
<td>Declares a class as a Value Object, allowing the
persistence framework to reuse an existing object if one
exists.</td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">Column</span></tt></td>
<td>Variable</td>
<td>Allows to take influence on the column actually
generated for this property in the database.
Particularly useful with string properties to limit the
space used or to enable storage of more than 255
characters.</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">ManyToOne</span></tt>,
<tt class="docutils literal"><span class="pre">OneToMany</span></tt>,
<tt class="docutils literal"><span class="pre">ManyToMany</span></tt>,
<tt class="docutils literal"><span class="pre">OneToOne</span></tt></td>
<td>Variable</td>
<td><p class="first">Defines the type of object associations, refer to the
Doctrine 2 documentation for details. The most obvious
difference to plain Doctrine 2 is that the
<tt class="docutils literal"><span class="pre">targetEntity</span></tt> parameter can be omitted, it is taken
from the <tt class="docutils literal"><span class="pre">&#64;var</span></tt> annotation.</p>
<p class="last">The <tt class="docutils literal"><span class="pre">cascade</span></tt> attribute is set to cascade all
operations on associations within aggregate boundaries.
In that case orphanRemoval is turned on as well.</p>
</td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">&#64;var</span></tt></td>
<td>Variable</td>
<td>Is used to detect the type a variable has. For
collections, the type is given in angle brackets.</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">Transient</span></tt></td>
<td>Variable</td>
<td>Makes the persistence framework ignore the variable.
Neither will it&#8217;s value be persisted, nor will it be
touched during reconstitution.</td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">Identity</span></tt></td>
<td>Variable</td>
<td>Marks the variable as being relevant for determining
the identity of an object in the domain. For all class
properties marked with this, a (compound) unique index
will be created in the database.</td>
</tr>
</tbody>
</table>
<p>Doctrine supports many more annotations, for a full reference please consult the Doctrine
2 ORM documentation.</p>
</div>
</div>
<div class="section" id="on-value-object-handling-with-doctrine">
<h3>On Value Object handling with Doctrine</h3>
<p>Doctrine 2 does not (yet <a class="footnote-reference" href="#id8" id="id2">[2]</a>) support value objects, thus we treat them as
entities for the time being, with some differences:</p>
<ul class="simple">
<li>Value Objects are marked immutable as with the <tt class="docutils literal"><span class="pre">ReadOnly</span></tt> annotation of Doctrine.</li>
<li>Unless you override the type using <tt class="docutils literal"><span class="pre">Column</span></tt> Value Objects will be stored as
serialized object in the database.</li>
<li>Upon persisting Value Objects already present in the underlying database will be
deduplicated.</li>
</ul>
</div>
<div class="section" id="on-the-doctrine-event-system">
<h3>On the Doctrine Event System</h3>
<p>Doctrine provides a flexible event system to allow extensions to plug into different parts
of the persistence. Therefore two methods to get notification of doctrine events are
possible - through the EventSubscriber interface and registering EventListeners.
TYPO3 Flow allows for easily registering both with Doctrine through the configuration settings
<tt class="docutils literal"><span class="pre">TYPO3.Flow.persistence.doctrine.eventSubscribers</span></tt> and <tt class="docutils literal"><span class="pre">TYPO3.Flow.persistence.doctrine.eventListeners</span></tt>
respectively. EventSubscribers need to implement the <tt class="docutils literal"><span class="pre">Doctrine\Common\EventSubscriber</span></tt> Interface
and provide a list of the events they want to subscribe to. EventListeners need to be configured
for the events they want to listen on, but do not need to implement any specific Interface.
See the documentation (<a class="footnote-reference" href="#id9" id="id3">[3]</a>) for more information on the Doctrine Event System.</p>
<p>Example: Configuration for Doctrine EventSubscribers and EventListeners:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">persistence</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">doctrine</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">eventSubscribers</span><span class="p-Indicator">:</span>
          <span class="p-Indicator">-</span> <span class="s">&#39;Foo\Bar\Events\EventSubscriber&#39;</span>
        <span class="l-Scalar-Plain">eventListeners</span><span class="p-Indicator">:</span>
          <span class="p-Indicator">-</span>
            <span class="l-Scalar-Plain">events</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;onFlush&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;preFlush&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;postFlush&#39;</span><span class="p-Indicator">]</span>
            <span class="l-Scalar-Plain">listener</span><span class="p-Indicator">:</span> <span class="s">&#39;Foo\Bar\Events\EventListener&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="on-the-doctrine-filter-system">
<h3>On the Doctrine Filter System</h3>
<p>Doctrine provides a filter system that allows developers to add SQL
to the conditional clauses of queries, regardless the place where the SQL
is generated (e.g. from a DQL query, or by loading).</p>
<p>TYPO3 Flow allows for easily registering Filters with Doctrine through the
configuration setting <tt class="docutils literal"><span class="pre">TYPO3.Flow.persistence.doctrine.filters</span></tt>.</p>
<p>Example: Configuration for Doctrine Filters:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">persistence</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">doctrine</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">filters</span><span class="p-Indicator">:</span>
          <span class="s">&#39;my-filter-name&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Acme\Demo\Filters\MyFilter&#39;</span>
</pre></div>
</div>
<p>See the Doctrine documentation (<a class="footnote-reference" href="#id10" id="id4">[4]</a>) for more information on the Doctrine
Filter System.</p>
</div>
<div class="section" id="differences-between-typo3-flow-and-plain-doctrine">
<h3>Differences between TYPO3 Flow and plain Doctrine</h3>
<p>The custom annotation driver used by TYPO3 Flow to collect mapping information from the code
makes a number of things easier, compared to plain Doctrine 2.</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">Entity</span></tt></dt>
<dd><tt class="docutils literal"><span class="pre">repositoryClass</span></tt> can be left out, if you follow the naming rules for your
repository classes explained above.</dd>
<dt><tt class="docutils literal"><span class="pre">Table</span></tt></dt>
<dd><tt class="docutils literal"><span class="pre">name</span></tt> does not default to the unqualified entity classname, but a name is generated
from class name, package key and more elements to make it unique.</dd>
<dt><tt class="docutils literal"><span class="pre">Id</span></tt></dt>
<dd><p class="first">Can be left out, as it is automatically generated, this means you also do not need
<tt class="docutils literal"><span class="pre">&#64;GeneratedValue</span></tt>. Every entity will get a property injected that is filled with
an UUID upon instantiation and used as technical identifier.</p>
<p class="last">If an <tt class="docutils literal"><span class="pre">&#64;Id</span></tt> annotation is found, it is of course used as is and no magic will happen.</p>
</dd>
<dt><tt class="docutils literal"><span class="pre">Column</span></tt></dt>
<dd><p class="first">Can usually be left out altogether, as the vital type information can be read from
the <tt class="docutils literal"><span class="pre">&#64;var</span></tt> annotation on a class member.</p>
<div class="last admonition important">
<p class="first admonition-title">Important</p>
<p class="last">Since PHP does not differentiate between short and long strings, but databases do,
you must use <tt class="docutils literal"><span class="pre">&#64;Column(type=&quot;text&quot;)</span></tt> if you intend to store more than 255
characters in a string property.</p>
</div>
</dd>
<dt><tt class="docutils literal"><span class="pre">OneToOne</span></tt>, <tt class="docutils literal"><span class="pre">OneToMany</span></tt>, <tt class="docutils literal"><span class="pre">ManyToOne</span></tt>, <tt class="docutils literal"><span class="pre">ManyToMany</span></tt></dt>
<dd><tt class="docutils literal"><span class="pre">targetEntity</span></tt> can be omitted, it is read from the <tt class="docutils literal"><span class="pre">&#64;var</span></tt> annotation on the property</dd>
<dt><tt class="docutils literal"><span class="pre">JoinTable</span></tt>, <tt class="docutils literal"><span class="pre">JoinColumn</span></tt></dt>
<dd><p class="first">Can usually be left out completely, the needed information is gathered automatically
But when using a self-referencing association, you will need to help TYPO3 Flow a
little, so it doesn&#8217;t generate a join table with only one column.</p>
<p>Example: JoinTable annotation for a self-referencing annotation</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @var \Doctrine\Common\Collections\ArrayCollection&lt;\TYPO3\Blog\Domain\Model\Post&gt;</span>
<span class="sd"> * @ORM\ManyToMany</span>
<span class="sd"> * @ORM\JoinTable(inverseJoinColumns={@ORM\JoinColumn(name=&quot;related_id&quot;)})</span>
<span class="sd"> */</span>
 <span class="k">protected</span> <span class="nv">$relatedPosts</span><span class="p">;</span>
</pre></div>
</div>
<p class="last">Without this, the created table would not  contain two columns but only one, named
after the identifiers of the associated entities - which is the same in this case.</p>
</dd>
<dt><tt class="docutils literal"><span class="pre">DiscriminatorColumn</span></tt>, <tt class="docutils literal"><span class="pre">DiscriminatorMap</span></tt></dt>
<dd>Can be left out, as they are automatically generated.</dd>
</dl>
<p>The generation of this metadata is slightly more expensive compared to the plain Doctrine
<tt class="docutils literal"><span class="pre">AnnotationDriver</span></tt>, but since this information can be cached after being generated once,
we feel the gain when developing outweighs this easily.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Anything you explicitly specify in annotations regarding Doctrine, has precedence over
the automatically generated metadata. This can be used to fully customize the mapping
of database tables to models.</p>
</div>
<p>Here is an example to illustrate the things you can omit, due to the automatisms in the
TYPO3 Flow annotation driver.</p>
<p>Example: Annotation equivalents in TYPO3 Flow and plain Doctrine 2</p>
<p>An entity with only the annotations needed in TYPO3 Flow:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\Entity</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Post</span> <span class="p">{</span>

  <span class="sd">/**</span>
<span class="sd">   * @var \TYPO3\Blog\Domain\Model\Blog</span>
<span class="sd">   * @ORM\ManyToOne(inversedBy=&quot;posts&quot;)</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$blog</span><span class="p">;</span>

  <span class="sd">/**</span>
<span class="sd">   * @var string</span>
<span class="sd">   * @ORM\Column(length=100)</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$title</span><span class="p">;</span>

  <span class="sd">/**</span>
<span class="sd">   * @var \DateTime</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$date</span><span class="p">;</span>

  <span class="sd">/**</span>
<span class="sd">   * @var string</span>
<span class="sd">   * @ORM\Column(type=&quot;text&quot;)</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$content</span><span class="p">;</span>

  <span class="sd">/**</span>
<span class="sd">   * @var \Doctrine\Common\Collections\ArrayCollection&lt;\TYPO3\Blog\Domain\Model\Comment&gt;</span>
<span class="sd">   * @ORM\OneToMany(mappedBy=&quot;post&quot;)</span>
<span class="sd">   * @ORM\OrderBy({&quot;date&quot; = &quot;DESC&quot;})</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$comments</span><span class="p">;</span>
</pre></div>
</div>
<p>The same code with all annotations needed in plain Doctrine 2 to result in the same
metadata:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @ORM\Entity(repositoryClass=&quot;TYPO3\Blog\Domain\Model\Repository\PostRepository&quot;)</span>
<span class="sd"> * @ORM\Table(name=&quot;blog_post&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Post</span> <span class="p">{</span>

  <span class="sd">/**</span>
<span class="sd">   * @var string</span>
<span class="sd">   * @ORM\Id</span>
<span class="sd">   * @ORM\Column(name=&quot;persistence_object_identifier&quot;, type=&quot;string&quot;, length=40)</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$Persistence_Object_Identifier</span><span class="p">;</span>

  <span class="sd">/**</span>
<span class="sd">   * @var \TYPO3\Blog\Domain\Model\Blog</span>
<span class="sd">   * @ORM\ManyToOne(targetEntity=&quot;TYPO3\Blog\Domain\Model\Blog&quot;, inversedBy=&quot;posts&quot;)</span>
<span class="sd">   * @ORM\JoinColumn(name=&quot;blog_blog&quot;, referencedColumnName=&quot;persistence_object_identifier&quot;)</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$blog</span><span class="p">;</span>

  <span class="sd">/**</span>
<span class="sd">   * @var string</span>
<span class="sd">   * @ORM\Column(type=&quot;string&quot;, length=100)</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$title</span><span class="p">;</span>

  <span class="sd">/**</span>
<span class="sd">   * @var \DateTime</span>
<span class="sd">   * @ORM\Column(type=&quot;datetime&quot;)</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$date</span><span class="p">;</span>

  <span class="sd">/**</span>
<span class="sd">   * @var string</span>
<span class="sd">   * @ORM\Column(type=&quot;text&quot;)</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$content</span><span class="p">;</span>

  <span class="sd">/**</span>
<span class="sd">   * @var \Doctrine\Common\Collections\ArrayCollection&lt;\TYPO3\Blog\Domain\Model\Comment&gt;</span>
<span class="sd">   * @ORM\OneToMany(targetEntity=&quot;TYPO3\Blog\Domain\Model\Comment&quot;, mappedBy=&quot;post&quot;,</span>
<span class="sd">    cascade={&quot;all&quot;}, orphanRemoval=&quot;true&quot;)</span>
<span class="sd">   * @ORM\OrderBy({&quot;date&quot; = &quot;DESC&quot;})</span>
<span class="sd">   */</span>
  <span class="k">protected</span> <span class="nv">$comments</span><span class="p">;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="schema-management">
<h2>Schema management</h2>
<p>Doctrine offers a Migrations system as an add-on part of its DBAL for versioning of
database schemas and easy deployment of changes to them. There exist a number of commands
in the TYPO3 Flow CLI toolchain to create and deploy migrations.</p>
<p>A Migration is a set of commands that bring the schema from one version to the next. In
the simplest form that means creating a new table, but it can be as complex as renaming a
column and converting data from one format to another along the way. Migrations can also
be reversed, so one can migrate up and down.</p>
<p>Each Migration is represented by a PHP class that contains the needed commands. Those
classes come with the package they relate to, they have a name that is based on the time
they were created. This allows correct ordering of migrations coming from different
packages.</p>
<div class="section" id="query-the-schema-status">
<h3>Query the schema status</h3>
<p>To learn about the current schema and migration status, run the following command:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow flow:doctrine:migrationstatus
</pre></div>
</div>
<p>This will produce output similar to the following, obviously varying depending on the
actual state of schema and active packages:</p>
<p>Example: Migration status report</p>
<div class="highlight-text"><div class="highlight"><pre>== Configuration
   &gt;&gt; Name:                                               Doctrine Database Migrations
   &gt;&gt; Database Driver:                                    pdo_mysql
   &gt;&gt; Database Name:                                      flow
   &gt;&gt; Configuration Source:                               manually configured
   &gt;&gt; Version Table Name:                                 flow_doctrine_migrationstatus
   &gt;&gt; Migrations Namespace:                               TYPO3\Flow\Persistence\Doctrine\Migrations
   &gt;&gt; Migrations Target Directory:                        /path/to/Data/DoctrineMigrations
   &gt;&gt; Current Version:                                    0
   &gt;&gt; Latest Version:                                     2011-06-13 22:38:37 (20110613223837)
   &gt;&gt; Executed Migrations:                                0
   &gt;&gt; Available Migrations:                               1
   &gt;&gt; New Migrations:                                     1

== Migration Versions
   &gt;&gt; 2011-06-13 22:38:37 (20110613223837)                not migrated
</pre></div>
</div>
<p>Whenever a version number needs to be given to a command, use the short form as shown in
parentheses in the output above. The migrations directory in the output is only used when
creating migrations, see below for details on that.</p>
</div>
<div class="section" id="deploying-migrations">
<h3>Deploying migrations</h3>
<p>On a pristine database it is very easy to create the tables needed with the following
command:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow flow:doctrine:migrate
</pre></div>
</div>
<p>This will result in output that looks similar to the following:</p>
<div class="highlight-text"><div class="highlight"><pre>Migrating up to 20110613223837 from 0

  ++ migrating 20110613223837

     -&gt; CREATE TABLE flow_resource_resourcepointer (hash VARCHAR(255) NOT NULL, ⏎
     PRIMARY KEY(hash)) ENGINE = InnoDB
     -&gt; ALTER TABLE flow_resource_resource ADD FOREIGN KEY ⏎
     (flow_resource_resourcepointer) REFERENCES flow_resource_resourcepointer(hash)

  ++ migrated (1.31s)

  ------------------------

  ++ finished in 1.31
  ++ 1 migrations executed
  ++ 6 sql queries
</pre></div>
</div>
<p>This will deploy all migrations delivered with the currently active packages to the
configured database. During that process it will display all the SQL statements executed
and a summary of the deployed migrations at the and. You can do a dry run using:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow flow:doctrine:migrate --dry-run
</pre></div>
</div>
<p>This will result in output that looks similar to the following:</p>
<div class="highlight-text"><div class="highlight"><pre>Executing dry run of migration up to 20110613223837 from 0

  ++ migrating 20110613223837

     -&gt; CREATE TABLE flow_resource_resourcepointer (hash VARCHAR(255) NOT NULL, ⏎
     PRIMARY KEY(hash)) ENGINE = InnoDB
     -&gt; ALTER TABLE flow_resource_resource ADD FOREIGN KEY ⏎
     (flow_resource_resourcepointer) REFERENCES flow_resource_resourcepointer(hash)

  ++ migrated (0.09s)

  ------------------------

  ++ finished in 0.09
  ++ 1 migrations executed
  ++ 6 sql queries
</pre></div>
</div>
<p>to see the same output but without any changes actually being done to the database. If you
want to inspect and possibly adjust the statements that would be run and deploy manually,
you can write to a file:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow flow:doctrine:migrate --path &lt;where/to/write/the.sql&gt;
</pre></div>
</div>
<p>This will result in output that looks similar to the following:</p>
<div class="highlight-text"><div class="highlight"><pre>Writing migration file to &quot;&lt;where/to/write/the.sql&gt;&quot;
</pre></div>
</div>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p class="last">When actually making manual changes, you need to keep the <tt class="docutils literal"><span class="pre">flow_doctrine_migrationstatus</span></tt>
table updated as well! This is done with the <tt class="docutils literal"><span class="pre">flow:doctrine:migrationversion</span></tt> command.
It takes a <tt class="docutils literal"><span class="pre">--version</span></tt> option together with either an <tt class="docutils literal"><span class="pre">--add</span></tt> or <tt class="docutils literal"><span class="pre">--delete</span></tt> flag to
add or remove the given version in the <tt class="docutils literal"><span class="pre">flow_doctrine_migrationstatus</span></tt> table. It does
not execute any migration code but simply marks the given version as migrated or not.</p>
</div>
</div>
<div class="section" id="reverting-migrations">
<h3>Reverting migrations</h3>
<p>The migrate command takes an optional <tt class="docutils literal"><span class="pre">--version</span></tt> option. If given, migrations will be
executed up or down to reach that version. This can be used to revert changes, even
completely:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow flow:doctrine:migrate --version &lt;version&gt; --dry-run
</pre></div>
</div>
<p>This will result in output that looks similar to the following:</p>
<div class="highlight-text"><div class="highlight"><pre>Executing dry run of migration down to 0 from 20110613223837

  -- reverting 20110613223837

     -&gt; ALTER TABLE flow_resource_resource DROP FOREIGN KEY
     -&gt; DROP TABLE flow_resource_resourcepointer
     -&gt; DROP TABLE flow_resource_resource
     -&gt; DROP TABLE flow_security_account
     -&gt; DROP TABLE flow_resource_securitypublishingconfiguration
     -&gt; DROP TABLE flow_policy_role

  -- reverted (0.05s)

  ------------------------

  ++ finished in 0.05
  ++ 1 migrations executed
  ++ 6 sql queries
</pre></div>
</div>
</div>
<div class="section" id="executing-or-reverting-a-specific-migration">
<h3>Executing or reverting a specific migration</h3>
<p>Sometimes you need to deploy or revert a specific migration, this is possible as well.</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow flow:doctrine:migrationexecute --version &lt;20110613223837&gt; --direction &lt;direction&gt; --dry-run
</pre></div>
</div>
<p>This will result in output that looks similar to the following:</p>
<div class="highlight-text"><div class="highlight"><pre>-- reverting 20110613223837

   -&gt; ALTER TABLE flow_resource_resource DROP FOREIGN KEY
   -&gt; DROP TABLE flow_resource_resourcepointer
   -&gt; DROP TABLE flow_resource_resource
   -&gt; DROP TABLE flow_security_account
   -&gt; DROP TABLE flow_resource_securitypublishingconfiguration
   -&gt; DROP TABLE flow_policy_role

-- reverted (0.41s)
</pre></div>
</div>
<p>As you can see you need to specify the migration <tt class="docutils literal"><span class="pre">--version</span></tt> you want to execute. If you
want to revert a migration, you need to give the <tt class="docutils literal"><span class="pre">--direction</span></tt> as shown above, the
default is to migrate &#8220;up&#8221;. The <tt class="docutils literal"><span class="pre">--dry-run</span></tt> and and <tt class="docutils literal"><span class="pre">--output</span></tt> options work as with
<tt class="docutils literal"><span class="pre">flow:doctrine:migrate</span></tt>.</p>
</div>
<div class="section" id="creating-migrations">
<h3>Creating migrations</h3>
<p>Migrations make the schema match when a model changes, but how are migrations created?
The basics are simple, but rest assured that database details and certain other things
make sure you&#8217;ll need to practice... The command to scaffold a migration is the following:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow flow:doctrine:migrationgenerate
</pre></div>
</div>
<p>This will result in output that looks similar to the following:</p>
<div class="highlight-text"><div class="highlight"><pre>Generated new migration class to &quot;/…/Data/DoctrineMigrationsVersion20110624143847.php&quot;.
</pre></div>
</div>
<p>Looking into that file reveals a basic migration class already filled with the differences
detected between the current schema and the current models in the system:</p>
<p>Example: Migration generated based on schema/model differences</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">TYPO3\Flow\Persistence\Doctrine\Migrations</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Doctrine\DBAL\Migrations\AbstractMigration</span><span class="p">,</span>
  <span class="nx">Doctrine\DBAL\Schema\Schema</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * Auto-generated Migration: Please modify to your need!</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Version20110624143847</span> <span class="k">extends</span> <span class="nx">AbstractMigration</span> <span class="p">{</span>

  <span class="sd">/**</span>
<span class="sd">   * @param Schema $schema</span>
<span class="sd">   * @return void</span>
<span class="sd">   */</span>
  <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">(</span><span class="nx">Schema</span> <span class="nv">$schema</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// this up() migration is autogenerated, please modify it to your needs</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">abortIf</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">connection</span><span class="o">-&gt;</span><span class="na">getDatabasePlatform</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()</span> <span class="o">!=</span> <span class="s2">&quot;mysql&quot;</span><span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addSql</span><span class="p">(</span><span class="s2">&quot;CREATE TABLE party_abstractparty (…) ENGINE = InnoDB&quot;</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="sd">/**</span>
<span class="sd">   * @param Schema $schema</span>
<span class="sd">   * @return void</span>
<span class="sd">   */</span>
  <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">(</span><span class="nx">Schema</span> <span class="nv">$schema</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// this down() migration is autogenerated, please modify it to your needs</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">abortIf</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">connection</span><span class="o">-&gt;</span><span class="na">getDatabasePlatform</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()</span> <span class="o">!=</span> <span class="s2">&quot;mysql&quot;</span><span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addSql</span><span class="p">(</span><span class="s2">&quot;DROP TABLE party_abstractparty&quot;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>To create an empty migration skeleton, pass <tt class="docutils literal"><span class="pre">--diff-against-current</span> <span class="pre">0</span></tt> to the command.</p>
<div class="admonition important">
<p class="first admonition-title">Important</p>
<p class="last">The directory generated migrations are written to is only used when creating migrations.
The migrations visible to the system are read from Migrations/&lt;DbPlatForm&gt; in each
package. The &lt;DbPlatform&gt; represents the target platform, e.g. <tt class="docutils literal"><span class="pre">Mysql</span></tt> (as in Doctrine
DBAL but with the first character uppercased).</p>
</div>
<p>After you generated a migration, you will probably need to clean up a little, as there
might be differences being picked up that are not useful or can be optimized. An example
is when you rename a model: The migration will drop the old table and create the new one,
but what you want instead is to rename the table. Also you must to make sure each finished
migration file only deals with one package and then move it to the Migrations directory
in that package. This way different packages can be mixed and still a reasonable migration
history can be built up.</p>
</div>
<div class="section" id="schema-updates-without-migrations">
<h3>Schema updates without migrations</h3>
<p>Migrations are the recommended and preferred way to bring your schema up to date. But
there might be situations where their use is not possible (e.g. no migrations are
available yet for the RDBMS you are using) or not wanted (because of, um… something).
The there are two simple commands you can use to create and update your schema.</p>
<p>To create the needed tables you can call <tt class="docutils literal"><span class="pre">./flow</span> <span class="pre">flow:doctrine:create</span></tt> and it will
create all needed tables. If any target table already exists, an error will be the
result.</p>
<p>To update an existing schema to match with the current mapping metadata (i.e. the current
model structure), use <tt class="docutils literal"><span class="pre">./flow</span> <span class="pre">flow:doctrine:update</span></tt> to have missing items (fields,
indexes, ...) added. There is a flag to disable the safe mode used by default. In safe mode,
Doctrine tries to keep existing data as far as possible, avoiding lossy actions.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p>Be careful, the update command might destroy data, as it could drop tables and fields
irreversibly.</p>
<p class="last">Both commands also support <tt class="docutils literal"><span class="pre">--output</span> <span class="pre">&lt;write/here/the.sql&gt;</span></tt> to write the SQL
statements to the given file instead of executing it.</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If you created or updated the schema this way, you should afterwards execute
<tt class="docutils literal"><span class="pre">flow:doctrine:migrationversion</span> <span class="pre">--version</span> <span class="pre">all</span> <span class="pre">--add</span></tt> to avoid migration
errors later.</p>
</div>
</div>
<div class="section" id="doctrine-connection-wrappers-master-slave-connections">
<h3>Doctrine Connection Wrappers - Master/Slave Connections</h3>
<p>Doctrine 2 allows to create Connection wrapper classes, that change the way Doctrine connects
to your database. A common use case is a master/slave replication setup, with one master server
and several slaves that share the load for all reading queries.
Doctrine already provides a wrapper for such a connection and you can configure Flow to use
that connection wrapper by setting the following options in your packages <tt class="docutils literal"><span class="pre">Settings.yaml</span></tt>:</p>
<div class="highlight-text"><div class="highlight"><pre>TYPO3:
  Flow:
    persistence:
      backendOptions:
        wrapperClass: &#39;Doctrine\DBAL\Connections\MasterSlaveConnection&#39;
        master:
          host: &#39;127.0.0.1&#39;      # adjust to your master database host
          dbname: &#39;master&#39;       # adjust to your database name
          user: &#39;user&#39;           # adjust to your database user
          password: &#39;pass&#39;       # adjust to your database password
        slaves:
          slave1:
            host: &#39;127.0.0.1&#39;        # adjust to your slave database host
            dbname: &#39;slave1&#39;         # adjust to your database name
            user: &#39;user&#39;             # adjust to your database user
            password: &#39;user&#39;         # adjust to your database password
</pre></div>
</div>
<p>With this setup, Doctrine will use one of the slave connections picked once per request randomly
for all queries until the first writing query (e.g. insert or update) is executed. From that point
on the master server will be used solely. This is to solve the problems of replication lag and
possibly inconsistent query results.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">You can also setup the master database as a slave, if you want to also use it for load-balancing
reading queries. However, this might lead to higher load on the master database and should be
well observed.</p>
</div>
</div>
</div>
<div class="section" id="generic-persistence">
<h2>Generic Persistence</h2>
<p>What is now called Generic Persistence, used to be the only persistence layer in TYPO3 Flow.
Back in those days there was no ORM available that fit our needs. That being said, with
the advent of Doctrine 2, your best bet as a PHP developer is to use that instead of any
home-brewn ORM.</p>
<p>When your target is not a relational database, things look slightly different, which is
why the &#8220;old&#8221; code is still available for use, primarily by alternative backends like the
ones for CouchDB or Solr, that are available. Using the Generic persistence layer to
target a RDBMS is still possible, but probably only useful for rare edge cases.</p>
<div class="section" id="switching-to-generic-persistence">
<h3>Switching to Generic Persistence</h3>
<p>To switch to Generic persistence you need to configure TYPO3 Flow like this.</p>
<p>Objects.yaml:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3\Flow\Persistence\PersistenceManagerInterface</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">className</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3\Flow\Persistence\Generic\PersistenceManager&#39;</span>

<span class="l-Scalar-Plain">TYPO3\Flow\Persistence\QueryResultInterface</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">scope</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">prototype</span>
  <span class="l-Scalar-Plain">className</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3\Flow\Persistence\Generic\QueryResult&#39;</span>
</pre></div>
</div>
<p>Settings.yaml:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">persistence</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">doctrine</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">enable</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">FALSE</span>
</pre></div>
</div>
<p>When installing generic backend packages, like CouchDB, the needed object configuration
should be contained in them, for the connection settings, consult the package&#8217;s
documentation.</p>
</div>
<div class="section" id="id5">
<h3>Metadata mapping</h3>
<p>The persistence layer needs to know a lot about your code to be able to persist it. In
TYPO3 Flow, the needed data is given in the source code through annotations, as this aligns
with the philosophy behind the framework.</p>
<div class="section" id="annotations-for-the-generic-persistence">
<h4>Annotations for the Generic Persistence</h4>
<p>The following table lists all annotations used by the persistence framework with their name,
scope and meaning:</p>
<p><cite>Persistence-related code annotations</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="21%" />
<col width="12%" />
<col width="67%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Annotation</th>
<th class="head">Scope</th>
<th class="head">Meaning</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">Entity</span></tt></td>
<td>Class</td>
<td>Declares a class as an Entity.</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">ValueObject</span></tt></td>
<td>Class</td>
<td>Declares a class as a Value Object, allowing the
persistence framework to reuse an existing object if one
exists.</td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">&#64;var</span></tt></td>
<td>Variable</td>
<td>Is used to detect the type a variable has.</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">Transient</span></tt></td>
<td>Variable</td>
<td>Makes the persistence framework ignore the variable.
Neither will it&#8217;s value be persisted, nor will it be
touched during reconstitution.</td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">Identity</span></tt></td>
<td>Variable</td>
<td>Marks the variable as being relevant for determining
the identity of an object in the domain.</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">Lazy</span></tt></td>
<td>Class,
Variable</td>
<td>When reconstituting the value of this property will be
loaded only when the property is used. Note: This is only
supported for properties of type <tt class="docutils literal"><span class="pre">\SplObjectStorage</span></tt>
and objects (marked with <tt class="docutils literal"><span class="pre">Lazy</span></tt> in their source code,
see below).</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="enabling-lazy-loading">
<h3>Enabling Lazy Loading</h3>
<p>If a class should be able to be lazy loaded by the PDO backend, you need to annotate it
with <tt class="docutils literal"><span class="pre">&#64;lazy</span></tt> in the class level docblock. This is done to avoid creating proxy classes
for objects that should never be lazy loaded anyway. As soon as that annotation is found,
AOP is used to weave lazy loading support into your code that intercepts all method calls
and initializes the object before calling the expected method. Such a proxy class is a
subclass of your class, as such it work fine with type hinting and checks and can be used
the same way as the original class.</p>
<p>To actually mark a property for lazy loading, you need to add the <tt class="docutils literal"><span class="pre">&#64;lazy</span></tt> annotation to
the property docblock in your code. Then the persistence layer will skip loading the data
for that object and the object properties will be thawed when the object is actually used.</p>
<p><cite>How &#64;lazy annotations interact</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="13%" />
<col width="13%" />
<col width="74%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Class</th>
<th class="head">Property</th>
<th class="head">Effect</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">Lazy</span></tt></td>
<td><tt class="docutils literal"><span class="pre">Lazy</span></tt></td>
<td>The class&#8217; instances will be lazy loadable, and properties of
that type will be populated with a lazy loading proxy.</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">Lazy</span></tt></td>
<td>none</td>
<td>The class&#8217; instances will be lazy loadable, but that
possibility will not be used.</td>
</tr>
<tr class="row-even"><td>none</td>
<td><tt class="docutils literal"><span class="pre">Lazy</span></tt></td>
<td><p class="first"><tt class="docutils literal"><span class="pre">\SplObjectStorage</span></tt> will be reconstituted as a lazy loading
proxy, for other types nothing happens.</p>
<p>Properties of type <tt class="docutils literal"><span class="pre">\SplObjectStorage</span></tt> can always be
lazy-loaded by adding the <tt class="docutils literal"><span class="pre">Lazy</span></tt> annotation on the property
only.</p>
<p class="last">How and if lazy-loading is handled by alternative backends is
up to the implementation.</p>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="id6">
<h3>Schema management</h3>
<p>Whether other backends implement automatic schema management is up to the developers,
consult the documentation of the relevant backend for details.</p>
</div>
<div class="section" id="inside-the-generic-persistence">
<h3>Inside the Generic Persistence</h3>
<p>To the domain code the persistence handling transparent, aside from the need to add a few
annotations. The custom repositories are a little closer to the inner workings of the
framework, but still the inner workings are very invisible. This is how it is supposed to
be, but a little understanding of how persistence works internally can help understand
problems and develop more efficient client code.</p>
<div class="section" id="persisting-a-domain-object">
<h4>Persisting a Domain Object</h4>
<p>After an object has been added to a repository it will be seen when TYPO3 Flow calls
<tt class="docutils literal"><span class="pre">persistAll()</span></tt> at the end of a script run. Internally all instances implementing the
<tt class="docutils literal"><span class="pre">\TYPO3\Flow\Persistence\RepositoryInterface</span></tt> will be fetched and asked for the objects
they hold. Those will then be handed to the persistence backend in use and processed by
it.</p>
<p>TYPO3 Flow defines interfaces for persistence backends and queries, the details of how objects
are persisted and queried are up to the persistence backend implementation. Have a look at
the documentation of the respective package for more information. The following diagram
shows (most of) the way an object takes from creation until it is persisted when using the
suggested process:</p>
<div class="figure">
<a href="_Resources/Persistent/4a12ad471c06f21025c9f4336261bad1cedad8bf/Persistence-PersistenceProcess.png" data-lightbox="image-534852b11572d"><img alt="Object persistence process" class="screenshot-fullsize" src="_Resources/Persistent/e18a42094b4ae050174df689be4cbb73e1638ab3/Persistence-PersistenceProcess.png" style="width: 710px" /></a>
<p class="caption">Object persistence process</p>
</div>
<p>Keep in mind that the diagram omits some details like dirty checking on objects and how
exactly objects and their properties are stored.</p>
</div>
<div class="section" id="querying-the-storage-backend">
<h4>Querying the Storage Backend</h4>
<p>As we saw in the introductory example there is a query mechanism available that provides
easy fetching of objects through the persistence framework. You ask for instances of a
specific class that match certain filters and get back an array of those reconstituted
objects. Here is a diagram of the internal process when using the suggested process:</p>
<div class="figure">
<a href="_Resources/Persistent/73f11a9df953aee4d0fec83b2d8994220a67062f/Persistence-QueryProcess.png" data-lightbox="image-534852b1175b5"><img alt="Object querying and reconstitution process" class="screenshot-fullsize" src="_Resources/Persistent/f694b887510fc3257e5e733146af516c24693a73/Persistence-QueryProcess.png" style="width: 710px" /></a>
<p class="caption">Object querying and reconstitution process</p>
</div>
<p>For the developer the complexity is hidden between the query&#8217;s <tt class="docutils literal"><span class="pre">execute()</span></tt> method and
the array of objects being returned.</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id7" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>An alternative would have been to do an implicit persist call before a query, but
that seemed to be confusing.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id8" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td>See <a class="reference external" href="https://github.com/doctrine/doctrine2/pull/265">https://github.com/doctrine/doctrine2/pull/265</a> for one approach in the making.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id9" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id3">[3]</a></td><td><a class="reference external" href="https://doctrine-orm.readthedocs.org/en/latest/reference/events.html">https://doctrine-orm.readthedocs.org/en/latest/reference/events.html</a></td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id10" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id4">[4]</a></td><td><a class="reference external" href="https://doctrine-orm.readthedocs.org/en/latest/reference/filters.html#filters">https://doctrine-orm.readthedocs.org/en/latest/reference/filters.html#filters</a></td></tr>
</tbody>
</table>
</div>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="ab6707a3-9aff-b118-6afd-59e39b9c0099" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="b1ffed0b-d02a-959a-48b3-7c5bc2c2bdd2" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="http" locale="">
       <properties>
        <title>HTTP Foundation</title>
       </properties>
       <node identifier="e03c4133-437c-9b5d-6609-b61e6948d00f" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="bf85d852-5dc9-57a0-7b05-b229e9f3202e" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="http-foundation">
<h1>HTTP Foundation</h1>
<p>Most applications which are based on TYPO3 Flow are web applications. As the HTTP
protocol is the foundation of the World Wide Web, it also plays an important role in
the architecture of the TYPO3 Flow framework.</p>
<p>This chapter describes the mechanics behind TYPO3 Flow&#8217;s request-response model, how it
relates to the Model View Controller framework and which API functions you can use
to deal with specific aspects of the HTTP request and response.</p>
<div class="section" id="the-http-1-1-specification">
<h2>The HTTP 1.1 Specification</h2>
<p>Although most people using or even developing for the web are aware of the fact that
the Hypertext Transfer Protocol is responsible for carrying data around, considerably
few of them have truly concerned themselves with the HTTP 1.1 specification.</p>
<p>The specification, <a class="reference external" href="http://tools.ietf.org/html/rfc2616">RFC 2616</a>, has been published in 1999 already but it is
relevant today more than ever. If you&#8217;ve never fully read it, we recommend that you
do so. Although it is a long read, it is important to understand the intentions and
rules of the protocol before you can send cache headers or response codes in good
conscience, or even claim that you developed a true <a class="reference external" href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> service.</p>
</div>
<div class="section" id="application-flow">
<h2>Application Flow</h2>
<p>The basic walk through a TYPO3 Flow-based web application is as follows:</p>
<ul class="simple">
<li>the browser sends an HTTP request to a webserver</li>
<li>the webserver calls Web/index.php and passes control over to TYPO3 Flow</li>
<li>the Bootstrap <a class="footnote-reference" href="#id9" id="id1">[1]</a> initializes the bare minimum and passes control to a suitable
request handler</li>
<li>by default, the HTTP Request Handler <a class="footnote-reference" href="#id10" id="id2">[2]</a> takes over and runs a boot sequence
which initializes all important parts of TYPO3 Flow</li>
<li>the HTTP Request Handler builds an HTTP Request and Response object. The Request
object <a class="footnote-reference" href="#id11" id="id3">[3]</a> contains all important properties of the real HTTP request. The
Response object <a class="footnote-reference" href="#id12" id="id4">[4]</a> in turn is empty and will be filled with information by a
controller at a later point.</li>
<li>the HTTP Request Handler invokes the Router <a class="footnote-reference" href="#id13" id="id5">[5]</a> to determine which controller
and action is responsible for processing the request. This information (controller
name, action name, arguments) are returned in form of an Action Request <a class="footnote-reference" href="#id14" id="id6">[6]</a></li>
<li>the Dispatcher <a class="footnote-reference" href="#id15" id="id7">[7]</a> tries to invoke the controller mentioned in the Action
Request.</li>
<li>the controller, usually an Action Controller <a class="footnote-reference" href="#id16" id="id8">[8]</a>, processes the request and
modifies the given HTTP Response object which will, in the end, contain the
content to display (body) as well as any headers to be passed back to the client.</li>
<li>finally control reaches the HTTP Request Handler again which tries to make the
HTTP Response standards compliant (if not already the case) and sends the response
to the browser.</li>
</ul>
<p>In practice, there are a few more intermediate steps being carried out, but in
essence, this is the path a request is taking.</p>
<div class="figure">
<a href="_Resources/Persistent/0bc8fa178df4fb363041befc9eb84c82c7eb9339/Http-ApplicationFlow.png" data-lightbox="image-534852af78014"><img alt="Simplified application flow" class="screenshot-fullsize" src="_Resources/Persistent/44234d66f47c7ee1c4f2b67f8da2d8a097e58927/Http-ApplicationFlow.png" style="width: 710px" /></a>
<p class="caption">Simplified application flow</p>
</div>
<p>The next sections shed some light on the most important actors of this application
flow.</p>
</div>
<div class="section" id="request-handler">
<h2>Request Handler</h2>
<p>The request handler is responsible for taking a request and responding in a manner
the client understands. The default HTTP Request Handler routes requests to
controllers and their actions. Other request handlers may choose a completely
different way to handle requests. Although TYPO3 Flow also supports other types of
requests (most notably, from the comannd line interface), this chapter only deals
with HTTP requests.</p>
<p>TYPO3 Flow comes with a very slim bootstrap, which resulst in  few code being executed
before control is handed over to the request handler. This pays off in situations
where a specialized request handler is supposed to handle specific requests in a
very effective way. In fact, the request handler is responsible for executing big
parts of the initialization procedures and thus can optimize the boot process by
choosing only the parts it actually needs.</p>
<p>A request handler must implement the <tt class="docutils literal"><span class="pre">\TYPO3\Flow\Core\RequestHandlerInterface</span></tt>
interface which, among others, contains the following methods:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">handleRequest</span><span class="p">();</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">canHandleRequest</span><span class="p">();</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">getPriority</span><span class="p">();</span>
</pre></div>
</div>
<p>On trying to find a suitable request handler, the bootstrap asks each registered
request handler if it can handle the current request using <tt class="docutils literal"><span class="pre">canHandleRequest()</span></tt>
– and if it can, how eager it is to do so through <tt class="docutils literal"><span class="pre">getPriority()</span></tt>. Request
handlers responding with a high number as their priority, are preferred over request
handlers reporting a lower priority. Once the boostrap has identified a matching
request handler, it passes control to it by calling its <tt class="docutils literal"><span class="pre">handleRequest()</span></tt> method.</p>
<p>Request handlers must first be registered in order to be considered during the
resolving phase. Registration is done in the <tt class="docutils literal"><span class="pre">Package</span></tt> class of the package
containing the request handler:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Package</span> <span class="k">extends</span> <span class="nx">BasePackage</span> <span class="p">{</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">boot</span><span class="p">(</span><span class="nx">\TYPO3\Flow\Core\Bootstrap</span> <span class="nv">$bootstrap</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$bootstrap</span><span class="o">-&gt;</span><span class="na">registerRequestHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">\Acme\Foo\BarRequestHandler</span><span class="p">(</span><span class="nv">$bootstrap</span><span class="p">));</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="request">
<h2>Request</h2>
<p>The <tt class="docutils literal"><span class="pre">TYPO3\Flow\Http\Request</span></tt> class is, like most other classes in the <tt class="docutils literal"><span class="pre">Http</span></tt>
sub package, a relatively close match of a request according to the HTTP 1.1
specification. You&#8217;ll be best off studying the API of the class and reading the
respective comments for getting an idea about the available functions. That being
said, we&#8217;ll pick a few important methods which may need some further explanation.</p>
<div class="section" id="constructing-a-request">
<h3>Constructing a Request</h3>
<p>You can, in theory, create a new <tt class="docutils literal"><span class="pre">Request</span></tt> instance by simply using the <tt class="docutils literal"><span class="pre">new</span></tt>
operator and passing the required arguments to the constructor. However, there are
two static factory methods which make life much easier. We recommend using these
instead of the low-level constructor method.</p>
</div>
<div class="section" id="create">
<h3>create()</h3>
<p>The method <tt class="docutils literal"><span class="pre">create()</span></tt> accepts an URI, the request method, arguments and a few more
parameters and returns a new <tt class="docutils literal"><span class="pre">Request</span></tt> instance with sensible default properties
set. This method is best used if you need to create a new <tt class="docutils literal"><span class="pre">Request</span></tt> object from
scratch without taking any real HTTP request into account.</p>
</div>
<div class="section" id="createfromenvironment">
<h3>createFromEnvironment()</h3>
<p>The second method, <tt class="docutils literal"><span class="pre">createFromEnvironment()</span></tt>, take the environment provided
by PHP&#8217;s superglobals and specialized functions into account. It creates a
<tt class="docutils literal"><span class="pre">Request</span></tt> instance which reflects the current HTTP request received from the
web server. This method is best used if you need a <tt class="docutils literal"><span class="pre">Request</span></tt> object with all
properties set according to the current server environment and incoming HTTP request.</p>
</div>
<div class="section" id="createactionrequest">
<h3>createActionRequest()</h3>
<p>In order to dispatch a request to a controller, you need an <tt class="docutils literal"><span class="pre">ActionRequest</span></tt>.
Such a request is always bound to an <tt class="docutils literal"><span class="pre">Http\Request</span></tt>. The easiest way to create
one and binding it at the same time, is using the <tt class="docutils literal"><span class="pre">createActionRequest()</span></tt> method:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$httpRequest</span> <span class="o">=</span> <span class="nx">Request</span><span class="o">::</span><span class="na">createFromEnvironment</span><span class="p">();</span>
<span class="nv">$actionRequest</span> <span class="o">=</span> <span class="nv">$httpRequest</span><span class="o">-&gt;</span><span class="na">createActionRequest</span><span class="p">();</span>
</pre></div>
</div>
</div>
<div class="section" id="arguments">
<h3>Arguments</h3>
<p>The request features a few methods for retrieving and setting arguments. These
arguments are the result of merging any GET, POST and PUT arguments and even the
information about uploaded files. Be aware that these arguments have not been
sanitized or further processed and thus are not suitable for being used in controller
actions. If you, however, need to access the raw data, these API function are the right way
to retrieve them.</p>
<p>Arguments provided by POST or PUT requests are usually encoded in one or the other
way. TYPO3 Flow detects the encoding through the <tt class="docutils literal"><span class="pre">Content-Type</span></tt> header and decodes the
arguments and their values automatically.</p>
</div>
<div class="section" id="getcontent">
<h3>getContent()</h3>
<p>You can access the request body easily by calling the <tt class="docutils literal"><span class="pre">getContent()</span></tt> method. For
performance reasons you may also retrieve the content as a stream instead of a
string. Please be aware though that, due to how input streams work in PHP, it is not
possible to retrieve the content as a stream a second time.</p>
</div>
<div class="section" id="media-types">
<h3>Media Types</h3>
<p>The best way to determine the media types mentioned in the <tt class="docutils literal"><span class="pre">Accept</span></tt> header of a
request is to call the <tt class="docutils literal"><span class="pre">getAcceptedMediaTypes()</span></tt> method. There is also a method
implementing content negotiation in a convenient way: just pass a list of supported
formats to <tt class="docutils literal"><span class="pre">getNegotiatedMediaType()</span></tt> and in return you&#8217;ll get the media type
best fitting according to the preferences of the client:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$preferredType</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getNegotiatedMediaType</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;application/json&#39;</span><span class="p">,</span> <span class="s1">&#39;text/html&#39;</span><span class="p">));</span>
</pre></div>
</div>
</div>
<div class="section" id="request-methods">
<h3>Request Methods</h3>
<p>Flow supports all valid request methods, namely <tt class="docutils literal"><span class="pre">CONNECT</span></tt>, <tt class="docutils literal"><span class="pre">DELETE</span></tt>, <tt class="docutils literal"><span class="pre">GET</span></tt>, <tt class="docutils literal"><span class="pre">HEAD</span></tt>, <tt class="docutils literal"><span class="pre">OPTIONS</span></tt>, <tt class="docutils literal"><span class="pre">PATCH</span></tt>,
<tt class="docutils literal"><span class="pre">POST</span></tt>, <tt class="docutils literal"><span class="pre">PUT</span></tt> and <tt class="docutils literal"><span class="pre">TRACE</span></tt>.
Due to limited browser support and restrictive firewalls one sometimes need to tunnel request methods:
By sending a <tt class="docutils literal"><span class="pre">POST</span></tt> request and specifying the <tt class="docutils literal"><span class="pre">__method</span></tt> argument, the request method can be overridden:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;POST&quot;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;__method&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;DELETE&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Additionally Flow respects the <tt class="docutils literal"><span class="pre">X-HTTP-Method</span></tt> respectively <tt class="docutils literal"><span class="pre">X-HTTP-Method-Override</span></tt> header.</p>
</div>
</div>
<div class="section" id="response">
<h2>Response</h2>
<p>Being the counterpart to the request, the <tt class="docutils literal"><span class="pre">Response</span></tt> class represents the HTTP
response. Its most important function is to contain the response body and the
response status. Again, it is recommended to take a closer look at the actual
class before you start using the API in earnest.</p>
<p>The <tt class="docutils literal"><span class="pre">Response</span></tt> class features a few specialities, we&#8217;d like to mention at this
point:</p>
<div class="section" id="dates">
<h3>Dates</h3>
<p>The dates passed to one of the date-related methods must either be a RFC 2822
parsable date string or a PHP <tt class="docutils literal"><span class="pre">DateTime</span></tt> object. Please note that all methods
returning a date will do so in form of a <tt class="docutils literal"><span class="pre">DateTime</span></tt> object.</p>
<p>According to <a class="reference external" href="http://tools.ietf.org/html/rfc2616">RFC 2616</a> all dates must be given in <a class="reference external" href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time">Coordinated Universal Time</a>,
also known as <tt class="docutils literal"><span class="pre">UTC</span></tt>. UTC is also sometimes referred to as <tt class="docutils literal"><span class="pre">GMT</span></tt>, but in fact
<a class="reference external" href="http://en.wikipedia.org/wiki/Greenwich_Mean_Time">Greenwich Mean Time</a> is not the correct time standard to use. Just to complicate
things a bit more, according to the standards the HTTP headers will contain dates
with the timezone declared as <tt class="docutils literal"><span class="pre">GMT</span></tt> – which in reality refers to <tt class="docutils literal"><span class="pre">UTC</span></tt>.</p>
<p>TYPO3 Flow will always return dates related to HTTP as UTC times. Keep that in mind if
you pass dates from a different standard and then retrieve them again: the
<tt class="docutils literal"><span class="pre">DateTime</span></tt> objects will mark the same point in time, but have a different time
zone set.</p>
</div>
</div>
<div class="section" id="headers">
<h2>Headers</h2>
<p>Both classes, <tt class="docutils literal"><span class="pre">Request</span></tt> and <tt class="docutils literal"><span class="pre">Response</span></tt> inherit methods from the <tt class="docutils literal"><span class="pre">Message</span></tt>
class. Among them are functions for retrieving and setting headers. If you need to
deal with headers, please have a closer look at the <tt class="docutils literal"><span class="pre">Headers</span></tt> class which not
only contains setters and getters but also some specialized cookie handling and
cache header support.</p>
<p>In general, <tt class="docutils literal"><span class="pre">Cache-Control</span></tt> directives can be set through the regular <tt class="docutils literal"><span class="pre">set()</span></tt>
method. However, a more convenient way to tweak single directives without overriding
previously set values is the <tt class="docutils literal"><span class="pre">setCacheControlDirective()</span></tt> method. Here is an
example – from the context of an Action Controller – for setting the <tt class="docutils literal"><span class="pre">max-age</span></tt>
directive one hour:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$headers</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">getHttpRequest</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getHeaders</span><span class="p">();</span>
<span class="nv">$headers</span><span class="o">-&gt;</span><span class="na">setCacheControlDirective</span><span class="p">(</span><span class="s1">&#39;max-age&#39;</span><span class="p">,</span> <span class="mi">3600</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="cookies">
<h2>Cookies</h2>
<p>The HTTP foundation provides a very convenient way to deal with cookies. Instead of
calling the PHP cookie functions (like <tt class="docutils literal"><span class="pre">setcookie()</span></tt>), we recommend using the
respective methods available in the <tt class="docutils literal"><span class="pre">Request</span></tt> and <tt class="docutils literal"><span class="pre">Response</span></tt> classes.</p>
<p>Like requests and responses, a cookie also is represented by a PHP class. Instead
of working on arrays with values, instances of the <tt class="docutils literal"><span class="pre">Cookie</span></tt> class are used.
In order to set a cookie, just create a new <tt class="docutils literal"><span class="pre">Cookie</span></tt> object and add it to the
HTTP response:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">myAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cookie</span><span class="p">(</span><span class="s1">&#39;myCounter&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">response</span><span class="o">-&gt;</span><span class="na">setCookie</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>As soon as the response is sent to the browser, the cookie is sent as part of it.
With the next request, the user agent will send the cookie through the <tt class="docutils literal"><span class="pre">Cookie</span></tt>
header. These headers are parsed automatically and can be retrieved from the
<tt class="docutils literal"><span class="pre">Request</span></tt> object:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">myAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$httpRequest</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">getHttpRequest</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$httpRequest</span><span class="o">-&gt;</span><span class="na">hasCookie</span><span class="p">(</span><span class="s1">&#39;myCounter&#39;</span><span class="p">))</span> <span class="p">{</span>
                <span class="nv">$cookie</span> <span class="o">=</span> <span class="nv">$httpRequest</span><span class="o">-&gt;</span><span class="na">getCookie</span><span class="p">(</span><span class="s1">&#39;myCounter&#39;</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;counter&#39;</span><span class="p">,</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">());</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The cookie value can be updated and re-assigned to the response:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">myAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$httpRequest</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">getHttpRequest</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$httpRequest</span><span class="o">-&gt;</span><span class="na">hasCookie</span><span class="p">(</span><span class="s1">&#39;myCounter&#39;</span><span class="p">))</span> <span class="p">{</span>
                <span class="nv">$cookie</span> <span class="o">=</span> <span class="nv">$httpRequest</span><span class="o">-&gt;</span><span class="na">getCookie</span><span class="p">(</span><span class="s1">&#39;myCounter&#39;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nv">$cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cookie</span><span class="p">(</span><span class="s1">&#39;myCounter&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;counter&#39;</span><span class="p">,</span> <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">());</span>

        <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">setValue</span><span class="p">((</span><span class="nx">integer</span><span class="p">)</span><span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">getValue</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">response</span><span class="o">-&gt;</span><span class="na">setCookie</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Finally, a cookie can be deleted by calling the <tt class="docutils literal"><span class="pre">expire()</span></tt> method:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">myAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$httpRequest</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">getHttpRequest</span><span class="p">();</span>
        <span class="nv">$cookie</span> <span class="o">=</span> <span class="nv">$httpRequest</span><span class="o">-&gt;</span><span class="na">getCookie</span><span class="p">(</span><span class="s1">&#39;myCounter&#39;</span><span class="p">);</span>
        <span class="nv">$cookie</span><span class="o">-&gt;</span><span class="na">expire</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">response</span><span class="o">-&gt;</span><span class="na">setCookie</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="uri">
<h2>Uri</h2>
<p>The <tt class="docutils literal"><span class="pre">Http</span></tt> sub package also provides a class representing a <tt class="docutils literal"><span class="pre">Unified</span> <span class="pre">Resource</span>
<span class="pre">Identifier</span></tt>, better known as <tt class="docutils literal"><span class="pre">URI</span></tt>.  The difference between a URI and a URL is
not as complicated as you might think. &#8220;URI&#8221; is more generic, so URLs are URIs but
not the other way around. A URI identifies a resource by its name or location.
But it does not have to specify the representation of that resource – URLs do that.
Consider the following examples:</p>
<p>A URI specifying a resource:</p>
<ul class="simple">
<li><a class="reference external" href="http://flow.typo3.org/images/logo">http://flow.typo3.org/images/logo</a></li>
</ul>
<p>A URL specifying two different representations of that resource:</p>
<ul class="simple">
<li><a class="reference external" href="http://flow.typo3.org/images/logo.png">http://flow.typo3.org/images/logo.png</a></li>
<li><a class="reference external" href="http://flow.typo3.org/images/logo.gif">http://flow.typo3.org/images/logo.gif</a></li>
</ul>
<p>Throughout the framework we use the term <tt class="docutils literal"><span class="pre">URI</span></tt> instead of <tt class="docutils literal"><span class="pre">URL</span></tt> because it is
more generic and more often than not, the correct term to use.</p>
<p>All methods in TYPO3 Flow returning a URI will do so in form of a URI object. Most
methods requiring a URI will also accept a string representation.</p>
<p>You are encouraged to use the <tt class="docutils literal"><span class="pre">Uri</span></tt> class for your own purposes – you&#8217;ll get a
nice API and validation for free!</p>
</div>
<div class="section" id="virtual-browser">
<h2>Virtual Browser</h2>
<p>The HTTP foundation comes with a virtual browser which allows for sending and
receiving HTTP requests and responses. The browser&#8217;s API basically follows the
functions of a typical web browser. The requests and responses are used in form of
<tt class="docutils literal"><span class="pre">Http\Request</span></tt> and <tt class="docutils literal"><span class="pre">Http\Response</span></tt> instances, similar to the requests and
responses used by TYPO3 Flow&#8217;s request handling mechanism.</p>
<div class="section" id="request-engines">
<h3>Request Engines</h3>
<p>The engine responsible for actually sending the request is pluggable. Currently
there are two engines delivered with TYPO3 Flow:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">InternalRequestEngine</span></tt> simulates requests for use in functional tests</li>
<li><tt class="docutils literal"><span class="pre">CurlEngine</span></tt> uses the cURL extension to send real requests to other servers</li>
</ul>
<p>Sending a request and processing the response is a matter of a few lines:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A sample controller</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">MyController</span> <span class="k">extends</span> <span class="nx">ActionController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         * @var \TYPO3\Flow\Http\Client\Browser</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$browser</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         * @var \TYPO3\Flow\Http\Client\CurlEngine</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$browserRequestEngine</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Some action</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">testAction</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">browser</span><span class="o">-&gt;</span><span class="na">setRequestEngine</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">browserRequestEngine</span><span class="p">);</span>
                <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">browser</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;http://flow.typo3.org&#39;</span><span class="p">);</span>
                <span class="k">return</span> <span class="p">(</span><span class="nv">$response</span><span class="o">-&gt;</span><span class="na">hasHeader</span><span class="p">(</span><span class="s1">&#39;X-Flow-Powered&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;yes&#39;</span> <span class="o">:</span> <span class="s1">&#39;no&#39;</span><span class="p">);</span>
        <span class="p">}</span>
</pre></div>
</div>
<p>As there is no default engine selected for the browser, you need to set one
yourself. Of course you can use the advanced Dependency Injection techniques
(through Objects.yaml) for injecting an engine into the browser you use.</p>
<p>Also note that the virtual browser is of scope Prototype in order to support
multiple browsers with possibly different request engines.</p>
</div>
<div class="section" id="functional-testing">
<h3>Functional Testing</h3>
<p>The base test case for functional test cases already provides a browser which you
can use for testing controllers and other application parts which are accessible
via HTTP. This browser has the <tt class="docutils literal"><span class="pre">InternalRequestEngine</span></tt> set by default:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Some functional tests</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">SomeTest</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Tests\FunctionalTestCase</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var boolean</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$testableHttpEnabled</span> <span class="o">=</span> <span class="k">TRUE</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Send a request to a controller of my application.</span>
<span class="sd">         * Hint: The host name is not evaluated by TYPO3 Flow and thus doesn&#39;t matter</span>
<span class="sd">         *</span>
<span class="sd">         * @test</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">someTest</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">browser</span><span class="o">-&gt;</span><span class="na">request</span><span class="p">(</span><span class="s1">&#39;http://localhost/Acme.Demo/Foo/bar.html&#39;</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertContains</span><span class="p">(</span><span class="s1">&#39;it works&#39;</span><span class="p">,</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">());</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<table class="docutils footnote" frame="void" id="id9" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>TYPO3FlowCoreBootstrap</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id10" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td>TYPO3FlowHttpRequestHandler</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id11" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id3">[3]</a></td><td>TYPO3FlowHttpRequest</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id12" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id4">[4]</a></td><td>TYPO3FlowHttpResponse</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id13" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id5">[5]</a></td><td>TYPO3FlowMvcRoutingRouter</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id14" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id6">[6]</a></td><td>TYPO3FlowMvcActionRequest</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id15" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id7">[7]</a></td><td>TYPO3FlowMvcDispatcher</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id16" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id8">[8]</a></td><td>TYPO3FlowMvcControllerActionController</td></tr>
</tbody>
</table>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="e434d4c9-def7-1b1d-63a4-dc9506314727" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="6e03bd2d-0870-000e-3fa7-7b902873c454" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="modelviewcontroller" locale="">
       <properties>
        <title>Model View Controller</title>
       </properties>
       <node identifier="5615d2eb-6aae-7d11-fbc8-2492a6e44251" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="7b2e5e60-0b99-6b49-580c-4db0cc8e6492" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="model-view-controller">
<span id="ch-model-view-controller"></span><h1>Model View Controller</h1>
<p>TYPO3 Flow promotes the use of the <a class="reference external" href="http://en.wikipedia.org/wiki/Model–view–controller">Model View Controller</a>
pattern which clearly separates the information, representation and mediation into
separated building blocks. Although the design pattern and its naïve implementation
are relatively simple, a capable MVC framework also takes care of more complex tasks
such as input sanitizing, validation, form and upload handling and much more.</p>
<p>This chapter puts TYPO3 Flow&#8217;s MVC framework into context with the HTTP request / response
mechanism, explains how to develop controllers and describes various features of
the framework.</p>
<div class="section" id="http">
<h2>HTTP</h2>
<p>All action starts with an HTTP request sent from a client. The request contains
information about the resource to retrieve or process, the action to take and various
various parameters and headers. TYPO3 Flow converts the raw HTTP request into an HTTP
Request object and, by invoking the <a class="reference internal" href="flow/references/the-definitive-guide/partiii/routing.html">Routing</a> mechanism, determines which
controller is responsible for processing the request and creating a matching
response. A dispatcher then passes an internal to the controller and gets a response
in return which can be sent to back to the client.</p>
<p>If you haven&#8217;t done already, we recommend that you read the chapter about TYPO3 Flow&#8217;s
<a class="reference internal" href="flow/references/the-definitive-guide/partiii/http.html">HTTP Foundation</a>. It contains more detailed information about the application flow and
the specific parts of the HTTP API.</p>
</div>
<div class="section" id="action-request">
<h2>Action Request</h2>
<p>A typical application contains controllers providing one or more actions. While
HTTP requests and responses are fine for communication between clients and servers,
TYPO3 Flow uses a different kind of request internally to communicate with a controller,
called <tt class="docutils literal"><span class="pre">Action</span> <span class="pre">Request</span></tt>. The default HTTP request handler asks the router to
extract some information from the HTTP request and build an Action Request.</p>
<p>The Action Request contains the all the necessary details for calling the controller
action which was requested by the client:</p>
<ul class="simple">
<li>the package key and optionally sub namespace of the package containing the
controller supposed to handle the request</li>
<li>the controller name</li>
<li>the action name</li>
<li>any arguments which are passed to the action</li>
<li>the format of the expected response</li>
</ul>
<p>With this information in place, the request handler can ask the <tt class="docutils literal"><span class="pre">Dispatcher</span></tt> to
pass control to the specified controller.</p>
</div>
<div class="section" id="dispatcher">
<h2>Dispatcher</h2>
<p>The Dispatcher has the function to invoke a controller specified in the given
request and make sure that the request was processed correctly. The Dispatcher class
provides one important method:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">dispatch</span><span class="p">(</span><span class="nx">RequestInterface</span> <span class="nv">$request</span><span class="p">,</span> <span class="nx">ResponseInterface</span> <span class="nv">$response</span><span class="p">)</span> <span class="p">{</span>
</pre></div>
</div>
<p>On calling this method, the Dispatcher resolves the controller class name of the
controller mentioned in the request object and calls its <tt class="docutils literal"><span class="pre">processRequest()</span></tt>
method. A fresh <tt class="docutils literal"><span class="pre">Response</span></tt> object is also passed to the controller which is
expected to deliver its response data by calling the respective setter methods on
that object.</p>
<p>Each request carries a <tt class="docutils literal"><span class="pre">dispatched</span></tt> flag which is set or unset by the controller.
The Action Controller for example sets this flag by default and only unsets it if
an action initiated a forward to another action or controller. If the flag is not
set, the Dispatcher assumes that the request object has been updated with a new
controller, action or arguments and that it should try again to dispatch the request.
If dispatching the request did not succeed after several trials, the Dispatcher
will throw an exception.</p>
</div>
<div class="section" id="sub-requests">
<h2>Sub Requests</h2>
<p>An <tt class="docutils literal"><span class="pre">Http\Request</span></tt> object always reflects the original HTTP request sent by the
client. It is not possible to create an HTTP sub request because requests which
are passed along within the application must be instances of <tt class="docutils literal"><span class="pre">Mvc\ActionRequest</span></tt>.
Creating an Action Request as a sub request of the original HTTP Request is simple,
although you rarely need to do that:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$actionRequest</span> <span class="o">=</span> <span class="nv">$httpRequest</span><span class="o">-&gt;</span><span class="na">createActionRequest</span><span class="p">();</span>
</pre></div>
</div>
<p>An Action Request always holds a reference to a parent request. In most cases
the hierarchy is shallow and the Action Request is just a direct sub request of
the HTTP Request. In the context of a controller, it is easy to get a hold of the
parent request:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">fooAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$parentRequest</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">getParentRequest</span><span class="p">();</span>
        <span class="nv">$httpRequest</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">getHttpRequest</span><span class="p">();</span>
        <span class="c1">// in case of a shallow hierarchy, $parentRequest == $httpRequest</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In a more complex scenario, an Action Request can be a sub request of another
Action Request. This is the case in most implementations of plugins, widgets or
other inline elements of a rendered page because each of them is a part of the
whole and can be arbitrarily nested. Each element (plugin, widget …) needs its own
Action Request instance in order to keep track of invocation details like arguments
and other context information.</p>
<p>A sub request can be created manually by passing the parent request to the
constructor of the new Action Request:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$subRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ActionRequest</span><span class="p">(</span><span class="nv">$parentRequest</span><span class="p">);</span>
</pre></div>
</div>
<p>The top level Action Request (just below the HTTP Request) is referred to as the
Main Request:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">fooAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$parentRequest</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">getParentRequest</span><span class="p">();</span>
        <span class="nv">$httpRequest</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">getHttpRequest</span><span class="p">();</span>
        <span class="nv">$mainRequest</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">getMainRequest</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span> <span class="o">===</span> <span class="nv">$mainRequest</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$message</span> <span class="o">=</span> <span class="s1">&#39;This is the main request&#39;</span><span class="p">;</span>
        <span class="p">}</span>

                <span class="c1">// same like above:</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">isMainRequest</span><span class="p">())</span> <span class="p">{</span>
                <span class="nv">$message</span> <span class="o">=</span> <span class="s1">&#39;This is the main request&#39;</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Manual creation of sub requests is rarely necessary. In most cases the framework
will take care of creating and managing sub requests if plugins or widgets are in
the game.</p>
</div>
<div class="section" id="controllers">
<h2>Controllers</h2>
<p>A controller is responsible for preparing a model and collecting the necessary data
which should be returned as a response. It also controls the application flow and
decided if certain operations should be executed and how the application should
proceed, for example after the user has submitted a form.</p>
<p>A controller should only sparingly contain logic which goes beyond these tasks.
Operations which belong to the domain of the application should be rather be
implemented by domain services. This allows for a clear separation of application
flow and business logic and enables other parts of the application (for example
web services) to execute these operations through a well-defined API.</p>
<p>A controller suitable for being used in TYPO3 Flow needs to implement the
<tt class="docutils literal"><span class="pre">Mvc\Controller\ControllerInterface</span></tt>. At the bare minimum it must provide a
<tt class="docutils literal"><span class="pre">processRequest()</span></tt> method which accepts a request and response.</p>
<p>If needed, custom controllers can be implemented in a convenient way by extending
the <tt class="docutils literal"><span class="pre">Mvc\Controller\AbstractController</span></tt> class. The most common case though is to
use the Action Controller provided by the framework.</p>
</div>
<div class="section" id="action-controller">
<h2>Action Controller</h2>
<p>Most web applications will interact with the client through execution of specific
actions provided by an Action Controller. TYPO3 Flow provides a base class which
contains all the logic to map and validate arguments found in the raw request to
method arguments of an action. It also provides various convenience methods which
are typically needed in Action Controller implementations.</p>
<div class="section" id="a-simple-action">
<h3>A Simple Action</h3>
<p>The most simple way to implement an action is to extend the ActionController class,
declare an action method and return a plain string as the response:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Acme\Demo\Controller</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">TYPO3\Flow\Mvc\Controller\ActionController</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">HelloWorldController</span> <span class="k">extends</span> <span class="nx">ActionController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * The default action of this controller.</span>
<span class="sd">         *</span>
<span class="sd">         * @return string</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">indexAction</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="s1">&#39;Hello world.&#39;</span><span class="p">;</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>Note that the controller must reside in the <tt class="docutils literal"><span class="pre">Controller</span></tt> sub namespace of your
package in order to be detected by the default routing configuration. In the example
above, <tt class="docutils literal"><span class="pre">Acme\Demo</span></tt> corresponds with the package key <tt class="docutils literal"><span class="pre">Acme.Demo</span></tt>.</p>
<p>By convention, <tt class="docutils literal"><span class="pre">indexAction</span></tt> is the action being called if no specific action was
requested. An action method name must be camelCased and always end with the suffix
&#8220;Action&#8221;. In the Action Request and other parts of the routing system, it is
referred to simply by its action name, in this case <tt class="docutils literal"><span class="pre">index</span></tt>.</p>
<p>If an action returns a string or an object which can be cast to a string, it will
be set as the content of the response automatically.</p>
</div>
<div class="section" id="defining-arguments">
<h3>Defining Arguments</h3>
<p>The unified arguments sent through the HTTP request (that includes query parameters
from the URI, possible POST arguments and uploaded files) are pre-processed and
mapped to method arguments of an action. That means: all arguments a action needs
in order to work should be declared as method parameters of the action method and
not be retrieved from one of the superglobals ($_GET, $_POST, …) or the HTTP request.</p>
<p>Declaring arguments in an action controller is very simple:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Says hello to someone.</span>
<span class="sd"> *</span>
<span class="sd"> * @param string $name Name of the someone</span>
<span class="sd"> * @param boolean $formal If the message should be formal (or casual)</span>
<span class="sd"> * @return string</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">sayHelloAction</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$formal</span> <span class="o">=</span> <span class="k">TRUE</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$message</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$formal</span> <span class="o">?</span> <span class="s1">&#39;Greetings, Mr. &#39;</span> <span class="o">:</span> <span class="s1">&#39;Hello, &#39;</span><span class="p">)</span> <span class="o">.</span> <span class="nv">$name</span><span class="p">;</span>
        <span class="k">return</span> <span class="nv">$message</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The first argument <tt class="docutils literal"><span class="pre">$name</span></tt> is mandatory. The <tt class="docutils literal"><span class="pre">&#64;param</span></tt> annotation gives TYPO3 Flow
a hint of the expected type, in this case a string.</p>
<p>The second argument <tt class="docutils literal"><span class="pre">$boolean</span></tt> is optional because a default value has been
defined. The <tt class="docutils literal"><span class="pre">&#64;param</span></tt> annotation declares this argument to be a boolean, so you
can expect that <tt class="docutils literal"><span class="pre">$formal</span></tt> will be, in any case, either <tt class="docutils literal"><span class="pre">TRUE</span></tt> or <tt class="docutils literal"><span class="pre">FALSE</span></tt>.</p>
<p>A simple way to pass an argument to the action is through the query parameters in
a URL:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">http</span><span class="o">://</span><span class="nx">localhost</span><span class="o">/</span><span class="nx">acme</span><span class="o">.</span><span class="nx">demo</span><span class="o">/</span><span class="nx">helloworld</span><span class="o">/</span><span class="nx">sayhello</span><span class="o">.</span><span class="nx">html</span><span class="o">?</span><span class="nx">name</span><span class="o">=</span><span class="nx">Robert</span><span class="o">&amp;</span><span class="nx">formal</span><span class="o">=</span><span class="mi">0</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Please note that the documentation block of the action method is mandatory – the
annotations (tags) you see in the example are important for TYPO3 Flow to recognize
the correct type of each argument.</p>
</div>
<p>Additionally to passing the arguments to the action method, all registered arguments
are also available through <tt class="docutils literal"><span class="pre">$this-&gt;arguments</span></tt>.</p>
</div>
<div class="section" id="argument-mapping">
<h3>Argument Mapping</h3>
<p>Internally the Action Controller uses the Property Mapper for mapping the raw
arguments of the HTTP request to an <tt class="docutils literal"><span class="pre">Mvc\Controller\Arguments</span></tt> object. The
Property Mapper can convert and validate properties while mapping them, which allows
for example to transparently map values of a submitted form to a new or existing
model instance. It also makes sure that validation rules are considered and that
only certain parts of a nested object structure can be modified through user input.</p>
<p>In order to understand the mapping process, we recommend that you take a look at
the respective chapter about <a class="reference internal" href="flow/references/the-definitive-guide/partiii/propertymapping.html">Property Mapping</a>.</p>
<p>Here are some more examples illustrating the mapping process of submitted arguments
to the method arguments of an action:</p>
<p>Besides simple types, also special object types, like <tt class="docutils literal"><span class="pre">DateTime</span></tt> are supported:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1"># http://localhost/acme.demo/foo/bar.html?date=2012-08-10T14:51:01+02:00</span>

<span class="sd">/**</span>
<span class="sd"> * @param \DateTime $date Some date</span>
<span class="sd"> * @return string</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">barAction</span><span class="p">(</span><span class="nx">\DateTime</span> <span class="nv">$date</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1"># …</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Properties of domain models (or any other objects) can be set through an array-like
syntax. The property mapper creates a new object by default:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1"># http://localhost/acme.demo/foo/create.html?customer[name]=Robert</span>

<span class="sd">/**</span>
<span class="sd"> * @param Acme\Demo\Domain\Model\Customer $customer A new customer</span>
<span class="sd"> * @return string</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">createAction</span><span class="p">(</span><span class="nx">\Acme\Demo\Domain\Model\Customer</span> <span class="nv">$customer</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;Hello, new customer: &#39;</span> <span class="o">.</span> <span class="nv">$customer</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<p>If an identity was specified, the Property Mapper will try to retrieve an object of
that type:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1"># http://localhost/acme.demo/foo/create.html?customer[number]=42&amp;customer[name]=Robert</span>

<span class="sd">/**</span>
<span class="sd"> * @param Acme\Demo\Domain\Model\Customer $customer An existing customer</span>
<span class="sd"> * @param string $name The name to set</span>
<span class="sd"> * @return string</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">updateAction</span><span class="p">(</span><span class="nx">\Acme\Demo\Domain\Model\Customer</span> <span class="nv">$customer</span><span class="p">,</span> <span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$customer</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">customerRepository</span><span class="o">-&gt;</span><span class="na">update</span><span class="p">(</span><span class="nv">$customer</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last"><tt class="docutils literal"><span class="pre">number</span></tt> must be declared as (part of) the identity of a <tt class="docutils literal"><span class="pre">Customer</span></tt> object
through an <tt class="docutils literal"><span class="pre">&#64;Identity</span></tt> annotation. You&#8217;ll find more information about
identities and also about the creation and update of objects in the
<a class="reference internal" href="flow/references/the-definitive-guide/partiii/persistence.html">Persistence</a> chapter.</p>
</div>
<p>Instead of passing the arguments through the query string, like in the previous
examples, they can also be submitted as POST or PUT arguments in the body of a
request or even be a mixture of both, query parameters and parameters contained
in the HTTP body. Argument values are merged in the following order, while the
later sources replace earlier ones</p>
<ul class="simple">
<li>query string (derived from $_GET)</li>
<li>body (typically from POST or PUT requests)</li>
<li>file uploads (derived from $_FILES)</li>
</ul>
</div>
<div class="section" id="internal-arguments">
<h3>Internal Arguments</h3>
<p>In some situations TYPO3 Flow needs to set special arguments in order to simplify
handling of objects, widgets or other complex operations. In order to avoid
name clashes with arguments declared by a package author, a special prefix
consisting of two underscores <tt class="docutils literal"><span class="pre">__</span></tt> is used. Two examples of internal arguments
are the automatically generated HMAC and CSRF hashes <a class="footnote-reference" href="#id3" id="id2">[1]</a> which are sent along
with the form data:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">enctype</span><span class="o">=</span><span class="s2">&quot;multipart/form-data&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;newPost&quot;</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span>
                <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;posts/create&quot;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;__trustedProperties&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;a:3:{s:4:&amp;quot;blog&amp;quot;;…</span>
<span class="s2">        &lt;input type=&quot;</span><span class="nx">hidden</span><span class="s2">&quot; name=&quot;</span><span class="nx">__csrfToken</span><span class="s2">&quot; value=&quot;</span><span class="nx">__csrfToken</span><span class="o">=</span><span class="nx">cca240aa13af5bdacea3</span><span class="err">…</span>
        <span class="o">&lt;</span><span class="nx">label</span> <span class="k">for</span><span class="o">=</span><span class="s2">&quot;author&quot;</span><span class="o">&gt;</span><span class="nx">Author</span><span class="o">&lt;/</span><span class="nx">label</span><span class="o">&gt;&lt;</span><span class="nx">br</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;author&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;newPost[author]&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;First Last&quot;</span> <span class="o">/&gt;&lt;</span><span class="nx">br</span> <span class="o">/&gt;</span>
        <span class="err">…</span>
</pre></div>
</div>
<p>Although internal arguments can be retrieved through a method provided by the
<tt class="docutils literal"><span class="pre">ActionRequest</span></tt> object, they are, as the name suggests, only for internal use.
You should not use or rely on these arguments in your own applications.</p>
</div>
<div class="section" id="plugin-arguments">
<h3>Plugin Arguments</h3>
<p>Besides internal arguments, TYPO3 Flow stores arguments being used by recursive controller
invocations, like plugins, in a separate namespace, the so called <tt class="docutils literal"><span class="pre">pluginArguments</span></tt>.</p>
<p>They are prefixed with two dashes <tt class="docutils literal"><span class="pre">--</span></tt> and normally, you do not interact with them.</p>
</div>
<div class="section" id="initialize">
<h3>initialize*()</h3>
<p>The Action Controller&#8217;s <tt class="docutils literal"><span class="pre">processRequest()</span></tt> method initializes important parts of
the controller, maps and validates arguments and finally calls the requested action
method. In order to execute code before the action method is called, it is possible
to implement one or more initialization methods. The following methods are currently
supported:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">initializeAction()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">initialize[ActionName]()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">initializeView()</span></tt></li>
</ul>
<p>The first method executed after the base initialization is <tt class="docutils literal"><span class="pre">initializeAction()</span></tt>.
The Action Controller only provides an empty method which can be overriden by a
concrete Action Controller. The information about action method arguments and
the corresponding validators has already been collected at this point, but any
arguments sent through the request have not yet been mapped or validated. Therefore,
<tt class="docutils literal"><span class="pre">initializeAction()</span></tt> can still modify the list of possible arguments or add /
remove certain validators by altering <tt class="docutils literal"><span class="pre">$this-&gt;arguments</span></tt>.</p>
<p>Right after the generic <tt class="docutils literal"><span class="pre">initializeAction()</span></tt> method has been called, the
Action Controller checks if a more specific initialization method was implemented.
For example, if the action name is &#8220;create&#8221; and thus the action method name is
<tt class="docutils literal"><span class="pre">createAction()</span></tt>, the controller would try to call a method
<tt class="docutils literal"><span class="pre">initializeCreateAction()</span></tt>. This allows for execution of code which is targeted
directly to a specific action.</p>
<p>Finally, after arguments have been mapped and the controller is almost ready to
call the action method, it tries to resolve a suitable view and, if it was
successful, runs the <tt class="docutils literal"><span class="pre">initializeView()</span></tt> method. In many applications, the view
implementation will be a Fluid Template View. The <tt class="docutils literal"><span class="pre">initializeView()</span></tt> method can
be used to assign template variables which are needed in any of the existing
actions or conduct other template-specific configuration steps.</p>
</div>
</div>
<div class="section" id="media-type-format">
<h2>Media Type / Format</h2>
<p>Any implementation based on <tt class="docutils literal"><span class="pre">AbstractController</span></tt> can support one or more formats
for its response. Depending on the preferences of the client sending the request
and the route which matched the request the controller needs render the response
in a format the client understands.</p>
<p>The supported and requested formats are specified as an <a class="reference external" href="http://www.iana.org/assignments/media-types/index.html">IANA Media Type</a> and is,
by default, <tt class="docutils literal"><span class="pre">text/html</span></tt>. In order to support a different or more than one media
type, the controller needs override the default simply by declaring a class property
like in the following example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">FooController</span> <span class="k">extends</span> <span class="nx">ActionController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * A list of IANA media types which are supported by this controller</span>
<span class="sd">         *</span>
<span class="sd">         * @var array</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$supportedMediaTypes</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;application/json&#39;</span><span class="p">,</span> <span class="s1">&#39;text/html&#39;</span><span class="p">);</span>

        <span class="c1"># …</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The media types listed in <tt class="docutils literal"><span class="pre">$supportedMediaTypes</span></tt> don&#8217;t need to be in any
particular order.</p>
<p>The Abstract Controller determines the preferred format through <a class="reference external" href="http://en.wikipedia.org/wiki/Content_negotiation">Content Negotiation</a>.
More specifically, TYPO3 Flow will check if any specific format was defined in the route
which matched the request (see chapter <a class="reference internal" href="flow/references/the-definitive-guide/partiii/routing.html">Routing</a>). If no particular format was
defined, the <tt class="docutils literal"><span class="pre">Accept</span></tt> header of the HTTP Request is consulted for a weighted list
of preferred media types. This list is then matched with the list of supported media
types and hopefully results in one media type which is set as the <tt class="docutils literal"><span class="pre">format</span></tt> in the
Action Request.</p>
<div class="admonition hint">
<p class="first admonition-title">Hint</p>
<p class="last">With &#8220;format&#8221; we are referring to the typical file extension which corresponds to
a specific media type. For example, the format for <tt class="docutils literal"><span class="pre">text/html</span></tt> is &#8220;html&#8221; and
the format corresponding to the media type <tt class="docutils literal"><span class="pre">application/json</span></tt> would be &#8220;json&#8221;.
For a complete list of supported media types and their corresponding formats
please refer to the class <tt class="docutils literal"><span class="pre">TYPO3\Flow\Utility\MediaTypes</span></tt>.</p>
</div>
<p>The controller implementation must take care of the actual media type support by
supplying a corresponding view or template.</p>
</div>
<div class="section" id="fluid-template-view">
<h2>Fluid Template View</h2>
<p>An Action Controller can directly return the rendered content by means of a string
returned by the action method. However, this approach is not very flexible and
ignores the separation of concerns as laid out by the Model View Controller pattern.
Instead of rendering an output itself, a controller delegates this task to a view.</p>
<p>TYPO3 Flow uses the Fluid template engine as the default view for action controllers. By
following a naming convention for directories and template files, developers of a
concrete controller don&#8217;t need to configure the view or paths to the respective
templates – they are resolved automatically by converting the combination of
package key, controller name and action name into a Fluid template path.</p>
<p>Given that the package key is <tt class="docutils literal"><span class="pre">Acme.Demo</span></tt>, the controller name is <tt class="docutils literal"><span class="pre">HelloWorld</span></tt>,
the action name is <tt class="docutils literal"><span class="pre">sayHello</span></tt> and the format is <tt class="docutils literal"><span class="pre">html</span></tt>, the following path and
filename would be used for the corresponding Fluid template:</p>
<div class="highlight-none"><div class="highlight"><pre>./Packages/…/Acme.Demo/Resources/Private/Templates/HelloWorld/SayHello.html
</pre></div>
</div>
<p>If a template file matching the current request was found, the Action Controller
initializes a Fluid Template View with the correct path name. This pre-initialized
view is available via <tt class="docutils literal"><span class="pre">$this-&gt;view</span></tt> in any Action Controller and can be used for
assigning template variables:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;products&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">productRepository</span><span class="o">-&gt;</span><span class="na">findAll</span><span class="p">());</span>
</pre></div>
</div>
<p>If an action does not return a result (that is, the result is <tt class="docutils literal"><span class="pre">NULL</span></tt>), an
Action Controller automatically calls the <tt class="docutils literal"><span class="pre">render()</span></tt> method of the current view.
That means, apart from assigning variables to the template (if any), there is rarely
a need to deal further with a Fluid Template View.</p>
</div>
<div class="section" id="json-view">
<h2>Json View</h2>
<p>When used as a web service, controllers may want to return data in a format which
can be easily used by other applications. Especially in a web context JSON has
become an often used format which is very light-weight and easy to parse. Although
it is theoretically possible to render a JSON response through a Fluid Template
View, a specialized view does a much better job in a more convenient way.</p>
<p>The JSON View provided by TYPO3 Flow can be used by declaring it as the default view
in the concrete Action Controller implementation:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">FooController</span> <span class="k">extends</span> <span class="nx">ActionController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var string</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$defaultViewObjectName</span> <span class="o">=</span> <span class="s1">&#39;TYPO3\Flow\Mvc\View\JsonView&#39;</span><span class="p">;</span>

        <span class="c1"># …</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Alternatively, if more than only the JSON format should be supported, the format
to view mapping feature can be used:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">FooController</span> <span class="k">extends</span> <span class="nx">ActionController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var string</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$viewFormatToObjectNameMap</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
                <span class="s1">&#39;html&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;TYPO3\Fluid\View\TemplateView&#39;</span><span class="p">,</span>
                <span class="s1">&#39;json&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;TYPO3\Flow\Mvc\View\JsonView&#39;</span>
        <span class="p">);</span>

        <span class="sd">/**</span>
<span class="sd">         * A list of IANA media types which are supported by this controller</span>
<span class="sd">         *</span>
<span class="sd">         * @var array</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$supportedMediaTypes</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;application/json&#39;</span><span class="p">,</span> <span class="s1">&#39;text/html&#39;</span><span class="p">);</span>

        <span class="c1"># …</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In either case, the JSON View is now invoked if a request is sent which prefers
the media type <tt class="docutils literal"><span class="pre">application/json</span></tt>. In order to return something useful, the data
which should be rendered as JSON must be set through the <tt class="docutils literal"><span class="pre">assign()</span></tt> method. By
default JSON View uses the variable named &#8220;value&#8221;:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @param \Acme\Demo\Model\Product $product</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">showAction</span><span class="p">(</span><span class="nx">Product</span> <span class="nv">$product</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="nv">$product</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>To change the name of the rendered variables, use the <tt class="docutils literal"><span class="pre">setVariablesToRender()</span></tt>
method on the view.</p>
<p>If the controller is configured to use the JSON View, this action may return JSON
code like the following:</p>
<div class="highlight-javascript"><div class="highlight"><pre><span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">:</span><span class="s2">&quot;Arabica&quot;</span><span class="p">,</span><span class="s2">&quot;weight&quot;</span><span class="o">:</span><span class="mi">1000</span><span class="p">,</span><span class="s2">&quot;price&quot;</span><span class="o">:</span><span class="mf">23.95</span><span class="p">}</span>
</pre></div>
</div>
<p>Furthermore, the JSON view can be configured to determine which variables of the object
should be included in the output. For that, a configuration array needs to be provided
with <tt class="docutils literal"><span class="pre">setConfiguration()</span></tt>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @param \Acme\Demo\Model\Product $product</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">showAction</span><span class="p">(</span><span class="nx">Product</span> <span class="nv">$product</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="nv">$product</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">setConfiguration</span><span class="p">(</span><span class="cm">/* configuration follows here */</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The configuration is an array which is structured like in the following example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;value&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>

                        <span class="c1">// only render the &quot;name&quot; property of value</span>
                <span class="s1">&#39;_only&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>
        <span class="p">),</span>
        <span class="s1">&#39;anothervalue&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>

                        <span class="c1">// render every property except the &quot;password&quot;</span>
                        <span class="c1">// property of anothervalue</span>
                <span class="s1">&#39;_exclude&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>

                        <span class="c1">// we also want to include the sub-object</span>
                        <span class="c1">// &quot;address&quot; as nested JSON object</span>
                <span class="s1">&#39;_descend&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
                        <span class="s1">&#39;address&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
                                <span class="c1">// here, you can again configure</span>
                                <span class="c1">// _only, _exclude and _descend if needed</span>
                        <span class="p">)</span>
                <span class="p">)</span>
        <span class="p">),</span>
        <span class="s1">&#39;arrayvalue&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>

                        <span class="c1">// descend into all array elements</span>
                <span class="s1">&#39;_descendAll&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
                        <span class="c1">// here, you can again configure _only,</span>
                        <span class="c1">// _exclude and _descend for each element</span>
                <span class="p">)</span>
        <span class="p">),</span>
        <span class="s1">&#39;valueWithObjectIdentifier&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>

                        <span class="c1">// by default, the object identifier is not</span>
                        <span class="c1">// included in the output, but you can enable it</span>
                <span class="s1">&#39;_exposeObjectIdentifier&#39;</span> <span class="o">=&gt;</span> <span class="k">TRUE</span><span class="p">,</span>

                        <span class="c1">// the object identifier should not be rendered</span>
                        <span class="c1">// as &quot;__identity&quot;, but as &quot;guid&quot;</span>
                <span class="s1">&#39;_exposedObjectIdentifierKey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;guid&#39;</span>
        <span class="p">)</span>
<span class="p">)</span>
</pre></div>
</div>
<p>To sum it up, the JSON view has the following configuration options to control
the output structure:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">_only</span></tt> (array): Only include the specified property names in the output</li>
<li><tt class="docutils literal"><span class="pre">_exclude</span></tt> (array): Include all except the specified property names in
the output</li>
<li><tt class="docutils literal"><span class="pre">_descend</span></tt> (associative array): Descend into the specified sub-objects</li>
<li><tt class="docutils literal"><span class="pre">_descendAll</span></tt> (array): Descend into all array elements and generate a
numeric array</li>
<li><tt class="docutils literal"><span class="pre">_exposeObjectIdentifier</span></tt> (boolean): if TRUE, the object identifier is
displayed inside <tt class="docutils literal"><span class="pre">__identifier</span></tt></li>
<li><tt class="docutils literal"><span class="pre">_exposeObjectIdentifierKey</span></tt> (string): the JSON field name inside which
the object identifier should be displayed</li>
</ul>
</div>
<div class="section" id="custom-view">
<h2>Custom View</h2>
<p>Similar to the Fluid Template View and the JSON View, packages can provide their
own custom views. The only requirement for such a view is the implementation of
all methods defined in the <tt class="docutils literal"><span class="pre">TYPO3\Flow\Mvc\View\ViewInterface</span></tt>.</p>
<p>An Action Controller can be configured to use a custom view through the
<tt class="docutils literal"><span class="pre">$defaultViewObjectName</span></tt> and <tt class="docutils literal"><span class="pre">$viewFormatToObjectNameMap</span></tt> properties, as
explained in the section about JSON View.</p>
</div>
<div class="section" id="configuring-views-through-views-yaml">
<h2>Configuring Views through Views.yaml</h2>
<p>If you want to change Templates, Partials, Layouts or the whole ViewClass for
a foreign package without modifying it directly, and thus breaking updatability,
you can create a <tt class="docutils literal"><span class="pre">Views.yaml</span></tt> in your configuration folder and override all options
the view supports.</p>
<p>The general syntax of a view configuration looks like this:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">requestFilter</span><span class="p-Indicator">:</span> <span class="s">&#39;isPackage(&quot;Foreign.Package&quot;)</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">isController(&quot;Standard&quot;)&#39;</span>
  <span class="l-Scalar-Plain">viewObjectName</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3\TypoScript\View\TypoScriptView&#39;</span>
  <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">typoScriptPathPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;resource://My.Package/Private/TypoScripts&#39;</span>
</pre></div>
</div>
<p>The requestFilter is based on TYPO3.Eel allowing you to match arbitrary requests
so that you can override View configuration for various scenarios.
You can combine any of these matchers to filter as specific as you need:</p>
<ul class="simple">
<li>isPackage(&#8220;Package.Key&#8221;)</li>
<li>isSubPackage(&#8220;SubPackage&#8221;)</li>
<li>isController(&#8220;Standard&#8221;)</li>
<li>isAction(&#8220;index&#8221;)</li>
<li>isFormat(&#8220;html&#8221;)</li>
</ul>
<p>There are additional helpers to get the parentRequest or mainRequest of the current request,
which you can use to limit some configuration to only take effect inside a specific subRequest.
All Eel matchers above can be used with the parentRequest or mainRequest as well:</p>
<ul class="simple">
<li>parentRequest.isPackage(&#8220;TYPO3.Neos&#8221;)</li>
<li>parentRequest.isController(&#8220;Standard&#8221;)</li>
<li>mainRequest.isController(&#8220;Standard&#8221;)</li>
<li>...</li>
</ul>
<p>You can combine any of these matchers with boolean operators:</p>
<blockquote>
<div>(isPackage(&#8220;My.Foo&#8221;) || isPackage(&#8216;My.Bar&#8217;)) &amp;&amp; isFormat(&#8220;html&#8221;)</div></blockquote>
<p>The order of the configurations is in most cases unimportant. Each matcher has a
specific weight similar to CSS specifity (ID, class, inline, important) to determine
which configuration outweighs the other. For each match resulting matcher the weight
will be increased by a certain value.</p>
<table border="1" class="docutils">
<colgroup>
<col width="70%" />
<col width="30%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Method</th>
<th class="head">Weight</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>isPackage(&#8220;Package.Key&#8221;)</td>
<td>1</td>
</tr>
<tr class="row-odd"><td>isSubPackage(&#8220;SubPackage&#8221;)</td>
<td>10</td>
</tr>
<tr class="row-even"><td>isController(&#8220;Standard&#8221;)</td>
<td>100</td>
</tr>
<tr class="row-odd"><td>isAction(&#8220;index&#8221;)</td>
<td>1000</td>
</tr>
<tr class="row-even"><td>isFormat(&#8220;html&#8221;)</td>
<td>10000</td>
</tr>
<tr class="row-odd"><td>mainRequest()</td>
<td>100000</td>
</tr>
<tr class="row-even"><td>parentRequest()</td>
<td>1000000</td>
</tr>
</tbody>
</table>
<p>If the package is &#8220;My.Foo&#8221; and the Format is &#8220;html&#8221; the result will be 10001</p>
<div class="section" id="controller-context">
<h3>Controller Context</h3>
<p>The Controller Context is an object which encapsulates all the controller-related
objects and makes them accessible to the view. Thus, the <tt class="docutils literal"><span class="pre">$this-&gt;request</span></tt> property
of the controller is available inside the view as
<tt class="docutils literal"><span class="pre">$this-&gt;controllerContext-&gt;getRequest()</span></tt>.</p>
</div>
</div>
<div class="section" id="validation">
<h2>Validation</h2>
<p>Arguments which were sent along with the HTTP request are usually sanitized and
valdidated before they are passed to an action method of a controller. Behind the
scenes, the <a class="reference internal" href="flow/references/the-definitive-guide/partiii/propertymapping.html">Property Mapper</a> is used for mapping and
validating the raw input. During this process, the validators are invoked:</p>
<ul class="simple">
<li>base validation as defined in the model to be validated (if any)</li>
<li>argument validation as defined in the controller or action</li>
</ul>
<p>The chapter about <a class="reference internal" href="flow/references/the-definitive-guide/partiii/validation.html">Validation</a> outlines the general validation mechanism and
how declare and configure base validation. While the rules declared in a model
describe the minimum requirements for a valid entity, the rules declared in a
controller define additional preconditions before arguments may be passed to an
action method.</p>
<p>Per-action validation rules are declared through the <tt class="docutils literal"><span class="pre">Validate</span></tt> annotation. As
an example, an email address maybe optional in a Customer model, but it may be
required when a customer entity is passed to a <tt class="docutils literal"><span class="pre">signUpAction()</span></tt> method:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @param \Acme\Demo\Domain\Model\Customer $customer</span>
<span class="sd"> * @Flow\Validate(argumentName=&quot;emailAddress&quot;, type=&quot;EmailAddress&quot;)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">signUpAction</span><span class="p">(</span><span class="nx">Customer</span> <span class="nv">$customer</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1"># …</span>
<span class="p">}</span>
</pre></div>
</div>
<p>While <tt class="docutils literal"><span class="pre">Validate</span></tt> defines additional rules, the <tt class="docutils literal"><span class="pre">IgnoreValidation</span></tt> annotation
does the opposite: any base validation rules declared for the specified argument
will be ignored:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @param \Acme\Demo\Domain\Model\Customer $customer</span>
<span class="sd"> * @Flow\IgnoreValidation(&quot;$customer&quot;)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">signUpAction</span><span class="p">(</span><span class="nx">Customer</span> <span class="nv">$customer</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1"># …</span>
<span class="p">}</span>
</pre></div>
</div>
<p>By default the validation for an argument annotated with <tt class="docutils literal"><span class="pre">IgnoreValidation</span></tt>
will not be executed. If the result is needed for further processing in the
action method, the <tt class="docutils literal"><span class="pre">evaluate</span></tt> flag can be enabled:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @param \Acme\Demo\Domain\Model\Customer $customer</span>
<span class="sd"> * @Flow\IgnoreValidation(&quot;$customer&quot;, evaluate=true)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">signUpAction</span><span class="p">(</span><span class="nx">Customer</span> <span class="nv">$customer</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arguments</span><span class="p">[</span><span class="s1">&#39;customer&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getValidationResults</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">hasErrors</span><span class="p">())</span> <span class="p">{</span>
                <span class="c1"># …</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The next section explains how to get a hold of the validation results and react
on warnings or errors which occurred during the mapping and validation step.</p>
</div>
<div class="section" id="error-handling">
<h2>Error Handling</h2>
<p>The argument mapping step based on the validation rules mentioned earlier makes
sure that an action method is only called if its arguments are valid. In the reverse
it means that the action specified by the request will not be called if a mapping
or validation error occurred. In order to deal with these errors and provide a
meaningful error message to the user, a special action is called instead of the
originally intended action.</p>
<p>The default implementation of the <tt class="docutils literal"><span class="pre">errorAction()</span></tt> method will redirect the browser
to the URI it came from, for example to redisplay the originally submitted form.</p>
<p>Any errors or warnings which occurred during the argument mapping process are stored
in a special object, the mapping results. These mapping results can be
conveniently access through a Fluid view helper in order to display warnings and
errors along the submitted form or on top of it:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">validationResults</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;{validationResults.flattenedErrors}&quot;</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{validationResults.flattenedErrors}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span> <span class="nb">key</span><span class="o">=</span><span class="s2">&quot;propertyPath&quot;</span><span class="o">&gt;</span>
                                <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">propertyPath</span><span class="p">}</span>
                                        <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
                                                <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{errors}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;error&quot;</span><span class="o">&gt;</span>
                                                        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">error</span><span class="o">.</span><span class="nx">code</span><span class="p">}</span><span class="o">:</span> <span class="p">{</span><span class="nx">error</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
                                                <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
                                        <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
                                <span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
                        <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
                <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
        <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">validationResults</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Besides using the view helper to display the validation results, you can also
completely replace the <tt class="docutils literal"><span class="pre">errorAction()</span></tt> method with your own custom method.</p>
</div>
<div class="section" id="upload-handling">
<h2>Upload Handling</h2>
<p>The handling of file uploads is pretty straight forward. Files are handled
internally as <tt class="docutils literal"><span class="pre">Resource</span></tt> objects and thus, storing an uploaded file is just a
matter of declaring a property of type <tt class="docutils literal"><span class="pre">Resource</span></tt> in the respective model.</p>
<p>There is a full example explaining file uploads in the
<a class="reference internal" href="flow/references/the-definitive-guide/partiii/resourcemanagement.html">chapter about resource management</a>.</p>
</div>
<div class="section" id="rest-controller">
<h2>REST Controller</h2>
<p>tbd.</p>
</div>
<div class="section" id="generating-links">
<h2>Generating Links</h2>
<p>Links to other controller and their actions should not be rendered manually because
hardcoded or manually rendered links circumvent many of TYPO3 Flow&#8217;s features.</p>
<p>For generating links to other controllers, the <tt class="docutils literal"><span class="pre">UriBuilder</span></tt> which is available
as <tt class="docutils literal"><span class="pre">$this-&gt;uriBuilder</span></tt> can be used. However, in most cases, the user does not
directly interact with this one, but rather uses <tt class="docutils literal"><span class="pre">forward()</span></tt>, <tt class="docutils literal"><span class="pre">redirect()</span></tt>
in the Controller and <tt class="docutils literal"><span class="pre">&lt;f:link.action</span> <span class="pre">/&gt;</span></tt> / <tt class="docutils literal"><span class="pre">&lt;f:uri.action</span> <span class="pre">/&gt;</span></tt> inside Fluid
templates.</p>
</div>
<div class="section" id="forward-and-redirect">
<h2>forward() and redirect()</h2>
<p>Often, controllers need to defer execution to other controllers or actions. For
that to happen, TYPO3 Flow supports both, internal and external redirects:</p>
<ul class="simple">
<li>in an internal redirect which is triggered by <tt class="docutils literal"><span class="pre">forward()</span></tt>, the URI does not
change.</li>
<li>in an external redirect, the browser receives a HTTP <tt class="docutils literal"><span class="pre">Location</span></tt> header, redirecting
him to the new controller. Thus, the URI changes.</li>
</ul>
<p>As a consequence, <tt class="docutils literal"><span class="pre">forward()</span></tt> can also call controllers or actions which are
not exposed through the routing mechanism, while <tt class="docutils literal"><span class="pre">redirect()</span></tt> only works with
publicly callable controllers.</p>
<p>This example demonstrates the usage of <tt class="docutils literal"><span class="pre">redirect()</span></tt>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">createAction</span><span class="p">(</span><span class="nx">Product</span> <span class="nv">$product</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// TODO: store the product somewhere</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">redirect</span><span class="p">(</span><span class="s1">&#39;show&#39;</span><span class="p">,</span> <span class="k">NULL</span><span class="p">,</span> <span class="k">NULL</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;product&#39;</span> <span class="o">=&gt;</span> <span class="nv">$product</span><span class="p">));</span>

                <span class="c1">// This line is never executed, as redirect() and</span>
                <span class="c1">// forward() immediately stop execution of this method.</span>
<span class="p">}</span>
</pre></div>
</div>
<p>It is good practice to have different actions for modifying and showing data.
Often, redirects are used to link between them. As an example, an <tt class="docutils literal"><span class="pre">updateAction()</span></tt>
which updates an object should then <tt class="docutils literal"><span class="pre">redirect()</span></tt> to the <tt class="docutils literal"><span class="pre">show</span></tt> action of the
controller, then displays the updated object.</p>
<p><tt class="docutils literal"><span class="pre">forward()</span></tt> supports the following arguments:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">$actionName</span></tt> (required): Name of the target action</li>
<li><tt class="docutils literal"><span class="pre">$controllerName</span></tt>: Name of the target controller. If not specified, the current
controller is used.</li>
<li><tt class="docutils literal"><span class="pre">$packageKey</span></tt>: Name of the package, optionally with sub-package. If not specified,
the current package key / subpackage key is specified. The package and sub-package
need to be delimited by <tt class="docutils literal"><span class="pre">\</span></tt>, so <tt class="docutils literal"><span class="pre">Foo.Bar\Test</span></tt> will set the package to <tt class="docutils literal"><span class="pre">Foo.Bar</span></tt>
and the subpackage to <tt class="docutils literal"><span class="pre">Test</span></tt>.</li>
<li><tt class="docutils literal"><span class="pre">$arguments</span></tt>: array of request arguments. Objects are automatically converted to their
identity.</li>
</ul>
<p><tt class="docutils literal"><span class="pre">redirect()</span></tt> supports all of the above arguments, additionally with the following ones:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">$delay</span></tt>: Delay in seconds before redirecting</li>
<li><tt class="docutils literal"><span class="pre">$statusCode</span></tt>: the status code to be used for redirecting. By default, 303 is used.</li>
<li><tt class="docutils literal"><span class="pre">$format</span></tt>: The target format for the redirect. If not set, the current format is used.</li>
</ul>
</div>
<div class="section" id="flash-messages">
<h2>Flash Messages</h2>
<p>In many applications users need to be notified about the application flow, telling
him for example that an object has been successfully saved or deleted. Such messages,
which should be displayed to the user only once, are called Flash Messages.</p>
<p>A Flash Message can be added inside the controller by using the <tt class="docutils literal"><span class="pre">addFlashMessage</span></tt> method,
which expects the following arguments:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">$messageBody</span></tt> (required): The message which should be shown</li>
<li><tt class="docutils literal"><span class="pre">$messageTitle</span></tt>: The title of the message</li>
<li><tt class="docutils literal"><span class="pre">$severity</span></tt>: The severity of the message; by default &#8220;OK&#8221; is used. Needs to be one
of TYPO3FlowErrorMessage::SEVERITY_* constants (OK, NOTICE, WARNING, ERROR)</li>
<li><tt class="docutils literal"><span class="pre">$messageArguments</span></tt> (array): If the message contains any placeholders, these can be
filled here. See the PHP function <tt class="docutils literal"><span class="pre">printf</span></tt> for details on the placeholder format.</li>
<li><tt class="docutils literal"><span class="pre">$messageCode</span></tt> (integer): unique code of this message, can be used f.e. for localization.
By convention, if you set this, it should be the UNIX timestamp at time of writing the
source code to be roughly unique.</li>
</ul>
<p>Creating a Flash Messages is a matter of a single line of code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Everything is all right.&#39;</span><span class="p">);</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addFlashMessage</span><span class="p">(</span><span class="s1">&#39;Sorry, I messed it all up!&#39;</span><span class="p">,</span> <span class="s1">&#39;My Fault&#39;</span><span class="p">,</span> <span class="nx">\TYPO3\Flow\Error\Message</span><span class="o">::</span><span class="na">SEVERITY_ERROR</span><span class="p">);</span>
</pre></div>
</div>
<p>The flash messages can be rendered inside the template using the <tt class="docutils literal"><span class="pre">&lt;f:flashMessages</span> <span class="pre">/&gt;</span></tt>
ViewHelper. Please consult the ViewHelper for a full reference.</p>
<table class="docutils footnote" frame="void" id="id3" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[1]</a></td><td>The HMAC and CSRF hashes improve security for form submissions and actions
on restricted resources. Please refer to the <a class="reference internal" href="flow/references/the-definitive-guide/partiii/security.html">Security</a> chapter for more
details.</td></tr>
</tbody>
</table>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="a29d58e1-5ab7-f81c-7240-a94fc8961b68" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="2010276b-6d06-afa0-b61a-c69aba54a009" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="templating" locale="">
       <properties>
        <title>Templating</title>
       </properties>
       <node identifier="12dc2630-7176-2835-2fcb-69ff67eeb0cf" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="3b7ff3c7-38c0-9c72-6a74-9bdb9714faf8" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="templating">
<h1>Templating</h1>
<p>Templating is done in Fluid, which is a next-generation templating engine. It
has several goals in mind:</p>
<ul class="simple">
<li>Simplicity</li>
<li>Flexibility</li>
<li>Extensibility</li>
<li>Ease of use</li>
</ul>
<p>This templating engine should not be bloated, instead, we try to do it &#8220;The Zen
Way&#8221; - you do not need to learn too many things, thus you can concentrate on getting
your things done, while the template engine handles everything you do not want to
care about.</p>
<div class="section" id="what-does-it-do">
<h2>What Does it Do?</h2>
<p>In many MVC systems, the view currently does not have a lot of functionality. The
standard view usually provides a <tt class="docutils literal"><span class="pre">render</span></tt> method, and nothing more. That makes it
cumbersome to write powerful views, as most designers will not write PHP code.</p>
<p>That is where the Template Engine comes into play: It &#8220;lives&#8221; inside the View, and
is controlled by a special TemplateView which instantiates the Template Parser,
resolves the template HTML file, and renders the template afterwards.</p>
<p>Below, you&#8217;ll find a snippet of a real-world template displaying a list of blog
postings. Use it to check whether you find the template language intuitive:</p>
<div class="highlight-xml"><div class="highlight"><pre>{namespace f=TYPO3\Fluid\ViewHelpers}
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;&lt;title&gt;</span>Blog<span class="nt">&lt;/title&gt;&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;</span>Blog Postings<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{postings}&quot;</span> <span class="na">as=</span><span class="s">&quot;posting&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h2&gt;</span>{posting.title}<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;author&quot;</span><span class="nt">&gt;</span>{posting.author.name} {posting.author.email}<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;f:link.action</span> <span class="na">action=</span><span class="s">&quot;details&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{id : posting.id}&quot;</span><span class="nt">&gt;</span>
      {posting.teaser}
    <span class="nt">&lt;/f:link.action&gt;</span>
  <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/f:for&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>The Namespace Import makes the <tt class="docutils literal"><span class="pre">\TYPO3\Fluid\ViewHelper</span></tt> namespace available
under the shorthand f.</li>
<li>The <tt class="docutils literal"><span class="pre">&lt;f:for&gt;</span></tt> essentially corresponds to <tt class="docutils literal"><span class="pre">foreach</span> <span class="pre">($postings</span> <span class="pre">as</span> <span class="pre">$posting)</span></tt> in PHP.</li>
<li>With the dot-notation (<tt class="docutils literal"><span class="pre">{posting.title}</span></tt> or <tt class="docutils literal"><span class="pre">{posting.author.name}</span></tt>), you
can traverse objects. In the latter example, the system calls <tt class="docutils literal"><span class="pre">$posting-&gt;getAuthor()-&gt;getName()</span></tt>.</li>
<li>The <tt class="docutils literal"><span class="pre">&lt;f:link.action</span> <span class="pre">/&gt;</span></tt> tag is a so-called ViewHelper. It calls arbitrary PHP
code, and in this case renders a link to the &#8220;details&#8221;-Action.</li>
</ul>
<p>There is a lot more to show, including:</p>
<ul class="simple">
<li>Layouts</li>
<li>Custom View Helpers</li>
<li>Boolean expression syntax</li>
</ul>
<p>We invite you to explore Fluid some more, and please do not hesitate to give feedback!</p>
</div>
<div class="section" id="basic-concepts">
<h2>Basic Concepts</h2>
<p>This section describes all basic concepts available. This includes:</p>
<ul class="simple">
<li>Namespaces</li>
<li>Variables / Object Accessors</li>
<li>View Helpers</li>
<li>Arrays</li>
</ul>
<div class="section" id="namespaces">
<h3>Namespaces</h3>
<p>Fluid can be extended easily, thus it needs a way to tell where a certain tag
is defined. This is done using namespaces, closely following the well-known
XML behavior.</p>
<p>Namespaces can be defined in a template in two ways:</p>
<dl class="docutils">
<dt>{namespace f=TYPO3FluidViewHelpers}</dt>
<dd>This is a non-standard way only understood by Fluid. It links the <tt class="docutils literal"><span class="pre">f</span></tt>
prefix to the PHP namespace <tt class="docutils literal"><span class="pre">\TYPO3\Fluid\ViewHelpers</span></tt>.</dd>
<dt>&lt;html xmlns:foo=”http://some/unique/namespace”&gt;</dt>
<dd>The standard for declaring a namespace in XML. This will link the <tt class="docutils literal"><span class="pre">foo</span></tt>
prefix to the URI <tt class="docutils literal"><span class="pre">http://some/unique/namespace</span></tt> and Fluid can look up
the corresponding PHP namespace in your settings (so this is a two-piece
configuration). This makes it possible for your XML editor to validate the
template files and even use an XSD schema for auto completion.</dd>
</dl>
<p>A namespace linking <tt class="docutils literal"><span class="pre">f</span></tt> to <tt class="docutils literal"><span class="pre">\TYPO3\Fluid\ViewHelpers</span></tt> is imported by
default. All other namespaces need to be imported explicitly.</p>
<p>If using the XML namespace syntax the default pattern
<tt class="docutils literal"><span class="pre">http://typo3.org/ns/&lt;php</span> <span class="pre">namespace&gt;</span></tt> is resolved automatically by the
Fluid parser. If you use a custom XML namespace URI you need to configure the
URI to PHP namespace mapping. The YAML syntax for that is:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Fluid</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">namespaces</span><span class="p-Indicator">:</span>
      <span class="s">&#39;http://some/unique/namespace&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;My\Php\Namespace&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="variables-and-object-accessors">
<h3>Variables and Object Accessors</h3>
<p>A templating system would be quite pointless if it was not possible to display some
external data in the templates. That&#8217;s what variables are for.</p>
<p>Suppose you want to output the title of your blog, you could write the following
snippet into your controller:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;blogTitle&#39;</span><span class="p">,</span> <span class="nv">$blog</span><span class="o">-&gt;</span><span class="na">getTitle</span><span class="p">());</span>
</pre></div>
</div>
<p>Then, you could output the blog title in your template with the following snippet:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>This blog is called {blogTitle}<span class="nt">&lt;/h1&gt;</span>
</pre></div>
</div>
<p>Now, you might want to extend the output by the blog author as well. To do this,
you could repeat the above steps, but that would be quite inconvenient and hard to read.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>The semantics between the controller and the view should be the following:
The controller instructs the view to &#8220;render the blog object given to it&#8221;,
and not to &#8220;render the Blog title, and the blog posting 1, ...&#8221;.</p>
<p class="last">Passing objects to the view instead of simple values is highly encouraged!</p>
</div>
<p>That is why the template language has a special syntax for object access. A nicer
way of expressing the above is the following:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// This should go into the controller:</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">view</span><span class="o">-&gt;</span><span class="na">assign</span><span class="p">(</span><span class="s1">&#39;blog&#39;</span><span class="p">,</span> <span class="nv">$blog</span><span class="p">);</span>
</pre></div>
</div>
<div class="highlight-xml"><div class="highlight"><pre><span class="c">&lt;!-- This should go into the template: --&gt;</span>
<span class="nt">&lt;h1&gt;</span>This blog is called {blog.title}, written by {blog.author}<span class="nt">&lt;/h1&gt;</span>
</pre></div>
</div>
<p>Instead of passing strings to the template, we are passing whole objects around
now - which is much nicer to use both from the controller and the view side. To
access certain properties of these objects, you can use Object Accessors. By writing
<tt class="docutils literal"><span class="pre">{blog.title}</span></tt>, the template engine will call a <tt class="docutils literal"><span class="pre">getTitle()</span></tt> method on the blog
object, if it exists. Besides, you can use that syntax to traverse associative arrays
and public properties.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Deep nesting is supported: If you want to output the email address of the blog
author, then you can use <tt class="docutils literal"><span class="pre">{blog.author.email}</span></tt>, which is roughly equivalent
to <tt class="docutils literal"><span class="pre">$blog-&gt;getAuthor()-&gt;getEmail()</span></tt>.</p>
</div>
</div>
<div class="section" id="view-helpers">
<h3>View Helpers</h3>
<p>All output logic is placed in View Helpers.</p>
<p>The view helpers are invoked by using XML tags in the template, and are implemented
as PHP classes (more on that later).</p>
<p>This concept is best understood with an example:</p>
<div class="highlight-xml"><div class="highlight"><pre>{namespace f=TYPO3\Fluid\ViewHelpers}
<span class="nt">&lt;f:link.action</span> <span class="na">controller=</span><span class="s">&quot;Administration&quot;</span><span class="nt">&gt;</span>Administration<span class="nt">&lt;/f:link.action&gt;</span>
</pre></div>
</div>
<p>The example consists of two parts:</p>
<ul class="simple">
<li>Namespace Declaration as explained earlier.</li>
<li>Calling the View Helper with the <tt class="docutils literal"><span class="pre">&lt;f:link.action...&gt;</span> <span class="pre">...</span> <span class="pre">&lt;/f:link.action&gt;</span></tt>
tag renders a link.</li>
</ul>
<p>Now, the main difference between Fluid and other templating engines is how the
view helpers are implemented: For each view helper, there exists a corresponding
PHP class. Let&#8217;s see how this works for the example above:</p>
<p>The <tt class="docutils literal"><span class="pre">&lt;f:link.action</span> <span class="pre">/&gt;</span></tt> tag is implemented in the class <tt class="docutils literal"><span class="pre">\TYPO3\Fluid\ViewHelpers\Link\ActionViewHelper</span></tt>.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>The class name of such a view helper is constructed for a given tag as follows:</p>
<ol class="last arabic simple">
<li>The first part of the class name is the namespace which was imported (the namespace
prefix <tt class="docutils literal"><span class="pre">f</span></tt> was expanded to its full namespace <tt class="docutils literal"><span class="pre">TYPO3\Fluid\ViewHelpers</span></tt>)</li>
<li>The unqualified name of the tag, without the prefix, is capitalized (<tt class="docutils literal"><span class="pre">Link</span></tt>),
and the postfix ViewHelper is appended.</li>
</ol>
</div>
<p>The tag and view helper concept is the core concept of Fluid. All output logic is
implemented through such ViewHelpers / tags! Things like <tt class="docutils literal"><span class="pre">if/else</span></tt>, <tt class="docutils literal"><span class="pre">for</span></tt>, … are
all implemented using custom tags - a main difference to other templating languages.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>Some benefits of the class-based approach approach are:</p>
<ul class="last simple">
<li>You cannot override already existing view helpers by accident.</li>
<li>It is very easy to write custom view helpers, which live next to the standard view helpers</li>
<li>All user documentation for a view helper can be automatically generated from the
annotations and code documentation.</li>
</ul>
</div>
<p>Most view helpers have some parameters. These can be plain strings, just like in
<tt class="docutils literal"><span class="pre">&lt;f:link.action</span> <span class="pre">controller=&quot;Administration&quot;&gt;...&lt;/f:link.action&gt;</span></tt>, but as well
arbitrary objects. Parameters of view helpers will just be parsed with the same rules
as the rest of the template, thus you can pass arrays or objects as parameters.</p>
<p>This is often used when adding arguments to links:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:link.action</span> <span class="na">controller=</span><span class="s">&quot;Blog&quot;</span> <span class="na">action=</span><span class="s">&quot;show&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{singleBlog: blogObject}&quot;</span><span class="nt">&gt;</span>
  ... read more
<span class="nt">&lt;/f:link.action&gt;</span>
</pre></div>
</div>
<p>Here, the view helper will get a parameter called <tt class="docutils literal"><span class="pre">arguments</span></tt> which is of type <tt class="docutils literal"><span class="pre">array</span></tt>.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p>Make sure you do not put a space before or after the opening or closing
brackets of an array. If you type <tt class="docutils literal"><span class="pre">arguments=&quot;</span> <span class="pre">{singleBlog</span> <span class="pre">:</span> <span class="pre">blogObject}&quot;</span></tt>
(notice the space before the opening curly bracket), the array is automatically
casted to a string (as a string concatenation takes place).</p>
<p>This also applies when using object accessors: <tt class="docutils literal"><span class="pre">&lt;f:do.something</span> <span class="pre">with=&quot;{object}&quot;</span> <span class="pre">/&gt;</span></tt>
and <tt class="docutils literal"><span class="pre">&lt;f:do.something</span> <span class="pre">with=&quot;</span> <span class="pre">{object}&quot;</span> <span class="pre">/&gt;</span></tt> are substantially different: In
the first case, the view helper will receive an object as argument, while in
the second case, it will receive a string as argument.</p>
<p class="last">This might first seem like a bug, but actually it is just consistent that it
works that way.</p>
</div>
</div>
<div class="section" id="boolean-expressions">
<h3>Boolean Expressions</h3>
<p>Often, you need some kind of conditions inside your template. For them, you will
usually use the <tt class="docutils literal"><span class="pre">&lt;f:if&gt;</span></tt> ViewHelper. Now let&#8217;s imagine we have a list of blog
postings and want to display some additional information for the currently selected
blog posting. We assume that the currently selected blog is available in <tt class="docutils literal"><span class="pre">{currentBlogPosting}</span></tt>.
Now, let&#8217;s have a look how this works:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{blogPosts}&quot;</span> <span class="na">as=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;f:if</span> <span class="na">condition=</span><span class="s">&quot;{post} == {currentBlogPosting}&quot;</span><span class="nt">&gt;</span>... some special output here ...<span class="nt">&lt;/f:if&gt;</span>
<span class="nt">&lt;/f:for&gt;</span>
</pre></div>
</div>
<p>In the above example, there is a bit of new syntax involved: <tt class="docutils literal"><span class="pre">{post}</span> <span class="pre">==</span> <span class="pre">{currentBlogPosting}</span></tt>.
Intuitively, this says &#8220;if the post I&#8217;&#8216;m currently iterating over is the same as
currentBlogPosting, do something.&#8221;</p>
<p>Why can we use this boolean expression syntax? Well, because the <tt class="docutils literal"><span class="pre">IfViewHelper</span></tt>
has registered the argument condition as <tt class="docutils literal"><span class="pre">boolean</span></tt>. Thus, the boolean expression
syntax is available in all arguments of ViewHelpers which are of type <tt class="docutils literal"><span class="pre">boolean</span></tt>.</p>
<p>All boolean expressions have the form <tt class="docutils literal"><span class="pre">X</span> <span class="pre">&lt;comparator&gt;</span> <span class="pre">Y</span></tt>, where:</p>
<ul class="simple">
<li>&lt;comparator&gt; is one of the following: <tt class="docutils literal"><span class="pre">==,</span> <span class="pre">&gt;,</span> <span class="pre">&gt;=,</span> <span class="pre">&lt;,</span> <span class="pre">&lt;=,</span> <span class="pre">%</span> <span class="pre">(modulo)</span></tt></li>
<li>X and Y are one of the following:<ul>
<li>a number (integer or float)</li>
<li>a string (in single or double quotes)</li>
<li>a JSON array</li>
<li>a ViewHelper</li>
<li>an Object Accessor (this is probably the most used example)</li>
<li>inline notation for ViewHelpers</li>
</ul>
</li>
</ul>
</div>
<div class="section" id="inline-notation-for-viewhelpers">
<h3>Inline Notation for ViewHelpers</h3>
<p>In many cases, the tag-based syntax of ViewHelpers is really intuitive, especially
when building loops, or forms. However, in other cases, using the tag-based syntax
feels a bit awkward &#8211; this can be demonstrated best with the <tt class="docutils literal"><span class="pre">&lt;f:uri.resource&gt;</span></tt>-
ViewHelper, which is used to reference static files inside the Public/ folder of
a package. That&#8217;s why it is often used inside <tt class="docutils literal"><span class="pre">&lt;style&gt;</span></tt> or <tt class="docutils literal"><span class="pre">&lt;script&gt;</span></tt>-tags,
leading to the following code:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;&lt;f:uri.resource path=&#39;myCssFile.css&#39; /&gt;&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>You will notice that this is really difficult to read, as two tags are nested into
each other. That&#8217;s where the inline notation comes into play: It allows the usage
of <tt class="docutils literal"><span class="pre">{f:uri.resource()}</span></tt> instead of <tt class="docutils literal"><span class="pre">&lt;f:uri.resource</span> <span class="pre">/&gt;</span></tt>. The above example can
be written like the following:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{f:uri.resource(path:&#39;myCssFile.css&#39;)}&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>This is readable much better, and explains the intent of the ViewHelper in a much
better way: It is used like a helper function.</p>
<p>The syntax is still more flexible: In real-world templates, you will often find
code like the following, formatting a <tt class="docutils literal"><span class="pre">DateTime</span></tt> object (stored in <tt class="docutils literal"><span class="pre">{post.date}</span></tt>
in the example below):</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:format.date</span> <span class="na">format=</span><span class="s">&quot;d-m-Y&quot;</span><span class="nt">&gt;</span>{post.date}<span class="nt">&lt;/f:format.date&gt;</span>
</pre></div>
</div>
<p>This can also be re-written using the inline notation:</p>
<div class="highlight-xml"><div class="highlight"><pre>{post.date -&gt; f:format.date(format:&#39;d-m-Y&#39;)}
</pre></div>
</div>
<p>This is also a lot better readable than the above syntax.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>This can also be chained indefinitely often, so one can write:</p>
<div class="highlight-xml"><div class="highlight"><pre>{post.date -&gt; foo:myHelper() -&gt; bar:bla()}
</pre></div>
</div>
<p>Sometimes you&#8217;ll still need to further nest ViewHelpers, that is when the design
of the ViewHelper does not allow that chaining or provides further arguments. Have
in mind that each argument itself is evaluated as Fluid code, so the following
constructs are also possible:</p>
<div class="last highlight-xml"><div class="highlight"><pre>{foo: bar, baz: &#39;{planet.manufacturer -&gt; f:someother.helper(test: \&#39;stuff\&#39;)}&#39;}
{some: &#39;{f:format.stuff(arg: \&#39;foo&#39;\)}&#39;}
</pre></div>
</div>
</div>
<p>To wrap it up: Internally, both syntax variants are handled equally, and every
ViewHelper can be called in both ways. However, if the ViewHelper &#8220;feels&#8221; like a
tag, use the tag-based notation, if it &#8220;feels&#8221; like a helper function, use the
Inline Notation.</p>
</div>
<div class="section" id="arrays">
<h3>Arrays</h3>
<p>Some view helpers, like the <tt class="docutils literal"><span class="pre">SelectViewHelper</span></tt> (which renders an HTML select
dropdown box), need to get associative arrays as arguments (mapping from internal
to displayed name). See the following example for how this works:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:form.select</span> <span class="na">options=</span><span class="s">&quot;{edit: &#39;Edit item&#39;, delete: &#39;Delete item&#39;}&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>The array syntax used here is very similar to the JSON object syntax. Thus, the
left side of the associative array is used as key without any parsing, and the
right side can be either:</p>
<ul>
<li><p class="first">a number:</p>
<div class="highlight-xml"><div class="highlight"><pre>{a : 1,
 b : 2
}
</pre></div>
</div>
</li>
<li><p class="first">a string; Needs to be in either single- or double quotes. In a double-quoted
string, you need to escape the <tt class="docutils literal"><span class="pre">&quot;</span></tt> with a <tt class="docutils literal"><span class="pre">\</span></tt> in front (and vice versa for single
quoted strings). A string is again handled as Fluid Syntax, this is what you
see in example <tt class="docutils literal"><span class="pre">c</span></tt>:</p>
<div class="highlight-xml"><div class="highlight"><pre>{a : &#39;Hallo&#39;,
 b : &quot;Second string with escaped \&quot; (double quotes) but not escaped &#39; (single quotes)&quot;
 c : &quot;{firstName} {lastName}&quot;
}
</pre></div>
</div>
</li>
<li><p class="first">a boolean, best represented with their integer equivalents:</p>
<div class="highlight-xml"><div class="highlight"><pre>{a : &#39;foo&#39;,
 notifySomebody: 1
 useLogging: 0
}
</pre></div>
</div>
</li>
<li><p class="first">a nested array:</p>
<div class="highlight-xml"><div class="highlight"><pre>{a : {
        a1 : &quot;bla1&quot;,
        a2 : &quot;bla2&quot;
  },
 b : &quot;hallo&quot;
}
</pre></div>
</div>
</li>
<li><p class="first">a variable reference (=an object accessor):</p>
<div class="highlight-xml"><div class="highlight"><pre>{blogTitle : blog.title,
 blogObject: blog
}
</pre></div>
</div>
</li>
</ul>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">All these array examples will result into an associative array. If you have to supply
a non-associative, i.e. numerically-indexed array, you&#8217;ll write <tt class="docutils literal"><span class="pre">{0:</span> <span class="pre">'foo',</span> <span class="pre">1:</span> <span class="pre">'bar',</span> <span class="pre">2:</span> <span class="pre">'baz'}</span></tt>.</p>
</div>
</div>
</div>
<div class="section" id="passing-data-to-the-view">
<h2>Passing Data to the View</h2>
<p>You can pass arbitrary objects to the view, using <tt class="docutils literal"><span class="pre">$this-&gt;view-&gt;assign($identifier,</span> <span class="pre">$object)</span></tt>
from within the controller. See the above paragraphs about Object Accessors for details
how to use the passed data.</p>
</div>
<div class="section" id="layouts">
<h2>Layouts</h2>
<p>In almost all web applications, there are many similarities between each page.
Usually, there are common templates or menu structures which will not change for
many pages.</p>
<p>To make this possible in Fluid, we created a layout system, which we will
introduce in this section.</p>
<div class="section" id="writing-a-layout">
<h3>Writing a Layout</h3>
<p>Every layout is placed in the Resources/Private/Layouts directory, and has the
file ending of the current format (by default .html). A layout is a normal Fluid
template file, except there are some parts where the actual content of the target
page should be inserted:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;&lt;title&gt;</span>My fancy web application<span class="nt">&lt;/title&gt;&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;menu&quot;</span><span class="nt">&gt;</span>... menu goes here ...<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;f:render</span> <span class="na">section=</span><span class="s">&quot;content&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</div>
<p>With this tag, a section from the target template is rendered.</p>
</div>
<div class="section" id="using-a-layout">
<h3>Using a Layout</h3>
<p>Using a layout involves two steps:</p>
<ul class="simple">
<li>Declare which layout to use: <tt class="docutils literal"><span class="pre">&lt;f:layout</span> <span class="pre">name=&quot;...&quot;</span> <span class="pre">/&gt;</span></tt> can be written anywhere
on the page (though we suggest to write it on top, right after the namespace
declaration) - the given name references the layout.</li>
<li>Provide the content for all sections used by the layout using the <tt class="docutils literal"><span class="pre">&lt;f:section&gt;...&lt;/f:section&gt;</span></tt>
tag: <tt class="docutils literal"><span class="pre">&lt;f:section</span> <span class="pre">name=&quot;content&quot;&gt;...&lt;/f:section&gt;</span></tt></li>
</ul>
<p>For the above layout, a minimal template would look like the following:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:layout</span> <span class="na">name=</span><span class="s">&quot;example.html&quot;</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;f:section</span> <span class="na">name=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
  This HTML here will be outputted to inside the layout
<span class="nt">&lt;/f:section&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="writing-your-own-viewhelper">
<h2>Writing Your Own ViewHelper</h2>
<p>As we have seen before, all output logic resides in View Helpers. This includes
the standard control flow operators such as if/else, HTML forms, and much more.
This is the concept which makes Fluid extremely versatile and extensible.</p>
<p>If you want to create a view helper which you can call from your template (as a
tag), you just write a plain PHP class which needs to inherit from
<tt class="docutils literal"><span class="pre">TYPO3\Fluid\Core\AbstractViewHelper</span></tt> (or its subclasses). You need to implement
only one method to write a view helper:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">()</span>
</pre></div>
</div>
<div class="section" id="rendering-the-view-helper">
<h3>Rendering the View Helper</h3>
<p>We refresh what we have learned so far: When a user writes something like
<tt class="docutils literal"><span class="pre">&lt;blog:displayNews</span> <span class="pre">/&gt;</span></tt> inside a template (and has imported the <tt class="docutils literal"><span class="pre">blog</span></tt> namespace
to <tt class="docutils literal"><span class="pre">TYPO3\Blog\ViewHelpers</span></tt>), Fluid will automatically instantiate the class
<tt class="docutils literal"><span class="pre">TYPO3\Blog\ViewHelpers\DisplayNewsViewHelper</span></tt>, and invoke the render() method on it.</p>
<p>This <tt class="docutils literal"><span class="pre">render()</span></tt> method should return the rendered content as string.</p>
<p>You have the following possibilities to access the environment when rendering your view helper:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">$this-&gt;arguments</span></tt> is an associative array where you will find the values for
all arguments you registered previously.</li>
<li><tt class="docutils literal"><span class="pre">$this-&gt;renderChildren()</span></tt> renders everything between the opening and closing
tag of the view helper and returns the rendered result (as string).</li>
<li><tt class="docutils literal"><span class="pre">$this-&gt;templateVariableContainer</span></tt> is an instance of <tt class="docutils literal"><span class="pre">TYPO3\Fluid\Core\ViewHelper\TemplateVariableContainer</span></tt>,
with which you have access to all variables currently available in the template,
and can modify the variables currently available in the template.</li>
</ul>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>If you add variables to the <tt class="docutils literal"><span class="pre">TemplateVariableContainer</span></tt>, make sure to remove
every variable which you added again. This is a security measure against side-effects.</p>
<p class="last">It is also not possible to add a variable to the TemplateVariableContainer if
a variable of the same name already exists - again to prevent side effects and
scope problems.</p>
</div>
</div>
<div class="section" id="implementing-a-for-viewhelper">
<h3>Implementing a <tt class="docutils literal"><span class="pre">for</span></tt> ViewHelper</h3>
<p>Now, we will look at an example: How to write a view helper giving us the <tt class="docutils literal"><span class="pre">foreach</span></tt>
functionality of PHP.</p>
<p>A loop could be called within the template in the following way:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{blogPosts}&quot;</span> <span class="na">as=</span><span class="s">&quot;blogPost&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h2&gt;</span>{blogPost.title}<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;/f:for&gt;</span>
</pre></div>
</div>
<p>So, in words, what should the loop do?</p>
<p>It needs two arguments:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">each</span></tt>: Will be set to some object or array which can be iterated over.</li>
<li><tt class="docutils literal"><span class="pre">as</span></tt>: The name of a variable which will contain the current element being iterated over</li>
</ul>
<p>It then should do the following (in pseudo code):</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">foreach</span> <span class="p">(</span><span class="nv">$each</span> <span class="k">as</span> <span class="nv">$$as</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// render everything between opening and closing tag</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Implementing this is fairly straightforward, as you will see right now:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ForViewHelper</span> <span class="k">extends</span> <span class="nx">\TYPO3\Fluid\Core\ViewHelper\AbstractViewHelper</span> <span class="p">{</span>

  <span class="sd">/**</span>
<span class="sd">   * Renders a loop</span>
<span class="sd">   *</span>
<span class="sd">   * @param array $each Array to iterate over</span>
<span class="sd">   * @param string $as Iteration variable</span>
<span class="sd">   */</span>
  <span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="k">array</span> <span class="nv">$each</span><span class="p">,</span> <span class="nv">$as</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$out</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$each</span> <span class="k">as</span> <span class="nv">$singleElement</span><span class="p">)</span> <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">variableContainer</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$as</span><span class="p">,</span> <span class="nv">$singleElement</span><span class="p">);</span>
          <span class="nv">$out</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">renderChildren</span><span class="p">();</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">variableContainer</span><span class="o">-&gt;</span><span class="na">remove</span><span class="p">(</span><span class="nv">$as</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$out</span><span class="p">;</span>
  <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<ul class="simple">
<li>The PHPDoc is part of the code! Fluid extracts the argument data types from the PHPDoc.</li>
<li>You can simply register arguments to the view helper by adding them as method
arguments of the <tt class="docutils literal"><span class="pre">render()</span></tt> method.</li>
<li>Using <tt class="docutils literal"><span class="pre">$this-&gt;renderChildren()</span></tt>, everything between the opening and closing
tag of the view helper is rendered and returned as string.</li>
</ul>
</div>
<div class="section" id="declaring-arguments">
<h3>Declaring Arguments</h3>
<p>We have now seen that we can add arguments just by adding them as method arguments
to the <tt class="docutils literal"><span class="pre">render()</span></tt> method. There is, however, a second method to register arguments.</p>
<p>You can also register arguments inside a method called <tt class="docutils literal"><span class="pre">initializeArguments()</span></tt>.
Call <tt class="docutils literal"><span class="pre">$this-&gt;registerArgument($name,</span> <span class="pre">$dataType,</span> <span class="pre">$description,</span> <span class="pre">$isRequired,</span> <span class="pre">$defaultValue=NULL)</span></tt> inside.</p>
<p>It depends how many arguments a view helper has. Sometimes, registering them as
<tt class="docutils literal"><span class="pre">render()</span></tt> arguments is more beneficial, and sometimes it makes more sense to
register them in <tt class="docutils literal"><span class="pre">initializeArguments()</span></tt>.</p>
</div>
<div class="section" id="abstracttagbasedviewhelper">
<h3>AbstractTagBasedViewHelper</h3>
<p>Many view helpers output an HTML tag - for example <tt class="docutils literal"><span class="pre">&lt;f:link.action</span> <span class="pre">...&gt;</span></tt> outputs
a <tt class="docutils literal"><span class="pre">&lt;a</span> <span class="pre">href=&quot;...&quot;&gt;</span></tt> tag. There are many ViewHelpers which work that way.</p>
<p>Very often, you want to add a CSS class or a target attribute to an <tt class="docutils literal"><span class="pre">&lt;a</span> <span class="pre">href=&quot;...&quot;&gt;</span></tt>
tag. This often leads to repetitive code like below. (Don&#8217;t look at the code too
thoroughly, it should just demonstrate the boring and repetitive task one would
have without the <tt class="docutils literal"><span class="pre">AbstractTagBasedViewHelper</span></tt>):</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ActionViewHelper</span> <span class="k">extends</span> <span class="nx">\TYPO3\Fluid\Core\AbstractViewHelper</span> <span class="p">{</span>

  <span class="k">public</span> <span class="k">function</span> <span class="nf">initializeArguments</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">registerArgument</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="s1">&#39;CSS class to add to the link&#39;</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">registerArgument</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="s1">&#39;Target for the link&#39;</span><span class="p">);</span>
        <span class="o">...</span> <span class="k">and</span> <span class="nx">more</span> <span class="o">...</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&lt;a href=&quot;...&quot;&#39;</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arguments</span><span class="p">[</span><span class="s1">&#39;class&#39;</span><span class="p">])</span> <span class="p">{</span>
          <span class="nv">$output</span> <span class="o">.=</span> <span class="s1">&#39; class=&quot;&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arguments</span><span class="p">[</span><span class="s1">&#39;class&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arguments</span><span class="p">[</span><span class="s1">&#39;target&#39;</span><span class="p">])</span> <span class="p">{</span>
          <span class="nv">$output</span> <span class="o">.=</span> <span class="s1">&#39; target=&quot;&#39;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arguments</span><span class="p">[</span><span class="s1">&#39;target&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nv">$output</span> <span class="o">.=</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">;</span>
        <span class="o">...</span> <span class="k">and</span> <span class="nx">more</span> <span class="o">...</span>
        <span class="k">return</span> <span class="nv">$output</span><span class="p">;</span>
  <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>Now, the <tt class="docutils literal"><span class="pre">AbstractTagBasedViewHelper</span></tt> introduces two more methods you can use
inside <tt class="docutils literal"><span class="pre">initializeArguments()</span></tt>:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">registerTagAttribute($name,</span> <span class="pre">$type,</span> <span class="pre">$description,</span> <span class="pre">$required)</span></tt>: Use this method
to register an attribute which should be directly added to the tag.</li>
<li><tt class="docutils literal"><span class="pre">registerUniversalTagAttributes()</span></tt>: If called, registers the standard HTML
attributes <tt class="docutils literal"><span class="pre">class,</span> <span class="pre">id,</span> <span class="pre">dir,</span> <span class="pre">lang,</span> <span class="pre">style,</span> <span class="pre">title</span></tt>.</li>
</ul>
<p>Inside the <tt class="docutils literal"><span class="pre">AbstractTagBasedViewHelper</span></tt>, there is a <tt class="docutils literal"><span class="pre">TagBuilder</span></tt> available
(with <tt class="docutils literal"><span class="pre">$this-&gt;tag</span></tt>) which makes building a tag a lot more straightforward.</p>
<p>With the above methods, the <tt class="docutils literal"><span class="pre">Link\ActionViewHelper</span></tt> from above can be condensed as follows:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ActionViewHelper</span> <span class="k">extends</span> <span class="nx">\TYPO3\\F3\Fluid\Core\AbstractViewHelper</span> <span class="p">{</span>

        <span class="k">public</span> <span class="k">function</span> <span class="nf">initializeArguments</span><span class="p">()</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">registerUniversalTagAttributes</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Render the link.</span>
<span class="sd">         *</span>
<span class="sd">         * @param string $action Target action</span>
<span class="sd">         * @param array $arguments Arguments</span>
<span class="sd">         * @param string $controller Target controller. If NULL current controllerName is used</span>
<span class="sd">         * @param string $package Target package. if NULL current package is used</span>
<span class="sd">         * @param string $subpackage Target subpackage. if NULL current subpackage is used</span>
<span class="sd">         * @param string $section The anchor to be added to the URI</span>
<span class="sd">         * @return string The rendered link</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$action</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$arguments</span> <span class="o">=</span> <span class="k">array</span><span class="p">(),</span>
                               <span class="nv">$controller</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">,</span> <span class="nv">$package</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">,</span> <span class="nv">$subpackage</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">,</span>
                                   <span class="nv">$section</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$uriBuilder</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">controllerContext</span><span class="o">-&gt;</span><span class="na">getURIBuilder</span><span class="p">();</span>
                <span class="nv">$uri</span> <span class="o">=</span> <span class="nv">$uriBuilder</span><span class="o">-&gt;</span><span class="na">uriFor</span><span class="p">(</span><span class="nv">$action</span><span class="p">,</span> <span class="nv">$arguments</span><span class="p">,</span> <span class="nv">$controller</span><span class="p">,</span> <span class="nv">$package</span><span class="p">,</span> <span class="nv">$subpackage</span><span class="p">,</span> <span class="nv">$section</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tag</span><span class="o">-&gt;</span><span class="na">addAttribute</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">,</span> <span class="nv">$uri</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tag</span><span class="o">-&gt;</span><span class="na">setContent</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">renderChildren</span><span class="p">());</span>

                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tag</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">();</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>Additionally, we now already have support for all universal HTML attributes.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">The <tt class="docutils literal"><span class="pre">TagBuilder</span></tt> also makes sure that all attributes are escaped properly,
so to decrease the risk of Cross-Site Scripting attacks, make sure to use it
when building tags.</p>
</div>
<div class="section" id="additionalattributes">
<h4>additionalAttributes</h4>
<p>Sometimes, you need some HTML attributes which are not part of the standard.
As an example: If you use the Dojo JavaScript framework, using these non-standard
attributes makes life a lot easier.</p>
<p>We think that the templating framework should not constrain the user in his
possibilities &#8211; thus, it should be possible to add custom HTML attributes as well,
if they are needed. Our solution looks as follows:</p>
<p>Every view helper which inherits from <tt class="docutils literal"><span class="pre">AbstractTagBasedViewHelper</span></tt> has a special
argument called <tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> which allows you to add arbitrary HTML
attributes to the tag.</p>
<p>If the link tag from above needed a new attribute called <tt class="docutils literal"><span class="pre">fadeDuration</span></tt>, which
is not part of HTML, you could do that as follows:</p>
<div class="highlight-xml"><div class="highlight"><pre>&lt;f:link.action ... additionalAttributes=&quot;{fadeDuration : 800}&quot;&gt;
        Link with fadeDuration set
&lt;/f:link.action&gt;
</pre></div>
</div>
<p>This attribute is available in all tags that inherit from <tt class="docutils literal"><span class="pre">TYPO3\Fluid\Core\ViewHelper\AbstractTagBasedViewHelper</span></tt>.</p>
</div>
</div>
<div class="section" id="abstractconditionviewhelper">
<h3>AbstractConditionViewHelper</h3>
<p>If you want to build some kind of <tt class="docutils literal"><span class="pre">if/else</span></tt> condition, you should base the ViewHelper
on the <tt class="docutils literal"><span class="pre">AbstractConditionViewHelper</span></tt>, as it gives you convenient methods to render
the <tt class="docutils literal"><span class="pre">then</span></tt> or <tt class="docutils literal"><span class="pre">else</span></tt> parts of a ViewHelper. Let&#8217;s look at the <tt class="docutils literal"><span class="pre">&lt;f:if&gt;</span></tt>-ViewHelper
for a usage example, which should be quite self-explanatory:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">IfViewHelper</span> <span class="k">extends</span> <span class="nx">\TYPO3\Fluid\Core\ViewHelper\AbstractConditionViewHelper</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * renders &lt;f:then&gt; child if $condition is true, otherwise renders &lt;f:else&gt; child.</span>
<span class="sd">         *</span>
<span class="sd">         * @param boolean $condition View helper condition</span>
<span class="sd">         * @return string the rendered string</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$condition</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$condition</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">renderThenChild</span><span class="p">();</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">renderElseChild</span><span class="p">();</span>
                <span class="p">}</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>By basing your condition ViewHelper on the <tt class="docutils literal"><span class="pre">AbstractConditionViewHelper</span></tt>,
you will get the following features:</p>
<ul class="simple">
<li>Two API methods <tt class="docutils literal"><span class="pre">renderThenChild()</span></tt> and <tt class="docutils literal"><span class="pre">renderElseChild()</span></tt>, which should be
used in the <tt class="docutils literal"><span class="pre">then</span></tt> / <tt class="docutils literal"><span class="pre">else</span></tt> case.</li>
<li>The ViewHelper will have two arguments defined, called <tt class="docutils literal"><span class="pre">then</span></tt> and <tt class="docutils literal"><span class="pre">else</span></tt>,
which are very helpful in the Inline Notation.</li>
<li>The ViewHelper will automatically work with the <tt class="docutils literal"><span class="pre">&lt;f:then&gt;</span></tt> and <tt class="docutils literal"><span class="pre">&lt;f:else&gt;</span></tt>-Tags.</li>
</ul>
</div>
</div>
<div class="section" id="widgets">
<h2>Widgets</h2>
<p>Widgets are special ViewHelpers which encapsulate complex functionality. It can
be best understood what widgets are by giving some examples:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">&lt;f:widget.paginate&gt;</span></tt> renders a paginator, i.e. can be used to display large
amounts of objects. This is best known from search engine result pages.</li>
<li><tt class="docutils literal"><span class="pre">&lt;f:widget.autocomplete&gt;</span></tt> adds autocompletion functionality to a text field.</li>
<li>More widgets could include a Google Maps widget, a sortable grid, ...</li>
</ul>
<p>Internally, widgets consist of an own Controller and View.</p>
<div class="section" id="using-widgets">
<h3>Using Widgets</h3>
<p>Using widgets inside your templates is really simple: Just use them like standard
ViewHelpers, and consult their documentation for usage examples. An example for
the <tt class="docutils literal"><span class="pre">&lt;f:widget.paginate&gt;</span></tt> follows below:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:widget.paginate</span> <span class="na">itemsPerPage=</span><span class="s">&quot;10&quot;</span> <span class="na">objects=</span><span class="s">&quot;{blogs}&quot;</span> <span class="na">as=</span><span class="s">&quot;paginatedBlogs&quot;</span><span class="nt">&gt;</span>
  // use {paginatedBlogs} as you used {blogs} before, most certainly inside
  // a <span class="nt">&lt;f:for&gt;</span> loop.
<span class="nt">&lt;/f:widget.paginate&gt;</span>
</pre></div>
</div>
<p>In the above example, it looks like <tt class="docutils literal"><span class="pre">{blogs}</span></tt> contains all <tt class="docutils literal"><span class="pre">Blog</span></tt> objects, thus
you might wonder if all objects were fetched from the database. However, the blogs
are not fetched from the database until you actually use them, so the Paginate Widget
will adjust the query sent to the database and receive only the small subset of objects.</p>
<p>So, there is no negative performance overhead in using the Paginate Widget.</p>
</div>
<div class="section" id="writing-widgets">
<h3>Writing widgets</h3>
<p>We already mentioned that a widget consists of a controller and a view, all triggered
by a ViewHelper. We&#8217;ll now explain these different components one after each other,
explaining the API you have available for creating your own widgets.</p>
<div class="section" id="viewhelper">
<h4>ViewHelper</h4>
<p>All widgets inherit from <tt class="docutils literal"><span class="pre">TYPO3\Fluid\Core\Widget\AbstractWidgetViewHelper</span></tt>.
The ViewHelper of the widget is the main entry point; it controls the widget and
sets necessary configuration for the widget.</p>
<p>To implement your own widget, the following things need to be done:</p>
<ul class="simple">
<li>The controller of the widget needs to be injected into the <tt class="docutils literal"><span class="pre">$controller</span></tt> property.</li>
<li>Inside the <tt class="docutils literal"><span class="pre">render()</span></tt>-method, you should call <tt class="docutils literal"><span class="pre">$this-&gt;initiateSubRequest()</span></tt>,
which will initiate a request to the controller which is set in the <tt class="docutils literal"><span class="pre">$controller</span></tt>
property, and return the <tt class="docutils literal"><span class="pre">Response</span></tt> object.</li>
<li>By default, all ViewHelper arguments are stored as Widget Configuration, and
are also available inside the Widget Controller. However, to modify the Widget
Configuration, you can override the <tt class="docutils literal"><span class="pre">getWidgetConfiguration()</span></tt> method and return
the configuration which you need there.</li>
</ul>
<p>There is also a property <tt class="docutils literal"><span class="pre">$ajaxWidget</span></tt>, which we will explain later in <a class="reference internal" href="#ajax-widgets">Ajax Widgets</a>.</p>
</div>
</div>
<div class="section" id="controller">
<h3>Controller</h3>
<p>A widget contains one controller, which must inherit from <tt class="docutils literal"><span class="pre">TYPO3\Fluid\Core\Widget\AbstractWidgetController</span></tt>,
which is an <tt class="docutils literal"><span class="pre">ActionController</span></tt>. There is only one difference between the normal
<tt class="docutils literal"><span class="pre">ActionController</span></tt> and the <tt class="docutils literal"><span class="pre">AbstractWidgetController</span></tt>: There is a property
<tt class="docutils literal"><span class="pre">$widgetConfiguration</span></tt>, containing the widget&#8217;s configuration which was set in the ViewHelper.</p>
</div>
<div class="section" id="fluid-template">
<h3>Fluid Template</h3>
<p>The Fluid templates of a widget are normal Fluid templates as you know them, but
have a few ViewHelpers available additionally:</p>
<dl class="docutils">
<dt>&lt;f:uri.widget&gt;</dt>
<dd>Generates an URI to another action of the widget.</dd>
<dt>&lt;f:link.widget&gt;</dt>
<dd>Generates a link to another action of the widget.</dd>
<dt>&lt;f:renderChildren&gt;</dt>
<dd>Can be used to render the child nodes of the Widget ViewHelper,
possibly with some more variables declared.</dd>
</dl>
</div>
<div class="section" id="ajax-widgets">
<span id="id1"></span><h3>Ajax Widgets</h3>
<p>Widgets have special support for AJAX functionality. We&#8217;ll first explain what needs
to be done to create an AJAX compatible widget, and then explain it with an example.</p>
<p>To make a widget AJAX-aware, you need to do the following:</p>
<ul>
<li><p class="first">Set <tt class="docutils literal"><span class="pre">$ajaxWidget</span></tt> to TRUE inside the ViewHelper. This will generate an unique
AJAX Identifier for the Widget, and store the WidgetConfiguration in the user&#8217;s
session on the server.</p>
</li>
<li><p class="first">Inside the index-action of the Widget Controller, generate the JavaScript which
triggers the AJAX functionality. There, you will need a URI which returns the
AJAX response. For that, use the following ViewHelper inside the template:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:uri.widget</span> <span class="na">ajax=</span><span class="s">&quot;TRUE&quot;</span> <span class="na">action=</span><span class="s">&quot;...&quot;</span> <span class="na">arguments=</span><span class="s">&quot;...&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</li>
<li><p class="first">Inside the template of the AJAX request, <tt class="docutils literal"><span class="pre">&lt;f:renderChildren&gt;</span></tt> is not available,
because the child nodes of the Widget ViewHelper are not accessible there.</p>
</li>
</ul>
</div>
</div>
<div class="section" id="xsd-schema-generation">
<h2>XSD schema generation</h2>
<p>A XSD schema file for your ViewHelpers can be created by executing</p>
<div class="highlight-text"><div class="highlight"><pre>./flow documenation:generatexsd &lt;Your&gt;\\&lt;Package&gt;\\ViewHelpers
        --target-file /some/directory/your.package.xsd
</pre></div>
</div>
<p>Then import the XSD file in your favorite IDE and map it to the namespace
<tt class="docutils literal"><span class="pre">http://typo3.org/ns/&lt;Your/Package&gt;/ViewHelpers</span></tt>. Add the namespace to your
Fluid template by adding the <tt class="docutils literal"><span class="pre">xmlns</span></tt> attribute to the root tag (usually
<tt class="docutils literal"><span class="pre">&lt;xml</span> <span class="pre">…&gt;</span></tt> or <tt class="docutils literal"><span class="pre">&lt;html</span> <span class="pre">…&gt;</span></tt>).</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">You are able to use a different XML namespace pattern by specifying the
<tt class="docutils literal"><span class="pre">-–xsd-namespace</span> <span class="pre">argument</span></tt> in the generatexsd command.</p>
</div>
<p>If you want to use this inside partials, you can use the “section” argument of
the render ViewHelper in order to only render the content of the partial.</p>
<p>Partial:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;html</span> <span class="na">xmlns:x=</span><span class="s">”http://typo3.org/ns/Your/Package/ViewHelpers”</span><span class="nt">&gt;</span>
<span class="nt">&lt;f:section</span> <span class="na">name=</span><span class="s">”content”</span><span class="nt">&gt;</span>
        <span class="nt">&lt;x:yourViewHelper</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/f:section&gt;</span>
</pre></div>
</div>
<p>Template:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:render</span> <span class="na">partial=</span><span class="s">”PartialName”</span> <span class="na">section=</span><span class="s">”content”</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="7524c018-1d68-abc7-c827-ad83ad7a6b09" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="99391b8d-3984-b7cd-1401-4241c08d5d9c" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="validation" locale="">
       <properties>
        <title>Validation</title>
       </properties>
       <node identifier="9378982e-3461-530f-52e6-460c47f2cdc3" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="48058ed3-4d8b-2779-fa8e-cffc3a76b997" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="validation">
<h1>Validation</h1>
<p>Validation in web applications is a very crucial topic: Almost all data which is entered by
an end user needs some checking rules, no matter if he enters an e-mail address or a subject
for a forum posting.</p>
<p>While validation itself is quite simple, embedding it into the rest of the framework is not:
If the user has entered a wrong value, the original page has to be re-displayed, and the user
needs some well-readable information on what data he should enter.</p>
<p>This chapter explains:</p>
<ul class="simple">
<li>how to use the validators being part of TYPO3 Flow</li>
<li>how to write your own validators</li>
<li>how to use validation in your own code</li>
<li>how validation is embedded in the model, the persistence and the MVC layer</li>
</ul>
<div class="section" id="automatic-validation-throughout-the-framework">
<h2>Automatic Validation Throughout The Framework</h2>
<p>Inside TYPO3 Flow, validation is triggered automatically at two places: When an object is persisted, its
base validators are checked as explained in the last section. Furthermore, validation happens in
the MVC layer when a Domain Model is used as a controller argument, directly after Property Mapping.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p>If a validation error occurs during persistence, there is no way to catch this error
and handle it &#8211; as persistence is executed at the end of every request <em>after the response
has been sent to the client</em>.</p>
<p class="last">Thus, validation on persistence is merely a safeguard for preventing invalid data to be stored
in the database.</p>
</div>
<p>When validation in the MVC layer happens, it is possible to handle errors correctly. In a nutshell,
the process is as follows:</p>
<ul class="simple">
<li>an array of data is received from the client</li>
<li>it is transformed to an object using Property Mapping</li>
<li>this object is validated using the base validators</li>
<li>if there is a property mapping or validation error, the last page (which usually contains an
edit-form) is re-displayed, an error message is shown and the erroneous field is highlighted.</li>
</ul>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If you want to suppress the re-display of the last page (which is handled through
<tt class="docutils literal"><span class="pre">errorAction()</span></tt>, you can add a <tt class="docutils literal"><span class="pre">&#64;Flow\IgnoreValidation(&quot;$comment&quot;)</span></tt> annotation
to the docblock of the corresponding controller action.</p>
</div>
<p>Furthermore, it is also possible to execute additional validators only for specific action
arguments using <tt class="docutils literal"><span class="pre">&#64;Flow\Validate</span></tt> inside a controller action:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CommentController</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Mvc\Controller\ActionController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @param \YourPackage\Domain\Model\Comment $comment</span>
<span class="sd">         * @Flow\Validate(argumentName=&quot;comment&quot;, type=&quot;YourPackage:SomeSpecialValidator&quot;)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">updateAction</span><span class="p">(</span><span class="nx">\YourPackage\Domain\Model\Comment</span> <span class="nv">$comment</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// here, $comment is a valid object</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">It is also possible to add an additional validator for a sub object of the argument, using
the &#8220;dot-notation&#8221;: <tt class="docutils literal"><span class="pre">&#64;Flow\Validate(argumentName=&quot;comment.text&quot;,</span> <span class="pre">type=&quot;....&quot;)</span></tt>.</p>
</div>
<p>However, it is a rather rare use-case that a validation rule needs to be defined only in the controller.</p>
</div>
<div class="section" id="using-validators-the-validatorresolver">
<h2>Using Validators &amp; The ValidatorResolver</h2>
<p>A validator is a PHP class being responsible for checking validity of a certain object or
simple type.</p>
<p>All validators implement <tt class="docutils literal"><span class="pre">\TYPO3\Flow\Validation\Validator\ValidatorInterface</span></tt>, and
the API of every validator is demonstrated in the following code example:</p>
<div class="highlight-php"><div class="highlight"><pre>        <span class="c1">// NOTE: you should always use the ValidatorResolver to create new</span>
        <span class="c1">// validators, as it is demonstrated in the next section.</span>
<span class="nv">$validator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\TYPO3\Flow\Validation\Validator\StringLengthValidator</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;minimum&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span>
        <span class="s1">&#39;maximum&#39;</span> <span class="o">=&gt;</span> <span class="mi">20</span>
<span class="p">));</span>

        <span class="c1">// $result is of type TYPO3\Flow\Error\Result</span>
<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$validator</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;myExampleString&#39;</span><span class="p">);</span>
<span class="nv">$result</span><span class="o">-&gt;</span><span class="na">hasErrors</span><span class="p">();</span> <span class="c1">// is FALSE, as the string is longer than 10 characters.</span>

<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$validator</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="s1">&#39;short&#39;</span><span class="p">);</span>
<span class="nv">$result</span><span class="o">-&gt;</span><span class="na">hasErrors</span><span class="p">();</span> <span class="c1">// is TRUE, as the string is too short.</span>
<span class="nv">$result</span><span class="o">-&gt;</span><span class="na">getFirstError</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span> <span class="c1">// contains the human-readable error message</span>
</pre></div>
</div>
<p>On the above example, it can be seen that validators can be re-used for different input.
Furthermore, a validator does not only just return TRUE or FALSE, but instead returns
a <tt class="docutils literal"><span class="pre">Result</span></tt> object which you can ask whether any errors happened. Please see the API
for a detailed description.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The <tt class="docutils literal"><span class="pre">TYPO3\Flow\Error\Result</span></tt> object has been introduced in order to
make more structured error output possible &#8211; which is especially needed when
objects with sub-properties should be validated recursively.</p>
</div>
<div class="section" id="creating-validator-instances-the-validatorresolver">
<h3>Creating Validator Instances: The ValidatorResolver</h3>
<p>As validators can be both singleton or prototype objects (depending if they have internal state),
you should not instantiate them directly as it has been done in the above example. Instead,
you should use the <tt class="docutils literal"><span class="pre">\TYPO3\Flow\Validation\ValidatorResolver</span></tt> singleton to get a new instance
of a certain validator:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$validatorResolver</span><span class="o">-&gt;</span><span class="na">createValidator</span><span class="p">(</span><span class="nv">$validatorType</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$validatorOptions</span><span class="p">);</span>
</pre></div>
</div>
<p><tt class="docutils literal"><span class="pre">$validatorType</span></tt> can be one of the following:</p>
<ul>
<li><p class="first">a fully-qualified class name to a validator, like <tt class="docutils literal"><span class="pre">Your\Package\Validation\Validator\FooValidator</span></tt></p>
</li>
<li><p class="first">If you stick to the <tt class="docutils literal"><span class="pre">&lt;PackageKey&gt;\Validation\Validator\&lt;ValidatorName&gt;Validator</span></tt> convention,
you can also fetch the above validator using <tt class="docutils literal"><span class="pre">Your.Package:Foo</span></tt> as <tt class="docutils literal"><span class="pre">$validatorType</span></tt>.</p>
<p><strong>This is the recommended way for custom validators.</strong></p>
</li>
<li><p class="first">For the standard validators inside the <tt class="docutils literal"><span class="pre">TYPO3.Flow</span></tt> package, you can leave out the package key,
so you can use <tt class="docutils literal"><span class="pre">EmailAddress</span></tt> to fetch <tt class="docutils literal"><span class="pre">TYPO3\Flow\Validation\Validator\EmailAddressValidator</span></tt></p>
</li>
</ul>
<p>The <tt class="docutils literal"><span class="pre">$validatorOptions</span></tt> parameter is an associative array of validator options. See the validator
reference in the appendix for the configuration options of the built-in validators.</p>
</div>
<div class="section" id="default-validators">
<h3>Default Validators</h3>
<p>TYPO3 Flow is shipped with a big list of validators which are ready to use &#8211; see the appendix for the full
list. Here, we just want to highlight some more special validators.</p>
<p>Additional to the simple validators for strings, numbers and other basic types, TYPO3 Flow has a few powerful
validators shipped:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">GenericObjectValidator</span></tt> validates an object by validating all of its properties. This validator
is often used internally, but will rarely be used directly.</li>
<li><tt class="docutils literal"><span class="pre">CollectionValidator</span></tt> validates a collection of objects. This validator is often used internally,
but will rarely be used directly.</li>
<li><tt class="docutils literal"><span class="pre">ConjunctionValidator</span></tt> and <tt class="docutils literal"><span class="pre">DisjunctionValidator</span></tt> implement logical AND / OR conditions.</li>
</ul>
<p>Furthermore, almost all validators of simple types regard <tt class="docutils literal"><span class="pre">NULL</span></tt> and the empty string (<tt class="docutils literal"><span class="pre">''</span></tt>) as <strong>valid</strong>.
The only exception is the <tt class="docutils literal"><span class="pre">NotEmpty</span></tt> validator, which disallows both <tt class="docutils literal"><span class="pre">NULL</span></tt> and empty string. This means
if you want to validate that a property is e.g. an email address and does exist, you need to combine the two
validators using a <tt class="docutils literal"><span class="pre">ConjunctionValidator</span></tt>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$conjunctionValidator</span> <span class="o">=</span> <span class="nv">$validatorResolver</span><span class="o">-&gt;</span><span class="na">createValidator</span><span class="p">(</span><span class="s1">&#39;Conjunction&#39;</span><span class="p">);</span>
<span class="nv">$conjunctionValidator</span><span class="o">-&gt;</span><span class="na">addValidator</span><span class="p">(</span><span class="nv">$validatorResolver</span><span class="o">-&gt;</span><span class="na">createValidator</span><span class="p">(</span><span class="s1">&#39;NotEmpty&#39;</span><span class="p">));</span>
<span class="nv">$conjunctionValidator</span><span class="o">-&gt;</span><span class="na">addValidator</span><span class="p">(</span><span class="nv">$validatorResolver</span><span class="o">-&gt;</span><span class="na">createValidator</span><span class="p">(</span><span class="s1">&#39;EmailAddress&#39;</span><span class="p">));</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="validating-domain-models">
<h2>Validating Domain Models</h2>
<p>It is very common that a full Domain Model should be validated instead of only a simple type.
To make this use-case more easy, the <tt class="docutils literal"><span class="pre">ValidatorResolver</span></tt> has a method <tt class="docutils literal"><span class="pre">getBaseValidatorConjunction</span></tt>
which returns a fully-configured validator for an arbitrary Domain Object:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$commentValidator</span> <span class="o">=</span> <span class="nv">$validatorResolver</span><span class="o">-&gt;</span><span class="na">getBaseValidatorConjunction</span><span class="p">(</span><span class="s1">&#39;YourPackage\Domain\Model\Comment&#39;</span><span class="p">);</span>
<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$commentValidator</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">(</span><span class="nv">$comment</span><span class="p">);</span>
</pre></div>
</div>
<p>The returned validator checks the following things:</p>
<ul>
<li><p class="first">All property validation rules configured through <tt class="docutils literal"><span class="pre">&#64;Flow\Validate</span></tt> annotations on properties of the model:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">YourPackage\Domain\Model</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">TYPO3\Flow\Annotations</span> <span class="k">as</span> <span class="nx">Flow</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Comment</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Validate(type=&quot;NotEmpty&quot;)</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$text</span><span class="p">;</span>

        <span class="c1">// Add getters and setters here</span>
<span class="p">}</span>
</pre></div>
</div>
<p>It also correctly builds up validators for <tt class="docutils literal"><span class="pre">Collections</span></tt> or <tt class="docutils literal"><span class="pre">arrays</span></tt>, if they are properly
typed (<tt class="docutils literal"><span class="pre">Doctrine\Common\Collection&lt;YourPackage\Domain\Model\Author&gt;</span></tt>).</p>
</li>
<li><p class="first">In addition to validating the individual properties on the model, it checks whether a designated <em>Domain Model
Validator</em> exists; i.e. for the Domain Model <tt class="docutils literal"><span class="pre">YourPackage\Domain\Model\Comment</span></tt> it is checked
whether <tt class="docutils literal"><span class="pre">YourPackage\Domain\Validator\CommentValidator</span></tt> exists. If it exists, it is automatically
called on validation.</p>
</li>
</ul>
<p>When specifying a Domain Model as an argument of a controller action, all the above validations will be
automatically executed. This is explained in detail in the following section.</p>
</div>
<div class="section" id="advanced-feature-partial-validation">
<h2>Advanced Feature: Partial Validation</h2>
<p>If you only want to validate parts of your objects, f.e. want to store incomplete objects in
the database, you can assign special Validation Groups to your validators.</p>
<p>It is possible to specify a list of validation groups at each <tt class="docutils literal"><span class="pre">&#64;Flow\Validate</span></tt> annotation,
if none is specified the validation group <tt class="docutils literal"><span class="pre">Default</span></tt> is assigned to the validator.</p>
<p>When invoking validation, f.e. in the MVC layer or in persistence, only validators with
certain validation groups are executed:</p>
<ul class="simple">
<li>In MVC, the validation group <tt class="docutils literal"><span class="pre">Default</span></tt> and <tt class="docutils literal"><span class="pre">Controller</span></tt> is used.</li>
<li>In persistence, the validation group <tt class="docutils literal"><span class="pre">Default</span></tt> and <tt class="docutils literal"><span class="pre">Persistence</span></tt> is used.</li>
</ul>
<p>Additionally, it is possible to specify a list of validation groups at each controller action
via the <tt class="docutils literal"><span class="pre">&#64;Flow\ValidationGroups</span></tt> annotation. This way, you can override the default
validation groups that are invoked on this action call, for example when you need to
validate uniqueness of a property like an e-mail adress only in your createAction.</p>
<p>A validator is only executed if at least one validation group overlap.</p>
<p>The following example demonstrates this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Comment</span> <span class="p">{</span>
        <span class="sd">/**</span>
<span class="sd">         * @Flow\Validate(type=&quot;NotEmpty&quot;)</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$prop1</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Validate(type=&quot;NotEmpty&quot;, validationGroups={&quot;Default&quot;})</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$prop2</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Validate(type=&quot;NotEmpty&quot;, validationGroups={&quot;Persistence&quot;})</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$prop3</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Validate(type=&quot;NotEmpty&quot;, validationGroups={&quot;Controller&quot;})</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$prop4</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Validate(type=&quot;NotEmpty&quot;, validationGroups={&quot;createAction&quot;})</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$prop5</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">CommentController</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Mvc\Controller\ActionController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @param Comment $comment</span>
<span class="sd">         * @Flow\ValidationGroups({&quot;createAction&quot;})</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">createAction</span><span class="p">(</span><span class="nx">Comment</span> <span class="nv">$comment</span><span class="p">)</span> <span class="p">{</span>
                <span class="o">...</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<ul class="simple">
<li>validation for prop1 and prop2 are the same, as the &#8220;Default&#8221; validation group is added if none is specified</li>
<li>validation for prop1 and prop2 are executed both on persisting and inside the controller</li>
<li>validation for $prop3 is only executed in persistence, but not in controller</li>
<li>validation for $prop4 is only executed in controller, but not in persistence</li>
<li>validation for $prop5 is only executed in createAction, but not in persistence</li>
</ul>
<p>If interacting with the <tt class="docutils literal"><span class="pre">ValidatorResolver</span></tt> directly, the to-be-used validation groups
can be specified as the last argument of <tt class="docutils literal"><span class="pre">getBaseValidatorConjunction()</span></tt>.</p>
</div>
<div class="section" id="avoiding-duplicate-validation-and-recursion">
<h2>Avoiding Duplicate Validation and Recursion</h2>
<p>Unlike simple types, objects (or collections) may reference other objects, potentially leading
to recursion during the validation and multiple validation of the same instance.</p>
<p>To avoid this the <tt class="docutils literal"><span class="pre">GenericObjectValidator</span></tt> as well as anything extending <tt class="docutils literal"><span class="pre">AbstractCompositeValidator</span></tt>
keep track of instances that have already been validated. The container to keep track of these instances
can be (re-)set using <tt class="docutils literal"><span class="pre">setValidatedInstancesContainer</span></tt> defined in the <tt class="docutils literal"><span class="pre">ObjectValidatorInterface</span></tt>.</p>
<p>TYPO3 Flow resets this container before doing validation automatically. If you use validation directly in
your controller, you should reset the container directly before validation, after any changes have been
done.</p>
<p>When implementing your own validators (see below), you need to pass the container around and check instances
against it. See <tt class="docutils literal"><span class="pre">AbstractCompositeValidator</span></tt> and <tt class="docutils literal"><span class="pre">isValidatedAlready</span></tt> in the <tt class="docutils literal"><span class="pre">GenericObjectValidator</span></tt>
for examples of how to do this.</p>
</div>
<div class="section" id="writing-validators">
<h2>Writing Validators</h2>
<p>Usually, when writing your own validator, you will not directly implement <tt class="docutils literal"><span class="pre">ValidatorInterface</span></tt>, but
rather subclass <tt class="docutils literal"><span class="pre">AbstractValidator</span></tt>. You only need to specify any options your validator might use and
implement the <tt class="docutils literal"><span class="pre">isValid()</span></tt> method then:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A validator for checking items against foos.</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">MySpecialValidator</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Validation\Validator\AbstractValidator</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var array</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$supportedOptions</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
                <span class="s1">&#39;foo&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span> <span class="s1">&#39;The foo value to accept as valid&#39;</span><span class="p">,</span> <span class="s1">&#39;mixed&#39;</span><span class="p">,</span> <span class="k">TRUE</span><span class="p">)</span>
        <span class="p">);</span>

        <span class="sd">/**</span>
<span class="sd">         * Check if the given value is a valid foo item. What constitutes a valid foo</span>
<span class="sd">         is determined through the &#39;foo&#39; option.</span>
<span class="sd">         *</span>
<span class="sd">         * @param mixed $value</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="k">function</span> <span class="nf">isValid</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">]))</span> <span class="p">{</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\TYPO3\Flow\Validation\Exception\InvalidValidationOptionsException</span><span class="p">(</span>
                                <span class="s1">&#39;The option &quot;foo&quot; for this validator needs to be specified&#39;</span><span class="p">,</span> <span class="mi">12346788</span>
                        <span class="p">);</span>
                <span class="p">}</span>

                <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="o">!==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">])</span> <span class="p">{</span>
                        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">addError</span><span class="p">(</span><span class="s1">&#39;The value must be equal to &quot;%s&quot;&#39;</span><span class="p">,</span> <span class="mi">435346321</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">]));</span>
                <span class="p">}</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In the above example, the <tt class="docutils literal"><span class="pre">isValid()</span></tt> method has been implemented, and the parameter <tt class="docutils literal"><span class="pre">$value</span></tt> is the
data we want to check for validity. In case the data is valid, nothing needs to be done.</p>
<p>In case the data is invalid, <tt class="docutils literal"><span class="pre">$this-&gt;addError()</span></tt> should be used to add an error message, an error code
(which should be the unix timestamp of the current time) and optional arguments which are inserted into
the error message.</p>
<p>The options of the validator can be accessed in the associative array <tt class="docutils literal"><span class="pre">$this-&gt;options</span></tt>. The options
must be declared as shown above. The $supportedOptions array is indexed by option name and each value
is an array with the following numerically indexed elements:</p>
<p># default value of the option
# description of the option (used for documentation rendering)
# type of the option (used for documentation rendering)
# required option flag (optional, defaults to FALSE)</p>
<p>The default values are set in the constructor of the abstract validators provided with FLOW3. If the
required flag is set, missing options will cause an <tt class="docutils literal"><span class="pre">InvalidValidationOptionsException</span></tt> to be thrown
when the validator is instantiated.</p>
<p>In case you do further checks on the options and any of them is invalid, an
<tt class="docutils literal"><span class="pre">InvalidValidationOptionsException</span></tt> should be thrown as well.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Because you extended AbstractValidator in the above example, <tt class="docutils literal"><span class="pre">NULL</span></tt> and empty string
are automatically regarded as valid values; as it is the case for all other validators.
If you do not want to accept empty values, you need to set the class property
$acceptsEmptyValues to FALSE.</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="faa8adc3-ad02-9d99-c6c5-3d787b8d7732" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="6cad2db5-47fb-9bca-a5af-9d065e907323" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="propertymapping" locale="">
       <properties>
        <title>Property Mapping</title>
       </properties>
       <node identifier="bfa96f6a-9a4d-c2e2-1a4c-426fecf81229" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="4ed36232-5be2-2b2a-874c-9b6a45f3c5f2" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="property-mapping">
<h1>Property Mapping</h1>
<p>The Property Mappers task is to convert simple types, like arrays, strings, numbers,
to objects. This is most prominently needed in the MVC framework: When a request
arrives, it contains all its data as simple types, that is strings, and arrays.</p>
<p>We want to help the developer thinking about objects, that&#8217;s why we try to
transparently convert the incoming data to its correct object representation.
This is the objective of the Property Mapper.</p>
<p>At first, we show some examples on how the property mapper can be used, and then
the internal structure is explained.</p>
<p>The main API of the <tt class="docutils literal"><span class="pre">PropertyMapper</span></tt> is very simple: It just consists of one method
<tt class="docutils literal"><span class="pre">convert($source,</span> <span class="pre">$targetType)</span></tt>, which receives input data as the first argument,
and the target type as second argument. This method returns the built object of type
<tt class="docutils literal"><span class="pre">$targetType</span></tt>.</p>
<div class="section" id="example-usage">
<h2>Example Usage</h2>
<p>The most simple usage is to convert simple types to different simple types, i.e.
converting a numeric <tt class="docutils literal"><span class="pre">string</span></tt> to a <tt class="docutils literal"><span class="pre">float</span></tt> number:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// $propertyMapper is of class TYPO3\Flow\Property\PropertyMapper</span>
<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$propertyMapper</span><span class="o">-&gt;</span><span class="na">convert</span><span class="p">(</span><span class="s1">&#39;12.5&#39;</span><span class="p">,</span> <span class="s1">&#39;float&#39;</span><span class="p">);</span>
<span class="c1">// $result == (float)12.5</span>
</pre></div>
</div>
<p>This is of course a really conceived example, as the same result could be achieved
by just casting the numeric string to a floating point number.</p>
<p>Our next example goes a bit further and shows how we can use the Property Mapper
to convert an array of data into a domain model:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\Entity</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">TYPO3\MyPackage\Domain\Model\Person</span> <span class="p">{</span>
        <span class="sd">/**</span>
<span class="sd">         * @var string</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$name</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @var \DateTime</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$birthDate</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @var TYPO3\MyPackage\Domain\Model\Person</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$mother</span><span class="p">;</span>
        <span class="c1">// ... furthermore contains getters and setters for the above properties.</span>
<span class="p">}</span>

<span class="nv">$inputArray</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Fisher&#39;</span><span class="p">,</span>
        <span class="s1">&#39;birthDate&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1990-11-14T15:32:12+00:00&#39;</span>
<span class="p">);</span>
<span class="nv">$person</span> <span class="o">=</span> <span class="nv">$propertyMapper</span><span class="o">-&gt;</span><span class="na">convert</span><span class="p">(</span><span class="nv">$inputArray</span><span class="p">,</span> <span class="s1">&#39;TYPO3\MyPackage\Domain\Model\Person&#39;</span><span class="p">);</span>

<span class="c1">// $person is a newly created object of type TYPO3\MyPackage\Domain\Model\Person</span>
<span class="c1">// $person-&gt;name == &#39;John Fisher&#39;</span>
<span class="c1">// $person-&gt;birthDate is a DateTime object with the correct date set.</span>
</pre></div>
</div>
<p>We&#8217;ll first use a simple input array:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$input</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
  <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Fisher&#39;</span><span class="p">,</span>
  <span class="s1">&#39;birthDate&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1990-11-14T15:32:12+00:00&#39;</span>
<span class="p">);</span>
</pre></div>
</div>
<p>After calling <tt class="docutils literal"><span class="pre">$propertyMapper-&gt;convert($input,</span> <span class="pre">'TYPO3\MyPackage\Domain\Model\Person')</span></tt>,
we receive an ew object of type <tt class="docutils literal"><span class="pre">Person</span></tt> which has <tt class="docutils literal"><span class="pre">$name</span></tt> set to <tt class="docutils literal"><span class="pre">John</span> <span class="pre">Fisher</span></tt>,
and <tt class="docutils literal"><span class="pre">$birthDate</span></tt> set to a <tt class="docutils literal"><span class="pre">DateTime</span></tt> object of the specified date. You might
now wonder how the PropertyMapper knows how to convert <tt class="docutils literal"><span class="pre">DateTime</span></tt> objects and
<tt class="docutils literal"><span class="pre">Person</span></tt> objects? The answer is: It does not know that. However, the PropertyMapper
calls specialized Type Converters which take care of the actual conversion.</p>
<p>In our example, three type converters are called:</p>
<ul class="simple">
<li>First, to convert &#8216;John Fisher&#8217; to a string (required by the annotation in the
domain model), a <tt class="docutils literal"><span class="pre">StringConverter</span></tt> is called. This converter simply passes
through the input string, without modification.</li>
<li>Then, a <tt class="docutils literal"><span class="pre">DateTimeConverter</span></tt> is called, whose responsibility is to convert the
input string into a valid <tt class="docutils literal"><span class="pre">DateTime</span></tt> object.</li>
<li>At the end, the <tt class="docutils literal"><span class="pre">Person</span></tt> object still needs to be built. For that, the
<tt class="docutils literal"><span class="pre">PersistentObjectConverter</span></tt> is responsible. It creates a fresh <tt class="docutils literal"><span class="pre">Person</span></tt> object,
and sets the <tt class="docutils literal"><span class="pre">$name</span></tt> and <tt class="docutils literal"><span class="pre">$birthDate</span></tt> properties which were already built
using the type converters above.</li>
</ul>
<p>This example should illustrate that property mapping is a recursive process, and
the PropertyMappers task is exactly to orchestrate the different <tt class="docutils literal"><span class="pre">TypeConverters</span></tt>
needed to build a big, compound object.</p>
<p>The <tt class="docutils literal"><span class="pre">PersistentObjectConverter</span></tt> has some more features, as it supports fetching
objects from the persistence layer if an identity for the object is given. Both
the following inputs will result in the corresponding object to be fetched from
the persistence layer:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$input</span> <span class="o">=</span> <span class="s1">&#39;14d20100-9d70-11e0-aa82-0800200c9a66&#39;</span><span class="p">;</span>
<span class="c1">// or:</span>
<span class="nv">$input</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
  <span class="s1">&#39;__identity&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;14d20100-9d70-11e0-aa82-0800200c9a66&#39;</span>
<span class="p">);</span>

<span class="nv">$person</span> <span class="o">=</span> <span class="nv">$propertyMapper</span><span class="o">-&gt;</span><span class="na">convert</span><span class="p">(</span><span class="nv">$input</span><span class="p">,</span> <span class="s1">&#39;MyCompany\MyPackage\Domain\Model\Person&#39;</span><span class="p">);</span>
<span class="c1">// The $person object with UUID 14d20100-9d70-11e0-aa82-0800200c9a66 is fetched from the persistence layer</span>
</pre></div>
</div>
<p>In case some more properties are specified in the array (besides <tt class="docutils literal"><span class="pre">__identity</span></tt>),
the submitted properties are modified on the fetched object. These modifications are
not automatically saved to the database at the end of the request, you need to pass
such an instance to <tt class="docutils literal"><span class="pre">update</span></tt> on the corresponding repository to persist the changes.</p>
<p>So, let&#8217;s walk through a more complete input example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$input</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
  <span class="s1">&#39;__identity&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;14d20100-9d70-11e0-aa82-0800200c9a66&#39;</span><span class="p">,</span>
  <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">,</span>
  <span class="s1">&#39;mother&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;efd3b461-6f24-499d-97bc-309dfbe01f05&#39;</span>
<span class="p">);</span>
</pre></div>
</div>
<p>In this case, the following steps happen:</p>
<ul class="simple">
<li>The <tt class="docutils literal"><span class="pre">Person</span></tt> object with identity <tt class="docutils literal"><span class="pre">14d20100-9d70-11e0-aa82-0800200c9a66</span></tt> is
fetched from persistence.</li>
<li>The <tt class="docutils literal"><span class="pre">$name</span></tt> of the fetched <tt class="docutils literal"><span class="pre">$person</span></tt> object is updated to <tt class="docutils literal"><span class="pre">John</span> <span class="pre">Doe</span></tt></li>
<li>As the <tt class="docutils literal"><span class="pre">$mother</span></tt> property is also of type <tt class="docutils literal"><span class="pre">Person</span></tt>, the <tt class="docutils literal"><span class="pre">PersistentObjectConverter</span></tt>
is invoked recursively. It fetches the <tt class="docutils literal"><span class="pre">Person</span></tt> object with identifier
<tt class="docutils literal"><span class="pre">efd3b461-6f24-499d-97bc-309dfbe01f05</span></tt>, which is then set as the <tt class="docutils literal"><span class="pre">$mother</span></tt>
property of the original person.</li>
</ul>
<p>Here, you see that we can also set associations using the Property Mapper.</p>
</div>
<div class="section" id="configuring-the-conversion-process">
<h2>Configuring the Conversion Process</h2>
<p>It is possible to configure the conversion process by specifying a
<tt class="docutils literal"><span class="pre">PropertyMappingConfiguration</span></tt> as third parameter to <tt class="docutils literal"><span class="pre">PropertyMapper::convert()</span></tt>.
If no <tt class="docutils literal"><span class="pre">PropertyMappingConfiguration</span></tt> is specified, the <tt class="docutils literal"><span class="pre">PropertyMappingConfigurationBuilder</span></tt>
automatically creates a default <tt class="docutils literal"><span class="pre">PropertyMappingConfiguration</span></tt>.</p>
<p>In most cases, you should use the <tt class="docutils literal"><span class="pre">PropertyMappingConfigurationBuilder</span></tt> to create a new
PropertyMappingConfiguration, so that you get a convenient default configuration:</p>
<div class="highlight-php"><div class="highlight"><pre>        <span class="c1">// Here $propertyMappingConfigurationBuilder is an instance of</span>
        <span class="c1">// \TYPO3\Flow\Property\PropertyMappingConfigurationBuilder</span>
<span class="nv">$propertyMappingConfiguration</span> <span class="o">=</span> <span class="nv">$propertyMappingConfigurationBuilder</span><span class="o">-&gt;</span><span class="na">build</span><span class="p">();</span>

        <span class="c1">// modify $propertyMappingConfiguration here</span>

        <span class="c1">// pass the configuration to convert()</span>
<span class="nv">$propertyMapper</span><span class="o">-&gt;</span><span class="na">convert</span><span class="p">(</span><span class="nv">$source</span><span class="p">,</span> <span class="nv">$targetType</span><span class="p">,</span> <span class="nv">$propertyMappingConfiguration</span><span class="p">);</span>
</pre></div>
</div>
<p>The following configuration options exist:</p>
<ul>
<li><p class="first"><tt class="docutils literal"><span class="pre">setMapping($sourcePropertyName,</span> <span class="pre">$targetPropertyName)</span></tt> can be used to rename properties.</p>
<p>Example: If the input array contains a property <tt class="docutils literal"><span class="pre">lastName</span></tt>, but the accordant
property in the model is called <tt class="docutils literal"><span class="pre">$givenName</span></tt>, the following configuration performs
the renaming:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$propertyMappingConfiguration</span><span class="o">-&gt;</span><span class="na">setMapping</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">,</span> <span class="s1">&#39;givenName&#39;</span><span class="p">);</span>
</pre></div>
</div>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">setTypeConverter($typeConverter)</span></tt> can be used to directly set a type converter
which should be used. This disables the automatic resolving of type converters.</p>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">setTypeConverterOption($typeConverterClassName,</span> <span class="pre">$optionKey,</span> <span class="pre">$optionValue)</span></tt>
can be used to set type converter specific options.</p>
<p>Example: The DateTimeConverter supports a configuration option for the expected
date format:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$propertyMappingConfiguration</span><span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
        <span class="s1">&#39;TYPO3\Flow\Property\TypeConverter\DateTimeConverter&#39;</span><span class="p">,</span>
        <span class="nx">\TYPO3\Flow\Property\TypeConverter\DateTimeConverter</span><span class="o">::</span><span class="na">CONFIGURATION_DATE_FORMAT</span><span class="p">,</span>
        <span class="s1">&#39;Y-m-d&#39;</span>
<span class="p">);</span>
</pre></div>
</div>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">setTypeConverterOptions($typeConverterClassName,</span> <span class="pre">array</span> <span class="pre">$options)</span></tt> can be used
to set multiple configuration options for the given <tt class="docutils literal"><span class="pre">TypeConverter</span></tt>. This overrides
all previously set configuration options for the <tt class="docutils literal"><span class="pre">TypeConverter</span></tt>.</p>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">allowProperties($propertyName1,</span> <span class="pre">$propertyName2,</span> <span class="pre">...)</span></tt> specifies the allowed
property names which should be converted on the current level.</p>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">allowAllProperties()</span></tt> allows all properties on the current level.</p>
</li>
<li><p class="first"><tt class="docutils literal"><span class="pre">allowAllPropertiesExcept($propertyName1,</span> <span class="pre">$propertyName2)</span></tt> effectively inverts
the behavior: all properties on the current level are allowed, except the ones
specified as arguments to this method.</p>
</li>
</ul>
<p>All the configuration options work only for the current level, i.e. all of the
above converter options would only work for the top level type converter. However,
it is also possible to specify configuration options for lower levels, using
<tt class="docutils literal"><span class="pre">forProperty($propertyPath)</span></tt>. This is best shown with the example from the previous section.</p>
<p>The following configuration sets a mapping on the top level, and furthermore
configures the <tt class="docutils literal"><span class="pre">DateTime</span></tt> converter for the <tt class="docutils literal"><span class="pre">birthDate</span></tt> property:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$propertyMappingConfiguration</span><span class="o">-&gt;</span><span class="na">setMapping</span><span class="p">(</span><span class="s1">&#39;fullName&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">);</span>
<span class="nv">$propertyMappingConfiguration</span>
        <span class="o">-&gt;</span><span class="na">forProperty</span><span class="p">(</span><span class="s1">&#39;birthDate&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
                <span class="s1">&#39;TYPO3\Flow\Property\TypeConverter\DateTimeConverter&#39;</span><span class="p">,</span>
                <span class="nx">\TYPO3\Flow\Property\TypeConverter\DateTimeConverter</span><span class="o">::</span><span class="na">CONFIGURATION_DATE_FORMAT</span><span class="p">,</span>
                <span class="s1">&#39;Y-m-d&#39;</span>
        <span class="p">);</span>
</pre></div>
</div>
<p><tt class="docutils literal"><span class="pre">forProperty()</span></tt> also supports more than one nesting level using the dot notation,
so writing something like <tt class="docutils literal"><span class="pre">forProperty('mother.birthDate')</span></tt> is possible. For multi-valued
property types (<tt class="docutils literal"><span class="pre">Doctrine\Common\Collections\Collection</span></tt> or <tt class="docutils literal"><span class="pre">array</span></tt>) the property mapper
will use indexes as property names. To match the property mapping configuration for any index,
the path syntax supports an asterisk as a placeholder:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$propertyMappingConfiguration</span>
        <span class="o">-&gt;</span><span class="na">forProperty</span><span class="p">(</span><span class="s1">&#39;items.*&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
                <span class="s1">&#39;TYPO3\Flow\Property\TypeConverter\PersistentObjectConverter&#39;</span><span class="p">,</span>
                <span class="nx">\TYPO3\Flow\Property\TypeConverter\PersistentObjectConverter</span><span class="o">::</span><span class="na">CONFIGURATION_CREATION_ALLOWED</span><span class="p">,</span>
                <span class="k">TRUE</span>
        <span class="p">);</span>
</pre></div>
</div>
<div class="admonition-property-mapping-configuration-in-the-mvc-stack admonition">
<p class="first admonition-title">Property Mapping Configuration in the MVC stack</p>
<p>The most common use-case where you will want to adjust the Property Mapping Configuration
is inside the MVC stack, where incoming arguments are converted to objects.</p>
<p>If you use Fluid forms, normally no adjustments are needed. However, when programming
a web service or an ajax endpoint, you might need to set the <tt class="docutils literal"><span class="pre">PropertyMappingConfiguration</span></tt>
manually. You can access them using the <tt class="docutils literal"><span class="pre">\TYPO3\Flow\Mvc\Controller\Argument</span></tt>
object &#8211; and this configuration takes place inside the corresponding <tt class="docutils literal"><span class="pre">initialize*Action</span></tt>
of the controller, as in the following example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">protected</span> <span class="k">function</span> <span class="nf">initializeUpdateAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$commentConfiguration</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arguments</span><span class="p">[</span><span class="s1">&#39;comment&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getPropertyMappingConfiguration</span><span class="p">();</span>
        <span class="nv">$commentConfiguration</span><span class="o">-&gt;</span><span class="na">allowAllProperties</span><span class="p">();</span>
        <span class="nv">$commentConfiguration</span>
                <span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
                <span class="s1">&#39;TYPO3\Flow\Property\TypeConverter\PersistentObjectConverter&#39;</span><span class="p">,</span>
                <span class="nx">\TYPO3\Flow\Property\TypeConverter\PersistentObjectConverter</span><span class="o">::</span><span class="na">CONFIGURATION_CREATION_ALLOWED</span><span class="p">,</span>
                <span class="k">TRUE</span>
        <span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * @param \My\Package\Domain\Model\Comment $comment</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">updateAction</span><span class="p">(</span><span class="nx">\My\Package\Domain\Model\Comment</span> <span class="nv">$comment</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// use $comment object here</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="last admonition tip">
<p class="first admonition-title">Tip</p>
<p>Maintain IDE&#8217;s awareness of the <tt class="docutils literal"><span class="pre">Argument</span></tt> variable type</p>
<p>Most IDEs will lose information about the variable&#8217;s type when it comes to array accessing
like in the above example <tt class="docutils literal"><span class="pre">$this-&gt;arguments['comment']-&gt;…</span></tt>. In order to keep track of
the variables&#8217; types, you can synonymously use</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">protected</span> <span class="k">function</span> <span class="nf">initializeUpdateAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$commentConfiguration</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arguments</span><span class="o">-&gt;</span><span class="na">getArgument</span><span class="p">(</span><span class="s1">&#39;comment&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">getPropertyMappingConfiguration</span><span class="p">();</span>
        <span class="err">…</span>
</pre></div>
</div>
<p class="last">Since the <tt class="docutils literal"><span class="pre">getArgument()</span></tt> method is explicitly annotated, common IDEs will recognize the type
and there is no break in the type hinting chain.</p>
</div>
</div>
<div class="section" id="security-considerations">
<h3>Security Considerations</h3>
<p>The property mapping process can be security-relevant, as a small example should
show: Suppose there is a REST API where a person can create a new account, and assign
a role to this account (from a pre-defined list). This role controls the access
permissions the user has. The data which is sent to the server might look like this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">array</span><span class="p">(</span>
  <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;mynewuser&#39;</span><span class="p">,</span>
  <span class="s1">&#39;role&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;5bc42c89-a418-457f-8095-062ace6d22fd&#39;</span>
<span class="p">);</span>
</pre></div>
</div>
<p>Here, the <tt class="docutils literal"><span class="pre">username</span></tt> field contains the name of the user, and the <tt class="docutils literal"><span class="pre">role</span></tt> field points
to the role the user has selected. Now, an attacker could modify the data, and submit the
following:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">array</span><span class="p">(</span>
  <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;mynewuser&#39;</span><span class="p">,</span>
  <span class="s1">&#39;role&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;superuser&#39;</span><span class="p">,</span>
    <span class="s1">&#39;admin&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span>
  <span class="p">)</span>
<span class="p">);</span>
</pre></div>
</div>
<p>As the property mapper works recursively, it would create a new <tt class="docutils literal"><span class="pre">Role</span></tt> object with the
admin flag set to <tt class="docutils literal"><span class="pre">TRUE</span></tt>, which might compromise the security in the system.</p>
<p>That&#8217;s why two parts need to be configured for enabling the recursive behavior: First, you need
to specify the allowed properties using one of the <tt class="docutils literal"><span class="pre">allowProperties(),</span> <span class="pre">allowAllProperties()</span></tt>
or <tt class="docutils literal"><span class="pre">allowAllPropertiesExcept()</span></tt> methods.</p>
<p>Second, you need to configure the the PersistentObjectConverter using the two options
<tt class="docutils literal"><span class="pre">CONFIGURATION_MODIFICATION_ALLOWED</span></tt> and <tt class="docutils literal"><span class="pre">CONFIGURATION_CREATION_ALLOWED</span></tt>. They
must be used to explicitly activate the modification or creation of objects. By
default, the <tt class="docutils literal"><span class="pre">PersistentObjectConverter</span></tt> does only fetch objects from the persistence,
but does not create new ones or modifies existing ones.</p>
</div>
<div class="section" id="default-configuration">
<h3>Default Configuration</h3>
<p>If the Property Mapper is called without any <tt class="docutils literal"><span class="pre">PropertyMappingConfiguration</span></tt>, the
<tt class="docutils literal"><span class="pre">PropertyMappingConfigurationBuilder</span></tt> supplies a default configuration.</p>
<p>It allows all changes for the top-level object, but does not allow anything
for nested objects.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">In the MVC stack, the default <tt class="docutils literal"><span class="pre">PropertyMappingConfiguration</span></tt> is much more restrictive,
not allowing any changes to any objects. See the next section for an in-depth
explanation.</p>
</div>
</div>
<div class="section" id="the-common-case-fluid-forms">
<h3>The Common Case: Fluid Forms</h3>
<p>The Property Mapper is used to convert incoming values into objects inside the MVC stack.</p>
<p>Most commonly, these incoming values are created using HTML form elements inside
Fluid. That is why we want to make sure that only fields which are part of the
form are accepted for type conversion, and it should neither be possible to create
new objects nor to modify existing ones if that was not intended.</p>
<p>Because of that, the <tt class="docutils literal"><span class="pre">PropertyMappingConfiguration</span></tt> inside the MVC stack is
configured as restrictive as possible, not allowing any modifications of any
objects at all.</p>
<p>Furthermore, Fluid forms render an additional hidden form field containing a
secure list of all properties being transmitted; and this list is used to build
up the correct <tt class="docutils literal"><span class="pre">PropertyMappingConfiguration</span></tt>.</p>
<p>As a result, it is not possible to manipulate the request on the client side,
but as long as Fluid forms are used, no extra work has to be done by the developer.</p>
</div>
</div>
<div class="section" id="reference-of-typeconverters">
<h2>Reference of TypeConverters</h2>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">This should be automatically generated from the source and will be
added to the appendix if available.</p>
</div>
</div>
<div class="section" id="the-inner-workings-of-the-property-mapper">
<h2>The Inner Workings of the Property Mapper</h2>
<p>The Property Mapper applies the following steps to convert a simple type to an
object. Some of the steps will be described in detail afterwards.</p>
<ol class="arabic simple">
<li>Figure out which type converter to use for the given source - target pair.</li>
<li>Ask this type converter to return the child properties of the source data
(if it has any), by calling <tt class="docutils literal"><span class="pre">getSourceChildPropertiesToBeConverted()</span></tt> on
the type converter.</li>
<li>For each child property, do the following:<ol class="arabic">
<li>Ask the type converter about the data type of the child property, by calling
<tt class="docutils literal"><span class="pre">getTypeOfChildProperty()</span></tt> on the type converter.</li>
<li>Recursively invoke the <tt class="docutils literal"><span class="pre">PropertyMapper</span></tt> to build the child object from the input data.</li>
</ol>
</li>
<li>Now, call the type converter again (method <tt class="docutils literal"><span class="pre">convertFrom()</span></tt>), passing all (already
built) child objects along. The result of this call is returned as the final result of the
property mapping process.</li>
</ol>
<p>On first sight, the steps might seem complex and difficult, but they account for
a great deal of flexibility of the property mapper.
Automatic resolving of type converters</p>
<div class="section" id="automatic-resolving-of-type-converters">
<h3>Automatic Resolving of Type Converters</h3>
<p>All type converters which implement <tt class="docutils literal"><span class="pre">TYPO3\Flow\Property\TypeConverterInterface</span></tt>
are automatically found in the resolving process. There are four API methods in
each <tt class="docutils literal"><span class="pre">TypeConverter</span></tt> which influence the resolving process:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">getSupportedSourceTypes()</span></tt></dt>
<dd>Returns an array of simple types which are understood as source type by this type
converter.</dd>
<dt><tt class="docutils literal"><span class="pre">getSupportedTargetType()</span></tt></dt>
<dd>The target type this type converter can convert into. Can be either a simple type,
or a class name.</dd>
<dt><tt class="docutils literal"><span class="pre">getPriority()</span></tt></dt>
<dd>If two type converters have the same source and target type, precedence
is given to the one with higher priority. All standard TypeConverters
have a priority lower than 100.</dd>
<dt><tt class="docutils literal"><span class="pre">canConvertFrom($source,</span> <span class="pre">$targetType)</span></tt></dt>
<dd>Is called as last check, when source and target types fit together. Here, the
TypeConverter can implement runtime constraints to decide whether it can do
the conversion.</dd>
</dl>
<p>When a type converter has to be found, the following algorithm is applied:</p>
<ol class="arabic simple">
<li>If typeConverter is set in the <tt class="docutils literal"><span class="pre">PropertyMappingConfiguration</span></tt>, this is directly used.</li>
<li>The inheritance hierarchy of the target type is traversed in reverse order (from
most specific to generic) until a TypeConverter is found. If two type converters
work on the same class, the one with highest priority is used.</li>
<li>If no type converter could be found for the direct inheritance hierarchy, it is
checked if there is a TypeConverter for one of the interfaces the target class
implements. As it is not possible in PHP to order interfaces in any meaningful
way, the TypeConverter with the highest priority is used (throughout all interfaces).</li>
<li>If no type converter is found in the interfaces, it is checked if there is an
applicable type converter for the target type <tt class="docutils literal"><span class="pre">object</span></tt>.</li>
</ol>
<p>If a type converter is found according to the above algorithm, <tt class="docutils literal"><span class="pre">canConvertFrom</span></tt> is
called on the type converter, so he can perform additional runtime checks. In case
the <tt class="docutils literal"><span class="pre">TypeConverter</span></tt> returns <tt class="docutils literal"><span class="pre">FALSE</span></tt>, the search is continued at the position
where it left off in the above algorithm.</p>
<p>For simple target types, the steps 2 and 3 are omitted.</p>
</div>
<div class="section" id="writing-your-own-typeconverters">
<h3>Writing Your Own TypeConverters</h3>
<p>Often, it is enough to subclass
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Property\TypeConverter\AbstractTypeConverter</span></tt>
instead of implementing <tt class="docutils literal"><span class="pre">TypeConverterInterface</span></tt>.</p>
<p>Besides, good starting points for own type converters are the <tt class="docutils literal"><span class="pre">DateTimeConverter</span></tt>
or the <tt class="docutils literal"><span class="pre">IntegerConverter</span></tt>. If you write your own type converter, you should set
it to a priority greater than 100, to make sure it is used before the standard
converters by TYPO3 Flow.</p>
<p>TypeConverters should not contain any internal state, as they are re-used by the
property mapper, even recursively during the same run.</p>
<p>Of further importance is the exception and error semantics, so there are a few
possibilities what can be returned in <tt class="docutils literal"><span class="pre">convertFrom()</span></tt>:</p>
<ul>
<li><p class="first">For fatal errors which hint at some wrong configuration of the developer, throw
an exception. This will show a stack trace in development context. Also for
detected security breaches, exceptions should be thrown.</p>
</li>
<li><p class="first">If at run-time the type converter does not wish to participate in the results,
<tt class="docutils literal"><span class="pre">NULL</span></tt> should be returned. For example, if a file upload is expected, but there
was no file uploaded, returning <tt class="docutils literal"><span class="pre">NULL</span></tt> would be the appropriate way to handling
this.</p>
</li>
<li><p class="first">If the error is recoverable, and the user should re-submit his data, return a
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Error\Error</span></tt> object (or a subclass thereof), containing information
about the error. In this case, the property is not mapped at all (<tt class="docutils literal"><span class="pre">NULL</span></tt> is
returned, like above).</p>
<p>If the Property Mapping occurs in the context of the MVC stack (as it will be the
case in most cases), the error is detected and a forward is done to the last shown
form. The end-user experiences the same flow as when MVC validation errors happen.</p>
<p>This is the correct response for example if the file upload could not be processed
because of wrong checksums, or because the disk on the server is full.</p>
</li>
</ul>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">Inside a type converter it is not allowed to use an (injected) instance
of <tt class="docutils literal"><span class="pre">TYPO3\Flow\Property\PropertyMapper</span></tt> because it can lead to an
infinite recursive invocation.</p>
</div>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="5823e11e-c932-acec-40b1-ee75e5fd4b47" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="9cf3486e-b94c-fb21-955d-5503a1954cbd" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="resourcemanagement" locale="">
       <properties>
        <title>Resource Management</title>
       </properties>
       <node identifier="ce30c34d-879c-0e1a-4608-fabcc4de1103" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="a1244037-6ca2-f96b-445c-aa3c1cfbb100" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="resource-management">
<h1>Resource Management</h1>
<p>Traditionally a PHP application deals directly with all kinds of files. Realizing a file
upload is usually an excessive task because you need to create a proper upload form, deal
with deciphering the <tt class="docutils literal"><span class="pre">$_FILES</span></tt> superglobal and move the uploaded file from the temporary
location to a safer place. You also need to analyze the content (is it safe?), control web
access and ultimately delete the file when it&#8217;s not needed anymore.</p>
<p>TYPO3 Flow relieves you of this hassle and lets you deal with simple <tt class="docutils literal"><span class="pre">Resource</span></tt> objects
instead. File uploads are handled automatically, enforcing the restrictions which were
configured by means of validation rules. The publishing mechanism was designed to support
a wide range of scenarios, starting from simple publication to the local file system up to
fine grained access control and distribution to one or more content delivery networks.
This all works without any further ado by you, the application developer.</p>
<div class="section" id="static-resources">
<h2>Static Resources</h2>
<p>TYPO3 Flow packages may provide any amount of static resources. They might be images,
stylesheets, javascripts, templates or any other file which is used within the application
or published to the web. Static resources may either be public or private:</p>
<ul class="simple">
<li>public resources are automatically mirrored to the public web directory and are publicly
accessible without any restrictions (provided you know the filename)</li>
<li>private resources are not published by default. They can either be used internally (for
example as templates) or published with certain access restrictions.</li>
</ul>
<p>Whether a static package resource is public or private is determined by its parent
directory. For a package Acme.Demo the public resources reside in a folder called
Acme.Demo/Resources/Public/ while the private resources are stored in
Acme.Demo/Resources/Private/. The directory structure below Public and Private is up
to you but there are some suggestions in the <a class="reference internal" href="flow/references/the-definitive-guide/partiii/packagemanagement.html">chapter about package management</a>.</p>
</div>
<div class="section" id="persistent-resources">
<h2>Persistent Resources</h2>
<p>Data which was uploaded by a user or generated by your application is called a <em>persistent
resource</em>. Although these resources are usually stored as files, they are never referred
to by their path and filename directly but are represented by <tt class="docutils literal"><span class="pre">Resource</span></tt> objects.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">It is important to completely ignore the fact that resources are stored as files
somewhere in TYPO3 Flow&#8217;s directory structure – you should only deal with resource objects.</p>
</div>
<p>New persistent resources can be created by either importing or uploading a file. In either
case the result is a new <tt class="docutils literal"><span class="pre">Resource</span></tt> object which can be attached to any other object. A
resource exists as long as the <tt class="docutils literal"><span class="pre">Resource</span></tt> object is connected to another entity or value
object which is persisted. If a resource is not attached to any other persisted object,
its data will be permanently removed by a cleanup task.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Garbage collection of unused files is not yet implemented.</p>
</div>
<div class="section" id="importing-resources">
<h3>Importing Resources</h3>
<p>Importing resources is one way to create a new resource object. The <tt class="docutils literal"><span class="pre">ResourceManager</span></tt>
provides a simple API method for this purpose:</p>
<p>Example: Importing a new resource</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ImageController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         * @var \TYPO3\Flow\Resource\ResourceManager</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$resourceManager</span><span class="p">;</span>

        <span class="c1">// ... more code here ...</span>

        <span class="sd">/**</span>
<span class="sd">         * Imports an image</span>
<span class="sd">         *</span>
<span class="sd">         * @param string $imagePathAndFilename</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">importImageAction</span><span class="p">(</span><span class="nv">$imagePathAndFilename</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$newResource</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">resourceManager</span><span class="o">-&gt;</span><span class="na">importResource</span><span class="p">(</span><span class="nv">$imagePathAndFilename</span><span class="p">);</span>

                <span class="nv">$newImage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Acme\Demo\Domain\Model\Image</span><span class="p">();</span>
                <span class="nv">$newImage</span><span class="o">-&gt;</span><span class="na">setOriginalResource</span><span class="p">(</span><span class="nv">$newResource</span><span class="p">);</span>

                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">imageRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$newImage</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">ImageController</span></tt> in our example provides a method to import a new image. Because an
image consists of more than just the image file (we need a title, caption, generate a
thumbnail, ...) we created a whole new model representing an image. The imported resource
is considered as the &#8220;original resource&#8221; of the image and the <tt class="docutils literal"><span class="pre">Image</span></tt> model could easily
provide a &#8220;thumbnail resource&#8221; for a smaller version of the original.</p>
<p>This is what happens in detail while executing the <tt class="docutils literal"><span class="pre">importImageAction</span></tt> method:</p>
<ol class="arabic simple">
<li>The URI (in our case an absolute path and filename) is passed to the <tt class="docutils literal"><span class="pre">importResource()</span></tt>
method which analyzes the file found at that location.</li>
<li>The file is imported into TYPO3 Flow&#8217;s persistent resources storage  using the sha1 hash over
the file content as its filename. If a file with exactly the same content is imported
it will reuse the already stored resource.</li>
<li>The Resource Manager returns a new <tt class="docutils literal"><span class="pre">Resource</span></tt> object which refers to the newly
imported file.</li>
<li>A new <tt class="docutils literal"><span class="pre">Image</span></tt> object is created and the resource is attached to it.</li>
<li>The image is added to the <tt class="docutils literal"><span class="pre">ImageRepository</span></tt>. Only from now on the new image and the
related resource will be persisted. If we omitted that step, the image, the resource
and in the end the imported file would be discarded at the end of the script run.</li>
</ol>
<p>In order to delete a resource just disconnect the resource object from the persisted
object, for example by unsetting <tt class="docutils literal"><span class="pre">originalResource</span></tt> in the <tt class="docutils literal"><span class="pre">Image</span></tt> object.</p>
</div>
<div class="section" id="resource-uploads">
<h3>Resource Uploads</h3>
<p>The second way to create new resources is uploading them via a POST request. TYPO3 Flow&#8217;s MVC
framework detects incoming file uploads and automatically converts them into <tt class="docutils literal"><span class="pre">Resource</span></tt>
objects. In order to persist an uploaded resource you only need to persist the resulting
object.</p>
<p>Consider the following Fluid template:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;create&quot;</span> <span class="na">object=</span><span class="s">&quot;{newImage}&quot;</span> <span class="na">objectName=</span><span class="s">&quot;newImage&quot;</span>
        <span class="na">enctype=</span><span class="s">&quot;multipart/form-data&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;f:form.textfield</span> <span class="na">property=</span><span class="s">&quot;title&quot;</span> <span class="na">value=</span><span class="s">&quot;My image title&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;f:form.upload</span> <span class="na">property=</span><span class="s">&quot;originalResource&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;f:form.submit</span> <span class="na">value=</span><span class="s">&quot;Submit new image&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/f:form&gt;</span>
</pre></div>
</div>
<p>This form allows for submitting a new image which consists of an image title and the image
resource (e.g. a JPEG file). The following controller can handle the submission of the above
form:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ImageController</span> <span class="p">{</span>

   <span class="sd">/**</span>
<span class="sd">    * Creates a new image</span>
<span class="sd">    *</span>
<span class="sd">    * @param \Acme\Demo\Domain\Model\Image $newImage The new image</span>
<span class="sd">    * @return void</span>
<span class="sd">    */</span>
   <span class="k">public</span> <span class="k">function</span> <span class="nf">createAction</span><span class="p">(</span><span class="nx">\Acme\Demo\Domain\Model\Image</span> <span class="nv">$newImage</span><span class="p">)</span> <span class="p">{</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">imageRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$newImage</span><span class="p">);</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">forward</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
   <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Provided that the <tt class="docutils literal"><span class="pre">Image</span></tt> class has a <tt class="docutils literal"><span class="pre">$title</span></tt> and a <tt class="docutils literal"><span class="pre">$originalResource</span></tt> property and
that they are accessible through <tt class="docutils literal"><span class="pre">setTitle()</span></tt> and <tt class="docutils literal"><span class="pre">setOriginalResource()</span></tt> respectively the
above code will work just as expected:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Image</span> <span class="p">{</span>

   <span class="sd">/**</span>
<span class="sd">    * @var string</span>
<span class="sd">    */</span>
   <span class="k">protected</span> <span class="nv">$title</span><span class="p">;</span>

   <span class="sd">/**</span>
<span class="sd">    * @var \TYPO3\Flow\Resource\Resource</span>
<span class="sd">    */</span>
   <span class="k">protected</span> <span class="nv">$originalResource</span><span class="p">;</span>

   <span class="sd">/**</span>
<span class="sd">    * @param string $title</span>
<span class="sd">    * @return void</span>
<span class="sd">    */</span>
   <span class="k">public</span> <span class="k">function</span> <span class="nf">setTitle</span><span class="p">(</span><span class="nv">$title</span><span class="p">)</span> <span class="p">{</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="sd">/**</span>
<span class="sd">    * @return string</span>
<span class="sd">    */</span>
   <span class="k">public</span> <span class="k">function</span> <span class="nf">getTitle</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="sd">/**</span>
<span class="sd">    * @param \TYPO3\Flow\Resource\Resource $originalResource</span>
<span class="sd">    * @return void</span>
<span class="sd">    */</span>
   <span class="k">public</span> <span class="k">function</span> <span class="nf">setOriginalResource</span><span class="p">(</span><span class="nx">\TYPO3\Flow\Resource\Resource</span> <span class="nv">$originalResource</span><span class="p">)</span> <span class="p">{</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">originalResource</span> <span class="o">=</span> <span class="nv">$originalResource</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="sd">/**</span>
<span class="sd">    * @return \TYPO3\Flow\Resource\Resource</span>
<span class="sd">    */</span>
   <span class="k">public</span> <span class="k">function</span> <span class="nf">getOriginalResource</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">originalResource</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">There are more API functions in TYPO3 Flow&#8217;s <tt class="docutils literal"><span class="pre">ResourceManager</span></tt> which allow for retrieving
additional information about the circumstances of resource uploads. Please refer to
the API documentation for further details.</p>
</div>
</div>
</div>
<div class="section" id="resource-publishing">
<h2>Resource Publishing</h2>
<p>The process of resource publishing makes the resources in the system available,
and to provide an URL by which the given resource can be retrieved by the client.</p>
<div class="admonition-why-typo3-flow-requires-your-os-to-support-symbolic-links admonition">
<p class="first admonition-title">Why TYPO3 Flow requires your OS to support symbolic links</p>
<p class="last">Publishing resources basically means copying files from a private location to the public
web directory. TYPO3 Flow instead creates symbolic links, making the resource publishing
process consume less disk space and work faster.</p>
</div>
<div class="section" id="id1">
<h3>Static Resources</h3>
<p>Static resources (provided by packages) are published to the web directory on the first
script run and whenever packages are activated or deactivated.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Internally, we do not copy all the resource files but just generate a symlink
by default. This makes sure all changes you do in the Resources/Public/ folder
of your package are automatically visible.</p>
</div>
<p>Published static resources can be used in Fluid templates via the built-in resource view
helper:</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;{f:uri.resource(path: &#39;Images/Icons/FooIcon.png&#39;, package: &#39;Acme.Demo&#39;)}&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
<p>Note that the <tt class="docutils literal"><span class="pre">package</span></tt> parameter is optional and defaults to the
package containing the currently active controller.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">Although it might be a tempting shortcut, never refer to the resource files directly
through a URL like <tt class="docutils literal"><span class="pre">_Resources/Static/Packages/Acme.Demo/Images/Icons/FooIcon.png</span></tt>
because you can&#8217;t really rely on this path. Always use the resource view helper
instead.</p>
</div>
</div>
<div class="section" id="id2">
<h3>Persistent Resources</h3>
<p>Persistent resources are published on demand because TYPO3 Flow cannot know which resources are
meant to be public and which ones need to be kept private. The trigger for publishing
persistent resources is the generation of its public web URI. A very common way to do that
is displaying a resource in a Fluid template:</p>
<p>The resource view helper (<tt class="docutils literal"><span class="pre">f:uri.resource</span></tt> ) will ask the <tt class="docutils literal"><span class="pre">ResourcePublisher</span></tt> for the
web URI of the resource stored in <tt class="docutils literal"><span class="pre">image.originalResource</span></tt>. The publisher checks if the
given resource has already been published and if not publishes it right away.</p>
<p>A published persistent resource is accessible through a web URI like
<tt class="docutils literal"><span class="pre">http://example.local/_Resources/Persistent/107bed85ba5e9bae0edbae879bbc2c26d72033ab.jpg</span></tt>.
One advantage of using the sha1 hash of the resource content as a filename is that once the
resource changes it gets a new filename and is displayed correctly regardless of the cache
settings in the user&#8217;s web browser. Search engines on the other hand prefer more meaningful
file names. That is why TYPO3 Flow adds a &#8220;virtual&#8221; file name to the resource, like this:
<tt class="docutils literal"><span class="pre">http://example.local/_Resources/Persistent/107bed85ba5e9bae0edbae879bbc2c26d72033ab/my-speaking-title.jpg</span></tt>.
TYPO3 Flow ships with a mod_rewrite rule to map the speaking titles to the hash files.</p>
</div>
</div>
<div class="section" id="resource-stream-wrapper">
<h2>Resource Stream Wrapper</h2>
<p>Static resources are often used by packages internally. Typical use cases are templates,
XML, YAML or other data files and images for further processing. You might be tempted to
refer to these files by using one of the <tt class="docutils literal"><span class="pre">FLOW_PATH_*</span></tt> constants or by creating a path
relative to your package. A much better and more convenient way is using TYPO3 Flow&#8217;s built-in
stream package resources wrapper.</p>
<p>The following example reads the content of the file
<tt class="docutils literal"><span class="pre">Acme.Demo/Resources/Private/Templates/SomeTemplate.html</span></tt> into a variable:</p>
<p>Example: Accessing static resources</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$template</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span>
        <span class="s1">&#39;resource://Acme.Demo/Private/Templates/SomeTemplate.html</span>
<span class="s1">&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>Some situations might require access to persistent resources. The resource stream wrapper also supports this. To use this feature, just pass the resource hash:</p>
<p>Example: Accessing persisted resources</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$imageFile</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s1">&#39;resource://&#39;</span> <span class="o">.</span> <span class="nv">$resource</span><span class="p">);</span>
</pre></div>
</div>
<p>Note that you need to have a <tt class="docutils literal"><span class="pre">Resource</span></tt> object in order to access its file and that the
above example only works because <tt class="docutils literal"><span class="pre">Resource</span></tt> provides a <tt class="docutils literal"><span class="pre">__toString()</span></tt> method which
returns the resource&#8217;s hash.</p>
<p>You are encouraged to use this stream wrapper wherever you need to access a static or
persistent resource in your PHP code.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="01e4d18c-2f5a-0d32-1347-ecfcddd28d0c" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="de3ab637-ff72-5644-e330-93f1b70b193d" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="routing" locale="">
       <properties>
        <title>Routing</title>
       </properties>
       <node identifier="3acdd5be-2ab7-1ae9-2207-ad8584190d35" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="abd18c9f-72f9-6e2d-9f5c-b00f082e9b72" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="routing">
<span id="ch-routing"></span><h1>Routing</h1>
<p>As explained in the Model View Controller chapter, in TYPO3 Flow the dispatcher passes the
request to a controller which then calls the respective action. But how to tell, what
controller of what package is the right one for the current request? This is were the
Routing Framework comes into play.</p>
<div class="section" id="the-router">
<h2>The Router</h2>
<p>The request builder asks the router for the correct package, controller and action. For
this it passes the current request path to the routers <tt class="docutils literal"><span class="pre">match()</span></tt> method. The router then
iterates through all configured routes and invokes their <tt class="docutils literal"><span class="pre">matches()</span></tt> method. The first
route that matches, determines which action will be called with what parameters.</p>
<p>The same works for the opposite direction: If a link is generated the router calls the
<tt class="docutils literal"><span class="pre">resolve()</span></tt> method of all routes until one route can return the correct URI for the
specified arguments.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If no matching route can be found, a <tt class="docutils literal"><span class="pre">NotFoundException</span></tt> is thrown which
results in a 404 status code for the HTTP response and an error page being
displayed. In Development context that error page contains some more details
about the error that occurred.</p>
</div>
</div>
<div class="section" id="routes">
<h2>Routes</h2>
<p>A route describes the way from your browser to the controller - and back.</p>
<p>With the <tt class="docutils literal"><span class="pre">uriPattern</span></tt> you can define how a route is represented in the browser&#8217;s address
bar. By setting <tt class="docutils literal"><span class="pre">defaults</span></tt> you can specify package, controller and action that should
apply when a request matches the route. Besides you can set arbitrary default values that
will be available in your controller. They are called <tt class="docutils literal"><span class="pre">defaults</span></tt> because you can overwrite
them by so called dynamic route parts.</p>
<p>But let&#8217;s start with an easy example:</p>
<p>Example: Simple route - Routes.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Homepage&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Standard&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;index&#39;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last"><tt class="docutils literal"><span class="pre">name</span></tt> is optional, but it&#8217;s recommended to set a name for all routes to make debugging
easier.</p>
</div>
<p>If you insert these lines at the beginning of the file <tt class="docutils literal"><span class="pre">Configurations/Routes.yaml</span></tt>,
the <tt class="docutils literal"><span class="pre">indexAction</span></tt> of the <tt class="docutils literal"><span class="pre">StandardController</span></tt> in your My.Demo package will be called
when you open up the homepage of your TYPO3 Flow installation (<tt class="docutils literal"><span class="pre">http://localhost/</span></tt>).</p>
</div>
<div class="section" id="uri-patterns">
<h2>URI patterns</h2>
<p>The URI pattern defines the appearance of the URI. In a simple setup the pattern only
consists of static route parts and is equal to the actual URI (without protocol and
host).</p>
<p>In order to reduce the amount of routes that have to be created, you are allowed to insert
markers, so called dynamic route parts, that will be replaced by the Routing Framework.
You can even mark route parts optional.</p>
<p>But first things first.</p>
<div class="section" id="static-route-parts">
<h3>Static route parts</h3>
<p>A static route part is really simple - it will be mapped one-to-one to the resulting URI
without transformation.</p>
<p>Let&#8217;s create a route that calls the <tt class="docutils literal"><span class="pre">listAction</span></tt> of the <tt class="docutils literal"><span class="pre">ProductController</span></tt> when browsing to
<tt class="docutils literal"><span class="pre">http://localhost/my/demo</span></tt>:</p>
<p>Example: Simple route with static route parts Configuration/Routes.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Static</span><span class="nv"> </span><span class="s">demo</span><span class="nv"> </span><span class="s">route&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;my/demo&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;list&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="dynamic-route-parts">
<h3>Dynamic route parts</h3>
<p>Dynamic route parts are enclosed in curly brackets and define parts of the URI that are
not fixed.</p>
<p>Let&#8217;s add some dynamics to the previous example:</p>
<p>Example: Simple route with static and dynamic route parts - Configuration/Routes.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Dynamic</span><span class="nv"> </span><span class="s">demo</span><span class="nv"> </span><span class="s">route&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;my/demo/{@action}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
</pre></div>
</div>
<p>Now <tt class="docutils literal"><span class="pre">http://localhost/my/demo/list</span></tt> calls the <tt class="docutils literal"><span class="pre">listAction</span></tt> just like in the previous
example.</p>
<p>With <tt class="docutils literal"><span class="pre">http://localhost/my/demo/new</span></tt> you&#8217;d invoke the <tt class="docutils literal"><span class="pre">newAction</span></tt> and so on.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">It&#8217;s not allowed to have successive dynamic route parts in the URI pattern because it
wouldn&#8217;t be possible to determine the end of the first dynamic route part then.</p>
</div>
<p>The <tt class="docutils literal"><span class="pre">&#64;</span></tt> prefix should reveal that action has a special meaning here. Other predefined keys
are <tt class="docutils literal"><span class="pre">&#64;package</span></tt>, <tt class="docutils literal"><span class="pre">&#64;subpackage</span></tt>, <tt class="docutils literal"><span class="pre">&#64;controller</span></tt> and <tt class="docutils literal"><span class="pre">&#64;format</span></tt>. But you can use dynamic route parts to
set any kind of arguments:</p>
<p>Example: dynamic parameters - Configuration/Routes.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Dynamic</span><span class="nv"> </span><span class="s">demo</span><span class="nv"> </span><span class="s">route</span><span class="nv"> </span><span class="s">with</span><span class="nv"> </span><span class="s">parameter&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;products/list/{sortOrder}.{@format}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;list&#39;</span>
</pre></div>
</div>
<p>Browsing to <tt class="docutils literal"><span class="pre">http://localhost/products/list/descending.xml</span></tt> will then call the <tt class="docutils literal"><span class="pre">listAction</span></tt> in
your <tt class="docutils literal"><span class="pre">Product</span></tt> controller and the request argument <tt class="docutils literal"><span class="pre">sortOrder</span></tt> has the value of
<tt class="docutils literal"><span class="pre">descending</span></tt>.</p>
<p>By default, dynamic route parts match any simple type and convert it to a string that is available through
the corresponding request argument. Read on to learn how you can use objects in your routes.</p>
</div>
<div class="section" id="object-route-parts">
<h3>Object Route Parts</h3>
<p>If a route part refers to an object, that is known to the Persistence Manager, it will be converted to
its technical identifier (usually the UUID) automatically:</p>
<p>Example: object parameters - Configuration/Routes.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Single</span><span class="nv"> </span><span class="s">product</span><span class="nv"> </span><span class="s">route&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;products/{product}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;show&#39;</span>
</pre></div>
</div>
<p>If you add this route above the previously generated dynamic routes, an URI pointing to the show action of
the ProductController will look like <tt class="docutils literal"><span class="pre">http://localhost/products/afb275ed-f4a3-49ab-9f2f-1adff12c674f</span></tt>.</p>
<p>Probably you prefer more human readable URIs and you get them by specifying the <tt class="docutils literal"><span class="pre">object</span> <span class="pre">type</span></tt>:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Single</span><span class="nv"> </span><span class="s">product</span><span class="nv"> </span><span class="s">route&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;products/{product}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span>  <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>      <span class="s">&#39;show&#39;</span>
  <span class="l-Scalar-Plain">routeParts</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">product</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">objectType</span><span class="p-Indicator">:</span> <span class="s">&#39;My\Demo\Domain\Model\Product&#39;</span>
</pre></div>
</div>
<p>This will use the identity properties of the specified model to generate the URI representation of the product.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If the model contains no identity, the technical identifier is used!</p>
</div>
<p>Try adding the <tt class="docutils literal"><span class="pre">&#64;Flow\Identity</span></tt> annotation to the name property of the product model.
The resulting URI will be <tt class="docutils literal"><span class="pre">http://localhost/products/the-product-name</span></tt></p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The result will be transliterated, so that it does not contain invalid characters</p>
</div>
<p>Alternatively you can override the behavior by specifying an <tt class="docutils literal"><span class="pre">uriPattern</span></tt> for the object route part:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Single</span><span class="nv"> </span><span class="s">product</span><span class="nv"> </span><span class="s">route&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;products/{product}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span>  <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>      <span class="s">&#39;show&#39;</span>
  <span class="l-Scalar-Plain">routeParts</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">product</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">objectType</span><span class="p-Indicator">:</span> <span class="s">&#39;My\Demo\Domain\Model\Product&#39;</span>
      <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;{category.title}/{name}&#39;</span>
</pre></div>
</div>
<p>This will add the title of the product category to the resulting URI:
<tt class="docutils literal"><span class="pre">http://localhost/products/product-category/the-product-name</span></tt>
The route part URI pattern can contain all properties of the object or it&#8217;s relations.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">For properties of type <tt class="docutils literal"><span class="pre">\DateTime</span></tt> you can define the date format by appending a PHP
date format string separated by colon: <tt class="docutils literal"><span class="pre">{creationDate:m-Y}</span></tt>. If no format is specified,
the default of <tt class="docutils literal"><span class="pre">Y-m-d</span></tt> is used.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">If an <tt class="docutils literal"><span class="pre">uriPattern</span></tt> is set or the <tt class="docutils literal"><span class="pre">objectType</span></tt> contains identity properties, mappings from an object to it&#8217;s
URI representation are stored in the <tt class="docutils literal"><span class="pre">ObjectPathMappingRepository</span></tt> in order to make sure that existing links
work even after a property has changed!
This mapping is not required if no uriPattern is set because in this case the mapping is ubiquitous.</p>
</div>
<p>Internally the above is handled by the so called <tt class="docutils literal"><span class="pre">IdentityRoutePart</span></tt> that gives you a lot of power and flexibility
when working with entities. If you have more specialized requirements or want to use routing for objects that are not
known to the Persistence Manager, you can create your custom route part handlers, as described below.</p>
</div>
</div>
<div class="section" id="route-part-handlers">
<h2>Route Part Handlers</h2>
<p>Route part handlers are classes that implement
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Mvc\Routing\DynamicRoutePartInterface</span></tt>. But for most cases it will be
sufficient to extend <tt class="docutils literal"><span class="pre">TYPO3\Flow\Mvc\Routing\DynamicRoutePart</span></tt> and overwrite the
methods <tt class="docutils literal"><span class="pre">matchValue</span></tt> and <tt class="docutils literal"><span class="pre">resolveValue</span></tt>.</p>
<p>Let&#8217;s have a look at a (very simple) route part handler that allows you to match values against
configurable regular expressions:</p>
<p>Example: RegexRoutePartHandler.php</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">RegexRoutePartHandler</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Mvc\Routing\DynamicRoutePart</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * Checks whether the current URI section matches the configured RegEx pattern.</span>
<span class="sd">         *</span>
<span class="sd">         * @param string $requestPath value to match, the string to be checked</span>
<span class="sd">         * @return boolean TRUE if value could be matched successfully, otherwise FALSE.</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="k">function</span> <span class="nf">matchValue</span><span class="p">(</span><span class="nv">$requestPath</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;pattern&#39;</span><span class="p">],</span> <span class="nv">$requestPath</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="k">FALSE</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nb">array_shift</span><span class="p">(</span><span class="nv">$matches</span><span class="p">);</span>
                <span class="k">return</span> <span class="k">TRUE</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Checks whether the route part matches the configured RegEx pattern.</span>
<span class="sd">         *</span>
<span class="sd">         * @param string $value The route part (must be a string)</span>
<span class="sd">         * @return boolean TRUE if value could be resolved successfully, otherwise FALSE.</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="k">function</span> <span class="nf">resolveValue</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="nb">preg_match</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;pattern&#39;</span><span class="p">],</span> <span class="nv">$value</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="k">FALSE</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nb">array_shift</span><span class="p">(</span><span class="nv">$matches</span><span class="p">);</span>
                <span class="k">return</span> <span class="k">TRUE</span><span class="p">;</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>The corresponding route might look like this:</p>
<p>Example: Route with route part handlers Configuration/Routes.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;RegEx</span><span class="nv"> </span><span class="s">route</span><span class="nv"> </span><span class="s">-</span><span class="nv"> </span><span class="s">only</span><span class="nv"> </span><span class="s">matches</span><span class="nv"> </span><span class="s">index</span><span class="nv"> </span><span class="s">&amp;</span><span class="nv"> </span><span class="s">list</span><span class="nv"> </span><span class="s">actions&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;blogs/{blog}/{@action}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Blog&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Blog&#39;</span>
  <span class="l-Scalar-Plain">routeParts</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">handler</span><span class="p-Indicator">:</span>   <span class="s">&#39;My\Blog\RoutePartHandlers\RegexRoutePartHandler&#39;</span>
      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">pattern</span><span class="p-Indicator">:</span> <span class="s">&#39;/index|list/&#39;</span>
</pre></div>
</div>
<p>The method <tt class="docutils literal"><span class="pre">matchValue()</span></tt> is called when translating from an URL to a request argument,
and the method <tt class="docutils literal"><span class="pre">resolveValue()</span></tt> needs to return an URL segment when being passed a value.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">Some examples are missing here, which should explain the API better.</p>
</div>
</div>
<div class="section" id="optional-route-parts">
<h2>Optional route parts</h2>
<p>By putting one or more route parts in round brackets you mark them optional. The following
route matches <tt class="docutils literal"><span class="pre">http://localhost/my/demo</span></tt> and <tt class="docutils literal"><span class="pre">http://localhost/my/demo/list.html</span></tt>.</p>
<p>Example: Route with optional route parts - Configuration/Routes.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Dynamic</span><span class="nv"> </span><span class="s">demo</span><span class="nv"> </span><span class="s">route&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;my/demo(/{@action}.html)&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;list&#39;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last"><tt class="docutils literal"><span class="pre">http://localhost/my/demo/list</span></tt> won&#8217;t match here, because either all optional parts
have to match - or none.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">You have to define default values for all optional dynamic route parts.</p>
</div>
</div>
<div class="section" id="case-sensitivity">
<h2>Case Sensitivity</h2>
<p>By Default URIs are lower-cased. The following example with a
username of &#8220;Kasper&#8221; will result in <tt class="docutils literal"><span class="pre">http://localhost/users/kasper</span></tt></p>
<p>Example: Route with default case handling</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;Users/{username}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;show&#39;</span>
</pre></div>
</div>
<p>You can change this behavior for routes and/or dynamic route parts:</p>
<p>Example: Route with customised case handling</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;Users/{username}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;show&#39;</span>
  <span class="l-Scalar-Plain">toLowerCase</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
  <span class="l-Scalar-Plain">routeParts</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">toLowerCase</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</pre></div>
</div>
<p>The option <tt class="docutils literal"><span class="pre">toLowerCase</span></tt> will change the default behavior for this route
and reset it for the username route part.
Given the same username of &#8220;Kasper&#8221; the resulting URI will now be
<tt class="docutils literal"><span class="pre">http://localhost/Users/kasper</span></tt> (note the lower case &#8220;k&#8221; in &#8220;kasper&#8221;).</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The predefined route parts <tt class="docutils literal"><span class="pre">&#64;package</span></tt>, <tt class="docutils literal"><span class="pre">&#64;subpackage</span></tt>, <tt class="docutils literal"><span class="pre">&#64;controller</span></tt>, <tt class="docutils literal"><span class="pre">&#64;action</span></tt> and
<tt class="docutils literal"><span class="pre">&#64;format</span></tt> are an exception, they&#8217;re always lower cased!</p>
</div>
<p>Matching of incoming URIs to static route parts is always done case sensitive. So &#8220;users/kasper&#8221; won&#8217;t match.
For dynamic route parts the case is usually not defined. If you want to handle data coming in through dynamic
route parts case-sensitive, you need to handle that in your own code.</p>
</div>
<div class="section" id="exceeding-arguments">
<h2>Exceeding Arguments</h2>
<p>By default arguments that are not part of the configured route values are <em>not
appended</em> to the resulting URI as query string.</p>
<p>If you need this behavior, you have to explicitly enable this by setting
<tt class="docutils literal"><span class="pre">appendExceedingArguments</span></tt>:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;foo/{dynamic}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;Acme.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Standard&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;index&#39;</span>
  <span class="l-Scalar-Plain">appendExceedingArguments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</pre></div>
</div>
<p>Now route values that are neither defined in the <tt class="docutils literal"><span class="pre">uriPattern</span></tt> nor specified in the <tt class="docutils literal"><span class="pre">defaults</span></tt> will be
appended to the resulting URI: <tt class="docutils literal"><span class="pre">http://localhost/foo/dynamicValue?someOtherArgument=argumentValue</span></tt></p>
<p>This setting is mostly useful for fallback routes and it is enabled for the default action route provided
with TYPO3 Flow, so that most links will work out of the box.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The setting <tt class="docutils literal"><span class="pre">appendExceedingArguments</span></tt> is only relevant for creating URIs (resolve).
While matching an incoming request to a route, this has no effect. Nevertheless, all query parameters
will be available in the resulting action request via <tt class="docutils literal"><span class="pre">$actionRequest::getArguments()</span></tt>.</p>
</div>
</div>
<div class="section" id="request-methods">
<h2>Request Methods</h2>
<p>Usually the Routing Framework does not care whether it handles a GET or POST request and just looks at the request path.
However in some cases it makes sense to restrict a route to certain HTTP methods. This is especially true for REST APIs
where you often need the same URI to invoke different actions depending on the HTTP method.</p>
<p>This can be achieved with a setting <tt class="docutils literal"><span class="pre">httpMethods</span></tt>, which accepts an array of HTTP verbs:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;some/path&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;Acme.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Standard&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;action1&#39;</span>
  <span class="l-Scalar-Plain">httpMethods</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;GET&#39;</span><span class="p-Indicator">]</span>
<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;some/path&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;Acme.Demo&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Standard&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;action2&#39;</span>
  <span class="l-Scalar-Plain">httpMethods</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;POST&#39;</span><span class="p-Indicator">,</span> <span class="s">&#39;PUT&#39;</span><span class="p-Indicator">]</span>
</pre></div>
</div>
<p>Given the above routes a GET request to <tt class="docutils literal"><span class="pre">http://localhost/some/path</span></tt> would invoke the <tt class="docutils literal"><span class="pre">action1Action()</span></tt> while
POST and PUT requests to the same URI would call <tt class="docutils literal"><span class="pre">action2Action()</span></tt>.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The setting <tt class="docutils literal"><span class="pre">httpMethods</span></tt> is only relevant for matching URIs.
While resolving route values to an URI, this setting has no effect.</p>
</div>
</div>
<div class="section" id="subroutes">
<h2>Subroutes</h2>
<p>For security reasons and to avoid confusion, only routes configured in your global
configuration folder are active. But TYPO3 Flow supports what we call SubRoutes enabling you to
provide custom routes with your package and reference them in the global routing setup.</p>
<p>Imagine following routes in the <tt class="docutils literal"><span class="pre">Routes.yaml</span></tt> file inside your demo package:</p>
<p>Example: Demo Subroutes - My.Demo/Configuration/Routes.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Product</span><span class="nv"> </span><span class="s">routes&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;products/{@action}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Standard</span><span class="nv"> </span><span class="s">routes&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;{@action}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Standard&#39;</span>
</pre></div>
</div>
<p>And in your global <tt class="docutils literal"><span class="pre">Routes.yaml</span></tt>:</p>
<p>Example: Referencing SubRoutes - Configuration/Routes.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Demo</span><span class="nv"> </span><span class="s">SubRoutes&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;demo/&lt;DemoSubroutes&gt;(.{@format})&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span>  <span class="s">&#39;html&#39;</span>
  <span class="l-Scalar-Plain">subRoutes</span><span class="p-Indicator">:</span>
    <span class="s">&#39;DemoSubroutes&#39;</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">package</span><span class="p-Indicator">:</span> <span class="s">&#39;My.Demo&#39;</span>
</pre></div>
</div>
<p>As you can see, you can reference SubRoutes by putting parts of the URI pattern in angle
brackets (like <tt class="docutils literal"><span class="pre">&lt;subRoutes&gt;</span></tt>). With the subRoutes setting you specify where to load the
SubRoutes from.</p>
<p>Internally the ConfigurationManager merges together the main route with its SubRoutes, resulting
in the following routing configuration:</p>
<p>Example: Merged routing configuration</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Demo</span><span class="nv"> </span><span class="s">SubRoutes</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">Product</span><span class="nv"> </span><span class="s">routes&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;demo/products/{@action}.{@format}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;html&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Demo</span><span class="nv"> </span><span class="s">SubRoutes</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">Standard</span><span class="nv"> </span><span class="s">routes&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;demo/{@action}.{@format}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Demo&#39;</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;html&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Standard&#39;</span>
</pre></div>
</div>
<p>You can even reference multiple SubRoutes from one route - that will create one route for
all possible combinations.</p>
<div class="section" id="nested-subroutes">
<h3>Nested Subroutes</h3>
<p>By default a SubRoute is loaded from the <tt class="docutils literal"><span class="pre">Routes.yaml</span></tt> file of the referred package but it is
possible to load SubRoutes from a different file by specifying a <tt class="docutils literal"><span class="pre">suffix</span></tt>:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Demo</span><span class="nv"> </span><span class="s">SubRoutes&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;demo/&lt;DemoSubroutes&gt;&#39;</span>
  <span class="l-Scalar-Plain">subRoutes</span><span class="p-Indicator">:</span>
    <span class="s">&#39;DemoSubroutes&#39;</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">package</span><span class="p-Indicator">:</span> <span class="s">&#39;My.Demo&#39;</span>
      <span class="l-Scalar-Plain">suffix</span><span class="p-Indicator">:</span>  <span class="s">&#39;Foo&#39;</span>
</pre></div>
</div>
<p>This will load the SubRoutes from a file <tt class="docutils literal"><span class="pre">Routes.Foo.yaml</span></tt> in the <tt class="docutils literal"><span class="pre">My.Demo</span></tt> package.
With that feature you can include multiple Routes with your package (for example providing different URI styles).
Furthermore you can nest routes in order to minimize duplication in your configuration. You nest SubRoutes by including
different SubRoutes from within a SubRoute, using the same syntax as before.
Additionally you can specify a set of <tt class="docutils literal"><span class="pre">variables</span></tt> that will be replaced in <tt class="docutils literal"><span class="pre">name</span></tt> and <tt class="docutils literal"><span class="pre">uriPattern</span></tt> of merged routes:</p>
<p>Imagine the following setup:</p>
<p>global Routes.yaml (<tt class="docutils literal"><span class="pre">Configuration/Routes.yaml</span></tt>):</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;My</span><span class="nv"> </span><span class="s">Package&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;&lt;MyPackageSubroutes&gt;&#39;</span>
  <span class="l-Scalar-Plain">subRoutes</span><span class="p-Indicator">:</span>
    <span class="s">&#39;MyPackageSubroutes&#39;</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">package</span><span class="p-Indicator">:</span> <span class="s">&#39;My.Package&#39;</span>
</pre></div>
</div>
<p>default package Routes.yaml (<tt class="docutils literal"><span class="pre">My.Package/Configuration/Routes.yaml</span></tt>):</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;products/&lt;EntitySubroutes&gt;&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Package&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
  <span class="l-Scalar-Plain">subRoutes</span><span class="p-Indicator">:</span>
    <span class="s">&#39;EntitySubroutes&#39;</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">package</span><span class="p-Indicator">:</span> <span class="s">&#39;My.Package&#39;</span>
      <span class="l-Scalar-Plain">suffix</span><span class="p-Indicator">:</span>  <span class="s">&#39;Entity&#39;</span>
      <span class="l-Scalar-Plain">variables</span><span class="p-Indicator">:</span>
        <span class="s">&#39;entityName&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;product&#39;</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Category&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;categories/&lt;EntitySubroutes&gt;&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Package&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Category&#39;</span>
  <span class="l-Scalar-Plain">subRoutes</span><span class="p-Indicator">:</span>
    <span class="s">&#39;EntitySubroutes&#39;</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">package</span><span class="p-Indicator">:</span> <span class="s">&#39;My.Package&#39;</span>
      <span class="l-Scalar-Plain">suffix</span><span class="p-Indicator">:</span>  <span class="s">&#39;Entity&#39;</span>
      <span class="l-Scalar-Plain">variables</span><span class="p-Indicator">:</span>
        <span class="s">&#39;entityName&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;category&#39;</span>
</pre></div>
</div>
<p>And in ``My.Package/Configuration/Routes.Entity.yaml``:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;&lt;entityName&gt;</span><span class="nv"> </span><span class="s">list</span><span class="nv"> </span><span class="s">view&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;index&#39;</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;&lt;entityName&gt;</span><span class="nv"> </span><span class="s">detail</span><span class="nv"> </span><span class="s">view&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;{&lt;entityName&gt;}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;show&#39;</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;&lt;entityName&gt;</span><span class="nv"> </span><span class="s">edit</span><span class="nv"> </span><span class="s">view&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;{&lt;entityName&gt;}/edit&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;edit&#39;</span>
</pre></div>
</div>
<p>This will result in a merged configuration like this:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;My</span><span class="nv"> </span><span class="s">Package</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">Product</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">product</span><span class="nv"> </span><span class="s">list</span><span class="nv"> </span><span class="s">view&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;products&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Package&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;index&#39;</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;My</span><span class="nv"> </span><span class="s">Package</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">Product</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">product</span><span class="nv"> </span><span class="s">detail</span><span class="nv"> </span><span class="s">view&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;products/{product}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Package&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;show&#39;</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;My</span><span class="nv"> </span><span class="s">Package</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">Product</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">product</span><span class="nv"> </span><span class="s">edit</span><span class="nv"> </span><span class="s">view&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;products/{product}/edit&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Package&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Product&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;edit&#39;</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;My</span><span class="nv"> </span><span class="s">Package</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">Category</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">category</span><span class="nv"> </span><span class="s">list</span><span class="nv"> </span><span class="s">view&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;categories&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Package&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Category&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;index&#39;</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;My</span><span class="nv"> </span><span class="s">Package</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">Category</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">category</span><span class="nv"> </span><span class="s">detail</span><span class="nv"> </span><span class="s">view&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;categories/{category}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Package&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Category&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;show&#39;</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;My</span><span class="nv"> </span><span class="s">Package</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">Category</span><span class="nv"> </span><span class="s">::</span><span class="nv"> </span><span class="s">category</span><span class="nv"> </span><span class="s">edit</span><span class="nv"> </span><span class="s">view&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span> <span class="s">&#39;categories/{category}/edit&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;My.Package&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Category&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;edit&#39;</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p>You can use the <tt class="docutils literal"><span class="pre">flow:routing:list</span></tt> command to list all routes which are currently active:</p>
<div class="last highlight-bash"><div class="highlight"><pre><span class="nv">$ </span>./flow routing:list

Currently registered routes:
typo3/login<span class="o">(</span>/<span class="o">{</span>@action<span class="o">}</span>.<span class="o">{</span>@format<span class="o">})</span>         TYPO3 :: Authentication
typo3/logout                              TYPO3 :: Logout
typo3/setup<span class="o">(</span>/<span class="o">{</span>@action<span class="o">})</span>                   TYPO3 :: Setup
typo3                                     TYPO3 :: Backend Overview
typo3/content/<span class="o">{</span>@action<span class="o">}</span>                   TYPO3 :: Backend - Content Module
<span class="o">{</span>node<span class="o">}</span>.html/<span class="o">{</span><span class="nb">type</span><span class="o">}</span>                        TYPO3 :: Frontend content with format and <span class="nb">type</span>
<span class="o">{</span>node<span class="o">}</span>.html                               TYPO3 :: Frontend content with <span class="o">(</span>HTML<span class="o">)</span> format
<span class="o">({</span>node<span class="o">})</span>                                  TYPO3 :: Frontend content without a specified format
                                          TYPO3 :: Fallback rule – <span class="k">for </span>when no site has been defined yet
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="route-loading-order-and-the-typo3-flow-application-context">
<h2>Route Loading Order and the TYPO3 Flow Application Context</h2>
<ul class="simple">
<li>routes inside more specific contexts are loaded first</li>
<li>and after that, global ones, so you can specify context-specific routes</li>
</ul>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="168e22cf-7aa8-f336-c80f-312a6716ff66" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="8e629ab9-243f-34d0-860e-280720bcb3e6" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="caching" locale="">
       <properties>
        <title>Cache Framework</title>
       </properties>
       <node identifier="c6f429ba-3244-c42b-fe04-809edf7bfe2c" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="0b951d18-89f2-2b4b-47c5-d25ce1dec6da" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="cache-framework">
<span id="ch-caching"></span><h1>Cache Framework</h1>
<p>TYPO3 Flow offers a caching framework to cache data. The system offers a wide variety of
options and storage solutions for different caching needs. Each cache can be configured
individually and can implement its own specific storage strategy.</p>
<p>If configured correctly the caching framework can help to speed up installations,
especially in heavy load scenarios. This can be done by moving all caches to a dedicated
cache server with specialized cache systems like the Redis key-value store (a.k.a. NoSQL
database), or shrinking the needed storage space by enabling compression of data.</p>
<div class="section" id="introduction">
<h2>Introduction</h2>
<p>The caching framework can handle multiple caches with different configurations. A single
cache consists of any number of cache entries. A single cache entry is defined by these
parts:</p>
<dl class="docutils">
<dt>identifier</dt>
<dd>A string as unique identifier within this cache. Used to store and retrieve entries.</dd>
<dt>data</dt>
<dd>The data to be cached.</dd>
<dt>lifetime</dt>
<dd>A lifetime in seconds of this cache entry. The entry can not be retrieved from cache
if lifetime expired.</dd>
<dt>tags</dt>
<dd>Additional tags (an array of strings) assigned to the entry. Used to remove specific
cache entries.</dd>
</dl>
<p>The difference between identifier and tags is hard to understand at first glance, it is
illustrated with an example.</p>
<div class="section" id="about-the-identifier">
<h3>About the Identifier</h3>
<p>The identifier used to store (&#8220;set&#8221;) and retrieve (&#8220;get&#8221;) entries from the cache holds all
information to differentiate entries from each other. For performance reasons, it should
be quick to calculate. Suppose there is an resource-intensive extension added as a plugin
on two different pages. The calculated content depends on the page on which it is inserted
and if a user is logged in or not.
So, the plugin creates at maximum four different content outputs, which can be cached in
four different cache entries:</p>
<ul class="simple">
<li>page 1, no user logged in</li>
<li>page 1, a user is logged in</li>
<li>page 2, no user logged in</li>
<li>page 2, a user is logged in</li>
</ul>
<p>To differentiate all entries from each other, the identifier is build from the page id
where the plugin is located, combined with the information whether a user is logged in.
These are concatenated and hashed (with <tt class="docutils literal"><span class="pre">sha1()</span></tt>, for example). In PHP this could look
like this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$identifier</span> <span class="o">=</span> <span class="nb">sha1</span><span class="p">((</span><span class="nx">string</span><span class="p">)</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()</span> <span class="o">.</span> <span class="p">(</span><span class="nx">string</span><span class="p">)</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isUserLoggedIn</span><span class="p">());</span>
</pre></div>
</div>
<p>When the plugin is accessed, the identifier is calculated early in the program flow. Next,
the plugin looks up for a cache entry with this identifier. If there is such an entry, the
plugin can return the cached content, else it calculates the content and stores a new
cache entry with this identifier. In general the identifier is constructed from all
dependencies which specify an unique set of data. The identifier should be based on
information which already exist in the system at the point of its calculation. In the
above scenario the page id and whether or not a user is logged in are already determined
during the frontend bootstrap and can be retrieved from the system quickly.</p>
</div>
<div class="section" id="about-tags">
<h3>About Tags</h3>
<p>Tags are used to drop specific cache entries if the information an entry is constructed
from changes. Suppose the above plugin displays content based on different news entries.
If one news entry is changed in the backend, all cache entries which are compiled from
this news row must be dropped to ensure that the frontend renders the plugin content again
and does not deliver old content on the next frontend call. If for example the plugin uses
news number one and two on one page, and news one on another page, the according cache
entries should be tagged with these tags:</p>
<ul class="simple">
<li>page 1, tags news_1, news_2</li>
<li>page 2, tag news_1</li>
</ul>
<p>If entry two is changed, a simple backend logic could be created, which drops all cache
entries tagged with &#8220;news_2&#8221;, in this case the first entry would be invalidated while the
second entry still exists in the cache after the operation. While there is always exactly
one identifier for each cache entry, an arbitrary number of tags can be assigned to an
entry and one specific tag can be assigned to mulitple cache entries. All tags a cache
entry has are given to the cache when the entry is stored (set).</p>
</div>
<div class="section" id="system-architecture">
<h3>System Architecture</h3>
<p>The caching framework architecture is based on these classes:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">TYPO3\Flow\Cache\CacheFactory</span></tt></dt>
<dd>Factory class to instantiate caches.</dd>
<dt><tt class="docutils literal"><span class="pre">TYPO3\Flow\Cache\CacheManager</span></tt></dt>
<dd>Returns the cache frontend of a specific cache. Implements methods to handle cache
instances.</dd>
<dt><tt class="docutils literal"><span class="pre">TYPO3\Flow\Cache\Frontend\FrontendInterface</span></tt></dt>
<dd>Interface to handle cache entries of a specific cache. Different frontends exist to
handle different data types.</dd>
<dt><tt class="docutils literal"><span class="pre">TYPO3\Flow\Cache\Backend\BackendInterface</span></tt></dt>
<dd>Interface for different storage strategies. A set of implementations exist with
different characteristics.</dd>
</dl>
<p>In your code you usually rely on dependency injection to have your caches injected.
Thus you deal mainly with the API defined in the <tt class="docutils literal"><span class="pre">FrontendInterface</span></tt>.</p>
</div>
</div>
<div class="section" id="configuration">
<h2>Configuration</h2>
<p>The cache framework is configured in the usual TYPO3 Flow way through YAML files. The most
important is Caches.yaml, although you may of course use Objects.yaml to further
configure the way your caches are used. Caches are given a (unique) name and have three
keys in their configuration:</p>
<dl class="docutils">
<dt>frontend</dt>
<dd>The frontend to use for the cache.</dd>
<dt>backend</dt>
<dd>The backend to use for the cache.</dd>
<dt>backendOptions</dt>
<dd>The backend options to use.</dd>
</dl>
<p>As an example for such a configuration take a look at the default that is inherited for
any cache unless overridden:</p>
<p>Example: Default cache settings</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">##</span>
<span class="c1"># Default cache configuration</span>
<span class="c1">#</span>
<span class="c1"># If no frontend, backend or options are specified for a cache, these values</span>
<span class="c1"># will be taken to create the cache.</span>
<span class="k">Default</span><span class="o">:</span>
  <span class="nx">frontend</span><span class="o">:</span> <span class="nx">TYPO3\Flow\Cache\Frontend\VariableFrontend</span>
  <span class="nx">backend</span><span class="o">:</span> <span class="nx">TYPO3\Flow\Cache\Backend\FileBackend</span>
  <span class="nx">backendOptions</span><span class="o">:</span>
    <span class="nx">defaultLifetime</span><span class="o">:</span> <span class="mi">0</span>
</pre></div>
</div>
<p>Some backends have mandatory as well as optional parameters (which are documented below).
If not all mandatory options are defined, the backend will throw an exception on the first
access. To override options for a cache, simply set them in Caches.yaml in your global
or package Configuration directory.</p>
<p>Example: Configuration to use RedisBackend for FooCache</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">FooCache</span><span class="o">:</span>
  <span class="nx">backend</span><span class="o">:</span> <span class="nx">TYPO3\Flow\Cache\Backend\RedisBackend</span>
  <span class="nx">backendOptions</span><span class="o">:</span>
    <span class="nx">database</span><span class="o">:</span> <span class="mi">3</span>
</pre></div>
</div>
</div>
<div class="section" id="cache-frontends">
<h2>Cache Frontends</h2>
<div class="section" id="frontend-api">
<h3>Frontend API</h3>
<p>All frontends must implement the API defined in the interface
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Cache\Frontend\FrontendInterface</span></tt>. All cache operations must be done
with these methods.</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">getIdentifier()</span></tt></dt>
<dd>Returns the cache identifier.</dd>
<dt><tt class="docutils literal"><span class="pre">getBackend()</span></tt></dt>
<dd>Returns the backend instance of this cache. It is seldom needed in usual code.</dd>
<dt><tt class="docutils literal"><span class="pre">set()</span></tt></dt>
<dd>Sets/overwrites an entry in the cache.</dd>
<dt><tt class="docutils literal"><span class="pre">get()</span></tt></dt>
<dd>Return the cache entry for the given identifier.</dd>
<dt><tt class="docutils literal"><span class="pre">getByTag()</span></tt></dt>
<dd>Finds and returns all cache entries which are tagged by the specified tag.</dd>
<dt><tt class="docutils literal"><span class="pre">has()</span></tt></dt>
<dd>Check for existence of a cache entry.</dd>
<dt><tt class="docutils literal"><span class="pre">remove()</span></tt></dt>
<dd>Remove the entry for the given identifier from the cache.</dd>
<dt><tt class="docutils literal"><span class="pre">flush()</span></tt></dt>
<dd>Removes all cache entries of this cache.</dd>
<dt><tt class="docutils literal"><span class="pre">flushByTag()</span></tt></dt>
<dd>Flush all cache entries which are tagged with the given tag.</dd>
<dt><tt class="docutils literal"><span class="pre">collectGarbage()</span></tt></dt>
<dd>Call the garbage collection method of the backend. This is important for backends
which are unable to do this internally.</dd>
<dt><tt class="docutils literal"><span class="pre">isValidIdentifier()</span></tt></dt>
<dd>Checks if a given identifier is valid.</dd>
<dt><tt class="docutils literal"><span class="pre">isValidTag()</span></tt></dt>
<dd>Checks if a given tag is valid.</dd>
</dl>
<p>Check the API documentation for details on these methods.</p>
</div>
<div class="section" id="available-frontends">
<h3>Available Frontends</h3>
<p>Currently three different frontends are implemented, the main difference is the data types
which can be stored using a specific frontend.</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">TYPO3\Flow\Cache\Frontend\StringFrontend</span></tt></dt>
<dd>The string frontend accepts strings as data to be cached.</dd>
<dt><tt class="docutils literal"><span class="pre">TYPO3\Flow\Cache\Frontend\VariableFrontend</span></tt></dt>
<dd>Strings, arrays and objects are accepted by this frontend. Data is serialized before
it is given to the backend. The igbinary serializer is used transparently (if
available in the system) which speeds up the serialization and unserialization and
reduces data size. The variable frontend is the most frequently used frontend and
handles the widest range of data types. While it can also handle string data, the
string frontend should be used in this case to avoid the additional serialization done
by the variable frontend.</dd>
<dt><tt class="docutils literal"><span class="pre">TYPO3\Flow\Cache\Frontend\PhpFrontend</span></tt></dt>
<dd><p class="first">This is a special frontend to cache PHP files. It extends the string frontend with the
method <tt class="docutils literal"><span class="pre">requireOnce()</span></tt> and allows PHP files to be <tt class="docutils literal"><span class="pre">require()</span></tt>&#8216;d if a cache entry
exists.</p>
<p class="last">This can be used to cache and speed up loading of calculated PHP code and becomes handy
if a lot of reflection and dynamic PHP class construction is done. A backend to be used
with the PHP frontend must implement the</p>
</dd>
<dt><tt class="docutils literal"><span class="pre">TYPO3\Flow\Cache\Backend\PhpCapableBackendInterface</span></tt></dt>
<dd>Currently the file backend is the only backend which fulfills this requirement.</dd>
</dl>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The PHP frontend can only be used to cache PHP files, it does not work with strings,
arrays or objects.</p>
</div>
</div>
</div>
<div class="section" id="cache-backends">
<h2>Cache Backends</h2>
<p>Currently already a number of different storage backends exists. They have different
characteristics and can be used for different caching needs. The best backend depends on
given server setup and hardware, as well as cache type and usage. A backend should be
chosen wisely, a wrong decision could slow down an installation in the end.</p>
<div class="section" id="common-options">
<h3>Common Options</h3>
<p><cite>Common cache backend options</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="20%" />
<col width="45%" />
<col width="13%" />
<col width="11%" />
<col width="11%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Options</th>
<th class="head">Description</th>
<th class="head">Mandatory</th>
<th class="head">Type</th>
<th class="head">Default</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>defaultLifeTime</td>
<td>Default lifetime in seconds of a
cache entry if it is
not specified for a specific entry
on set()</td>
<td>No</td>
<td>integer</td>
<td>3600</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="typo3-flow-cache-backend-filebackend">
<h3>TYPO3\Flow\Cache\Backend\FileBackend</h3>
<p>The file backend stores every cache entry as a single file to the file system. The
lifetime and tags are added after the data part in the same file.</p>
<p>As main advantage the file backend is the only backend which implements the
<tt class="docutils literal"><span class="pre">PhpCapableInterface</span></tt> and can be used in combination with the <tt class="docutils literal"><span class="pre">PhpFrontend</span></tt>. The
backend was specifically adapted to these needs and has low overhead for get and set
operations, it scales very well with the number of entries for those operations. This
mostly depends on the file lookup performance of the underlying file system in large
directories, and most modern file systems use B-trees which can easily handle millions of
files without much performance impact.</p>
<p>A disadvantage is that the performance of <tt class="docutils literal"><span class="pre">flushByTag()</span></tt> is bad and scales just O(n).
This basically means that with twice the number of entries the file backend needs double
time to flush entries which are tagged with a given tag.
This practically renders the file backend unusable for content caches. The reason for this
design decision in TYPO3 Flow is that the file backend is mainly used as AOP cache, where
<tt class="docutils literal"><span class="pre">flushByTag()</span></tt> is only used if a PHP file changes. This happens very seldom on
production systems, so get and set performance is much more important in this scenario.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Under heavy load the maximum <tt class="docutils literal"><span class="pre">set()</span></tt> performance depends on the maximum write and
seek performance of the hard disk. If for example the server system shows lots of I/O
wait in top, the file backend has reached this bound. A different storage strategy
like RAM disks, battery backed up RAID systems or SSD hard disks might help then.</p>
</div>
<div class="section" id="options">
<h4>Options</h4>
<p><cite>File cache backend options</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="19%" />
<col width="48%" />
<col width="13%" />
<col width="10%" />
<col width="11%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Option</th>
<th class="head">Description</th>
<th class="head">Mandatory</th>
<th class="head">Type</th>
<th class="head">Default</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>cacheDirectory</td>
<td><p class="first">Full path leading to a custom cache
directory.</p>
<p><cite>Example:</cite></p>
<ul class="last simple">
<li>/tmp/my-cache-directory/</li>
</ul>
</td>
<td>No</td>
<td>string</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="typo3-flow-cache-backend-pdobackend">
<h3>TYPO3\Flow\Cache\Backend\PdoBackend</h3>
<p>The PDO backend can be used as a native PDO interface to databases which are connected to
PHP via PDO. The garbage collection is implemented for this backend and should be called
to clean up hard disk space or memory.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">There is currently very little production experience with this  backend, especially
not with a capable database like Oracle. We appreciate any feedback for real life use
cases of this cache.</p>
</div>
<div class="section" id="id1">
<h4>Options</h4>
<p><cite>Pdo cache backend options</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="19%" />
<col width="48%" />
<col width="13%" />
<col width="10%" />
<col width="11%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Option</th>
<th class="head">Description</th>
<th class="head">Mandatory</th>
<th class="head">Type</th>
<th class="head">Default</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>dataSourceName</td>
<td><p class="first">Data source name for connecting to the
database.</p>
<p><cite>Examples:</cite></p>
<ul class="last simple">
<li>mysql:host=localhost;dbname=test</li>
<li>sqlite:/path/to/sqlite.db</li>
<li>sqlite::memory:</li>
</ul>
</td>
<td>Yes</td>
<td>string</td>
<td>&nbsp;</td>
</tr>
<tr class="row-odd"><td>username</td>
<td>Username to use for the database
connection</td>
<td>No</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr class="row-even"><td>password</td>
<td>Password to use for the database
connection</td>
<td>No</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="typo3-flow-cache-backend-redisbackend">
<h3>TYPO3\Flow\Cache\Backend\RedisBackend</h3>
<p><a class="reference external" href="http://redis.io/">Redis</a> is a key-value storage/database. In contrast to memcached, it allows structured
values.Data is stored in RAM but it allows persistence to disk and doesn&#8217;t suffer from the
design problems which exist with the memcached backend implementation. The redis backend
can be used as an alternative of the database backend for big cache tables and helps to
reduce load on database servers this way. The implementation can handle millions of cache
entries each with hundreds of tags if the underlying server has enough memory.</p>
<p>Redis is known to be extremely fast but very memory hungry. The implementation is an
option for big caches with lots of data because most important operations perform O(1) in
proportion to the number of keys. This basically means that the access to an entry in a
cache with a million entries is not slower than to a cache with only 10 entries, at least
if there is enough memory available to hold the complete set in memory. At the moment only
one redis server can be used at a time per cache, but one redis instance can handle
multiple caches without performance loss when flushing a single cache.</p>
<p>The garbage collection task should be run once in a while to find and delete old tags.</p>
<p>The implementation is based on the <a class="reference external" href="https://github.com/owlient/phpredis">phpredis</a> module, which must be available on the
system. It is recommended to build this from the git repository. Currently redis version
2.2 is recommended.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">It is important to monitor the redis server and tune its settings to the specific
caching needs and hardware capabilities. There are several articles on the net and the
redis configuration file contains some important hints on how to speed up the system
if it reaches bounds. A full documentation of available options is far beyond this
documentation.</p>
</div>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">The redis implementation is pretty young and should be considered as experimental. The
redis project itself has a very high development speed and it might happen that the
TYPO3 Flow implementation changes to adapt to new versions.</p>
</div>
<div class="section" id="id2">
<h4>Options</h4>
<p><cite>Redis cache backend options</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="21%" />
<col width="39%" />
<col width="13%" />
<col width="13%" />
<col width="13%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Option</th>
<th class="head">Description</th>
<th class="head">Mandatory</th>
<th class="head">Type</th>
<th class="head">Default</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>host</td>
<td>IP address or name of redis
server to connect to</td>
<td>No</td>
<td>string</td>
<td>127.0.0.1</td>
</tr>
<tr class="row-odd"><td>port</td>
<td>Port of the Redis server.</td>
<td>Yes</td>
<td>integer</td>
<td>6379</td>
</tr>
<tr class="row-even"><td>database</td>
<td>Number of the database to store
entries. Each cache should use
its own database, otherwise all
caches sharing a database are
flushed if the flush operation
is issued to one of them.
Database numbers 0 and 1 are
used and flushed by the core
unit tests and should not be
used if possible.</td>
<td>No</td>
<td>integer</td>
<td>0</td>
</tr>
<tr class="row-odd"><td>password</td>
<td>Password used to connect to the
redis instance if the redis
server needs authentication.
Warning: The password is sent
to the redis server in plain
text.</td>
<td>No</td>
<td>string</td>
<td>&nbsp;</td>
</tr>
<tr class="row-even"><td>compressionLevel</td>
<td>Set gzip compression level to a
specific value. The default
compression level is usually
sufficient.</td>
<td>No</td>
<td>integer
(-1 to 9)</td>
<td>-1</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="typo3-flow-cache-backend-memcachedbackend">
<h3>TYPO3\Flow\Cache\Backend\MemcachedBackend</h3>
<p><a class="reference external" href="http://memcached.org/">Memcached</a> is a simple key/value RAM database which scales across multiple servers. To
use this backend, at least one memcache daemon must be reachable, and the PHP module
memcache must be loaded. There are two PHP memcache implementations: memcache and
memcached, only memcache is currently supported by this backend.</p>
<div class="section" id="warning-and-design-constraints">
<h4>Warning and Design Constraints</h4>
<p>Memcached is by design a simple key-value store. Values must be strings and there is no
relation between keys. Since the caching framework needs to put some structure in it to
store the identifier-data-tags relations, it stores, for each cache entry, an
identifier-to-data, an identifier-to-tags and a tag-to-identifiers entry.</p>
<p>This leads to structural problems:</p>
<ul>
<li><dl class="first docutils">
<dt>If memcache runs out of memory but must store new entries, it will toss some other</dt>
<dd><p class="first last">entry out of the cache (this is called an eviction in memcached speak).</p>
</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt>If data is shared over multiple memcache servers and some server fails, key/value pairs</dt>
<dd><p class="first last">on this system will just vanish from cache.</p>
</dd>
</dl>
</li>
</ul>
<p>Both cases lead to corrupted caches: If, for example, a tags-to-identifier entry is lost,
<tt class="docutils literal"><span class="pre">dropByTag()</span></tt> will not be able to find the corresponding identifier-to-data entries
which should be removed and they will not be deleted. This results in old data delivered
by the cache. Additionally, there is currently no implementation of the garbage collection
which can rebuild cache integrity. It is thus important to monitor a memcached system for
evictions and server outages and to clear clear caches if that happens.</p>
<p>Furthermore memcache has no sort of namespacing. To distinguish entries of multiple caches
from each other, every entry is prefixed with the cache name. This can lead to very long
runtimes if a big cache needs to be flushed, because every entry has to be handled
separately and it is not possible to just truncate the whole cache with one call as this
would clear the whole memcached data which might even hold non TYPO3 Flow related entries.</p>
<p>Because of the mentioned drawbacks, the memcached backend should be used with care or in
situations where cache integrity is not important or if a cache has no need to use tags at
all.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The current native debian squeeze package (probably other distributions are affected,
too) suffers from <a class="reference external" href="https://bugs.php.net/bug.php?id=58943">PHP memcache bug #16927</a>.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Since memcached has no sort of namespacing and access control, this backend should not
be used if other third party systems do have access to the same memcached daemon for
security reasons. This is a typical problem in cloud deployments where access to
memcache is cheap (but could be read by third parties) and access to databases is
expensive.</p>
</div>
</div>
<div class="section" id="id3">
<h4>Options</h4>
<p><cite>Memcached cache backend options</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="15%" />
<col width="50%" />
<col width="13%" />
<col width="11%" />
<col width="11%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Option</th>
<th class="head">Description</th>
<th class="head">Mandatory</th>
<th class="head">Type</th>
<th class="head">Default</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>servers</td>
<td><p class="first">Array of used memcached servers, at</p>
<p>least one server must be defined. Each
server definition is a string, allowed
syntaxes:</p>
<ul class="last">
<li><dl class="first docutils">
<dt><strong>host</strong></dt>
<dd><p class="first last">TCP connect to host on memcached
default port (usually 11211, defined
by PHP ini
variable memcache.default_port</p>
</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt><strong>host:port</strong></dt>
<dd><p class="first last">TCP connect to host on port</p>
</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt><strong>tcp://hostname:port</strong></dt>
<dd><p class="first last">Same as above</p>
</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt><strong>unix:///path/to/memcached.sock</strong></dt>
<dd><p class="first last">Connect to memcached server using
unix sockets</p>
</dd>
</dl>
</li>
</ul>
</td>
<td>Yes</td>
<td>array</td>
<td>&nbsp;</td>
</tr>
<tr class="row-odd"><td>compression</td>
<td>Enable memcached internal data
compression. Can be used to reduce
memcached memory consumption but adds
additional compression / decompression
CPU overhead on the according memcached
servers.</td>
<td>No</td>
<td>boolean</td>
<td>FALSE</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="typo3-flow-cache-backend-apcbackend">
<h3>TYPO3\Flow\Cache\Backend\ApcBackend</h3>
<p><a class="reference external" href="http://pecl.php.net/package/APC">APC</a> is mostly known as an opcode cache for PHP source files but can be used to store
user data as well. As main advantage the data can be shared between different PHP
processes and requests. All calls are direct memory calls. This makes this backend
lightning fast for get() and set() operations. It can be an option for relatively small
caches (few dozens of megabytes) which are read and written very often and becomes handy
if APC is used as opcode cache anyway.</p>
<p>The implementation is very similar to the memcached backend implementation and suffers
from the same problems if APC runs out of memory.</p>
<p>The garbage collection is currently not implemented. In its latest version, APC will fail
to store data with a <a class="reference external" href="https://bugs.php.net/bug.php?id=58982">PHP warning</a> if it runs out of memory. This may change in the
future. Even without using the cache backend, it is advisable to increase the memory
cache size of APC to at least 64MB when working with TYPO3 Flow, simply due to the large number
of PHP files to be cached. A minimum of 128MB is recommended when using the additional
content cache. Cache TTL for file and user data should be set to zero (disabled) to avoid
heavy memory fragmentation.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">It is not advisable to use the APC backend in shared hosting environments for security
reasons: The user cache in APC is not aware of different virtual hosts. Basically
every PHP script which is executed on the system can read and write any data to this
shared cache, given data is not encapsulated or namespaced in any way. Only use the
APC backend in environments which are completely under your control and where no third
party can read or tamper your data.</p>
</div>
<div class="section" id="id4">
<h4>Options</h4>
<p>The APC backend has no options.</p>
</div>
</div>
<div class="section" id="typo3-flow-cache-backend-transientmemorybackend">
<h3>TYPO3\Flow\Cache\Backend\TransientMemoryBackend</h3>
<p>The transient memory backend stores data in a local array. It is only valid for one
request. This becomes handy if code logic needs to do expensive calculations or must look
up identical information from a database over and over again during its execution. In this
case it is useful to store the data in an array once and just lookup the entry from the
cache for consecutive calls to get rid of the otherwise additional overhead. Since caches
are available system wide and shared between core and extensions they can profit from each
other if they need the same information.</p>
<p>Since the data is stored directly in memory, this backend is the quickest backend
available. The stored data adds to the memory consumed by the PHP process and can hit the
<tt class="docutils literal"><span class="pre">memory_limit</span></tt> PHP setting.</p>
<div class="section" id="id5">
<h4>Options</h4>
<p>The transient memory backend has no options.</p>
</div>
</div>
<div class="section" id="typo3-flow-cache-backend-nullbackend">
<h3>TYPO3\Flow\Cache\Backend\NullBackend</h3>
<p>The null backend is a dummy backend which doesn&#8217;t store any data and always returns
<tt class="docutils literal"><span class="pre">FALSE</span></tt> on <tt class="docutils literal"><span class="pre">get()</span></tt>.</p>
<div class="section" id="id6">
<h4>Options</h4>
<p>The null backend has no options.</p>
</div>
</div>
</div>
<div class="section" id="how-to-use-the-caching-framework">
<h2>How to Use the Caching Framework</h2>
<p>This section is targeted at developers who want to use caches for arbitrary needs. It is
only about proper initialization, not a discussion about identifier, tagging and lifetime
decisions that must be taken during development.</p>
<div class="section" id="register-a-cache">
<h3>Register a Cache</h3>
<p>To register a cache it must be configured in Caches.yaml of a package:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">MyPackage_FooCache</span><span class="o">:</span>
  <span class="nx">frontend</span><span class="o">:</span> <span class="nx">TYPO3\Flow\Cache\Frontend\StringFrontend</span>
</pre></div>
</div>
<p>In this case <tt class="docutils literal"><span class="pre">\TYPO3\Flow\Cache\Frontend\StringFrontend</span></tt> was chosen, but that depends
on individual needs. This setting is usually not changed by users. Any option not given is
inherited from the configuration of the &#8220;Default&#8221; cache. The name (<tt class="docutils literal"><span class="pre">MyPackage_FooCache</span></tt>
in this case) can be chosen freely, but keep possible name clashes in mind and adopt a
meaningful schema.</p>
</div>
<div class="section" id="retrieve-and-use-a-cache">
<h3>Retrieve and Use a Cache</h3>
<div class="section" id="using-dependency-injection">
<h4>Using dependency injection</h4>
<p>A cache is usually retrieved through dependency injection, either constructor or setter
injection. Which is chosen depends on when you need the cache to be available. Keep in
mind that even if you seem to need a cache in the constructor, you could always make use
of <tt class="docutils literal"><span class="pre">initializeObject()</span></tt>. Here is an example for setter injection matching the
configuration given above. First you need to configure the injection in Objects.yaml:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">MyCompany\MyPackage\SomeClass</span><span class="o">:</span>
  <span class="nx">properties</span><span class="o">:</span>
    <span class="nx">fooCache</span><span class="o">:</span>
      <span class="nx">object</span><span class="o">:</span>
        <span class="nx">factoryObjectName</span><span class="o">:</span> <span class="nx">TYPO3\Flow\Cache\CacheManager</span>
        <span class="nx">factoryMethodName</span><span class="o">:</span> <span class="nx">getCache</span>
        <span class="nx">arguments</span><span class="o">:</span>
          <span class="mi">1</span><span class="o">:</span>
            <span class="nx">value</span><span class="o">:</span> <span class="nx">MyPackage_FooCache</span>
</pre></div>
</div>
<p>This configures what will be injected into the following setter:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Sets the foo cache</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Flow\Cache\Frontend\StringFrontend $cache Cache for foo data</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">setFooCache</span><span class="p">(</span><span class="nx">\TYPO3\Flow\Cache\Frontend\StringFrontend</span> <span class="nv">$cache</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fooCache</span> <span class="o">=</span> <span class="nv">$cache</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>To make it even simpler you could omit the setter method and annotate the member with the
<tt class="docutils literal"><span class="pre">Inject</span></tt> annotations. The injected cache is fully initialized, all available frontend
operations like <tt class="docutils literal"><span class="pre">get()</span></tt>, <tt class="docutils literal"><span class="pre">set()</span></tt> and <tt class="docutils literal"><span class="pre">flushByTag()</span></tt> can be executed on <tt class="docutils literal"><span class="pre">$this-&gt;fooCache</span></tt>.</p>
</div>
<div class="section" id="using-the-cachefactory">
<h4>Using the CacheFactory</h4>
<p>Of course you can also manually ask the CacheManager (have it injected for your
convenience) for a cache:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fooCache</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cacheManager</span><span class="o">-&gt;</span><span class="na">getCache</span><span class="p">(</span><span class="s1">&#39;MyPackage_FooCache&#39;</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="f357568b-a710-46f8-d081-b983b1db6413" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="b00d94ef-469c-c429-0348-4eb4bb20b17e" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="sessionhandling" locale="">
       <properties>
        <title>Session Handling</title>
       </properties>
       <node identifier="2e3adb56-d88e-d902-f4cd-ff85d975bd15" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="359e6d23-0cde-a1dc-46a3-677ed67c2ce2" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="session-handling">
<h1>Session Handling</h1>
<p>TYPO3 Flow has excellent support for working with sessions.</p>
<p>This chapter will explain:</p>
<ul class="simple">
<li>... how to store specific data in a session</li>
<li>... how to store objects in the session</li>
</ul>
<div class="section" id="scope-session">
<h2>Scope Session</h2>
<p>TYPO3 Flow does not only support the <tt class="docutils literal"><span class="pre">prototype</span></tt> and <tt class="docutils literal"><span class="pre">singleton</span></tt> object scopes, but also the
object scope <tt class="docutils literal"><span class="pre">session</span></tt>. Objects marked like this basically behave like <tt class="docutils literal"><span class="pre">singleton</span></tt> objects
which are automatically serialized into the user&#8217;s session.</p>
<p>As an example, when building a shopping basket, the class could look as follows:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\Scope(&quot;session&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">ShoppingBasket</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var array</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$items</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>

        <span class="sd">/**</span>
<span class="sd">         * @param string $item</span>
<span class="sd">         * @return void</span>
<span class="sd">         * @Flow\Session(autoStart = TRUE)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">addItem</span><span class="p">(</span><span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">items</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$item</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * @return array</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">getItems</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">items</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In the above example</p>
<ul class="simple">
<li>the object scope is set to <tt class="docutils literal"><span class="pre">session</span></tt>, so it behaves like a <em>user-bound cross-request
singleton</em>. This <tt class="docutils literal"><span class="pre">ShoppingBasket</span></tt> can now be injected where it is needed using <em>Dependency
Injection</em>.</li>
<li>We only want to start a session when the first element is added to the shopping basket.
For this the addItem() method needs to be annotated with <tt class="docutils literal"><span class="pre">&#64;Flow\Session(autoStart</span> <span class="pre">=</span> <span class="pre">TRUE)</span></tt>.</li>
</ul>
<p>When a user browses the website, the following then happens:</p>
<ul class="simple">
<li>First, the user&#8217;s shopping basket is empty, and getItems() returns an empty array.
No session exists yet. For each page being requested, the <tt class="docutils literal"><span class="pre">ShoppingBasket</span></tt> is
newly initialized.</li>
<li>As soon as the user adds something to the shopping basket, <tt class="docutils literal"><span class="pre">addItem()</span></tt> is called.
Because this is annotated with <tt class="docutils literal"><span class="pre">&#64;Flow\Session(autoStart</span> <span class="pre">=</span> <span class="pre">TRUE)</span></tt>, a new PHP session
is started, and the ShoppingBasket is placed into the session.</li>
<li>As the user continues to browse the website, the <tt class="docutils literal"><span class="pre">ShoppingBasket</span></tt> is being fetched
from the user&#8217;s session (which exists now). Thus, <tt class="docutils literal"><span class="pre">getItems()</span></tt> returns the items
from the session.</li>
</ul>
<div class="admonition-why-is-flow-session-autostart-true-necessary admonition">
<p class="first admonition-title">Why is <tt class="docutils literal"><span class="pre">&#64;Flow\Session(autoStart</span> <span class="pre">=</span> <span class="pre">TRUE)</span></tt> necessary?</p>
<p>If TYPO3 Flow did not have this annotation, there would be no way for it to determine
when a session must be started. Thus, every user browsing the website would
always need a session as soon as an object of scope <tt class="docutils literal"><span class="pre">session</span></tt> is accessed.
This would happens if the <tt class="docutils literal"><span class="pre">session</span></tt>-scoped object is still in its initial state.</p>
<p class="last">To be able to use proxies such as Varnish, TYPO3 Flow defers the creation of a
session to a point in time when it is really needed &#8211; and the developer needs
to tell the framework when that point is reached using the above annotation.</p>
</div>
<p>The Flow session scope handles persistent objects and dependency injection correctly:</p>
<ul class="simple">
<li>Objects which are injected via Dependency Injection are removed before serialization
and re-injected on deserialization.</li>
<li>Persistent objects which are unchanged are just stored as a reference and fetched
from persistence again on deserialization.</li>
<li>Persistent objects which are modified are fully stored in the session.</li>
</ul>
</div>
<div class="section" id="low-level-session-handling">
<h2>Low-level session handling</h2>
<p>It is possible to inject the <tt class="docutils literal"><span class="pre">TYPO3\Flow\Session\SessionInterface</span></tt> and interact
with the session on a low level, by using <tt class="docutils literal"><span class="pre">start()</span></tt>, <tt class="docutils literal"><span class="pre">getData()</span></tt> and <tt class="docutils literal"><span class="pre">putData()</span></tt>.</p>
<p>That should rarely be needed, though. Instead of manually serializing objects object into
the session, the session scope should be used whenever possible.</p>
</div>
<div class="section" id="session-backends">
<h2>Session Backends</h2>
<p>The session implementation of TYPO3 Flow is written in pure PHP and uses the caching
framework as its storage. This allows for storing session data in a variety of
backends, including PDO databases, APC, Memcache and Redis.</p>
<p>The preferred storage backend for the built-in session is defined through a custom
Caches.yaml file, placed in a package or the global configuration directory:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Flow_Session_Storage</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">backend</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3\Flow\Cache\Backend\ApcBackend</span>
</pre></div>
</div>
<p>The built-in session implementation provides a few more configuration options, related to
the session cookie and the automatic garbage collection. Please refer to the
Settings.yaml file of the TYPO3 Flow package for a list of all possible options and
their respective documentation.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="aa0c2868-6e56-67d0-8d56-013e10860574" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="1f144df6-d055-eac8-a562-ee56a3b2fa78" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="commandline" locale="">
       <properties>
        <title>Command Line</title>
       </properties>
       <node identifier="bda78556-0304-f1b0-33a2-c5beb87edb75" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="3af350ab-f5fa-5295-70b8-bda73928e5dd" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="command-line">
<h1>Command Line</h1>
<p>TYPO3 Flow features a clean and powerful interface for the command line which allows
for automated and manual execution of low-level or application-specific tasks.
The command line support is available on all platforms generally supported by
TYPO3 Flow.</p>
<p>This chapter describes how to use the help system, how to run existing
commands and how to implement your own custom commands.</p>
<div class="section" id="wrapper-script">
<h2>Wrapper Script</h2>
<p>TYPO3 Flow uses two platform specific wrapper scripts for running the actual
commands:</p>
<ul class="simple">
<li>flow.bat is used on Windows machines</li>
<li>flow is used on all other platforms</li>
</ul>
<p>Both files are located and must be run from the main directory of the TYPO3 Flow
installation. The command and further options are passed as arguments to the
respective wrapper script.</p>
<p>In the following examples we refer to these wrapper scripts just as &#8220;the flow
script&#8221;.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If you are a Windows user and use a shell like <a class="reference external" href="http://msysgit.github.io">msysGit</a>, you can mostly
follow the Unix style examples and use the flow script instead of
flow.bat.</p>
</div>
</div>
<div class="section" id="help-system">
<h2>Help System</h2>
<p>Without specifying a command, the flow script responds by displaying
the current version number and the current context:</p>
<div class="highlight-none"><div class="highlight"><pre>$ ./flow
TYPO3 Flow 1.x.x (&quot;Development&quot; context)
usage: ./flow &lt;command identifier&gt;

See &quot;./flow help&quot; for a list of all available commands.
</pre></div>
</div>
<p>In addition to the packages delivered with the TYPO3 Flow core, third-party packages
may provide any number of custom commands. A list of all currently available
commands can be obtained with the help command:</p>
<div class="highlight-none"><div class="highlight"><pre>$ ./flow help
TYPO3 Flow 1.x.x (&quot;Development&quot; context)
usage: ./flow &lt;command identifier&gt;

The following commands are currently available:

PACKAGE &quot;TYPO3.Flow&quot;:
----------------------------------------------------------------------------
* flow:cache:flush                         Flush all caches
  cache:warmup                             Warm up caches

  configuration:show                       Show the active configuration
                                           settings
  configuration:validate                   Validate the given configuration
  configuration:generateschema             Generate a schema for the given
                                           configuration or YAML file.
...
</pre></div>
</div>
<p>A list of all commands in a specific package can be obtained by giving the
package key part of the command to the help command:</p>
<div class="highlight-none"><div class="highlight"><pre>$ ./flow help kickstart
5 commands match the command identifier &quot;typo3.kickstart&quot;:

PACKAGE &quot;TYPO3.KICKSTART&quot;:
-------------------------------------------------------------------------------
kickstart:package                        Kickstart a new package
kickstart:actioncontroller               Kickstart a new action controller
kickstart:commandcontroller              Kickstart a new command controller
kickstart:model                          Kickstart a new domain model
kickstart:repository                     Kickstart a new domain repository
</pre></div>
</div>
<p>Further details about specific commands are available by specifying the
respective command identifier:</p>
<div class="highlight-none"><div class="highlight"><pre>$ ./flow help configuration:show


Show the active configuration settings

COMMAND:
  typo3.flow:configuration:show

USAGE:
  ./flow configuration:show [&lt;options&gt;]

OPTIONS:
  --type               Configuration type to show
  --path               path to subconfiguration separated by &quot;.&quot; like
                       &quot;TYPO3.Flow

DESCRIPTION:
  The command shows the configuration of the current context as it is used by TYPO3 Flow itself.
  You can specify the configuration type and path if you want to show parts of the configuration.

  ./flow configuration:show --type Settings --path TYPO3.Flow.persistence
</pre></div>
</div>
</div>
<div class="section" id="running-a-command">
<h2>Running a Command</h2>
<p>Commands are uniquely identified by their command identifier. These come in
two variants: a long and a short version.</p>
<div class="section" id="fully-qualified-command-identifier">
<h3>Fully Qualified Command Identifier</h3>
<p>A fully qualified command identifier is the combination of the package key, the
command controller name and the actual command name, separated by colons:</p>
<p>The command &#8220;warmup&#8221; implemented by the &#8220;CacheCommandController&#8221; contained
in the package &#8220;TYPO3.Flow&#8221; is referred to by the command identifier
typo3.flow:cache:warmup.</p>
</div>
<div class="section" id="short-command-identifier">
<h3>Short Command Identifier</h3>
<p>In order to save some typing, most commands can be referred to by a shortened
command identifier. The help command lists all commands by the shortest
possible identifier which is still unique across all available commands.</p>
<p>For example, the command &#8220;warmup&#8221; implemented by the &#8220;CacheCommandController&#8221;
contained in the package &#8220;TYPO3.Flow&#8221; can also be referred to by the command
identifier cache:warmup as long as no other package provides a command
with the same name.</p>
<p>Some special commands can only by referred to by their fully qualified
identifier because they are invoked at a very early stage when the command
resolution mechanism is not yet available. These Compile Time Commands are
marked by an asterisk in the list of available commands (see
<a class="reference internal" href="#runtime-and-compile-time">Runtime and Compile Time</a> for some background information).</p>
</div>
</div>
<div class="section" id="passing-arguments">
<h2>Passing Arguments</h2>
<p>Arguments and options can be specified for a command in the same manner they
are passed to typical Unix-like commands. A list of required arguments and
further options can be retrieved through the help command.</p>
<div class="section" id="options">
<h3>Options</h3>
<p>Options listed for a command are optional and only have to be specified if
needed. Options must always be passed before any arguments by using their
respective name:</p>
<div class="highlight-bash"><div class="highlight"><pre>./flow foo:bar --some-option BAZ --some-argument QUUX
</pre></div>
</div>
<p>If an option expects a boolean type (that is, yes/no, true/false, on/off
would be typical states), just specifying the option name is sufficient
to set the option to true:</p>
<div class="highlight-bash"><div class="highlight"><pre>./flow foo:bar --force
</pre></div>
</div>
<p>Alternatively the boolean value can be specified explicitly:</p>
<div class="highlight-bash"><div class="highlight"><pre>./flow foo:bar --force TRUE
./flow foo:bar --force FALSE
</pre></div>
</div>
<p>Possible values equivalent to TRUE are: on, 1, y, yes, true.
Possible values equivalent to FALSE are: off, 0, n, no, false.</p>
</div>
<div class="section" id="arguments">
<h3>Arguments</h3>
<p>The arguments listed for a command are mandatory. They can either be specified
by their name or without an argument name. If the argument name is omitted, the
argument values must be provided in the same order like in the help screen of
the respective command. The following two command lines are synonymic:</p>
<div class="highlight-bash"><div class="highlight"><pre>./flow kickstart:actioncontroller --force --package-key Foo.Bar --controller-name Baz
./flow kickstart:actioncontroller --force Foo.Bar Baz
</pre></div>
</div>
</div>
</div>
<div class="section" id="contexts">
<h2>Contexts</h2>
<p>If not configured differently by the server environment, the flow script is
run in the Development context by default. It is recommended to set the
FLOW_CONTEXT environment variable to Production on a production server –
that way you don&#8217;t execute commands in an unintended context accidentally.</p>
<p>If you usually run the flow script in one context but need to call it in
another context occasionally, you can do so by temporarily setting the
respective environment variable for the single command run:</p>
<div class="highlight-bash"><div class="highlight"><pre><span class="nv">FLOW_CONTEXT</span><span class="o">=</span>Production ./flow flow:cache:flush
</pre></div>
</div>
<p>In a Windows shell, you need to use the SET command:</p>
<div class="highlight-bash"><div class="highlight"><pre>SET <span class="nv">FLOW_CONTEXT</span><span class="o">=</span>Production
flow.bat flow:cache:flush
</pre></div>
</div>
</div>
<div class="section" id="implementing-custom-commands">
<h2>Implementing Custom Commands</h2>
<p>A lot of effort has been made to make the implementation of custom commands a
breeze. Instead of writing configuration which registers commands or coming up
with files which provide the help screens, creating a new command is only a
matter of writing a simple PHP method.</p>
<p>A set of commands is bundled in a Command Controller. The individual commands
are plain PHP methods with a name that ends with the word &#8220;Command&#8221;. The concrete
command controller must be located in a &#8220;Command&#8221; namespace right below the
package&#8217;s namespace.</p>
<p>The following example illustrates all the code necessary to introduce a new
command:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Acme\Demo\Command</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">TYPO3\Flow\Annotations</span> <span class="k">as</span> <span class="nx">Flow</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @Flow\Scope(&quot;singleton&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">CoffeeCommandController</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Cli\CommandController</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * Brew some coffee</span>
<span class="sd">         *</span>
<span class="sd">         * This command brews the specified type and amount of coffee.</span>
<span class="sd">         *</span>
<span class="sd">         * Make sure to specify a type which best suits the kind of drink</span>
<span class="sd">         * you&#39;re aiming for. Some types are better suited for a Latte, while</span>
<span class="sd">         * others make a perfect Espresso.</span>
<span class="sd">         *</span>
<span class="sd">         * @param string $type The type of coffee</span>
<span class="sd">         * @param integer $shots The number of shots</span>
<span class="sd">         * @param boolean $ristretto Make this coffee a ristretto</span>
<span class="sd">         * @return string</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">brewCommand</span><span class="p">(</span><span class="nv">$type</span><span class="p">,</span> <span class="nv">$shots</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$ristretto</span><span class="o">=</span><span class="k">FALSE</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1"># implementation</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The new controller and its command is detected automatically and the help screen
is rendered by using the information provided by the method code and DocComment:</p>
<ul class="simple">
<li>the first line of the DocComment contains the short description of the command</li>
<li>the second line must be empty</li>
<li>the the following lines contain the long description</li>
<li>the descriptions of the &#64;param annotations are used for the argument
descriptions</li>
<li>the type specified in the &#64;param annotations is used for validation and to
determine if the argument is a flag (boolean) or not</li>
<li>the parameters declared in the method set the parameter names and tell if they
are arguments (mandatory) or options (optional)</li>
</ul>
<p>The above example will result in a help screen similar to this:</p>
<div class="highlight-none"><div class="highlight"><pre>$ ./flow help coffee:brew

Brew some coffee

COMMAND:
  acme.demo:coffee:brew

USAGE:
  ./flow coffee:brew

DESCRIPTION:
  This command brews the specified type and amount of coffee.

  Make sure to specify a type which best suits the kind of drink
  you&#39;re aiming for. Some types are better suited for a Latte, while
  others make a perfect Espresso.
</pre></div>
</div>
</div>
<div class="section" id="handling-exceeding-arguments">
<h2>Handling Exceeding Arguments</h2>
<p>Any arguments which are passed additionally to the mandatory arguments
are considered to be exceeding arguments. These arguments are not
parsed nor validated by TYPO3 Flow.</p>
<p>A command may use exceeding arguments in order to process an
variable amount of parameters. The exceeding arguments can be retrieved
through the Request object as in the following example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Process words</span>
<span class="sd"> *</span>
<span class="sd"> * This command processes the given words.</span>
<span class="sd"> *</span>
<span class="sd"> * @param string $operation The operation to execute</span>
<span class="sd"> * @return string</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">processWordCommand</span><span class="p">(</span><span class="nv">$operation</span> <span class="o">=</span> <span class="s1">&#39;uppercase&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$words</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">getExceedingArguments</span><span class="p">();</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$words</span> <span class="k">as</span> <span class="nv">$word</span><span class="p">)</span> <span class="p">{</span>
                <span class="o">...</span>
        <span class="p">}</span>
        <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>A typical usage of the command above may look like this:</p>
<div class="highlight-none"><div class="highlight"><pre>$ ./flow foo:processword --operation lowercase These Are The Words

these are the words
</pre></div>
</div>
</div>
<div class="section" id="generating-styled-output">
<h2>Generating Styled Output</h2>
<p>The output sent to the user can be processed in three different ways,
each denoted by a PHP constant:</p>
<ul class="simple">
<li>OUTPUTFORMAT_RAW sends the output as is</li>
<li>OUTPUTFORMAT_PLAIN tries to convert the output into plain text by
stripping possible tags</li>
<li>OUTPUTFORMAT_STYLED sends the output as is but converts certain tags
into ANSI codes</li>
</ul>
<p>The output format can be set by calling the setOutputFormat() method
on the command controller&#8217;s Response object:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Example Command</span>
<span class="sd"> *</span>
<span class="sd"> * @return string</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">exampleCommand</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">response</span><span class="o">-&gt;</span><span class="na">setOutputFormat</span><span class="p">(</span><span class="nx">Response</span><span class="o">::</span><span class="na">OUTPUTFORMAT_RAW</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">response</span><span class="o">-&gt;</span><span class="na">appendContent</span><span class="p">(</span><span class="o">...</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>A limited number of tags are supported for brushing up the output in
OUTPUTFORMAT_STYLED mode. They have the following meaning:</p>
<table border="1" class="docutils">
<colgroup>
<col width="24%" />
<col width="76%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Tag</th>
<th class="head">Meaning</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">&lt;b&gt;…&lt;/b&gt;</span></tt></td>
<td>Render the text in a bold / bright style</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">&lt;i&gt;…&lt;/i&gt;</span></tt></td>
<td>Render the text in a italics</td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">&lt;u&gt;…&lt;/u&gt;</span></tt></td>
<td>Underline the given text</td>
</tr>
<tr class="row-odd"><td><tt class="docutils literal"><span class="pre">&lt;em&gt;…&lt;/em&gt;</span></tt></td>
<td>Emphasize the text, usually by inverting foreground and background colors</td>
</tr>
<tr class="row-even"><td><tt class="docutils literal"><span class="pre">&lt;strike&gt;…&lt;/strike&gt;</span></tt></td>
<td>Display the text struck through</td>
</tr>
</tbody>
</table>
<p>The respective styles are only rendered correctly if the console
supports ANSI styles. You can check ANSI support by calling the
response&#8217;s hasColorSupport() method. Contrary to what that method
name suggests, at the time of this writing colored output is not
directly supported by TYPO3 Flow. However, such a feature is planned
for the future.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">The tags supported by TYPO3 Flow can also be used to style the
description of a command in its DocComment.</p>
</div>
</div>
<div class="section" id="runtime-and-compile-time">
<span id="id1"></span><h2>Runtime and Compile Time</h2>
<p>The majority of the commands are run at point when TYPO3 Flow is fully
initialized and all of the framework features are available. However,
for certain low-level operations it is desirable to execute code
much earlier in the boot process – during compile time. Commands
like typo3.flow:cache:flush or the internal compilation commands
which render the PHP proxy classes cannot rely on a fully initialized
system.</p>
<p>It is possible – also for custom commands – to run commands run during
compile time. The developer implementing such a command must have a
good understanding of the inner workings of the bootstrap and parts
of the proxy building, because compile time has several limitations,
including but not limited to the following:</p>
<ul class="simple">
<li>dependency injection does not support property injection</li>
<li>aspects are not yet active</li>
<li>persistence is not yet enabled</li>
<li>certain caches have not been built yet</li>
</ul>
<p>In general, all functionality which relies on proxy classes will not
be available during compile time.</p>
<p>If you are sure that compile time is the right choice for your command,
you can register it as a compile time command by running an API method
in the boot() method of your package&#8217;s Package class:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Acme\Foo</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">TYPO3\Flow\Package\Package</span> <span class="k">as</span> <span class="nx">BasePackage</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * Acme.Foo Package</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Package</span> <span class="k">extends</span> <span class="nx">BasePackage</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * Invokes custom PHP code directly after the package manager has been initialized.</span>
<span class="sd">         *</span>
<span class="sd">         * @param \TYPO3\Flow\Core\Bootstrap $bootstrap The current bootstrap</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">boot</span><span class="p">(</span><span class="nx">\TYPO3\Flow\Core\Bootstrap</span> <span class="nv">$bootstrap</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$bootstrap</span><span class="o">-&gt;</span><span class="na">registerRequestHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">\Acme\Foo\Command\MyCommandController</span><span class="p">(</span><span class="nv">$bootstrap</span><span class="p">));</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>For more details you are encouraged to study the implementation of
TYPO3 Flow&#8217;s own compile time commands.</p>
</div>
<div class="section" id="executing-sub-commands">
<h2>Executing Sub Commands</h2>
<p>Most command methods are designed to be called exclusively through the
command line and should not be invoked internally through a PHP method
call. They may rely on a certain application state, some exceeding
arguments provided through the Request object or simply are compile
time commands which must not be run from runtime commands.
Therefore, the safest way to let a command execute a second command
is through a PHP sub process.</p>
<p>The PHP bootstrap mechanism provides a method for executing arbitrary
commands through a sub process. This method is located in the Scripts
class and can be used as follows:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Some command</span>
<span class="sd"> *</span>
<span class="sd"> * This example command runs another command</span>
<span class="sd"> *</span>
<span class="sd"> * @return string</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">runCommand</span><span class="p">(</span><span class="nv">$packageKey</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">\TYPO3\Flow\Core\Booting\Scripts</span><span class="o">::</span><span class="na">executeCommand</span><span class="p">(</span><span class="s1">&#39;acme.foo:bar:baz&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="quitting-and-exit-code">
<h2>Quitting and Exit Code</h2>
<p>Commands should not use PHP&#8217;s exit() or die() method but rather let
TYPO3 Flow&#8217;s bootstrap perform a clean shutdown of the framework. The base
CommandController provides two API methods for initiating a shutdown
and optionally passing an exit code to the console:</p>
<ul class="simple">
<li>quit($exitCode) stops execution right after this command, performs a clean shutdown of TYPO3 Flow.</li>
<li>sendAndExit($exitCode) sends any output buffered in the Response object and exits immediately, without shutting down TYPO3 Flow.</li>
</ul>
<p>The quit() method is the recommended way to exit TYPO3 Flow. The other
command, sendAndExit(), is reserved for special cases where TYPO3 Flow
is not stable enough to continue even with the shutdown procedure. An
example for such a case is the typo3.flow:cache:flush command which
removes all cache entries which requires an immediate exit because
TYPO3 Flow relies on caches being intact.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="4f122759-5bbe-1ab7-3beb-aa695baa0edd" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="d2639d60-7a1a-762a-5782-ea78cbc044f6" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="aspectorientedprogramming" locale="">
       <properties>
        <title>Aspect-Oriented Programming</title>
       </properties>
       <node identifier="3a5fb631-523f-12df-a9bc-b676b5ff12d3" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="166c2dec-64e3-4e41-42b9-284a2f1176b4" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="aspect-oriented-programming">
<h1>Aspect-Oriented Programming</h1>
<p>Aspect-Oriented Programming (AOP) is a programming paradigm which complements
Object-Oriented Programming (OOP) by separating concerns of a software
application to improve modularization. The separation of concerns (SoC) aims for
making a software easier to maintain by grouping features and behavior into
manageable parts which all have a specific purpose and business to take care of.</p>
<p>OOP already allows for modularizing concerns into distinct methods, classes and
packages. However, some concerns are difficult to place as they cross the
boundaries of classes and even packages. One example for such a <em>cross-cutting
concern</em> is security: Although the main purpose of a Forum package is to display
and manage posts of a forum, it has to implement some kind of security to assert
that only moderators can approve or delete posts. And many more packages need a
similar functionality for protect the creation, deletion and update of records.
AOP enables you to move the security (or any other) aspect into its own package
and leave the other objects with clear responsibilities, probably not
implementing any security themselves.</p>
<p>Aspect-Oriented Programming has been around in other programming languages for
quite some time now and sophisticated solutions taking advantage of AOP exist.
TYPO3 Flow&#8217;s AOP framework allows you to use of the most popular AOP techniques in
your own PHP application. In contrast to other approaches it doesn&#8217;t require any
special PHP extensions or manual compile steps – and it&#8217;s a breeze to configure.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">In case you are unsure about some terms used in this introduction or later
in this chapter, it&#8217;s a good idea looking them up (for example at
<a class="reference external" href="http://en.wikipedia.org/">Wikipedia</a>). Don&#8217;t think that you&#8217;re the only one who has never heard of a
Pointcut or SoC <a class="footnote-reference" href="#id6" id="id1">[1]</a> – we had a hard time learning these too. However,
it&#8217;s worth the hassle, as a common vocabulary improves the communication
between developers a lot.</p>
</div>
<div class="section" id="how-aop-can-help-you">
<h2>How AOP can help you</h2>
<p>Let&#8217;s imagine you want to log a message inside methods of your domain model:</p>
<p>Example: Logging without AOP:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Examples\Forum\Domain\Model</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Forum</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         * @var \Examples\Forum\Logger\ApplicationLoggerInterface</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$applicationLogger</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Delete a forum post and log operation</span>
<span class="sd">         *</span>
<span class="sd">         * @param \Examples\Forum\Domain\Model\Post $post</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">deletePost</span><span class="p">(</span><span class="nx">Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">applicationLogger</span><span class="o">-&gt;</span><span class="na">log</span><span class="p">(</span><span class="s1">&#39;Removing post &#39;</span> <span class="o">.</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">getTitle</span><span class="p">(),</span> <span class="nx">LOG_INFO</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">posts</span><span class="o">-&gt;</span><span class="na">remove</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>If you have to do this in a lot of places, the logging would become a part of you
domain model logic. You would have to inject all the logging dependencies in your
models. Since logging is nothing that a domain model should care about, this is
an example of a non-functional requirement and a so-called cross-cutting concern.</p>
<p>With AOP, the code inside your model would know nothing about logging. It will
just concentrate on the business logic.</p>
<p>Example: Logging with AOP (your class):</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Examples\Forum\Domain\Model</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Forum</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * Delete a forum post</span>
<span class="sd">         *</span>
<span class="sd">         * @param \Examples\Forum\Domain\Model\Post $post</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">deletePost</span><span class="p">(</span><span class="nx">Post</span> <span class="nv">$post</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">posts</span><span class="o">-&gt;</span><span class="na">remove</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>The     logging is now done from an AOP aspect. It&#8217;s just a class tagged with
<tt class="docutils literal"><span class="pre">&#64;aspect</span></tt> and a method that implements the specific action, an
before advice. The expression after the <tt class="docutils literal"><span class="pre">&#64;before</span></tt> tag tells the AOP framework
to which method calls this action should be applied. It&#8217;s called pointcut expression
and has many possibilities, even for complex scenarios.</p>
<p>Example: Logging with AOP (aspect):</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Examples\Forum\Logging</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @Flow\Aspect</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">LoggingAspect</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @Flow\Inject</span>
<span class="sd">         * @var \Examples\Forum\Logger\ApplicationLoggerInterface</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$applicationLogger</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * Log a message if a post is deleted</span>
<span class="sd">         *</span>
<span class="sd">         * @param \TYPO3\Flow\AOP\JoinPointInterface $joinPoint</span>
<span class="sd">         * @Flow\Before(&quot;method(Examples\Forum\Domain\Model\Forum-&gt;deletePost())&quot;)</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">logDeletePost</span><span class="p">(</span><span class="nx">\TYPO3\Flow\AOP\JoinPointInterface</span> <span class="nv">$joinPoint</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$post</span> <span class="o">=</span> <span class="nv">$joinPoint</span><span class="o">-&gt;</span><span class="na">getMethodArgument</span><span class="p">(</span><span class="s1">&#39;post&#39;</span><span class="p">);</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">applicationLogger</span><span class="o">-&gt;</span><span class="na">log</span><span class="p">(</span><span class="s1">&#39;Removing post &#39;</span> <span class="o">.</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">getTitle</span><span class="p">(),</span> <span class="nx">LOG_INFO</span><span class="p">);</span>
        <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</div>
<p>As you can see the advice has full access to the actual method call, the join point,
with information about the class, the method and method arguments.</p>
</div>
<div class="section" id="aop-concepts-and-terminology">
<h2>AOP concepts and terminology</h2>
<p>At the first (and the second, third, ...) glance, the terms used in the AOP
context are not really intuitive. But, similar to most of the other AOP
frameworks, we better stick to them, to keep a common language between
developers. Here they are:</p>
<dl class="docutils">
<dt>Aspect</dt>
<dd>An aspect is the part of the application which cross-cuts the core concerns
of multiple objects. In TYPO3 Flow, aspects are implemented as regular classes
which are tagged by the <tt class="docutils literal"><span class="pre">&#64;aspect</span></tt> annotation. The methods of an aspect class
represent advices, the properties may be used for introductions.</dd>
<dt>Join point</dt>
<dd>A join point is a point in the flow of a program. Examples are the execution
of a method or the throw of an exception. In TYPO3 Flow, join points are
represented by the <tt class="docutils literal"><span class="pre">TYPO3\Flow\AOP\JoinPoint</span></tt> object which contains more
information about the circumstances like name of the called method, the
passed arguments or type of the exception thrown. A join point is an event
which occurs during the program flow, not a definition which defines that
point.</dd>
<dt>Advice</dt>
<dd>An advice is the action taken by an aspect at a particular join point.
Advices are implemented as methods of the aspect class. These methods are
executed before and / or after the join point is reached.</dd>
<dt>Pointcut</dt>
<dd>The pointcut defines a set of join points which need to be matched before
running an advice. The pointcut is configured by a pointcut expression
which defines when and where an advice should be executed. TYPO3 Flow uses
methods in an aspect class as anchors for pointcut declarations.</dd>
<dt>Pointcut expression</dt>
<dd>A pointcut expression is the condition under which a join point should match.
It may, for example, define that join points only match on the execution of a
(target-) method with a certain name. Pointcut expressions are used in
pointcut- and advice declarations.</dd>
<dt>Target</dt>
<dd>A class or method being adviced by one or more aspects is referred to as a
target class /-method.</dd>
<dt>Introduction</dt>
<dd>An introduction redeclares the target class to implement an additional
interface. By declaring an introduction it is possible to introduce new
interfaces and an implementation of the required methods without touching
the code of the original class. Additionally introductions can be used to
add new properties to a target class.</dd>
</dl>
<p>The following terms are related to advices:</p>
<dl class="docutils">
<dt>Before advice</dt>
<dd>A before advice is executed before the target method is being called, but
cannot prevent the target method from being executed.</dd>
<dt>After returning advice</dt>
<dd>An after returning advice is executed after returning from the target
method. The result of the target method invocation is available to the after
returning advice, but it can&#8217;t change it. If the target method throws an
exception, the after returning advice is not executed.</dd>
<dt>After throwing advice</dt>
<dd>An after throwing advice is only executed if the target method throwed an
exception. The after throwing advice may fetch the exception type from the
join point object.</dd>
<dt>After advice</dt>
<dd>An after advice is executed after the target method has been called, no
matter if an exception was thrown or not.</dd>
<dt>Around advice</dt>
<dd>An around advice is wrapped around the execution of the target method. It
may execute code before and after the invocation of the target method and
may ultimately prevent the original method from being executed at all. An
around advice is also responsible for calling other around advices at the
same join point and returning either the original or a modified result for
the target method.</dd>
<dt>Advice chain</dt>
<dd>If more than one around advice exists for a join point, they are called in
an onion-like advice chain: The first around advice probably executes some
before-code, then calls the second around advice which calls the target
method. The target method returns a result which can be modified by the
second around advice, is returned to the first around advice which finally
returns the result to the initiator of the method call. Any around advice
may decide to proceed or break the chain and modify results if necessary.</dd>
</dl>
<div class="section" id="typo3-flow-aop-concepts">
<h3>TYPO3 Flow AOP concepts</h3>
<p>Aspect-Oriented Programming was, of course, not invented by us <a class="footnote-reference" href="#id7" id="id2">[2]</a>. Since the
initial release of the concept, dozens of implementations for various
programming languages evolved. Although a few PHP-based AOP frameworks do exist,
they followed concepts which did not match the goals of TYPO3 Flow (to provide a
powerful, yet developer-friendly solution) when the development of TYPO3 5.0
began. We therefore decided to create a sophisticated but pragmatic
implementation which adopts the concepts of AOP but takes PHP&#8217;s specialties and
the requirements of typical TYPO3 Flow applications into account. In a few cases this
even lead to new features or simplifications because they were easier to
implement in PHP compared to Java.</p>
<p>TYPO3 Flow pragmatically implements a reduced subset of AOP, which satisfies most
needs of web applications. The join point model allows for intercepting method
executions but provides no special support for advising field access <a class="footnote-reference" href="#id8" id="id3">[3]</a>.
Pointcut expressions are based on well-known regular expressions instead of
requiring the knowledge of a dedicated expression language. Pointcut filters and
join point types are modularized and can be extended if more advanced
requirements should arise in the future.</p>
</div>
</div>
<div class="section" id="implementation-overview">
<h2>Implementation overview</h2>
<p>TYPO3 Flow&#8217;s AOP framework does not require a pre-processor or an aspect-aware PHP
interpreter to weave in advices. It is implemented and based on pure PHP and
doesn&#8217;t need any specific PHP extension. However, it does require the Object
Manager to fulfill its task.</p>
<p>TYPO3 Flow uses PHP&#8217;s reflection capabilities to analyze declarations of aspects,
pointcuts and advices and implements method interceptors as a dynamic proxy. In
accordance to the GoF patterns <a class="footnote-reference" href="#id9" id="id4">[4]</a>, the proxy classes act as a placeholders for
the target object. They are true subclasses of the original and override adviced
methods by implementing an interceptor method. The proxy classes are generated
automatically by the AOP framework and cached for further use. If a class has
been adviced by some aspect, the Object Manager will only deliver instances of
the proxy class instead of the original.</p>
<p>The approach of storing generated proxy classes in files provides the whole
advantage of dynamic weaving with a minimum performance hit. Debugging of
proxied classes is still easy as they truly exist in real files.</p>
</div>
<div class="section" id="aspects">
<h2>Aspects</h2>
<p>Aspects are abstract containers which accommodate pointcut-, introduction- and
advice declarations. In most frameworks, including TYPO3 Flow, aspects are defined as
plain classes which are tagged (annotated) as an aspect. The following example
shows the definition of a hypothetical <tt class="docutils literal"><span class="pre">FooSecurity</span></tt> aspect:</p>
<p>Example: Declaration of an aspect:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Example\MySecurityPackage</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * An aspect implementing security for Foo</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Aspect</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">FooSecurityAspect</span> <span class="p">{</span>

<span class="p">}</span>
</pre></div>
</div>
<p>As you can see, <tt class="docutils literal"><span class="pre">\Example\MySecurityPackage\FooSecurityAspect</span></tt> is just a regular
PHP class which may (actually must) contain methods and properties. What
makes it an aspect is solely the <tt class="docutils literal"><span class="pre">Aspect</span></tt> annotation mentioned in the class
comment. The AOP framework recognizes this tag and registers the class as an
aspect.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A void aspect class doesn&#8217;t make any sense and if you try to run the above
example, the AOP framework will throw an exception complaining that no
advice, introduction or pointcut has been defined.</p>
</div>
</div>
<div class="section" id="pointcuts">
<h2>Pointcuts</h2>
<p>If we want to add security to foo, we need a method which carries out the
security checks and a definition where and when this method should be executed.
The method is an advice which we&#8217;re going to declare in a later section, the
“where and when” is defined by a pointcut expression in a pointcut declaration.</p>
<p>You can either define the pointcut in the advice declaration or set up named
pointcuts to help clarify their use.</p>
<p>A named pointcut is represented by a method of an aspect class. It contains
two pieces of information: The pointcut name, defined by the method name,
and the pointcut expression, declared by an annotation. The following pointcut
will match the execution of methods whose name starts with “delete”, no matter
in which class they are defined:</p>
<p>Example: Declaration of a named pointcut:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A pointcut which matches all methods whose name starts with &quot;delete&quot;.</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Pointcut(&quot;method(.*-&gt;delete.*())&quot;)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">deleteMethods</span><span class="p">()</span> <span class="p">{}</span>
</pre></div>
</div>
<div class="section" id="pointcut-expressions">
<h3>Pointcut expressions</h3>
<p>As already mentioned, the pointcut expression configures the filters which are
used to match against join points. It is comparable to an if condition in PHP:
Only if the whole condition evaluates to TRUE, the statement is executed -
otherwise it will be just ignored. If a pointcut expression evaluates to TRUE,
the pointcut matches and advices which refer to this pointcut become active.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The AOP framework AspectJ provides a complete pointcut language with dozens
of pointcut types and expression constructs. TYPO3 Flow makes do with only a
small subset of that language, which we think already suffice for even
complex enterprise applications. If you&#8217;re interested in the original
feature set, it doesn&#8217;t hurt throwing a glance at the AspectJ Programming
Guide.</p>
</div>
</div>
<div class="section" id="pointcut-designators">
<h3>Pointcut designators</h3>
<p>A pointcut expression always consists of two parts: The poincut designator and
its parameter(s). The following designators are supported by TYPO3 Flow:</p>
<div class="section" id="method">
<h4>method()</h4>
<p>The <tt class="docutils literal"><span class="pre">method()</span></tt> designator matches on the execution of methods with a certain
name. The parameter specifies the class and method name, regular expressions
can be used for more flexibility <a class="footnote-reference" href="#id10" id="id5">[5]</a>. It follows the following scheme:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">method</span><span class="p">([</span><span class="k">public</span><span class="o">|</span><span class="k">protected</span><span class="p">]</span> <span class="nx">ClassName</span><span class="o">-&gt;</span><span class="na">methodName</span><span class="p">())</span>
</pre></div>
</div>
<p>Specifying the visibility modifier (public or protected) is optional - if none
is specified, both visibilities will match. The class- and method name can be
specified as a regular expression.</p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<dl class="docutils">
<dt>It is not possible to match for interfaces within the <tt class="docutils literal"><span class="pre">method()</span></tt></dt>
<dd>pointcut expression. Instead of <tt class="docutils literal"><span class="pre">method(InterfaceName-&gt;methodName())</span></tt>, use
<tt class="docutils literal"><span class="pre">within(InterfaceName)</span> <span class="pre">&amp;&amp;</span> <span class="pre">method(.*-&gt;methodName())</span></tt>.</dd>
</dl>
<p class="last">Here are some examples for matching method</p>
</div>
<p>executions:</p>
<p>Example: method() pointcut designator</p>
<hr class="docutils" />
<p>Matches all public methods in class <tt class="docutils literal"><span class="pre">Example\MyPackage\MyObject</span></tt>:</p>
<p><tt class="docutils literal"><span class="pre">method(public</span> <span class="pre">Example\MyPackage\MyObject-&gt;.*())</span></tt></p>
<p>Matches all methods prefixed with &#8220;delete&#8221; (even protected ones) in
any class of the package <tt class="docutils literal"><span class="pre">Example.MyPackage</span></tt>:</p>
<p><tt class="docutils literal"><span class="pre">method(Example\MyPackage.*-&gt;delete.*())</span></tt></p>
<p>Matches all methods except injectors in class <tt class="docutils literal"><span class="pre">Example\MyPackage\MyObject</span></tt>:</p>
<p><tt class="docutils literal"><span class="pre">method(Example\MyPackage\MyObject-&gt;(?!inject).*())</span></tt></p>
<hr class="docutils" />
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">In other AOP frameworks, including AspectJ™ and Spring™, the method
designator does not exist. They rather use a more fine grained approach
with designators such as execution, call and cflow. As TYPO3 Flow only supports
matching to method execution join points anyway, we decided to simplify
things by allowing only a more general method designator.</p>
</div>
<p>The <tt class="docutils literal"><span class="pre">method()</span></tt> designator also supports so called runtime evaluations,
meaning you can specify values for the method&#8217;s arguments. If those argument
values do not match the advice won&#8217;t be executed. The following example should
give you an idea how this works:</p>
<p>Example: Runtime evaluations for the method() pointcut designator</p>
<hr class="docutils" />
<p><tt class="docutils literal"><span class="pre">method(Example\MyPackage\MyClass-&gt;update(title</span> <span class="pre">==</span> <span class="pre">&quot;Flow&quot;,</span> <span class="pre">override</span> <span class="pre">==</span> <span class="pre">TRUE))</span></tt></p>
<hr class="docutils" />
<p>Besides the method arguments you can also access the properties of the current
object or a global object like the party that is currently authenticated.
A detailed description of the runtime evaluations possibilities is described
below in the section about the <tt class="docutils literal"><span class="pre">evaluate()</span></tt> pointcut designator.</p>
</div>
<div class="section" id="class">
<h4>class()</h4>
<p>The <tt class="docutils literal"><span class="pre">class()</span></tt> designator matches on the execution of methods defined in a
class with a certain name. The parameter specifies the class name, again
regular expressions are allowed here. The <tt class="docutils literal"><span class="pre">class()</span></tt> designator follows this
simple scheme:</p>
<p><tt class="docutils literal"><span class="pre">class(classname)</span></tt></p>
<p>Example: class() pointcut designator</p>
<hr class="docutils" />
<p>Matches all methods in class <tt class="docutils literal"><span class="pre">Example\MyPackage\MyObject</span></tt>:</p>
<p><tt class="docutils literal"><span class="pre">class(Example\MyPackage\MyObject)</span></tt></p>
<p>Matches all methods in namespace &#8220;Service&#8221;:</p>
<p><tt class="docutils literal"><span class="pre">class(Example\MyPackage\Service\.*)</span></tt></p>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p class="last">The <tt class="docutils literal"><span class="pre">class</span></tt> pointcut expression does not match interfaces. If
you want to match interfaces, use <tt class="docutils literal"><span class="pre">within()</span></tt> instead.</p>
</div>
</div>
<hr class="docutils" />
<div class="section" id="within">
<h4>within()</h4>
<p>The <tt class="docutils literal"><span class="pre">within()</span></tt> designator matches on the execution of methods defined in a
class of a certain type. A type matches if the class is a subclass of or
implements an interface of the given name. The <tt class="docutils literal"><span class="pre">within()</span></tt> designator has this
simple syntax:</p>
<p><tt class="docutils literal"><span class="pre">within(type)</span></tt></p>
<p>Example: within() pointcut designator</p>
<hr class="docutils" />
<p>Matches all methods in classes which implement the logger interface:</p>
<p><tt class="docutils literal"><span class="pre">within(Example\Flow\Log\LoggerInterface)</span></tt></p>
<p>Matches all methods in classes which are part of the Foo layer:</p>
<p><tt class="docutils literal"><span class="pre">within(Example\Flow\FooLayerInterface)</span></tt></p>
<hr class="docutils" />
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last"><tt class="docutils literal"><span class="pre">within()</span></tt> will not match on specific nesting in the call stack,
even when the name might imply this. It&#8217;s just a more generic class
designator matching whole type hierarchies.</p>
</div>
</div>
<div class="section" id="classannotatedwith">
<h4>classAnnotatedWith()</h4>
<p>The <tt class="docutils literal"><span class="pre">classAnnotatedWith()</span></tt> designator matches on classes which are tagged with a
certain annotation. Currently only the actual annotation class name can be matched,
arguments of the annotation cannot be specified:</p>
<p><tt class="docutils literal"><span class="pre">classAnnotatedWith(annotation)</span></tt></p>
<p>Example: classAnnotatedWith() pointcut designator</p>
<hr class="docutils" />
<p>Matches all classes which are tagged with TYPO3 Flow&#8217;s <tt class="docutils literal"><span class="pre">Entity</span></tt> annotation:</p>
<p><tt class="docutils literal"><span class="pre">classAnnotatedWith(TYPO3\Flow\Annotations\Entity)</span></tt></p>
<p>Matches all classes which are tagged with a custom annotation:</p>
<p><tt class="docutils literal"><span class="pre">classAnnotatedWith(Acme\Demo\Annotations\Important)</span></tt></p>
</div>
<hr class="docutils" />
<div class="section" id="methodannotatedwith">
<h4>methodAnnotatedWith()</h4>
<p>The <tt class="docutils literal"><span class="pre">methodAnnotatedWith()</span></tt> designator matches on methods which are annotated
with a certain annotation.  Currently only the actual annotation class name can be
matched, arguments of the annotation cannot be specified. The syntax of this
designator is as follows:</p>
<p><tt class="docutils literal"><span class="pre">methodAnnotatedWith(annotation)</span></tt></p>
<p>Example: methodAnnotatedWith() pointcut designator</p>
<hr class="docutils" />
<p>Matches all method which are annotated with a <tt class="docutils literal"><span class="pre">Special</span></tt> annotation:</p>
<p><tt class="docutils literal"><span class="pre">methodAnnotatedWith(Acme\Demo\Annotations\Special)</span></tt></p>
</div>
<hr class="docutils" />
<div class="section" id="setting">
<h4>setting()</h4>
<p>The setting() designator matches if the given configuration option is set to
TRUE, or if an optional given comparison value equals to its configured value.
This is helpful to make advices configurable and switch them off in a
specific TYPO3 Flow context or just for testing. You can use this designator
as follows:</p>
<p>Example: setting() pointcut designator</p>
<hr class="docutils" />
<p>Matches if &#8220;my.configuration.option&#8221; is set to TRUE in the current execution
context:</p>
<p><tt class="docutils literal"><span class="pre">setting(my.configuration.option)</span></tt></p>
<p>Matches if &#8220;my.configuration.option&#8221; is equal to &#8220;AOP is cool&#8221; in the current
execution context: (Note: single and double quotes are allowed)</p>
<p><tt class="docutils literal"><span class="pre">setting(my.configuration.option</span> <span class="pre">=</span> <span class="pre">'AOP</span> <span class="pre">is</span> <span class="pre">cool')</span></tt></p>
</div>
<hr class="docutils" />
<div class="section" id="evaluate">
<h4>evaluate()</h4>
<p>The <tt class="docutils literal"><span class="pre">evaluate()</span></tt> designator is used to execute advices depending on constraints
that have to be evaluated during runtime. This could be a specific value for a
method argument (see the <tt class="docutils literal"><span class="pre">method()</span></tt> designator) or checking a certain property of
the current object or accessing a global object like the currently
authenticated party. In general you can access object properties by
the <tt class="docutils literal"><span class="pre">.</span></tt> syntax and global objects are registered under the <tt class="docutils literal"><span class="pre">current.</span></tt> keyword. Here
is an example showing the possibilities:</p>
<p>Example: evaluate() pointcut designator</p>
<hr class="docutils" />
<p>Matches if the property name of the global party object (the currently
authenticated party of the security framework) is equal to &#8220;Andi&#8221;:</p>
<p><tt class="docutils literal"><span class="pre">evaluate(current.securityContext.party.name</span> <span class="pre">==</span> <span class="pre">&quot;Andi&quot;)</span></tt></p>
<p>Matches if the property someProperty of someObject which is a property of the
current object (the object the advice will be executed in) is equal to the
name of the current party:</p>
<p><tt class="docutils literal"><span class="pre">evaluate(this.someObject.someProperty</span> <span class="pre">==</span> <span class="pre">current.securityContext.party.name)</span></tt></p>
<p>Matches if the property someProperty of the current object is equal to one of
the values TRUE, &#8220;someString&#8221; or the address of the current party:</p>
<p><tt class="docutils literal"><span class="pre">evaluate(this.someProperty</span> <span class="pre">in</span> <span class="pre">(TRUE,</span> <span class="pre">&quot;someString&quot;,</span> <span class="pre">current.securityContext.party.address))</span></tt></p>
<p>Matches if the accounts array in the current party object contains the account
stored in the myAccount property of the current object:</p>
<p><tt class="docutils literal"><span class="pre">evaluate(current.securityContext.party.accounts</span> <span class="pre">contains</span> <span class="pre">this.myAccount)</span></tt></p>
<p>Matches if at least one of the entries in the first array exists in the second one:</p>
<p><tt class="docutils literal"><span class="pre">evaluate(current.securityContext.party.accounts</span> <span class="pre">matches</span> <span class="pre">('Administrator',</span> <span class="pre">'Customer',</span> <span class="pre">'User'))</span></tt></p>
<p><tt class="docutils literal"><span class="pre">evaluate(current.securityContext.party.accounts</span> <span class="pre">matches</span> <span class="pre">this.accounts)</span></tt></p>
<hr class="docutils" />
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If you like you can enter more than one constraint in a single evaluate
pointcut designator by separating them with a comma. The evaluate
designator will only match, if all its conditions evaluated to TRUE.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">It is possible to register arbitrary singletons to be available as global
objects with the TYPO3 Flow configuration setting <tt class="docutils literal"><span class="pre">TYPO3.Flow.aop.globalObjects</span></tt>.</p>
</div>
</div>
<div class="section" id="filter">
<h4>filter()</h4>
<p>If the built-in filters don&#8217;t suit your needs you can even define your own
custom filters. All you need to do is create a class implementing the
<tt class="docutils literal"><span class="pre">TYPO3\Flow\AOP\Pointcut\PointcutFilterInterface</span></tt> and develop your own logic
for the <tt class="docutils literal"><span class="pre">matches()</span></tt> method. The custom filter can then be invoked by using
the <tt class="docutils literal"><span class="pre">filter()</span></tt> designator:</p>
<p><tt class="docutils literal"><span class="pre">filter(CustomFilterObjectName)</span></tt></p>
<p>Example: filter() pointcut designator</p>
<hr class="docutils" />
<p>If the current method matches is determined by the custom filter:</p>
<p><tt class="docutils literal"><span class="pre">filter(Example\MyPackage\MyCustomPointcutFilter)</span></tt></p>
</div>
</div>
<hr class="docutils" />
<div class="section" id="combining-pointcut-expressions">
<h3>Combining pointcut expressions</h3>
<p>All pointcut expressions mentioned in previous sections can be combined into
a whole expression, just like you may combine parts to an overall condition in
an if construct. The supported operators are “&amp;&amp;”, “||” and “!” and they have
the same meaning as in PHP. Nesting expressions with parentheses is not
supported but you may refer to other pointcuts by specifying their full name
(i.e. class- and method name). This final example shows how to combine and
reuse pointcuts and ultimately build a hierarchy of pointcuts which can be used
conveniently in advice declarations:</p>
<p>Example: Combining pointcut expressions:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Example\TestPackage</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * Fixture class for testing pointcut definitions</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Aspect</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">PointcutTestingAspect</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * Pointcut which includes all method executions in</span>
<span class="sd">         * PointcutTestingTargetClasses except those from Target</span>
<span class="sd">         * Class number 3.</span>
<span class="sd">         *</span>
<span class="sd">         * @Flow\Pointcut(&quot;method(Example\TestPackage\PointcutTestingTargetClass.*-&gt;.*()) &amp;&amp; ⏎</span>
<span class="sd">          !method(Example\TestPackage\PointcutTestingTargetClass3-&gt;.*())&quot;)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">pointcutTestingTargetClasses</span><span class="p">()</span> <span class="p">{}</span>

        <span class="sd">/**</span>
<span class="sd">         * Pointcut which consists of only the</span>
<span class="sd">         * Example\TestPackage\OtherPointcutTestingTargetClass.</span>
<span class="sd">         *</span>
<span class="sd">         * @Flow\Pointcut(&quot;method(Example\TestPackage\OtherPointcutTestingTargetClass-&gt;.*())&quot;)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">otherPointcutTestingTargetClass</span><span class="p">()</span> <span class="p">{}</span>

        <span class="sd">/**</span>
<span class="sd">         * A combination of both above pointcuts</span>
<span class="sd">         *</span>
<span class="sd">         * @Flow\Pointcut(&quot;Example\TestPackage\PointcutTestingAspect-&gt;pointcutTestingTargetClasses ⏎</span>
<span class="sd">          || Example\TestPackage\PointcutTestingAspect-&gt;otherPointcutTestingTargetClass&quot;)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">bothPointcuts</span><span class="p">()</span> <span class="p">{}</span>

        <span class="sd">/**</span>
<span class="sd">         * A pointcut which matches all classes from the service layer</span>
<span class="sd">         *</span>
<span class="sd">         * @Flow\Pointcut(&quot;within(Example\Flow\ServiceLayerInterface)&quot;)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">serviceLayerClasses</span><span class="p">()</span> <span class="p">{}</span>

        <span class="sd">/**</span>
<span class="sd">         * A pointcut which matches any method from the BasicClass and all classes</span>
<span class="sd">         * from the service layer</span>
<span class="sd">         *</span>
<span class="sd">         * @Flow\Pointcut(&quot;method(Example\TestPackage\Basic.*-&gt;.*()) || within(TYPO3\Flow\Service.*)&quot;)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">basicClassOrServiceLayerClasses</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="declaring-advice">
<h2>Declaring advice</h2>
<p>With the aspect and pointcuts in place we are now ready to declare the advice.
Remember that an advice is the actual action, the implementation of the concern
you want to weave in to some target. Advices are implemented as interceptors
which may run before and / or after the target method is called. Four advice
types allow for these different kinds of interception: Before, After returning,
After throwing and Around.</p>
<p>Other than being of a certain type, advices always come with a pointcut
expression which defines the set of join points the advice applies for.
The pointcut expression may, as we have seen earlier, refer to other
named pointcuts.</p>
<div class="section" id="before-advice">
<h3>Before advice</h3>
<p>A before advice allows for executing code before the target method is invoked.
However, the advice cannot prevent the target method from being executed, nor
can it take influence on other before advices at the same join point.</p>
<p>Example: Declaration of a before advice:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Before advice which is invoked before any method call within the News</span>
<span class="sd"> * package</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Before(&quot;class(Example\News\.*-&gt;.*())&quot;)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">myBeforeAdvice</span><span class="p">(</span><span class="nx">\TYPO3\Flow\AOP\JoinPointInterface</span> <span class="err">⏎</span>
        <span class="nv">$joinPoint</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="after-returning-advice">
<h3>After returning advice</h3>
<p>The after returning advice becomes active after the target method normally
returns from execution (i.e. it doesn&#8217;t throw an exception). After returning
advices may read the result of the target method, but can&#8217;t modify it.</p>
<p>Example: Declaration of an after returning advice:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * After returning advice</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\AfterReturning(&quot;method(public Example\News\FeedAgregator-&gt;[import|update].*()) ⏎</span>
<span class="sd">          || Example\MyPackage\MyAspect-&gt;someOtherPointcut&quot;)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">myAfterReturningAdvice</span><span class="p">(</span><span class="nx">\TYPO3\Flow\AOP\JoinPointInterface</span> <span class="err">⏎</span>
        <span class="nv">$joinPoint</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="after-throwing-advice">
<h3>After throwing advice</h3>
<p>Similar to the “after returning” advice, the after throwing advice is invoked
after method execution, but only if an exception was thrown.</p>
<p>Example: Declaration of an after throwing advice:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * After throwing advice</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\AfterThrowing(&quot;within(Example\News\ImportantLayer)&quot;)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">myAfterThrowingAdvice</span><span class="p">(</span><span class="nx">\TYPO3\Flow\AOP\JoinPointInterface</span> <span class="err">⏎</span>
        <span class="nv">$joinPoint</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="after-advice">
<h3>After advice</h3>
<p>The after advice is a combination of “after returning” and “after throwing”:
These advices become active after method execution, no matter if an exception
was thrown or not.</p>
<p>Example: Declaration of an after advice:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * After advice</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\After(&quot;Example\MyPackage\MyAspect-&gt;justAPointcut&quot;)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">myAfterAdvice</span><span class="p">(</span><span class="nx">\TYPO3\Flow\AOP\JoinPointInterface</span> <span class="nv">$joinPoint</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="around-advice">
<h3>Around advice</h3>
<p>Finally, the around advice takes total control over the target method and
intercepts it completely. It may decide to call the original method or not and
even modify the result of the target method or return a completely
different one. Obviously the around advice is the most powerful and should only
be used if the concern can&#8217;t be implemented with the alternative advice types.
You might already guess how an around advice is declared:</p>
<p>Example: Declaration of an around advice:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Around advice</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Around(&quot;Example\MyPackage\MyAspect-&gt;justAPointcut&quot;)</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">myAroundAdvice</span><span class="p">(</span><span class="nx">\TYPO3\Flow\AOP\JoinPointInterface</span> <span class="nv">$joinPoint</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="implementing-advice">
<h2>Implementing advice</h2>
<p>The final step after declaring aspects, pointcuts and advices is to fill the
advices with life. The implementation of an advice is located in the same
method it has been declared. In that regard, an aspect class behaves like any
other object in TYPO3 Flow – you therefore can take advantage of dependency
injection in case you need other objects to fulfill the task of your advice.</p>
<div class="section" id="accessing-join-points">
<h3>Accessing join points</h3>
<p>As you have seen in the previous section, advice methods always expect an
argument of the type <tt class="docutils literal"><span class="pre">TYPO3\Flow\AOP\JoinPointInterface</span></tt>. This join point object
contains all important information about the current join point. Methods like
getClassName() or getMethodArguments() let the advice method classify the
current context and enable you to implement advices in a way that they can be
reused in different situations. For a full description of the join point object
refer to the API documentation.</p>
</div>
<div class="section" id="advice-chains">
<h3>Advice chains</h3>
<p>Around advices are a special advice type in that they have the power to
completely intercept the target method. For any other advice type, the advice
methods are called by the proxy class one after another. In case of the around
advice, the methods form a chain where each link is responsible to pass over
control to the next.</p>
<div class="figure">
<img alt="Control flow of an advice chain" class="screenshot-detail" src="_Resources/Persistent/5ebaf698dd82855d3e69c0ab6ed6f6226411dac7/AOPFramework-AdviceChain.png" style="width: 534px" />
<p class="caption">Control flow of an advice chain</p>
</div>
</div>
<div class="section" id="examples">
<h3>Examples</h3>
<p>Let&#8217;s put our knowledge into practice and start with a simple example. First we
would like to log each access to methods within a certain package. The following
code will just do that:</p>
<p>Example: Simple logging with aspects:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Example\MyPackage</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * A logging aspect</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Aspect</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">LoggingAspect</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var \TYPO3\Flow\Log\LoggerInterface A logger implementation</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$logger</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * For logging we need a logger, which we will get injected automatically by</span>
<span class="sd">         * the Object Manager</span>
<span class="sd">         *</span>
<span class="sd">         * @param \TYPO3\Flow\Log\SystemLoggerInterface $logger The System Logger</span>
<span class="sd">         * @return void</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">injectSystemLogger</span><span class="p">(</span><span class="nx">\TYPO3\Flow\Log\SystemLoggerInterface</span> <span class="err">⏎</span>
                <span class="nv">$systemLogger</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logger</span> <span class="o">=</span> <span class="nv">$systemLogger</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * Before advice, logs all access to public methods of our package</span>
<span class="sd">         *</span>
<span class="sd">         * @param  \TYPO3\Flow\AOP\JoinPointInterface $joinPoint: The current join point</span>
<span class="sd">         * @return void</span>
<span class="sd">         * @Flow\Before(&quot;method(public Example\MyPackage\.*-&gt;.*())&quot;)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">logMethodExecution</span><span class="p">(</span><span class="nx">\TYPO3\Flow\AOP\JoinPointInterface</span> <span class="nv">$joinPoint</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$logMessage</span> <span class="o">=</span> <span class="s1">&#39;The method &#39;</span> <span class="o">.</span> <span class="nv">$joinPoint</span><span class="o">-&gt;</span><span class="na">getMethodName</span><span class="p">()</span> <span class="o">.</span> <span class="s1">&#39; in class &#39;</span> <span class="o">.</span>
                        <span class="nv">$joinPoint</span><span class="o">-&gt;</span><span class="na">getClassName</span><span class="p">()</span> <span class="o">.</span> <span class="s1">&#39; has been called.&#39;</span><span class="p">;</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logger</span><span class="o">-&gt;</span><span class="na">log</span><span class="p">(</span><span class="nv">$logMessage</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Note that we are using dependency injection for getting the system logger
instance to stay independent from any specific logging implementation. We don&#8217;t
have to care about the kind of logger and where it comes from.</p>
<p>Finally an example for the implementation of an around advice: For a guest
book, we want to reject the last name “Sarkosh” (because it should be
“Skårhøj”), every time it is submitted. Admittedly you probably wouldn&#8217;t
implement this great feature as an aspect, but it&#8217;s easy enough to demonstrate
the idea. For illustration purposes, we don&#8217;t define the pointcut expression in
place but refer to a named pointcut.</p>
<p>Example: Implementation of an around advice:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Example\Guestbook</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * A lastname rejection aspect</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Aspect</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">LastNameRejectionAspect</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * A pointcut which matches all guestbook submission method invocations</span>
<span class="sd">         *</span>
<span class="sd">         * @Flow\Pointcut(&quot;method(Example\Guestbook\SubmissionHandlingThingy-&gt;submit())&quot;)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">guestbookSubmissionPointcut</span><span class="p">()</span> <span class="p">{}</span>

        <span class="sd">/**</span>
<span class="sd">         * Around advice, rejects the last name &quot;Sarkosh&quot;</span>
<span class="sd">         *</span>
<span class="sd">         * @param  \TYPO3\Flow\AOP\JoinPointInterface $joinPoint The current join point</span>
<span class="sd">         * @return mixed Result of the target method</span>
<span class="sd">         * @Flow\Around(&quot;Example\Guestbook\LastNameRejectionAspect-&gt;guestbookSubmissionPointcut&quot;)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">rejectLastName</span><span class="p">(</span><span class="nx">\TYPO3\Flow\AOP\JoinPointInterface</span> <span class="nv">$joinPoint</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$joinPoint</span><span class="o">-&gt;</span><span class="na">getMethodArgument</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;Sarkosh&#39;</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;Sarkosh is not a valid last name - should be Skårhøj!&#39;</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$joinPoint</span><span class="o">-&gt;</span><span class="na">getAdviceChain</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">proceed</span><span class="p">(</span><span class="nv">$joinPoint</span><span class="p">);</span>
                <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Please note that if the last name is correct, we proceed with the remaining
links in the advice chain. This is very important to assure that the original
(target-) method is finally called. And don&#8217;t forget to return the result of
the advice chain ...</p>
</div>
</div>
<div class="section" id="introductions">
<h2>Introductions</h2>
<p>Introductions (also known as Inter-type Declarations) allow to subsequently
implement an interface or new properties in a given target class.
The (usually) newly introduced methods (required by the new interface) can
then be implemented by declaring an advice. If no implementation is defined,
an empty placeholder method will be generated automatically to satisfy
the contract of the introduced interface.</p>
<div class="section" id="interface-introduction">
<h3>Interface introduction</h3>
<p>Like advices, introductions are declared by annotations. But in contrast to
advices, the anchor for an introduction declaration is the class declaration of
the aspect class. The annotation tag follows this syntax:</p>
<p><tt class="docutils literal"><span class="pre">&#64;Flow\Introduce(&quot;PointcutExpression&quot;,</span> <span class="pre">interfaceName=&quot;NewInterfaceName&quot;)</span></tt></p>
<p>Although the PointcutExpression is just a normal pointcut expression, which may
also refer to named pointcuts, be aware that only expressions filtering for
classes make sense. You cannot use the method() pointcut designator in this
context and will typically take the class() designator instead.</p>
<p>The following example introduces a new interface <tt class="docutils literal"><span class="pre">NewInterface</span></tt> to the class
<tt class="docutils literal"><span class="pre">OldClass</span></tt> and also provides an implementation of the method <tt class="docutils literal"><span class="pre">newMethod</span></tt>.</p>
<p>Example: Interface introduction:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Example\MyPackage</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * An aspect for demonstrating introductions</span>
<span class="sd"> *</span>
<span class="sd"> * Introduces Example\MyPackage\NewInterface to the class Example\MyPackage\OldClass:</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Introduce(&quot;class(Example\MyPackage\OldClass)&quot;, interfaceName=&quot;Example\MyPackage\NewInterface&quot;)</span>
<span class="sd"> * @Flow\Aspect</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">IntroductionAspect</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * Around advice, implements the new method &quot;newMethod&quot; of the</span>
<span class="sd">         * &quot;NewInterface&quot; interface</span>
<span class="sd">         *</span>
<span class="sd">         * @param  \TYPO3\Flow\AOP\JoinPointInterface $joinPoint The current join point</span>
<span class="sd">         * @return void</span>
<span class="sd">         * @Flow\Around(&quot;method(Example\MyPackage\OldClass-&gt;newMethod())&quot;)</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">newMethodImplementation</span><span class="p">(</span><span class="nx">\TYPO3\Flow\AOP\JoinPointInterface</span> <span class="nv">$joinPoint</span><span class="p">)</span> <span class="p">{</span>
                        <span class="c1">// We call the advice chain, in case any other advice is declared for</span>
                        <span class="c1">// this method, but we don&#39;t care about the result.</span>
                <span class="nv">$someResult</span> <span class="o">=</span> <span class="nv">$joinPoint</span><span class="o">-&gt;</span><span class="na">getAdviceChain</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">proceed</span><span class="p">(</span><span class="nv">$joinPoint</span><span class="p">);</span>

                <span class="nv">$a</span> <span class="o">=</span> <span class="nv">$joinPoint</span><span class="o">-&gt;</span><span class="na">getMethodArgument</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">);</span>
                <span class="nv">$b</span> <span class="o">=</span> <span class="nv">$joinPoint</span><span class="o">-&gt;</span><span class="na">getMethodArgument</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">);</span>
                <span class="k">return</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="property-introduction">
<h3>Property introduction</h3>
<p>The declaration of a property introduction anchors to a property inside an aspect.</p>
<p>Form of the declaration:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @var type</span>
<span class="sd"> * @Flow\Introduce(&quot;PointcutExpression&quot;)</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$propertyName</span><span class="p">;</span>
</pre></div>
</div>
<p>The declared property will be added to the target classes matched by the pointcut.</p>
<p>The following example introduces a new property &#8220;subtitle&#8221; to the class
<tt class="docutils literal"><span class="pre">Example\Blog\Domain\Model\Post</span></tt>:</p>
<p>Example: Property introduction:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Example\MyPackage</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * An aspect for demonstrating property introductions</span>
<span class="sd"> *</span>
<span class="sd"> * @Flow\Aspect</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">PropertyIntroductionAspect</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var string</span>
<span class="sd">         * @Column(length=40)</span>
<span class="sd">         * @Flow\Introduce(&quot;class(Example\Blog\Domain\Model\Post)&quot;)</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$subtitle</span><span class="p">;</span>

<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="implementation-details">
<h2>Implementation details</h2>
<div class="section" id="aop-proxy-mechanism">
<h3>AOP proxy mechanism</h3>
<p>The following diagram illustrates the building process of a proxy class:</p>
<div class="figure">
<a href="_Resources/Persistent/8fae8709fa8841915336e015497c028eb311f483/AOPFramework-ProxyBuildingProcess.png" data-lightbox="image-534852adcfb8b"><img alt="Proxy building process" class="screenshot-fullsize" src="_Resources/Persistent/e8c99ab65934f00c614247feeeaa19f7191c19cb/AOPFramework-ProxyBuildingProcess.png" style="width: 710px" /></a>
<p class="caption">Proxy building process</p>
</div>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id6" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>SoC could, by the way, also mean “Self-organized criticality” or
“Service-oriented Computing” or refer to Google&#8217;s “Summer of Code” ...</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id7" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td>AOP was rather invented by Gregor Kiczalesand his team at the Xerox Palo
Alto Research Center. The original implementation was called AspectJ and is
an extension to Java. It still serves as a de-facto standard and is now
maintained by the Eclipse Foundation.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id8" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id3">[3]</a></td><td>Intercepting setting and retrieval of properties can easily be achieved
by declaring a before-, after- or around advice.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id9" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id4">[4]</a></td><td>GoF means Gang of Four and refers to the authors of the classic book
Design Patterns – Elements of Reusable Object-Oriented Software</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id10" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id5">[5]</a></td><td>Internally, PHP&#8217;s <tt class="docutils literal"><span class="pre">preg_match()</span></tt> function is used to match the method
name. The regular expression will be enclosed by /^...$/ (without the dots
of course). Backslashes will be escaped to make namespace use possible
without further hassle.</td></tr>
</tbody>
</table>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="8de158ff-0d16-67f8-503f-1c4fc71be8b8" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="3e0a30b5-4932-a809-2b7e-7f4af77a4700" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="security" locale="">
       <properties>
        <title>Security</title>
       </properties>
       <node identifier="de134087-39e8-1f0c-5e71-64a81097ac25" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="c6508b41-3dff-646c-fa81-0a56dcebc89e" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="security">
<span id="ch-security"></span><h1>Security</h1>
<div class="section" id="security-framework">
<h2>Security Framework</h2>
<p>All tasks related to security of a TYPO3 Flow application are handled centrally by the security
framework. Besides other functionality, this includes especially features like
authentication, authorization, channel security and a powerful policy component. This
chapter describes how you can use TYPO3 Flow&#8217;s security features and how they work internally.</p>
</div>
<div class="section" id="activation-and-initialization">
<h2>Activation and initialization</h2>
<p>All the described features in this chapter can be enable or disabled by setting the
following value in Settings.yaml configuration file:</p>
<p>Example: Enable the security features in the Settings.yaml configuration file</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">enable</span><span class="p-Indicator">:</span>
          <span class="l-Scalar-Plain">TRUE</span>
</pre></div>
</div>
<p>If set to &#8220;yes&#8221;, which is the default, the security framework engages with TYPO3 Flow
by vowing in two AOP advices into the MVC dispatcher and another two into the
persistence layer classes.</p>
<div class="section" id="security-context">
<h3>Security context</h3>
<p>The first security advice (<tt class="docutils literal"><span class="pre">initializeSecurity</span></tt> in the
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Aspect\RequestDispatchingAspect</span></tt>) initializes the security context
for the current request. The security context (<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Context</span></tt>) shipped
with TYPO3 Flow, lies in session scope and holds context data like the current authentication
status. That means, if you need data related to security, the security context (you can
get it easily with dependency injection) will be your main information source. The details
of the context&#8217;s data will be described in the next chapters.</p>
</div>
</div>
<div class="section" id="authentication">
<h2>Authentication</h2>
<p>One of the main things people associate with security is authentication. That means to
identify your communication partner - the one sending a request to TYPO3 Flow. Therefore the
framework provides an infrastructure to easily use different mechanisms for such a
plausibility proof. The most important achievement of the provided infrastructure is its
flexible extensibility. You can easily write your own authentication mechanisms and
configure the framework to use them without touching the framework code itself. The
details are explained in the section  <a class="reference internal" href="#implementing-your-own-authentication-mechanism">Implementing your own authentication mechanism</a>.</p>
<div class="section" id="using-the-authentication-controller">
<span id="id1"></span><h3>Using the authentication controller</h3>
<p>First, let&#8217;s see how you can use TYPO3 Flow&#8217;s authentication features. There is a special
controller in the security package: the <tt class="docutils literal"><span class="pre">AuthenticationController</span></tt>. This controller has
two actions, namely <tt class="docutils literal"><span class="pre">authenticateAction()</span></tt> and <tt class="docutils literal"><span class="pre">logoutAction()</span></tt>, an appropriate route
is configured. If you call <tt class="docutils literal"><span class="pre">http://localhost/flow/authenticate</span></tt> in your Browser, the
default authentication mechanism will be triggered. This mechanism, implemented in a so
called authentication provider, authenticates a user account by checking a username and
password against accounts stored in the content repository. <a class="footnote-reference" href="#id16" id="id2">[1]</a></p>
<p>The configuration for this default provider, which is shipped with TYPO3 Flow&#8217;s default
configuration looks like this:</p>
<p>Example: Configuration of the default username/password authentication mechanism in Settings.yaml</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">authentication</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">providers</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">DefaultProvider</span><span class="p-Indicator">:</span>
          <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">PersistedUsernamePasswordProvider</span>
</pre></div>
</div>
<p>This registers the <tt class="docutils literal"><span class="pre">PersistedUsernamePasswordProvider</span></tt> authentication provider under
the name &#8220;<tt class="docutils literal"><span class="pre">DefaultProvider</span></tt>&#8221; as the only, global authentication mechanism. To
successfully authenticate an account with this default provider, you&#8217;ll obviously have to
provide a username and password. This is done by sending two POST variables to the
authentication controller. Have a look at the following HTML snippet with a simple login
form you can use for that:</p>
<p>Example: A simple login form</p>
<div class="highlight-html"><div class="highlight"><pre><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;flow/authenticate&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">name=</span><span class="s">&quot;loginform&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;username&quot;</span>
                <span class="na">name=</span><span class="s">&quot;__authentication[TYPO3][Flow][Security][Authentication][Token][UsernamePassword][username]&quot;</span>
                <span class="na">value=</span><span class="s">&quot;&quot;</span> <span class="na">tabindex=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">id=</span><span class="s">&quot;password&quot;</span>
                <span class="na">name=</span><span class="s">&quot;__authentication[TYPO3][Flow][Security][Authentication][Token][UsernamePassword][password]&quot;</span>
                <span class="na">value=</span><span class="s">&quot;&quot;</span> <span class="na">tabindex=</span><span class="s">&quot;2&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Login&quot;</span> <span class="na">tabindex=</span><span class="s">&quot;3&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre></div>
</div>
<p>After submitting the form, the internal authentication process will be triggered and if
you provided valid credentials an account will be authenticated afterwards. <a class="footnote-reference" href="#id17" id="id3">[2]</a></p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">After authentication the <tt class="docutils literal"><span class="pre">authenticate()</span></tt> action will automatically redirect to the
original request, if the authentication process has been triggered due missing privileges
while handling this original request.</p>
</div>
</div>
<div class="section" id="visual-overview-about-the-authentication-process">
<h3>Visual Overview about the authentication process</h3>
<p>The following diagrams put the user-visible parts of the authentication process into perspective.</p>
<div class="figure">
<a href="_Resources/Persistent/208a72fd9d0bb344e68cf9ba5446487e44b39a72/Security-AuthenticationProcess-Base.png" data-lightbox="image-534852b23e8e1"><img alt="Components involved in Authentication Process" class="screenshot-fullsize" src="_Resources/Persistent/ddd892eaeb6ea49711eab78434a2d3e0b3c7c4e4/Security-AuthenticationProcess-Base.png" style="width: 710px" /></a>
<p class="caption">Components involved in authentication process</p>
</div>
<div class="figure">
<a href="_Resources/Persistent/1900422b4b8e7ebb82686cbaa228af365f3e488b/Security-AuthenticationProcess-RequestToProtectedController.png" data-lightbox="image-534852b240eaf"><img alt="Walthrough when calling a protected controller when the user is not yet authenticated" class="screenshot-fullsize" src="_Resources/Persistent/2883e5cac77e7f11326e5c167a05c0684410c3ba/Security-AuthenticationProcess-RequestToProtectedController.png" style="width: 710px" /></a>
<p class="caption">Walthrough when calling a protected controller when the user is not yet authenticated</p>
</div>
<div class="figure">
<a href="_Resources/Persistent/f619f8072e6409b2a135726e2bb44c571ff2f254/Security-AuthenticationProcess-AuthenticationRequest.png" data-lightbox="image-534852b2439ed"><img alt="Walthrough of the authentication itself, after the user has entered his credentials" class="screenshot-fullsize" src="_Resources/Persistent/d793954db8edfc7f72e5a13273766dd7a10f655d/Security-AuthenticationProcess-AuthenticationRequest.png" style="width: 710px" /></a>
<p class="caption">Walthrough of the authentication itself, after the user has entered his credentials</p>
</div>
</div>
<div class="section" id="the-internal-authentication-process">
<h3>The internal authentication process</h3>
<p>Now that you know, how you can authenticate, let&#8217;s have a look at the internal process.
The following sequence diagram shows the participating components and their interaction:</p>
<div class="figure">
<a href="_Resources/Persistent/3d3681067edb5ef6d0e3385c77ece0145bbca6f1/Security-BasicAuthenticationProcess.png" data-lightbox="image-534852b245342"><img alt="Internal authentication process" class="screenshot-fullsize" src="_Resources/Persistent/d2d319900a0444ecbf13acb54494681258a030bf/Security-BasicAuthenticationProcess.png" style="width: 710px" /></a>
<p class="caption">Internal authentication process</p>
</div>
<p>As already explained, the security framework is initialized in the dispatcher by vowing in
an AOP advice, which resides in the <tt class="docutils literal"><span class="pre">RequestDispatchingAspect</span></tt> class. This advice
intercepts the request dispatching before any controller is called. Regarding
authentication, you can see, that a so called authentication token will be stored in the
security context and some credentials will be updated in it.</p>
<div class="section" id="authentication-tokens">
<h4>Authentication tokens</h4>
<p>An authentication token holds the status of a specific authentication mechanism, for
example it receives the credentials (e.g. a username and password) needed for
authentication and stores one of the following authentication states in the session. <a class="footnote-reference" href="#id18" id="id4">[3]</a></p>
<p>These constants are defined in the authentication token interface
(<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authentication\TokenInterface</span></tt>) and the status can be obtained
from the <tt class="docutils literal"><span class="pre">getAuthenticationStatus()</span></tt> method of any token.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If you only want to know, if authentication was successful, you can call the
convenient method <tt class="docutils literal"><span class="pre">isAuthenticated()</span></tt>.</p>
</div>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">NO_CREDENTIALS_GIVEN</span></tt></dt>
<dd>This is the default state. The token is not authenticated and holds no credentials,
that could be used for authentication.</dd>
<dt><tt class="docutils literal"><span class="pre">WRONG_CREDENTIALS</span></tt></dt>
<dd>It was tried to authenticate the token, but the credentials were wrong.</dd>
<dt><tt class="docutils literal"><span class="pre">AUTHENTICATION_SUCCESSFUL</span></tt></dt>
<dd>The token has been successfully authenticated.</dd>
<dt><tt class="docutils literal"><span class="pre">AUTHENTICATION_NEEDED</span></tt></dt>
<dd>This indicates, that the token received credentials, but has not been authenticated yet.</dd>
</dl>
<p>Now you might ask yourself, how a token receives its credentials. The simple answer
is: It&#8217;s up to the token, to fetch them from somewhere. The default <tt class="docutils literal"><span class="pre">UsernamePassword</span></tt>
token for example looks for a username and password in the two POST parameters:
<tt class="docutils literal"><span class="pre">__authentication[TYPO3][Flow][Security][Authentication][Token][UsernamePassword][username]</span></tt> and
<tt class="docutils literal"><span class="pre">__authentication[TYPO3][Flow][Security][Authentication][Token][UsernamePassword][password]</span></tt> (see
<a class="reference internal" href="#using-the-authentication-controller">Using the authentication controller</a>). The framework only makes sure that
<tt class="docutils literal"><span class="pre">updateCredentials()</span></tt> is called on every token, then the token has to set possibly
available credentials itself, e.g. from available headers or parameters or anything else
you can provide credentials with.</p>
</div>
<div class="section" id="sessionless-authentication-tokens">
<h4>Sessionless authentication tokens</h4>
<p>By default Flow assumes that a token which has been successfully authenticated needs
a session in order to keep being authenticated on the next HTTP request. Therefore,
whenever a user sends a <tt class="docutils literal"><span class="pre">UsernamePassword</span></tt> token for authentication, Flow will
implicitly start a session and send a session cookie.</p>
<p>For authentication mechanisms which don&#8217;t require a session this process can be
optimized. Headers for HTTP Basic Authentication or an API key is sent on every
request, so there&#8217;s no need to start a session for keeping the token. Especially
when dealing with REST services, it is not desirable to start a session.</p>
<p>Authentication tokens which don&#8217;t require a session simply need to implement the
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authentication\Token\SessionlessTokenInterface</span></tt> marker
interface. If a token carries this marker, the Authentication Manager will refrain
from starting a session during authentication.</p>
</div>
<div class="section" id="authentication-manager-and-provider">
<h4>Authentication manager and provider</h4>
<p>After the tokens have been initialized the original request will be processed by the
resolved controller. In our case this is the special authentication controller
(<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authentication\Controller\AuthenticationController</span></tt>)
of TYPO3 Flow, which will call the authentication manager to authenticate the tokens. In turn
the authentication manager calls all authentication providers in the configured order. A
provider implements a specific authentication mechanism and is therefore responsible for
a specific token type. E.g. the already mentioned <tt class="docutils literal"><span class="pre">PersistedUsernamePasswordProvider</span></tt>
provider is able to authenticate the <tt class="docutils literal"><span class="pre">UsernamePassword</span></tt> token.</p>
<p>After checking the credentials, it is the responsibility of an authentication provider to
set the correct authentication status (see above) and <tt class="docutils literal"><span class="pre">Roles</span></tt> in its corresponding token.
The role implementation resides in the <tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Policy</span></tt> namespace. (see the
Policy section for details).</p>
</div>
</div>
<div class="section" id="account-management">
<span id="id5"></span><h3>Account management</h3>
<p>In the previous section you have seen, how accounts can be authenticated in TYPO3 Flow. What
was concealed so far is, how these accounts are created or what is exactly meant by the
word &#8220;account&#8221;. First of all let&#8217;s define what accounts are in TYPO3 Flow and how they are used
for authentication. Following the OASIS CIQ V3.0 <a class="footnote-reference" href="#id19" id="id6">[4]</a> specification, an account used for
authentication is separated from a user or more
general a party. The advantage of this separation is the possibility of one user having
more than one account. E.g. a user could have an account for the <tt class="docutils literal"><span class="pre">UsernamePassword</span></tt>
provider and one account connected to an LDAP authentication provider. Another scenario
would be to have different accounts for different parts of your TYPO3 Flow application. Read
the next section <a class="reference internal" href="#advanced-authentication-configuration">Advanced authentication configuration</a> to see how this can be
accomplished.</p>
<p>As explained above, the account stores the credentials needed for authentication.
Obviously these credentials are provider specific and therefore every account is only
valid for a specific authentication provider. This provider - account connection is stored
in a property of the account object named <tt class="docutils literal"><span class="pre">authenticationProviderName</span></tt>. Appropriate
getters and setters are provided. The provider name is configured in the Settings.yaml
file. If you look back to the default configuration, you&#8217;ll find the name of the default
authentication provider: <tt class="docutils literal"><span class="pre">DefaultProvider</span></tt>. Besides that, each account has another
property called <tt class="docutils literal"><span class="pre">credentialsSource</span></tt>, which points to the place or describes the
credentials needed for this account. This could be an LDAP query string, or in case of the
<tt class="docutils literal"><span class="pre">PersistedUsernamePasswordProvider</span></tt> provider, the username, password hash and salt are
stored directly in this member variable.</p>
<p>It is the responsibility of the authentication provider to check the given credentials
from the authentication token, find the correct account for them <a class="footnote-reference" href="#id20" id="id7">[5]</a> and to decide about
the authentication status of this account.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">In case of a directory service, the real authentication will probably not take place
in the provider itself, but the provider will pass the result of the directory service
on to the authentication token.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The <tt class="docutils literal"><span class="pre">DefaultProvider</span></tt> authentication provider used in the examples is not shipped
with TYPO3 Flow, you have to configure all available authentication providers in your application.</p>
</div>
<div class="section" id="creating-accounts">
<h4>Creating accounts</h4>
<p>Creating an account is as easy as creating a new account object and add it to the account
repository. Look at the following example, which uses the <tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\AccountFactory</span></tt>
to create a simple username/password account for the DefaultProvider:</p>
<p>Example: Add a new username/password account</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$identifier</span> <span class="o">=</span> <span class="s1">&#39;andi&#39;</span><span class="p">;</span>
<span class="nv">$password</span> <span class="o">=</span> <span class="s1">&#39;secret&#39;</span><span class="p">;</span>
<span class="nv">$roles</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Acme.MyPackage:Administrator&#39;</span><span class="p">);</span>
<span class="nv">$authenticationProviderName</span> <span class="o">=</span> <span class="s1">&#39;DefaultProvider&#39;</span><span class="p">;</span>

<span class="nv">$account</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">accountFactory</span><span class="o">-&gt;</span><span class="na">createAccountWithPassword</span><span class="p">(</span><span class="nv">$identifier</span><span class="p">,</span> <span class="nv">$password</span><span class="p">,</span> <span class="nv">$roles</span><span class="p">,</span> <span class="nv">$authenticationProviderName</span><span class="p">);</span>
<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">accountRepository</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$account</span><span class="p">);</span>
</pre></div>
</div>
<p>The way the credentials are stored internally is completely up to the authentication provider.
The <tt class="docutils literal"><span class="pre">PersistedUsernamePasswordProvider</span></tt> uses the
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Cryptography\HashService</span></tt> to verify the given password. In the
example above, the given plaintext password will be securely hashed by the <tt class="docutils literal"><span class="pre">HashService</span></tt>.
The hashing is the main magic happening in the <tt class="docutils literal"><span class="pre">AccountFactory</span></tt> and the reason why we don&#8217;t
create  the account object directly. If you want to learn more about secure password hashing
in TYPO3 Flow, you should read the section about <a class="reference internal" href="#cryptography">Cryptography</a> below. You can also see, that there
is an array of roles added to the account. This is used by the policy system and will be
explained in the according section below.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">This example expects the account factory and account repository to be available in
<tt class="docutils literal"><span class="pre">$this-&gt;accountFactory</span></tt> and <tt class="docutils literal"><span class="pre">$this-&gt;accountRepository</span></tt> respectively. If you
use this snippet in an action controller, these can be injected very easily by
dependency injection.</p>
</div>
</div>
</div>
<div class="section" id="advanced-authentication-configuration">
<span id="id8"></span><h3>Advanced authentication configuration</h3>
<div class="section" id="parallel-authentication">
<h4>Parallel authentication</h4>
<p>Now that you have seen all components, taking part in the authentication process, it is
time to have a look at some advance configuration possibilities. Just to remember, here is
again the configuration of the default authentication provider:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">authentication</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">providers</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">DefaultProvider</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">PersistedUsernamePasswordProvider</span>
</pre></div>
</div>
<p>If you have a closer look at this configuration, you can see, that the word providers is
plural. That means, you have the possibility to configure more than one provider and use
them in &#8220;parallel&#8221;.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">You will have to make sure, that each provider has a unique name. In the example above
the provider name is <tt class="docutils literal"><span class="pre">DefaultProvider</span></tt>.</p>
</div>
<p>Example: Configuration of two authentication providers</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">authentication</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">providers</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">MyLDAPProvider</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3\MyCoolPackage\Security\Authentication\MyLDAPProvider</span>
        <span class="l-Scalar-Plain">providerOptions</span><span class="p-Indicator">:</span> <span class="s">&#39;Some</span><span class="nv"> </span><span class="s">LDAP</span><span class="nv"> </span><span class="s">configuration</span><span class="nv"> </span><span class="s">options&#39;</span>
      <span class="l-Scalar-Plain">DefaultProvider</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">PersistedUsernamePasswordProvider</span>
</pre></div>
</div>
<p>This will advice the authentication manager to first authenticate over the LDAP provider
and if that fails it will try to authenticate the default provider. So this configuration
can be seen as an authentication fallback chain, of course you can configure as many
providers as you like, but keep in mind that the order matters.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">As you can see in the example, the LDAP provider is provided with some options. These
are specific configuration options for each provider, have a look in the detailed
description to know if a specific provider needs more options to be configured and
which.</p>
</div>
</div>
<div class="section" id="multi-factor-authentication-strategy">
<h4>Multi-factor authentication strategy</h4>
<p>There is another configuration option to realize a multi-factor-authentication. It
defaults to <tt class="docutils literal"><span class="pre">oneToken</span></tt>. A configurable authentication strategy of <tt class="docutils literal"><span class="pre">allTokens</span></tt> forces
the authentication manager to always authenticate all configured providers and to make
sure that every single provider returned a positive authentication status to one of its
tokens. The authentication strategy <tt class="docutils literal"><span class="pre">atLeastOneToken</span></tt> will try to authenticate as many
tokens as possible but at least one. This is helpful to realize policies with additional
security only for some resources (e.g. SSL client certificates for an admin backend).</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">configuration</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">authentication</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">authenticationStrategy</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">allTokens</span>
</pre></div>
</div>
</div>
<div class="section" id="reuse-of-tokens-and-providers">
<h4>Reuse of tokens and providers</h4>
<p>There is another configuration option for authentication providers called <tt class="docutils literal"><span class="pre">tokenClass</span></tt>,
which can be specified in the provider settings. By this option you can specify which
token should be used for a provider. Remember the token is responsible for the credentials
retrieval, i.e. if you want to authenticate let&#8217;s say via username and password this setting
enables to to specify where these credentials come from. So e.g. you could reuse the one
username/password provider class and specify, whether authentication credentials are sent
in a POST request or set in an HTTP Basic authentication header.</p>
<p>Example: Specifying a specific token type for an authentication provider</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">authentication</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">providers</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">DefaultProvider</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">PersistedUsernamePasswordProvider</span>
        <span class="l-Scalar-Plain">tokenClass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">UsernamePasswordHttpBasic</span>
</pre></div>
</div>
</div>
<div class="section" id="request-patterns">
<span id="id9"></span><h4>Request Patterns</h4>
<p>Now that you know about the possibility of configuring more than one authentication
provider another scenario may come to your mind. Just imagine an application with two
areas: One user area and one administration area. Both must be protected, so we need some
kind of authentication. However for the administration area we want a stronger
authentication mechanism than for the user area. Have a look at the following provider
configuration:</p>
<p>Example: Using request patterns</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">authentication</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">providers</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">MyLDAPProvider</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3\MyCoolPackage\Security\Authentication\MyLDAPProvider</span>
        <span class="l-Scalar-Plain">providerOptions</span><span class="p-Indicator">:</span> <span class="s">&#39;Some</span><span class="nv"> </span><span class="s">LDAP</span><span class="nv"> </span><span class="s">configuration</span><span class="nv"> </span><span class="s">options&#39;</span>
        <span class="l-Scalar-Plain">requestPatterns</span><span class="p-Indicator">:</span>
         <span class="l-Scalar-Plain">controllerObjectName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3\MyApplication\AdministrationArea\.*</span>
      <span class="l-Scalar-Plain">DefaultProvider</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">PersistedUsernamePasswordProvider</span>
        <span class="l-Scalar-Plain">requestPatterns</span><span class="p-Indicator">:</span>
         <span class="l-Scalar-Plain">controllerObjectName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3\MyApplication\UserArea\.*</span>
</pre></div>
</div>
<p>Look at the new configuration option <tt class="docutils literal"><span class="pre">requestPatterns</span></tt>. This enables or disables an
authentication provider, depending on given patterns. The patterns will look into the
data of the current request and tell the authentication system, if they match or not.
The patterns in the example above will match, if the controller object name of the current
request (the controller to be called) matches on the given regular expression. If a
pattern does not match, the corresponding provider will be ignored in the whole
authentication process. In the above scenario this means, all controllers responsible for
the administration area will use the LDAP authentication provider, the user area
controllers will be authenticated by the default username/password provider.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">You can use more than one pattern in the configuration. Then the provider will only be
active, if all patterns match on the current request.</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">There can be patterns that match on different data of the request. Just imagine an IP
pattern, that matches on the request IP. You could, e.g. provide different
authentication mechanisms for people coming from your internal network, than for
requests coming from the outside.</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">You can easily implement your own pattern. Just implement the interface
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\RequestPatternInterface</span></tt> and configure the pattern with its
full qualified namespace.</p>
</div>
<p><cite>Available request patterns</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="25%" />
<col width="27%" />
<col width="48%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Request Pattern</th>
<th class="head">Match criteria</th>
<th class="head">Configuration options</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>controllerObjectName</td>
<td>Matches on the object
name of the controller
that has been resolved
by the MVC dispatcher
for the current .
request</td>
<td><p class="first">Expects one regular expression, to
match on the object name.</p>
<p>For example.:</p>
<p class="last"><tt class="docutils literal"><span class="pre">My\Application\AdministrationArea\.*</span></tt></p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="section" id="authentication-entry-points">
<h3>Authentication entry points</h3>
<p>One question that has not been answered so far is: what happens if the authentication
process fails? In this case the authentication manager will throw an
<tt class="docutils literal"><span class="pre">AuthenticationRequired</span></tt> exception. It might not be the best idea to let this exception
settle its way up to the browser, right? Therefore we introduced a concept called
authentication entry points. These entry points catch the mentioned exception and should
redirect the user to a place where she can provide proper credentials. This could be a
login page for the username/password provider or an HTTP header for HTTP authentication. An
entry point can be configured for each authentication provider. Look at the following
example, that redirects to a login page (Using the <tt class="docutils literal"><span class="pre">WebRedirect</span></tt> entry point).</p>
<p>Example: Redirect an ``AuthenticationRequired`` exception to the login page</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">authentication</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">providers</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">DefaultProvider</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">PersistedUsernamePasswordProvider</span>
        <span class="l-Scalar-Plain">entryPoint</span><span class="p-Indicator">:</span> <span class="s">&#39;WebRedirect&#39;</span>
        <span class="l-Scalar-Plain">entryPointOptions</span><span class="p-Indicator">:</span>
          <span class="l-Scalar-Plain">routeValues</span><span class="p-Indicator">:</span>
            <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Your.Package&#39;</span>
            <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Authenticate&#39;</span>
            <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;login&#39;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Prior to TYPO3 Flow version 1.2 the option <tt class="docutils literal"><span class="pre">routeValues</span></tt> was not supported by the WebRedirect
entry point. Instead you could provide the option <tt class="docutils literal"><span class="pre">uri</span></tt> containing a relative or absolute
URI to redirect to. This is still possible, but we recommend to use <tt class="docutils literal"><span class="pre">routeValues</span></tt> in
order to make your configuration more independent from the routing configuration.</p>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Of course you can implement your own entry point and configure it by using its full
qualified class name. Just make sure to implement the
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authentication\EntryPointInterface</span></tt> interface.</p>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If a request has been intercepted by an <tt class="docutils literal"><span class="pre">AuthenticationRequired</span></tt> exception, this
request will be stored in the security context. By this, the authentication process
can resume this request afterwards. Have a look at the TYPO3 Flow authentication controller
if you want to see this feature in action.</p>
</div>
<p><cite>Available authentication entry points</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="16%" />
<col width="31%" />
<col width="52%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Entry Point</th>
<th class="head">Description</th>
<th class="head">Configuration options</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>WebRedirect</td>
<td>Triggers an HTTP redirect
to a given uri or action.</td>
<td><p class="first">Expects an associative array with
either an entry <tt class="docutils literal"><span class="pre">uri</span></tt> (obsolete, see Note
above), or an array <tt class="docutils literal"><span class="pre">routeValues</span></tt>; for
example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">uri</span><span class="o">:</span> <span class="nx">login</span><span class="o">/</span>
</pre></div>
</div>
<p>or</p>
<div class="last highlight-php"><div class="highlight"><pre><span class="nx">routeValues</span><span class="o">:</span>
  <span class="s1">&#39;@package&#39;</span><span class="o">:</span> <span class="s1">&#39;Your.Package&#39;</span>
  <span class="s1">&#39;@controller&#39;</span><span class="o">:</span> <span class="s1">&#39;Authenticate&#39;</span>
  <span class="s1">&#39;@action&#39;</span><span class="o">:</span> <span class="s1">&#39;login&#39;</span>
</pre></div>
</div>
</td>
</tr>
<tr class="row-odd"><td>HttpBasic</td>
<td>Adds a WWW-Authenticate
header to the response,
which will trigger the
browsers authentication
form.</td>
<td>Optionally takes an option realm, which
will be displayed in the authentication
prompt.</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="authentication-mechanisms-shipped-with-typo3-flow">
<span id="id10"></span><h3>Authentication mechanisms shipped with TYPO3 Flow</h3>
<p>This section explains the details of each authentication mechanism shipped with TYPO3 Flow.
Mainly the configuration options and usage will be exposed, if you want to know more about
the entire authentication process and how the components will work together, please have a
look in the previous sections.</p>
<div class="section" id="simple-username-password-authentication">
<h4>Simple username/password authentication</h4>
<p>Provider</p>
<p>The implementation of the corresponding authentication provider resides in the class
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authentication\Provider\PersistedUsernamePasswordProvider</span></tt>.
It is able to authenticate tokens of the type
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authentication\Token\UsernamePassword</span></tt>. It expects a credentials
array in the token which looks like that:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">array</span><span class="p">(</span>
  <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;admin&#39;</span><span class="p">,</span>
  <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;plaintextPassword&#39;</span>
<span class="p">);</span>
</pre></div>
</div>
<p>It will try to find an account in the <tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\AccountRepository</span></tt> that has
the username value as account identifier and fetch the credentials source, which has to be
in the following format: <tt class="docutils literal"><span class="pre">HashOfThePassword,Salt</span></tt></p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">You should always use the TYPO3 Flow hash service to generate hashes! This will make sure
that you really have secure hashes.</p>
</div>
<p>The provider will explode the credentials source by the &#8221;,&#8221; and try to authenticate the
token by asking the TYPO3 Flow hash service to verify the hashed password against the given
plaintext password in from the token.
If you want to know more about accounts and how you can create them, look in the
corresponding section above.</p>
<p>Token</p>
<p>The username/password token is implemented in the class
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authentication\Token\UsernamePassword</span></tt>. It fetches the credentials
from the HTTP POST data, look at the following program listing for details:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$postArguments</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">environment</span><span class="o">-&gt;</span><span class="na">getRawPostArguments</span><span class="p">();</span>
<span class="nv">$username</span> <span class="o">=</span> <span class="nx">\TYPO3\Flow\Reflection\ObjectAccess</span><span class="o">::</span><span class="na">getPropertyPath</span><span class="p">(</span><span class="nv">$postArguments</span><span class="p">,</span>
    <span class="s1">&#39;__authentication.TYPO3.Flow.Security.Authentication.Token.UsernamePassword.username&#39;</span><span class="p">);</span>
<span class="nv">$password</span> <span class="o">=</span> <span class="nx">\TYPO3\Flow\Reflection\ObjectAccess</span><span class="o">::</span><span class="na">getPropertyPath</span><span class="p">(</span><span class="nv">$postArguments</span><span class="p">,</span>
    <span class="s1">&#39;__authentication.TYPO3.Flow.Security.Authentication.Token.UsernamePassword.password&#39;</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The token expects a plaintext password in the POST data. That does not mean, you have
to transfer plaintext passwords, however it is not the responsibility of the
authentication layer to encrypt the transfer channel. Look in the section about
<a class="reference internal" href="#channel-security">Channel security</a> for any details.</p>
</div>
</div>
</div>
<div class="section" id="implementing-your-own-authentication-mechanism">
<span id="id11"></span><h3>Implementing your own authentication mechanism</h3>
<p>One of the main goals for the authentication architecture was to provide an easily
extensible infrastructure. Now that the authentication process has been explained, you&#8217;ll
here find the steps needed to implement your own authentication mechanism:</p>
<p>Authentication token</p>
<p>You&#8217;ll have to provide an authentication token, that implements the interface
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authentication\TokenInterface</span></tt>:</p>
<p>#. The most interesting method is <tt class="docutils literal"><span class="pre">updateCredentials()</span></tt>. There you&#8217;ll get the current
request and you&#8217;ll have to make sure that credentials sent from the client will be
fetched and stored in the token.</p>
<p>#. Implement the remaining methods of the interface. These are  mostly getters and setters,
have a look in one of the existing  tokens (for example
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authentication\Token\UsernamePassword</span></tt>), if you need more
information.</p>
<p>Authentication provider</p>
<p>After that you&#8217;ll have to implement your own authentication strategy by providing a class,
that implements the interface
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authentication\AuthenticationProviderInterface</span></tt>:</p>
<p>#. In the constructor you will get the name, that has been configured for the provider and
an optional options array. Basically you can decide on your own which options you need
and how the corresponding yaml configuration will look like.</p>
<p>#. Then there has to be a <tt class="docutils literal"><span class="pre">canAuthenticate()</span></tt> method, which gets an authentication token
and returns a boolean value whether your provider can authenticate that token or not.
Most likely you will call <tt class="docutils literal"><span class="pre">getAuthenticationProviderName()</span></tt> on the token and check,
if it matches the provider name given to you in your provider&#8217;s constructor. In
addition to this, the method <tt class="docutils literal"><span class="pre">getTokenClassNames()</span></tt> has to return an array with all
authentication token classes, your provider is able to authenticate.</p>
<p>#. All the magic will happen in the <tt class="docutils literal"><span class="pre">authenticate()</span></tt> method, which will get an appropriate
authentication token. Basically you could do whatever you want in this method, the
only thing you&#8217;ll have to make sure is to set the correct status (possible values are
defined as constants in the token interface and explained above). If authentication
succeeds you might also want to set an account in the given token, to add some roles
to the current security context. However, here is the recommended way of what should
be done in this method and if you don&#8217;t have really good reasons, you shouldn&#8217;t
deviate from this procedure.</p>
<ol class="arabic simple">
<li>Get the credentials provided by the client from the authentication token
(<tt class="docutils literal"><span class="pre">getCredentials()</span></tt>)</li>
<li>Retrieve the corresponding account object from the account repository, which
you should inject into your provider by dependency injection. The repository
provides a convenient find method for this task:
<tt class="docutils literal"><span class="pre">findActiveByAccountIdentifierAndAuthenticationProviderName()</span></tt>.</li>
<li>The <tt class="docutils literal"><span class="pre">credentialsSource</span></tt> property of the account will hold the credentials
you&#8217;ll need to compare or at least the information, where these credentials lie.</li>
<li>Start the authentication process (e.g. compare credentials/call directory service/...).</li>
<li>Depending on the authentication result, set the correct status in the
authentication token, by <tt class="docutils literal"><span class="pre">calling</span> <span class="pre">setAuthenticationStatus()</span></tt>.</li>
<li>Set the account in the authentication token, if authentication succeeded. This
will add the roles of this token to the security context.</li>
</ol>
</div>
</div>
<div class="section" id="authorization">
<h2>Authorization</h2>
<p>In this section we will deal with the authorization features of TYPO3 Flow. You won&#8217;t find any
advices, how to configure access rights here, please refer to the next section about
<a class="reference internal" href="#access-control-lists">Policies aka Access Control Lists (ACLs)</a>, which form the default method to model and configure access
rules.</p>
<div class="section" id="authorize-method-invocations">
<h3>Authorize method invocations</h3>
<p>The most general thing, which you want to protect in every
application is the invocation of certain methods. By controlling, which
methods are allowed to be called and which not, it can be globally
ensured, that no unprivileged action will be executed at any time. This
is what you would usually do, by adding an access check at the beginning
of your privileged method. In TYPO3 Flow, there is the opportunity to enforce
these checks without touching the actual method at all. Of course
TYPO3 Flow&#8217;s AOP features are used to realize this completely new perspective
on authorization. If you want to learn more about AOP, please refer to
the corresponding chapter in this reference.</p>
<p>First, let&#8217;s have a look at the following sequence diagram to get an overview of what is
happening when an authorization decision is formed and enforced:</p>
<div class="figure">
<a href="_Resources/Persistent/dd17261a921109b644e687859a2a75f87fab84ec/Security-BasicAuthorizationProcess.png" data-lightbox="image-534852b246d79"><img alt="How an authorization decision is formed and enforced in TYPO3 Flow" class="screenshot-fullsize" src="_Resources/Persistent/2d9a5a94ba6974f77fa002bdf774af9366d82b7b/Security-BasicAuthorizationProcess.png" style="width: 710px" /></a>
<p class="caption">How an authorization decision is formed and enforced in TYPO3 Flow</p>
</div>
<p>As already said, the whole authorization starts with an intercepted method, or in other
words with a method that should be protected and only be called by privileged users. In
the chapter about AOP you&#8217;ve already read, that every method interception is implemented
in a so called advice, which resides in an aspect class. Here we are: the
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Aspect\PolicyEnforcementAspect</span></tt>. Inside this aspect there is the
<tt class="docutils literal"><span class="pre">enforcePolicy()</span></tt> advice, which hands over to TYPO3 Flow&#8217;s authorization components.</p>
<p>The next thing to be called is a security interceptor. This interceptor calls the
authentication manager before it continues with the authorization process, to make sure
that the authentication status is up to date. Then an access decision manager is called,
which has to decide, if it is allowed to call the intercepted method. If not it throws an
access denied exception. If you want, you could implement your own access decision manager.
However, there is a very flexible one shipped with TYPO3 Flow
(<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authorization\AccessDecisionVoterManager</span></tt>), which uses the
following voting process to meet its decision:</p>
<ol class="arabic simple">
<li>Check for registered access decision voters.</li>
<li>Ask every voter, to vote for the given method call (or join point in AOP nomenclature).</li>
<li>Count the votes and grant access, if there is at least one <tt class="docutils literal"><span class="pre">VOTE_GRANT</span></tt> vote and no
<tt class="docutils literal"><span class="pre">VOTE_DENY</span></tt> vote. In all other cases an access denied exception will be thrown.</li>
</ol>
<p>On access decision voters</p>
<p>As you have seen, the default way of deciding on access is done by voting. This makes the
whole authorization process very flexible and very easily extensible. You can at any time
write your own voter classes and register them, just make sure to implement the interface
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authorization\AccessDecisionVoterInterface</span></tt>. Then you have to
register your custom voter as shown below:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">authorization</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">accessDecisionVoters</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">TYPO3\Flow\Security\Authorization\Voter\Policy</span><span class="p-Indicator">,</span> <span class="nv">MyCompany\MyPackage\Security\MyCustomVoter</span><span class="p-Indicator">]</span>
</pre></div>
</div>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">By default there is always one voter registered:
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authorization\Voter\Policy</span></tt>. This voter connects the
authorization system to the policy component, by returning a vote depending on the
configured security policy. Read the section about Policies, to learn more about the
default policy handling in TYPO3 Flow.</p>
</div>
<p>If asked, each voter has to return one of the three possibles votes: grant, deny or
abstain. There are appropriate constants defined in the voter interface, which you should
use for that. You might imagine that a voter has to return an abstain vote, if it is not
able to give a proper grant or deny vote.</p>
<p>Now it could be the case that all registered voters abstain. Usually the access decision
manager will deny access then. However, you can change that behavior by configuring the
following option:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">authorization</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">allowAccessIfAllVotersAbstain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">FALSE</span>
</pre></div>
</div>
</div>
<div class="section" id="request-integrity-hmac">
<h3>Request Integrity (HMAC)</h3>
<p>(FIXME)</p>
<ul class="simple">
<li>selection of form fields and the objects / properties which should be allowed or
not be allowed to being modified must manipulable</li>
<li>HMAC is a hash which can assure that only those form fields were submitted which
were intended - additional fields would be detected</li>
<li>HMAC is generated automatically and added as a query parameter to the form action
URI</li>
<li>Link to Property Mapping: &#8220;The Common Case: Fluid Forms&#8221;</li>
</ul>
</div>
<div class="section" id="application-firewall">
<h3>Application firewall</h3>
<p>Besides the AOP powered authorization, there is another line of defense: the filter
firewall. This firewall is triggered directly when a request arrives at the MVC dispatcher.
After that the request is analyzed and can be blocked/filtered out. This adds a second
level of security right at the beginning of the whole framework run, which means
that a minimal amount of potentially insecure code will be executed before that.</p>
<div class="figure">
<img alt="Blocking request with TYPO3 Flow's filter firewall" class="screenshot-fullsize" src="_Resources/Persistent/1cc47a28ba267ebbf97c9db6c099fc43bf18f92c/Security-FilterFirewall.png" style="width: 588px" />
<p class="caption">Blocking request with TYPO3 Flow&#8217;s filter firewall</p>
</div>
<p>The firewall itself is added to the MVC dispatcher by AOP, to completely decouple security
from the MVC framework and to have the possibility of disabling security. Blocking
requests with the firewall is not a big thing at all, basically a request filter object is
called, which consists of a request pattern and a security interceptor. The simple rules
is: if the pattern matches on the request, the interceptor is invoked.
<a class="reference internal" href="#request-patterns">Request Patterns</a> are also used by the authentication components and are explained
in detail there. Talking about security interceptors: you already know the policy
enforcement interceptor, which triggers the authorization process. Here is a table of
available interceptors, shipped with TYPO3 Flow:</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Of course you can implement your own interceptor. Just make sure to implement the
interface: <tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Authorization\InterceptorInterface</span></tt>.</p>
</div>
<p><cite>TYPO3 Flow&#8217;s built-in security interceptors</cite></p>
<table border="1" class="docutils">
<colgroup>
<col width="37%" />
<col width="63%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Security interceptor</th>
<th class="head">Invocation action</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>PolicyEnforcement</td>
<td>Triggers the authorization process as
described one section above.</td>
</tr>
<tr class="row-odd"><td>RequireAuthentication</td>
<td>Calls the authentication manager to
authenticate all active tokens for
the current request.</td>
</tr>
</tbody>
</table>
<p>Of course you are able to configure as many request filters as
you like. Have a look at the following example to get an idea how a
firewall configuration will look like:</p>
<p>Example: Firewall configuration in the Settings.yaml file</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">security</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">firewall</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">rejectAll</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">FALSE</span>

        <span class="l-Scalar-Plain">filters</span><span class="p-Indicator">:</span>
          <span class="p-Indicator">-</span>
            <span class="l-Scalar-Plain">patternType</span><span class="p-Indicator">:</span>  <span class="s">&#39;URI&#39;</span>
            <span class="l-Scalar-Plain">patternValue</span><span class="p-Indicator">:</span> <span class="s">&#39;/some/url/.*&#39;</span>
            <span class="l-Scalar-Plain">interceptor</span><span class="p-Indicator">:</span>  <span class="s">&#39;AccessGrant&#39;</span>
          <span class="p-Indicator">-</span>
            <span class="l-Scalar-Plain">patternType</span><span class="p-Indicator">:</span>  <span class="s">&#39;URI&#39;</span>
            <span class="l-Scalar-Plain">patternValue</span><span class="p-Indicator">:</span> <span class="s">&#39;/some/url/blocked.*&#39;</span>
            <span class="l-Scalar-Plain">interceptor</span><span class="p-Indicator">:</span>  <span class="s">&#39;AccessDeny&#39;</span>
          <span class="p-Indicator">-</span>
            <span class="l-Scalar-Plain">patternType</span><span class="p-Indicator">:</span>  <span class="s">&#39;MyCompany\MyPackage\Security\MyOwnRequestPattern&#39;</span>
            <span class="l-Scalar-Plain">patternValue</span><span class="p-Indicator">:</span> <span class="s">&#39;some</span><span class="nv"> </span><span class="s">pattern</span><span class="nv"> </span><span class="s">value&#39;</span>
            <span class="l-Scalar-Plain">interceptor</span><span class="p-Indicator">:</span>  <span class="s">&#39;MyCompany\MyPackage\Security\MyOwnSecurityInterceptor&#39;</span>
</pre></div>
</div>
<p>As you can see, you can easily use your own implementations for request patterns and
security interceptors.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">You might have noticed the <tt class="docutils literal"><span class="pre">rejectAll</span></tt> option. If this is set to <tt class="docutils literal"><span class="pre">yes</span></tt>,
only request which are explicitly allowed by a request filter will be able
to pass the firewall.</p>
</div>
</div>
</div>
<div class="section" id="policies-aka-access-control-lists-acls">
<span id="access-control-lists"></span><h2>Policies aka Access Control Lists (ACLs)</h2>
<p>This section will introduce the recommended and default way of connecting authentication
with authorization. The special and really powerful part of TYPO3 Flow&#8217;s way is the possibility
to do that completely declarative. This gives you the possibility to change the security
policy of your application without touching any PHP code. The policy system deals with
three major objects, which are explained below: roles, resources and acl entries. All
policy definitions are configured in the <tt class="docutils literal"><span class="pre">Policy.yaml</span></tt> files.</p>
<p>Roles</p>
<p>In the section about authentication so called roles were introduced. A role can be
attached to a user&#8217;s security context, to determine which privileges should be granted to
her. I.e. the access rights of a user are decoupled from the user object itself, making it
a lot more flexible, if you want to change them. In TYPO3 Flow roles are defined in the
<tt class="docutils literal"><span class="pre">Policy.yaml</span></tt> files, and are unique within your package namespace. The full identifier
for a role would be <tt class="docutils literal"><span class="pre">&lt;PackageKey&gt;:&lt;RoleName&gt;</span></tt>.</p>
<p>The built-in system roles <tt class="docutils literal"><span class="pre">Anonymous</span></tt> and <tt class="docutils literal"><span class="pre">Everybody</span></tt> are not prepended with a package key.</p>
<p>There are two ways to configure roles. A simple configuration and an extended configuration.
For the following examples the context is the <tt class="docutils literal"><span class="pre">Policy.yaml</span></tt> file of the <tt class="docutils literal"><span class="pre">Acme.MyPackage</span></tt>
package.</p>
<p>Following is an example of the simple configuration. that will proclaim the roles
<tt class="docutils literal"><span class="pre">Acme.MyPackage:Administrator</span></tt>, <tt class="docutils literal"><span class="pre">Acme.MyPackage:Customer</span></tt>, and
<tt class="docutils literal"><span class="pre">Acme.MyPackage:PrivilegedCustomer</span></tt> to the system.</p>
<p>Example: simple roles definition in the Policy.yaml file</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Administrator</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
  <span class="l-Scalar-Plain">Customer</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
  <span class="l-Scalar-Plain">PrivilegedCustomer</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">Customer</span><span class="p-Indicator">]</span>
</pre></div>
</div>
<p>As you see no package key is set in this example. This package key is automatically prepended
by the <tt class="docutils literal"><span class="pre">ConfigurationManager</span></tt> of TYPO3 Flow.</p>
<p>The role <tt class="docutils literal"><span class="pre">Acme.MyPackage:PrivilegedCustomer</span></tt> is configured as a sub role of
<tt class="docutils literal"><span class="pre">Acme.MyPackage:Customer</span></tt>, for example it will inherit the privileges from the
<tt class="docutils literal"><span class="pre">Acme.MyPackage:Customer</span></tt> role.</p>
<p>Example: extended role definition in the Policy.yaml file</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">roles</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Administrator</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
  <span class="l-Scalar-Plain">Customer</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;Acme.SomeOtherPackage:Customer&#39;</span><span class="p-Indicator">]</span>
  <span class="l-Scalar-Plain">PrivilegedCustomer</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;Customer&#39;</span><span class="p-Indicator">]</span>
</pre></div>
</div>
<p>This results in the exact same roles as above with the addition of the <tt class="docutils literal"><span class="pre">Acme.MyPackage:Customer</span></tt>
role inheriting rights from the <tt class="docutils literal"><span class="pre">Acme.SomeOtherPackage:Customer</span></tt> role.</p>
<p>TYPO3 Flow will always add the magic <tt class="docutils literal"><span class="pre">Everybody</span></tt> role, which you don&#8217;t have to
configure yourself. This role will also be present, if no account is authenticated.</p>
<p>Likewise, the magic role <tt class="docutils literal"><span class="pre">Anonymous</span></tt> is added to the security context if a user
is not authenticated.</p>
<p>Resources</p>
<p>The counterpart to roles are resources. A resource in general is an object, you want to
protect, for example you want to configure which roles are allowed to access a certain
resource. The policy configuration deals with method and entity resources.</p>
<p>Entity resources are related to content security, which are explained in the
<a class="reference internal" href="#content-security">Content security</a> section below. In this section we will deal with method
resources only.</p>
<p>Example: resources definition in the Policy.yaml file</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">methods</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">listMethods</span><span class="p-Indicator">:</span> <span class="s">&#39;method(TYPO3\FooPackage\SomeClass-&gt;list.*())&#39;</span>
    <span class="l-Scalar-Plain">updateMethods</span><span class="p-Indicator">:</span> <span class="s">&#39;method(TYPO3\FooPackage\SomeClass-&gt;update.*())&#39;</span>
    <span class="l-Scalar-Plain">deleteMethods</span><span class="p-Indicator">:</span> <span class="s">&#39;method(TYPO3\FooPackage\.*-&gt;delete.*(force</span><span class="nv"> </span><span class="s">==</span><span class="nv"> </span><span class="s">TRUE))&#39;</span>
    <span class="l-Scalar-Plain">modifyMethods</span><span class="p-Indicator">:</span> <span class="s">&#39;TYPO3_FooPackage_update</span><span class="nv"> </span><span class="s">||</span><span class="nv"> </span><span class="s">TYPO3_FooPackage_delete&#39;</span>
</pre></div>
</div>
<p>Each resource is defined by a unique name <a class="footnote-reference" href="#id21" id="id12">[6]</a> and a so called pointcut expression.
Practically a pointcut expression is a regular expression that matches on certain methods.
There are more pointcut expressions you can use to describe the methods addressed by a
specific resource, the whole syntax is described in detail in the chapter about AOP.</p>
<p>ACL entries</p>
<p>The last step is to connect resources with roles by assigning access privileges. Let&#8217;s
have a look at an example for such ACL entries:</p>
<p>Example: ACL entry definitions in the Policy.yaml file</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">acls</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Administrator</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">methods</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">listMethods</span><span class="p-Indicator">:</span>         <span class="l-Scalar-Plain">GRANT</span>
      <span class="l-Scalar-Plain">updateMethods</span><span class="p-Indicator">:</span>       <span class="l-Scalar-Plain">GRANT</span>
      <span class="l-Scalar-Plain">deleteMethods</span><span class="p-Indicator">:</span>       <span class="l-Scalar-Plain">GRANT</span>
  <span class="l-Scalar-Plain">Customer</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">methods</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">listMethods</span><span class="p-Indicator">:</span>         <span class="l-Scalar-Plain">GRANT</span>
  <span class="l-Scalar-Plain">PrivilegedCustomer</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">methods</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">updateMethods</span><span class="p-Indicator">:</span>       <span class="l-Scalar-Plain">GRANT</span>
      <span class="l-Scalar-Plain">deleteMethods</span><span class="p-Indicator">:</span>       <span class="l-Scalar-Plain">DENY</span>
</pre></div>
</div>
<p>This will end up in <tt class="docutils literal"><span class="pre">Administrators</span></tt> being able to call all <tt class="docutils literal"><span class="pre">update*</span></tt> and <tt class="docutils literal"><span class="pre">list*</span></tt>
methods in the class <tt class="docutils literal"><span class="pre">SomeClass</span></tt> and all <tt class="docutils literal"><span class="pre">delete*</span></tt> methods no matter which class in
the whole package <tt class="docutils literal"><span class="pre">FooPackage</span></tt>. However, <tt class="docutils literal"><span class="pre">Customers</span></tt> are only able to call the <tt class="docutils literal"><span class="pre">list*</span></tt>
methods, while <tt class="docutils literal"><span class="pre">PrivilegedCustomers</span></tt> are also allowed to call the <tt class="docutils literal"><span class="pre">update*</span></tt> methods.
And all this without touching one line of PHP code, isn&#8217;t that convenient?</p>
<p>Privilege evaluation</p>
<p>Privilege evaluation is a really complex task, when you think carefully about it. However,
if you remember the following two rules, you will have no problems or unexpected behaviour
when writing your policies:</p>
<ol class="arabic">
<li><dl class="first docutils">
<dt>If a DENY privilege is configured for one of the user&#8217;s roles, access will be denied</dt>
<dd><p class="first last">no matter how many grant privileges there are in other roles.</p>
</dd>
</dl>
</li>
<li><p class="first">If no privilege has been defined for any of the user&#8217;s roles, access will be denied.</p>
</li>
</ol>
<p>Runtime constraints</p>
<p>Runtime constraints are a very powerful feature of TYPO3 Flow&#8217;s AOP framework. A full reference
of the possibilities can be found in the AOP chapter of this documentation. However, this
features was mainly implemented to support sophisticated policy definitions and therefore
here is a short introduction by two simple examples on how to use it:</p>
<p>Example: runtime constraints usage in the security policy</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">methods</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">TYPO3_FooPackage_firstResource</span><span class="p-Indicator">:</span> <span class="s">&#39;method(TYPO3\FooPackage\SomeClass-&gt;updateProject(title</span><span class="nv"> </span><span class="s">!=</span><span class="nv"> </span><span class="s">&quot;TYPO3</span><span class="nv"> </span><span class="s">Flow&quot;))&#39;</span>
      <span class="l-Scalar-Plain">TYPO3_FooPackage_secondResource</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3_FooPackage_firstResource &amp;&amp; evaluate(current.securityContext.party.name == &quot;Andi&quot;)</span>
</pre></div>
</div>
<p>The above configuration defines a resource that matches on the <tt class="docutils literal"><span class="pre">updateProject</span></tt> method
only if it is not called with the <tt class="docutils literal"><span class="pre">title</span></tt> argument equal to &#8220;TYPO3 Flow&#8221;. The second resource
matches if the first one matches and the <tt class="docutils literal"><span class="pre">name</span></tt> property of the currently authenticated
<tt class="docutils literal"><span class="pre">party</span></tt> is equal to &#8220;Andi&#8221;.</p>
</div>
<div class="section" id="content-security">
<span id="id13"></span><h2>Content security</h2>
<div class="section" id="security-for-persisted-objects">
<h3>Security for persisted objects</h3>
<div class="admonition warning">
<p class="first admonition-title">Warning</p>
<p><strong>This section is not complete yet!</strong></p>
<ul class="last simple">
<li>TODO: Explain query rewriting via aspect to the persistence layer</li>
<li>NOTE: Content security not working for DQL queries currently (only QOM!)</li>
</ul>
</div>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">entities</span><span class="p-Indicator">:</span>
    <span class="s">&#39;Acme\MyPackage\Domain\Model\Customer&#39;</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">Acme_MyPackage_Customers_All</span><span class="p-Indicator">:</span> <span class="s">&#39;ANY&#39;</span>
      <span class="l-Scalar-Plain">Acme_MyPackage_Customers_Vip</span><span class="p-Indicator">:</span> <span class="s">&#39;this.vip</span><span class="nv"> </span><span class="s">==</span><span class="nv"> </span><span class="s">TRUE&#39;</span>
      <span class="l-Scalar-Plain">Acme_MyPackage_Customers_Me</span><span class="p-Indicator">:</span> <span class="s">&#39;current.securityContext.account</span><span class="nv"> </span><span class="s">==</span><span class="nv"> </span><span class="s">this.account</span><span class="nv"> </span><span class="s">&amp;&amp;</span><span class="nv"> </span><span class="s">this.account</span><span class="nv"> </span><span class="s">!=</span><span class="nv"> </span><span class="s">NULL&#39;</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">Acme_MyPackage_Customer_All</span></tt> resource will match any customer object.
The <tt class="docutils literal"><span class="pre">Acme_MyPackage_Customer_Vip</span></tt> resource matches all customer&#8217;s which have their
<tt class="docutils literal"><span class="pre">vip</span></tt> attribute set.
The <tt class="docutils literal"><span class="pre">Acme_MyPackage_Customer_Me</span></tt> resource matches any customer object whose account
property matches the currently logged in account.</p>
<ul class="simple">
<li>If an entity resource is defined, access is denied automatically to all who don&#8217;t
have access granted to that new resource explicitly defined in the ACLs.</li>
<li>If there is no <tt class="docutils literal"><span class="pre">ANY</span></tt> resource defined, only objects explicitly matched by one of
the other resources are denied by default.</li>
<li>If there is a <tt class="docutils literal"><span class="pre">ANY</span></tt> resource define, all objects of this type will be denied for
all users not have a grant privilege for this <tt class="docutils literal"><span class="pre">ANY</span></tt> resource.</li>
<li>The key <tt class="docutils literal"><span class="pre">Acme\MyPackage\Domain\Model\Customer</span></tt> has to reflect the full qualified
class name of your entity.</li>
<li>The <tt class="docutils literal"><span class="pre">DENY</span></tt> privilege works the same as for methods. If it is set for one of the
resources you will never see entities matched by this resource, no matter how many
<tt class="docutils literal"><span class="pre">GRANT</span></tt> privileges there might be set for other roles you also have.</li>
</ul>
</div>
<div class="section" id="security-for-files-aka-secure-downloads">
<h3>Security for files aka secure downloads</h3>
<ul class="simple">
<li>add publishing configuration to resource objects</li>
<li>publishing in subfolder named like session id</li>
<li>optimization with role subdirs -&gt; only publish once for a role</li>
<li>server specific restriction publishing like .htaccess files for apache</li>
</ul>
</div>
</div>
<div class="section" id="fluid-view-integration">
<h2>Fluid (view) integration</h2>
<p>Now that the policy is technically enforced, these rules should also be reflected in the
view. E.g. a button or link to delete a customer should not be shown, if the user has not
the privilege to do so. If you are using the recommended Fluid templating engine, you can
simply use the security view helpers shipped with Fluid. Otherwise you would have to ask
the policy service (<tt class="docutils literal"><span class="pre">TYPO3\Flow\Security\Policy\PolicyService</span></tt>) for the current
privilege situation and implement the view logic on your own, however this seems not to be
the best idea one can have. Below you&#8217;ll find a short description of the available Fluid
view helpers.</p>
<div class="section" id="ifaccess-view-helper">
<h3><tt class="docutils literal"><span class="pre">ifAccess</span></tt> view helper</h3>
<p>This view helper implements an ifAccess/else condition, have a look at the following
example, which should be more or less self-explanatory:</p>
<p>Example: the ifAccess view helper</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:security.ifAccess</span> <span class="na">resource=</span><span class="s">&quot;someResource&quot;</span><span class="nt">&gt;</span>
        This is being shown in case you have access to the given resource
<span class="nt">&lt;/f:security.ifAccess&gt;</span>

<span class="nt">&lt;f:security.ifAccess</span> <span class="na">resource=</span><span class="s">&quot;someResource&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;f:then&gt;</span>
                This is being shown in case you have access.
        <span class="nt">&lt;/f:then&gt;</span>
        <span class="nt">&lt;f:else&gt;</span>
                This is being displayed in case you do not have access.
        <span class="nt">&lt;/f:else&gt;</span>
<span class="nt">&lt;/f:security.ifAccess&gt;</span>
</pre></div>
</div>
<p>As you can imagine, the main advantage is, that the view will automatically reflect the
configured policy rules, without the need of changing any template code.</p>
</div>
<div class="section" id="ifhasrole-view-helper">
<h3><tt class="docutils literal"><span class="pre">ifHasRole</span></tt> view helper</h3>
<p>This view helper is pretty similar to the <tt class="docutils literal"><span class="pre">ifAccess</span></tt> view helper, however it does not
check the access privilege for a given resource, but the availability of a certain role.
For example you could check, if the current user has the <tt class="docutils literal"><span class="pre">Administrator</span></tt> role assigned:</p>
<p>Example: the ifHasRole view helper</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:security.ifHasRole</span> <span class="na">role=</span><span class="s">&quot;Administrator&quot;</span><span class="nt">&gt;</span>
        This is being shown in case you have the Administrator role (aka role).
<span class="nt">&lt;/f:security.ifHasRole&gt;</span>

<span class="nt">&lt;f:security.ifHasRole</span> <span class="na">role=</span><span class="s">&quot;Administrator&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;f:then&gt;</span>
                This is being shown in case you have the role.
        <span class="nt">&lt;/f:then&gt;</span>
        <span class="nt">&lt;f:else&gt;</span>
                This is being displayed in case you do not have the role.
        <span class="nt">&lt;/f:else&gt;</span>
<span class="nt">&lt;/f:security.ifHasRole&gt;</span>
</pre></div>
</div>
<p>The <tt class="docutils literal"><span class="pre">ifHasRole</span></tt> view helper will automatically add the package key from the current controller
context. This means that the examples above will only render the &#8216;then part&#8217; if the user has the
<tt class="docutils literal"><span class="pre">Administrator</span></tt> role of the package your template belongs to.
If you want to check for a role from a different package you can use the full role identifier or
specify the package key with the <tt class="docutils literal"><span class="pre">packageKey</span></tt> attribute:</p>
<p>Example: check for a role from a different package</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:security.ifHasRole</span> <span class="na">role=</span><span class="s">&quot;Acme.SomeOtherPackage:Administrator&quot;</span><span class="nt">&gt;</span>
        This is being shown in case you have the Administrator role (aka role).
<span class="nt">&lt;/f:security.ifHasRole&gt;</span>

<span class="nt">&lt;f:security.ifHasRole</span> <span class="na">role=</span><span class="s">&quot;Administrator&quot;</span> <span class="na">packageKey=</span><span class="s">&quot;Acme.SomeOtherPackage&quot;</span><span class="nt">&gt;</span>
        This is being shown in case you have the Administrator role (aka role).
<span class="nt">&lt;/f:security.ifHasRole&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="channel-security">
<span id="id14"></span><h2>Channel security</h2>
<p>Currently channel security is an open task. Stay tuned for great features!</p>
</div>
<div class="section" id="cryptography">
<span id="id15"></span><h2>Cryptography</h2>
<div class="section" id="hash-service">
<h3>Hash service</h3>
<ul class="simple">
<li>hashing/verifying hashes</li>
<li>special hashing strategies/algorithms</li>
<li>random number generation</li>
</ul>
</div>
<div class="section" id="rsa-wallet-service">
<h3>RSA wallet service</h3>
<ul class="simple">
<li>CLI commands to save keys</li>
<li>encrypting/decrypting/verifying signatures</li>
</ul>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id16" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[1]</a></td><td>The details about the <tt class="docutils literal"><span class="pre">PersistedUsernamePasswordProvider</span></tt> provider are explained
below, in the section about <a class="reference internal" href="#authentication-mechanisms-shipped-with-typo3-flow">Authentication mechanisms shipped with TYPO3 Flow</a>.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id17" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id3">[2]</a></td><td>If you don&#8217;t know any credentials, you&#8217;ll have to read the section about
<a class="reference internal" href="#account-management">Account management</a></td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id18" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id4">[3]</a></td><td>Well, it holds them in member variables, but lies itself in the security context,
which is a class configured as scope session.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id19" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id6">[4]</a></td><td>The specification can be downloaded from
<a class="reference external" href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=ciq">http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=ciq</a>. The implementation of
this specification resides in the &#8220;Party&#8221; package, which is part of the official TYPO3 Flow
distribution.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id20" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id7">[5]</a></td><td>The <tt class="docutils literal"><span class="pre">AccountRepository</span></tt> provides a convenient find method called
<tt class="docutils literal"><span class="pre">findActiveByAccountIdentifierAndAuthenticationProviderName()</span></tt>
for this task.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="id21" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id12">[6]</a></td><td>As a convention you have to prefix at least your package&#8217;s namespace to avoid ambiguity.</td></tr>
</tbody>
</table>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="6d9493e2-a619-5d02-f954-48094f770d19" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="253dddf2-9ab9-614f-03bc-cea23f342657" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="internationalization" locale="">
       <properties>
        <title><![CDATA[Internationalization & Localization Framework]]></title>
       </properties>
       <node identifier="a2dacc98-06e5-b3be-ce4e-463c32f46377" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="f8747f34-0be6-5f57-4c81-e0f94b938a62" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="internationalization-localization-framework">
<h1>Internationalization &amp; Localization Framework</h1>
<p>Internationalization (also known as i18n) is the process of designing software so that it
can be easily (i.e. without any source code modifications) adapted to various languages
and regions. Localization (also known as L10n) is the process of adapting
internationalized software for a specific language or region (e.g. by translating text,
formatting date or time).</p>
<div class="section" id="basics">
<h2>Basics</h2>
<div class="section" id="locale-class">
<h3>Locale class</h3>
<p>Instances of <tt class="docutils literal"><span class="pre">\TYPO3\Flow\I18n\Locale</span></tt> class are fundamental for the whole i18n and
L10n functionality. They are used to specify what language should be used for translation,
how date and time should be formatted, and so on. They can be treated as simple wrappers
for locale identifiers (like de or pl_PL). Many methods from the i18n framework accept
Locale objects as a optional parameter - if not provided, the default <tt class="docutils literal"><span class="pre">Locale</span></tt> instance
for a TYPO3 Flow installation will be used.</p>
<p>You can create a <tt class="docutils literal"><span class="pre">Locale</span></tt> object for any valid locale identifier (specified by RFC
4646), even if it is not explicitly meant to be supported by the current TYPO3 Flow
installation (i.e. there are no localized resources for this locale). This can be useful,
because TYPO3 Flow uses the <a class="reference internal" href="#common-locale-data-repository">Common Locale Data Repository</a> (CLDR), so each TYPO3 Flow installation
knows how to localize numbers, date, time and so on to almost any language and region on
the world.</p>
<p>Additionally TYPO3 Flow creates a special collection of available <tt class="docutils literal"><span class="pre">Locale</span></tt> objects. They are
automatically generated by scanning the filesystem for any localized resources. You can
use the i18n service API to obtain these verified <tt class="docutils literal"><span class="pre">Locale</span></tt> objects.</p>
<p>Locales are organized in a hierarchy. For example, en is a parent of en_US which is a
parent of en_US_POSIX. Thanks to the hierarchical relation resources can be
automatically shared between related resources. For example, when you request a foobar
item for en_US locale, and it does not exist, but the item does exist for the en
locale, it will be used.</p>
</div>
<div class="section" id="common-locale-data-repository">
<h3>Common Locale Data Repository</h3>
<p>TYPO3 Flow comes bundled with the CLDR (Common Locale Data Repository). It&#8217;s an Unicode
project with the aim to provide a systematic representation of data used for the
localization process (like formatting numbers or date and time). The i18n framework
provides a convenient API to access this data.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">For now TYPO3 Flow covers only a subset of the CLDR data. For example, only the Gregorian
calendar is supported for date and time formatting or parsing.</p>
</div>
</div>
<div class="section" id="detecting-user-locale">
<h3>Detecting user locale</h3>
<p>The <tt class="docutils literal"><span class="pre">Detector</span></tt> class can be used for matching one of the available locales with locales
accepted by the user. For example, you can provide the AcceptLanguage HTTP header to the
<tt class="docutils literal"><span class="pre">detectLocaleFromHttpHeader()</span></tt> method, which will analyze the header and return the best
matching <tt class="docutils literal"><span class="pre">Locale</span></tt> object. Also methods exist which accept a locale identifier or
template <tt class="docutils literal"><span class="pre">Locale</span></tt> object as a parameter and will return a best match.</p>
</div>
</div>
<div class="section" id="translating-text">
<h2>Translating text</h2>
<div class="section" id="translator-class">
<h3>Translator class</h3>
<p>The <tt class="docutils literal"><span class="pre">\TYPO3\Flow\I18n\Translator</span></tt> class is the central place for the translation
related functionality. Two translation modes can be used: translating by original label or
by ID. <tt class="docutils literal"><span class="pre">Translator</span></tt> also supports plural forms and placeholders.</p>
<p>For <tt class="docutils literal"><span class="pre">translateByOriginalLabel()</span></tt> you need to provide the original (untranslated, source)
message to be used for searching the translated message. It makes view templates more
readable.</p>
<p><tt class="docutils literal"><span class="pre">translateById()</span></tt> expects you to provide the systematic ID (like user.notRegistered)
of a message.</p>
<p>Both methods accept the following optional arguments:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> - array of values which will replace corresponding placeholders</li>
<li><tt class="docutils literal"><span class="pre">quantity</span></tt> - integer or decimal number used for finding the correct plural form</li>
<li><tt class="docutils literal"><span class="pre">sourceName</span></tt> - name of source catalog to read the translation from.</li>
<li><tt class="docutils literal"><span class="pre">packageKey</span></tt> of the package the source catalog is contained in.</li>
</ul>
<div class="admonition hint">
<p class="first admonition-title">Hint</p>
<p>Translation by label is very easy and readable, but if you ever want to change the
original text, you are in trouble. The use of IDs gives you more flexibility in that
respect.</p>
<p>Another issue: some labels do not contain their context, like &#8220;Name&#8221;. What is meant
here, a person&#8217;s name or a category label? This can be solved by using IDs that convey
the context (note that both could be &#8220;Name&#8221; in the final output):</p>
<ul class="simple">
<li>party.person.fullName</li>
<li>blog.category.name</li>
</ul>
<p class="last">We therefore recommend to use <tt class="docutils literal"><span class="pre">translationById()</span></tt> in your code.</p>
</div>
</div>
<div class="section" id="plural-forms">
<h3>Plural forms</h3>
<p>The <tt class="docutils literal"><span class="pre">Translator</span></tt> supports plural forms. English has only two plural forms: singular
and plurals but the CLDR defines six plural forms: zero, one, two, few, many,
other. Though english only uses one and other, different languages use more forms
(like one, few, and other for Polish) or less forms (like only other for
Japanese).</p>
<p>Sets of rules exist for every language defining which plural form should be used for a
particular quantity of a noun. If no rules match, the implicit other rule is assumed.
This is the only form existing in every language.</p>
<p>If the catalogs with translated messages define different translations for particular
plural forms, the correct form can be obtained by the <tt class="docutils literal"><span class="pre">Translator</span></tt> class. You just need
to provide the <tt class="docutils literal"><span class="pre">quantity</span></tt> parameter - an integer or decimal number which specifies the
quantity of a noun in the sentence being translated.</p>
</div>
<div class="section" id="placeholders">
<h3>Placeholders</h3>
<p>Translated messages (labels) can contain placeholders - special markers denoting he place
where to insert a particular value and optional configuration on how to format it.</p>
<p>The syntax of placeholders is very simple:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">id</span><span class="p">[,</span><span class="nx">formatter</span><span class="p">[,</span><span class="nx">attribute1</span><span class="p">[,</span><span class="nx">attribute2</span><span class="o">...</span><span class="p">]]]}</span>
</pre></div>
</div>
<p>where:</p>
<ul class="simple">
<li>id is an integer used to index the arguments to insert</li>
<li>formatter (optional) is a name of one of the <a class="reference internal" href="#formatters">Formatters</a> to use for formatting the argument
(if no formatter is given the provided argument will be cast to string)</li>
<li>attributes (optional) are strings directly passed to the <tt class="docutils literal"><span class="pre">Formatter</span></tt>. What they do
depends on the concrete <tt class="docutils literal"><span class="pre">Formatter</span></tt> which is being used, but generally they are used
to specify formatting more precisely.</li>
</ul>
<p>Some examples:</p>
<div class="highlight-none"><div class="highlight"><pre>{0}
{0,number,decimal}
{1,datetime,time,full}
</pre></div>
</div>
<ol class="arabic simple">
<li>The first example would output the first argument (indexing starts with 0), simply
string-casted.</li>
<li>The second example would use <tt class="docutils literal"><span class="pre">NumberFormatter</span></tt> (which would receive one attribute:
decimal) to format first argument.</li>
<li>The third example would output the second argument formatted by the
<tt class="docutils literal"><span class="pre">DatetimeFormatter</span></tt>, which would receive two attributes: time and full (they
stand for format type and length, accordingly).</li>
</ol>
</div>
<div class="section" id="formatters">
<h3>Formatters</h3>
<p>A <tt class="docutils literal"><span class="pre">Formatter</span></tt> is a class implementing the
<tt class="docutils literal"><span class="pre">\TYPO3\Flow\I18n\Formatter\FormatterInterface</span></tt>. A formatter can be used to format a
value of particular type: to convert it to string in locale-aware manner. For example, the
number 1234.567 would be formatted for French locale as 1 234,567. It is possible to
define more elements than just the position and symbols of separators.</p>
<p>Together with placeholders, formatters provide robust and easy way to place formatted
values in strings. But formatters can be used directly (i.e. not in placeholder, but in
your class by injection), providing you more control over the results of formatting.</p>
<p>The following formatters are available in TYPO3 Flow by default:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">\TYPO3\Flow\I18n\Formatter\NumberFormatter</span></tt></dt>
<dd>Formats integers or floats in order to display them as strings in localized manner.
Uses patterns obtained from CLDR for specified locale (pattern defines such elements
like minimal and maximal size of decimal part, symbol for decimal and group separator,
etc.). You can indirectly define a pattern by providing format type (first additional
attribute in placeholder) as decimal or percent. You can also manually set the
pattern if you use this class directly (i.e. not in placeholder, but in your class by
injection).</dd>
<dt><tt class="docutils literal"><span class="pre">\TYPO3\Flow\I18n\Formatter\DatetimeFormatter</span></tt></dt>
<dd>Formats date and / or time part of PHP <tt class="docutils literal"><span class="pre">\DateTime</span></tt> object. Supports most of very
extensive pattern syntax from CLDR. Has three format types: date, time, and
datetime. You can also manually set the pattern if you use this class directly.</dd>
</dl>
<p>The following parameters are generally accepted by Formatters&#8217; methods:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">locale</span></tt> - formatting result depends on the localization, which is defined by provided
<tt class="docutils literal"><span class="pre">Locale</span></tt> object</li>
<li><tt class="docutils literal"><span class="pre">formatLength</span></tt> (optional) - CLDR provides different formats for full, long,
medium, short, and default length</li>
</ul>
<p>Every formatter provides few methods, one for each format type. For example,
<tt class="docutils literal"><span class="pre">NumberFormatter</span></tt> has methods <tt class="docutils literal"><span class="pre">formatDecimalNumber()</span></tt> - for formatting decimals and
integers - and <tt class="docutils literal"><span class="pre">formatPercentNumber()</span></tt> - for percentage (parsed value is automatically
multiplied by 100).</p>
<p>You can create your own formatter class which will be available for use in
placeholders. Just make sure your class implements the
<tt class="docutils literal"><span class="pre">\TYPO3\Flow\I18n\Formatter\FormatterInterface</span></tt>. Use the fully qualified class name,
without the leading backslash, as formatter name:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="nx">Acme\Foobar\Formatter\SampleFormatter</span><span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="translation-providers">
<h3>Translation Providers</h3>
<p>Translation providers are classes implementing the <tt class="docutils literal"><span class="pre">TranslationProviderInterface</span></tt>. They
are used by the <tt class="docutils literal"><span class="pre">Translator</span></tt> class for accessing actual data from translation files
(message catalogs).</p>
<p>A <tt class="docutils literal"><span class="pre">TranslationProvider</span></tt>&#8216;s task is to read (understand) the concrete format of catalogs.
TYPO3 Flow comes with one translation provider by default: the <tt class="docutils literal"><span class="pre">XliffTranslationProvider</span></tt>. It
supports translations stored in <a class="reference internal" href="#xliff-message-catalogs">XLIFF message catalogs</a>, supports plural forms, and
both translation modes.</p>
<p>You can create and use your own translation provider which reads the file format you need,
like PO, YAML or even PHP arrays. Just implement the interface mentioned earlier and
use the Objects.yaml configuration file to set your translation provider to be injected
into the <tt class="docutils literal"><span class="pre">Translator</span></tt>.</p>
</div>
<div class="section" id="fluid-viewhelper">
<h3>Fluid ViewHelper</h3>
<p>There is a <tt class="docutils literal"><span class="pre">TranslateViewHelper</span></tt> for Fluid. It covers all <tt class="docutils literal"><span class="pre">Translator</span></tt>
features: it supports both translation modes, plural forms, and placeholders.
In the simplest case, the <tt class="docutils literal"><span class="pre">TranslateViewHelper</span></tt> can be used like this:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:translate</span> <span class="na">id=</span><span class="s">&quot;label.id&quot;</span><span class="nt">/&gt;</span>
</pre></div>
</div>
<p>It will output the translation with the ID &#8220;label.id&#8221; (corresponding to the
trans-unit id in XLIFF files).</p>
<p>The <tt class="docutils literal"><span class="pre">TranslateViewHelper</span></tt> also accepts all optional parameters the <tt class="docutils literal"><span class="pre">Translator</span></tt> does.</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:translate</span> <span class="na">id=</span><span class="s">&quot;label.id&quot;</span> <span class="na">source=</span><span class="s">&quot;someLabelsCatalog&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{0: &#39;foo&#39;, 1: &#39;99.9&#39;}&quot;</span><span class="nt">/&gt;</span>
</pre></div>
</div>
<p>It will translate the label using someLabelsCatalog. Then it will insert string casted
value &#8220;foo&#8221; in place of {0} and localized formatted 99.9 in place of {1,number}.</p>
<p>Translation by label is also possible:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:translate&gt;</span>Unregistered User<span class="nt">&lt;/f:translate&gt;</span>
</pre></div>
</div>
<p>It will output the translation assigned to user.unregistered key.</p>
<p>When the translation for particular label or ID is not found, value placed between
<tt class="docutils literal"><span class="pre">&lt;f:translate&gt;</span></tt> and <tt class="docutils literal"><span class="pre">&lt;/f:translate&gt;</span></tt> tags will be displayed.</p>
</div>
</div>
<div class="section" id="localizing-validation-error-messages">
<h2>Localizing validation error messages</h2>
<p>Flow comes with a bundle of translations for all basic validator error messages. To make use
of these translations, you have to adjust your templates to make use of the <tt class="docutils literal"><span class="pre">TranslateViewHelper</span></tt>.</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:form.validationResults</span> <span class="na">for=</span><span class="s">&quot;{property}&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;f:for</span> <span class="na">each=</span><span class="s">&quot;{validationResults.errors}&quot;</span> <span class="na">as=</span><span class="s">&quot;error&quot;</span><span class="nt">&gt;</span>
              {error -&gt; f:translate(key: error.code, arguments: error.arguments, package: &#39;TYPO3.Flow&#39;, source: &#39;ValidationErrors&#39;)}
      <span class="nt">&lt;/f:for&gt;</span>
<span class="nt">&lt;/f:form.validationResults&gt;</span>
</pre></div>
</div>
<p>If you want to change the validation messages, you can create your own translation bundles and adjust
the package and source parameters of the TranslateViewHelper at this place. See the ValidationErrors.xlf
files in the Resources/Private/Translations subfolders for reference.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">If you want to have different messages depending on the property, for example if you want to
be more elaborate about specific validation errors depending on context, you could add the property
to the translate key and provide your own translations.</p>
</div>
</div>
<div class="section" id="localizing-resources">
<h2>Localizing resources</h2>
<p>Resources can be localized easily in TYPO3 Flow. The only thing you need to do is to put a
locale identifier just before the extension. For example, foobar.png can be localized as
foobar.en.png, foobar.de_DE.png, and so on. This works with any resource type when
working with the TYPO3 Flow Resource Framework.</p>
<p>Just use the <tt class="docutils literal"><span class="pre">getLocalizedFilename()</span></tt> of the i18n <tt class="docutils literal"><span class="pre">Service</span></tt> singleton to obtain a
localized resource path by providing a path to the non-localized file and a <tt class="docutils literal"><span class="pre">Locale</span></tt>
object. The method will return a path to the best matching localized version of the file.</p>
<div class="section" id="id1">
<h3>Fluid ViewHelper</h3>
<p>The <tt class="docutils literal"><span class="pre">ResourceViewHelper</span></tt> will by default use locale-specific versions of any resources
you ask for. If you want to avoid that you can disable that:</p>
<div class="highlight-xml"><div class="highlight"><pre>{f:uri.resource(path: &#39;header.png&#39;, localize: 0)}
</pre></div>
</div>
</div>
</div>
<div class="section" id="validating-and-parsing-input">
<h2>Validating and parsing input</h2>
<div class="section" id="validators">
<h3>Validators</h3>
<p>A validator is a class implementing <tt class="docutils literal"><span class="pre">ValidatorInterface</span></tt> and is used by the TYPO3 Flow
Validation Framework for assuring correctness of user input. TYPO3 Flow provides two validators
that utilize i18n functionality:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Validation\Validator\NumberValidator</span></tt></dt>
<dd>Validates decimal and integer numbers provided as strings (e.g. from user&#8217;s input).</dd>
<dt><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Validation\Validator\DateTimeValidator</span></tt></dt>
<dd>Validates date, time, or both date and time provided as strings.</dd>
</dl>
<p>Both validators accept the following options: locale, strictMode, formatType,
formatLength.</p>
<p>These validators are working on top of the parsers API. Please refer to the <a class="reference internal" href="#parsers">Parsers</a>
documentation for details about functionality and accepted options.</p>
</div>
<div class="section" id="parsers">
<h3>Parsers</h3>
<p>A Parsers&#8217; task is to read user input of particular type (e.g. number, date, time), with
respect to the localization used and return it in a form that can be further processed.
The following parsers are available in TYPO3 Flow:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">\TYPO3\Flow\I18n\Parser\NumberParser</span></tt></dt>
<dd>Accepts strings with integer or decimal number and converts it to a float.</dd>
<dt><tt class="docutils literal"><span class="pre">\TYPO3\Flow\I18n\Parser\DatetimeParser</span></tt></dt>
<dd>Accepts strings with date, time or both date and time and returns an array with date /
time elements (like day, hour, timezone, etc.) which were successfully recognized.</dd>
</dl>
<p>The following parameters are generally accepted by parsers&#8217; methods:</p>
<ul class="simple">
<li>locale - formatting results depend on the localization, which is defined by the
provided <tt class="docutils literal"><span class="pre">Locale</span></tt> object</li>
<li>formatLength - CLDR provides different formats for full, long, medium, short,
and default length</li>
<li>strictMode - whether to work in strict or lenient mode</li>
</ul>
<p>Parsers are complement to <a class="reference internal" href="#formatters">Formatters</a>. Every parser provides a few methods, one for each
format type. Additionally each parser has a method which accepts a custom format
(pattern). You can provide your own pattern and it will be used for matching input. The
syntax of patterns depends on particular parser and is the same for a corresponding
formatter (e.g. <tt class="docutils literal"><span class="pre">NumberParser</span></tt> and <tt class="docutils literal"><span class="pre">NumberFormatter</span></tt> support the same pattern syntax).</p>
<p>Parsers can work in two modes: strict and lenient. In strict mode, the parsed value
has to conform the pattern exactly (even literals are important). In lenient mode, the
pattern is only a &#8220;base&#8221;. Everything that can be ignored will be ignored, some
simplifications in the pattern are done. The parser tries to do it&#8217;s best to read the
value.</p>
</div>
</div>
<div class="section" id="xliff-message-catalogs">
<h2>XLIFF message catalogs</h2>
<p>The primary source of translations in TYPO3 Flow are XLIFF message catalogs. <a class="reference external" href="http://en.wikipedia.org/wiki/XLIFF">XLIFF</a>, the XML Localisation Interchange File Format is
an <a class="reference external" href="https://www.oasis-open.org/committees/xliff">OASIS-blessed</a> standard format for
translations.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>In a nutshell an XLIFF document contains one or more <tt class="docutils literal"><span class="pre">&lt;file&gt;</span></tt> elements. Each file
element usually corresponds to a source (file or database table) and contains the source
of the localizable data. Once translated, the corresponding localized data for one, and
only one, locale is added.</p>
<p class="last">Localizable data are stored in <tt class="docutils literal"><span class="pre">&lt;trans-unit&gt;</span></tt> elements. The <tt class="docutils literal"><span class="pre">&lt;trans-unit&gt;</span></tt> contains
a <tt class="docutils literal"><span class="pre">&lt;source&gt;</span></tt> element to store the source text and a (non-mandatory) <tt class="docutils literal"><span class="pre">&lt;target&gt;</span></tt>
element to store the translated text.</p>
</div>
<div class="section" id="file-locations-and-naming">
<h3>File locations and naming</h3>
<p>Each TYPO3 Flow package may contain any number of XLIFF files. The location for these files is
the Resources/Private/Translations folder. The files there can be named at will,
but keep in mind that Main is the default catalog name. The target locale is then added
as a directory hierarchy in between. The minimum needed to provide message catalogs for the
en and de locales thus would be:</p>
<div class="highlight-text"><div class="highlight"><pre>Resources/
  Private/
    Translations/
      en/
        Main.xlf
      de/
        Main.xlf
</pre></div>
</div>
</div>
<div class="section" id="xliff-file-creation">
<h3>XLIFF file creation</h3>
<p>For now there are no TYPO3 Flow tools to aid in creation of the initial XLIFF files. So you
need to write them yourself. A minimal XLIFF file looks like this:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="nt">&lt;xliff</span> <span class="na">version=</span><span class="s">&quot;1.2&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;urn:oasis:names:tc:xliff:document:1.2&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;file</span> <span class="na">original=</span><span class="s">&quot;&quot;</span> <span class="na">source-language=</span><span class="s">&quot;da&quot;</span> <span class="na">target-language=</span><span class="s">&quot;fr&quot;</span> <span class="na">datatype=</span><span class="s">&quot;plaintext&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;body&gt;</span>
                        <span class="nt">&lt;trans-unit</span> <span class="na">id=</span><span class="s">&quot;danish.celebrity&quot;</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;source&gt;</span>Skarhøj<span class="nt">&lt;/source&gt;</span>
                                <span class="nt">&lt;target&gt;</span>Sarkosh<span class="nt">&lt;/target&gt;</span>
                        <span class="nt">&lt;/trans-unit&gt;</span>
                <span class="nt">&lt;/body&gt;</span>
        <span class="nt">&lt;/file&gt;</span>
<span class="nt">&lt;/xliff&gt;</span>
</pre></div>
</div>
<p>If possible you should set up your editor to use the XLIFF 1.2 strict schema to validate
the files you are working on.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>When using <tt class="docutils literal"><span class="pre">translationById()</span></tt> the framework will check the catalog&#8217;s source language
against the currently needed locale and use the <tt class="docutils literal"><span class="pre">&lt;source&gt;</span></tt> element if no <tt class="docutils literal"><span class="pre">&lt;target&gt;</span></tt>
element is found. This eliminates the need to duplicate messages in catalogs where
source and target language are the same.</p>
<p class="last">But you may still ask yourself <em>do I really need to duplicate all the strings
in XLIFF files?</em> The answer is you should. Using target allows to fix typos
or change wording without breaking translation by label for all other languages.</p>
</div>
<div class="admonition-how-to-create-meaningful-xliff-ids admonition">
<p class="first admonition-title">How to create meaningful XLIFF ids</p>
<p>When using the recommended way of translating by id, it is even more important to use
meaningful identifiers. Our suggestion is to group identifiers and use dot notation
to build a hierarchy that is meaningful and intuitive:</p>
<div class="last highlight-php"><div class="highlight"><pre><span class="nx">settings</span><span class="o">.</span><span class="nx">account</span><span class="o">.</span><span class="nx">keepLoggedIn</span>
<span class="nx">settings</span><span class="o">.</span><span class="nx">display</span><span class="o">.</span><span class="nx">compactControls</span>
<span class="nx">book</span><span class="o">.</span><span class="nx">title</span>
<span class="nx">book</span><span class="o">.</span><span class="nx">author</span>
<span class="err">…</span>
</pre></div>
</div>
</div>
<p>Labels may contain placeholders to be replaced with given arguments during
output. Earlier we saw an example use of the TranslateViewHelper:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;f:translate</span> <span class="na">id=</span><span class="s">&quot;label.id&quot;</span> <span class="na">arguments=</span><span class="s">&quot;{0: &#39;foo&#39;, 1: &#39;99.9&#39;}&quot;</span><span class="nt">/&gt;</span>
</pre></div>
</div>
<p>The corresponding XLIFF files will contain placeholders in the source and target strings:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;trans-unit</span> <span class="na">id=</span><span class="s">&quot;some.label&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;source&gt;</span>Untranslated {0} and {1,number}<span class="nt">&lt;/source&gt;</span>
        <span class="nt">&lt;target&gt;</span>Übersetzung mit {1,number} und {0}<span class="nt">&lt;/target&gt;</span>
<span class="nt">&lt;/trans-unit&gt;</span>
</pre></div>
</div>
<p>As you can see, placeholders may be reordered in translations if needed.</p>
</div>
<div class="section" id="plural-forms-in-xliff-files">
<h3>Plural forms in XLIFF files</h3>
<p>Plural forms are also supported in XLIFF. The following example defines a string
in two forms that will be used depending on the count:</p>
<div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;group</span> <span class="na">id=</span><span class="s">&quot;some.label&quot;</span> <span class="na">restype=</span><span class="s">&quot;x-gettext-plurals&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;trans-unit</span> <span class="na">id=</span><span class="s">&quot;some.label[0]&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;source&gt;</span>This is only {0} item.<span class="nt">&lt;/source&gt;</span>
                <span class="nt">&lt;target&gt;</span>Dies ist nur {0} Element.<span class="nt">&lt;/target&gt;</span>
        <span class="nt">&lt;/trans-unit&gt;</span>
        <span class="nt">&lt;trans-unit</span>  <span class="na">id=</span><span class="s">&quot;some.label[1]&quot;</span><span class="nt">&gt;</span>
                <span class="nt">&lt;source&gt;</span>These are {0} items.<span class="nt">&lt;/source&gt;</span>
                <span class="nt">&lt;target&gt;</span>Dies sind {0} Elemente.<span class="nt">&lt;/target&gt;</span>
        <span class="nt">&lt;/trans-unit&gt;</span>
<span class="nt">&lt;/group&gt;</span>
</pre></div>
</div>
<p>Please be aware that the number of the available plural forms depends on the language!
If you want to find out which plural forms are available for a locale you can have a
look at TYPO3.Flow/Resources/Private/I18n/CLDR/Sources/supplemental/plurals.xml</p>
</div>
<div class="section" id="xliff-file-translation">
<h3>XLIFF file translation</h3>
<p>To translate XLIFF files you can use any text editor, but translation is a lot easier
using one the available translation tools. To name two of them: Virtaal is a free and
open-source tool for offline use and Pootle (both from the <a class="reference external" href="http://toolkit.translatehouse.org">Translate Toolkit</a> project) is a web-based
translation server.</p>
<p>XLIFF can also easily be converted to PO file format, edited by well known PO editors
(like Poedit, which supports plural forms), and converted back to XLIFF format. The
xliff2po and po2xliff tools from the Translate Toolkit project can convert without
information loss.</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="5c2f7f74-d898-c3dd-7515-4c4f5bb36b85" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="3b9b76d7-3c7a-a850-4f4f-14d643fd9733" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="errorandexceptionhandling" locale="">
       <properties>
        <title>Error and Exception Handling</title>
       </properties>
       <node identifier="1341a30c-f438-750f-887b-476686ed89fd" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="39dd6adc-8eec-f607-d062-eb8621659e43" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="error-and-exception-handling">
<h1>Error and Exception Handling</h1>
<p>TYPO3 Flow reports applications errors by throwing specific exceptions. Exceptions are
structured in a hierarchy which is based on base exception classes for each
component. By default, PHP catchable errors, warnings and notices are automatically
converted into exceptions in order to simplify the error handling.</p>
<p>In case an exception cannot be handled by the application, a central exception
handler takes over to display or log the error and shut down the application
gracefully.</p>
<div class="section" id="throwing-exceptions">
<h2>Throwing Exceptions</h2>
<p>Applications should throw exceptions which are based on one of the exception classes
provided by TYPO3 Flow. Each exception should be identified by a unique error code which
is, by convention, the unix timestamp of the point in time when the developer
implemented the code throwing the exception:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nv">$somethingWentReallyWrong</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">SomethingWentWrongException</span><span class="p">(</span><span class="s1">&#39;An exception message&#39;</span><span class="p">,</span> <span class="mi">1347145643</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Exceptions can contain an HTTP status code which is sent as a corresponding response
header. The status code is simply set by defining a property with the respective
value assigned:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">SomethingWasNotFoundException</span> <span class="k">extends</span> <span class="nx">\TYPO3\Flow\Exception</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd"> * @var integer</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$statusCode</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>

<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="exception-handlers">
<h2>Exception Handlers</h2>
<p>TYPO3 Flow comes with two different exception handlers:</p>
<ul class="simple">
<li>the <tt class="docutils literal"><span class="pre">DebugExceptionHandler</span></tt> displays a big amount of background information,
including a call stack, in order to simplify debugging of the exception cause.
The output might contain sensitive data because method arguments are displayed
in the backtrace.</li>
<li>the <tt class="docutils literal"><span class="pre">ProductionExceptionHandler</span></tt> displays a neutral message stating that an
error occurred. Apart from a reference code no information about the nature of
the exception or any parameters is disclosed.</li>
</ul>
<p>By default, the <tt class="docutils literal"><span class="pre">DebugExceptionHandler</span></tt> is used in Development context and the
<tt class="docutils literal"><span class="pre">ProductionExceptionHandler</span></tt> is in charge in the Production context.</p>
<p>The exception handler to be used can be configured through an entry in Settings.yaml:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">error</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">exceptionHandler</span><span class="p-Indicator">:</span>
        <span class="c1"># Defines the global, last-resort exception handler.</span>
        <span class="c1"># The specified class must implement \TYPO3\Flow\Error\ExceptionHandlerInterface</span>
        <span class="l-Scalar-Plain">className</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3\Flow\Error\ProductionExceptionHandler</span>
</pre></div>
</div>
</div>
<div class="section" id="reference-code">
<h2>Reference Code</h2>
<p>In a production context, the exception handler should, for security reasons, not
reveal any information about the inner workings and data of the application. In
order to be able to track down the root of the problem, TYPO3 Flow generates a unique
reference code when an exception is thrown. It is safe to display this reference
code to the user who can, in turn, contact the administrators of the application
to report the error. At the server side, detailed information about the exception
is stored in a file named after the reference code.</p>
<p>You will find report files for exceptions thrown in <tt class="docutils literal"><span class="pre">Data/Logs/Exceptions/</span></tt>. In
some rare cases though, when TYPO3 Flow is not even able to write the respective log
file, no details about the exception can be provided.</p>
<div class="figure">
<img alt="Exception screen with reference code" class="screenshot-fullsize" src="_Resources/Persistent/edd505623325f4bcf46a0b6b803a4c51800e41c7/Error-ReferenceCode.png" style="width: 624px" />
<p class="caption">Exception screen with reference code</p>
</div>
</div>
<div class="section" id="error-handler">
<h2>Error Handler</h2>
<p>TYPO3 Flow provides a central error handler which jumps in if a PHP error, warning or
notice occurs. Instead of displaying or logging the error right away, it is
transformed into an <tt class="docutils literal"><span class="pre">ErrorException</span></tt>.</p>
<p>A configuration option in Settings.yaml allows for deciding which error levels
should be converted into exceptions. All other errors are silently ignored:</p>
<div class="highlight-yaml"><div class="highlight"><pre>TYPO3:
  Flow:
    error:
      errorHandler:
        # Defines which errors should result in an exception thrown - all other error
        # levels will be silently ignored. Only errors that can be handled in an
        # user-defined error handler are affected, of course.
        exceptionalErrors: [%E_USER_ERROR%, %E_RECOVERABLE_ERROR%]
</pre></div>
</div>
</div>
<div class="section" id="custom-error-views">
<h2>Custom Error Views</h2>
<p>In order to allow customized, specifically looking error templates; even depending on the
nature of an error; Flow provides configurable rendering groups. Each such rendering group
holds information about what template to use, what text information should be provided,
and finally, what HTTP status codes or what Exception class names each rendering group is
responsible for.</p>
<p>An example configuration could look like in the following Settings.yaml excerpt:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="l-Scalar-Plain">TYPO3</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">Flow</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">error</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">exceptionHandler</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">defaultRenderingOptions</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>

        <span class="l-Scalar-Plain">renderingGroups</span><span class="p-Indicator">:</span>

          <span class="l-Scalar-Plain">notFoundExceptions</span><span class="p-Indicator">:</span>
            <span class="l-Scalar-Plain">matchingStatusCodes</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">404</span><span class="p-Indicator">]</span>
            <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
              <span class="l-Scalar-Plain">templatePathAndFilename</span><span class="p-Indicator">:</span> <span class="s">&#39;resource://TYPO3.Flow/Private/Templates/Error/Default.html&#39;</span>
              <span class="l-Scalar-Plain">variables</span><span class="p-Indicator">:</span>
                <span class="l-Scalar-Plain">errorDescription</span><span class="p-Indicator">:</span> <span class="s">&#39;Sorry,</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">page</span><span class="nv"> </span><span class="s">you</span><span class="nv"> </span><span class="s">requested</span><span class="nv"> </span><span class="s">was</span><span class="nv"> </span><span class="s">not</span><span class="nv"> </span><span class="s">found.&#39;</span>

          <span class="l-Scalar-Plain">databaseConnectionExceptions</span><span class="p-Indicator">:</span>
            <span class="l-Scalar-Plain">matchingExceptionClassNames</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&#39;TYPO3\Flow\Persistence\Doctrine\DatabaseConnectionException&#39;</span><span class="p-Indicator">]</span>
            <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
              <span class="l-Scalar-Plain">templatePathAndFilename</span><span class="p-Indicator">:</span> <span class="s">&#39;resource://TYPO3.Flow/Private/Templates/Error/Default.html&#39;</span>
              <span class="l-Scalar-Plain">variables</span><span class="p-Indicator">:</span>
                <span class="l-Scalar-Plain">errorDescription</span><span class="p-Indicator">:</span> <span class="s">&#39;Sorry,</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">database</span><span class="nv"> </span><span class="s">connection</span><span class="nv"> </span><span class="s">couldn</span><span class="se">&#39;&#39;</span><span class="s">t</span><span class="nv"> </span><span class="s">be</span><span class="nv"> </span><span class="s">established.&#39;</span>
</pre></div>
</div>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">defaultRenderingOptions</span></tt>:</dt>
<dd>this carries default options which can be overridden by the <tt class="docutils literal"><span class="pre">options</span></tt> key of a particular
rendering group; see below.</dd>
</dl>
<p><tt class="docutils literal"><span class="pre">notFoundExceptions</span></tt> and <tt class="docutils literal"><span class="pre">databaseConnectionExceptions</span></tt> are freely chosen, descriptive
key names, their actual naming has no further impressions.</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">matchingStatusCodes</span></tt>:</dt>
<dd>an array of integer values what HTTP status codes the rendering group is for</dd>
<dt><tt class="docutils literal"><span class="pre">matchingExceptionClassNames</span></tt>:</dt>
<dd>an array of string values what Exception types the rendering group is for. Keep in mind that, as always
the class name must not contain a leading slash, but must be fully qualified, of course.</dd>
<dt><tt class="docutils literal"><span class="pre">options</span></tt>:</dt>
<dd><dl class="first last docutils">
<dt><tt class="docutils literal"><span class="pre">templatePathAndFilename</span></tt>:</dt>
<dd>a resource string to the (Fluid) filename to use</dd>
<dt><tt class="docutils literal"><span class="pre">layoutRootPath</span></tt>:</dt>
<dd>a resource string to the layout root path</dd>
<dt><tt class="docutils literal"><span class="pre">partialRootPath</span></tt>:</dt>
<dd>a resource string to the partial root path</dd>
<dt><tt class="docutils literal"><span class="pre">format</span></tt>:</dt>
<dd>the format to use, for example <tt class="docutils literal"><span class="pre">html</span></tt> or <tt class="docutils literal"><span class="pre">json</span></tt>, if appropriate</dd>
<dt><tt class="docutils literal"><span class="pre">variables</span></tt></dt>
<dd>an array of additional, arbitrary variables which can be accessed in the template</dd>
</dl>
</dd>
</dl>
<p>The following variables will be assigned to the template an can be used there:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">exception</span></tt>:</dt>
<dd>the Exception object which was thrown</dd>
<dt><tt class="docutils literal"><span class="pre">renderingOptions</span></tt>:</dt>
<dd>the complete rendering options array, as defined in the settings. This is a merge
of <tt class="docutils literal"><span class="pre">TYPO3.Flow.error.exceptionHandler.defaultRenderingOptions</span></tt> and the <tt class="docutils literal"><span class="pre">options</span></tt>
array of the particular rendering group</dd>
<dt><tt class="docutils literal"><span class="pre">statusCode</span></tt>:</dt>
<dd>the integer value of the HTTP status code which has been thrown (<tt class="docutils literal"><span class="pre">404</span></tt>, <tt class="docutils literal"><span class="pre">503</span></tt> etc.)</dd>
<dt><tt class="docutils literal"><span class="pre">statusMessage</span></tt>:</dt>
<dd>the HTTP status message equivalent,  for example <tt class="docutils literal"><span class="pre">Not</span> <span class="pre">Found</span></tt>, <tt class="docutils literal"><span class="pre">Service</span> <span class="pre">Unavailable</span></tt> etc.
If no matching status message could be found, this value is <tt class="docutils literal"><span class="pre">Unknown</span> <span class="pre">Status</span></tt>.</dd>
<dt><tt class="docutils literal"><span class="pre">referenceCode</span></tt>:</dt>
<dd>the reference code of the exception, if applicable.</dd>
</dl>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="7a390f2e-c46b-1160-1f8e-ed90cc38bd39" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="6a516109-92aa-0a26-d5f4-ca1e1fb6298e" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="logginganddebugging" locale="">
       <properties>
        <title>Logging and Debugging (to be written)</title>
       </properties>
       <node identifier="1d297d34-987d-6abb-d841-2fde897c29a0" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="74f4dd93-4181-d6dc-547e-2cc086b5030a" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="logging-and-debugging-to-be-written">
<h1>Logging and Debugging (to be written)</h1>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="0e0f1b88-a5e5-375c-47fa-d584de6af7a6" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="77eb7bf4-3768-9ad4-e2f0-e627107fd24a" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="signalsandslots" locale="">
       <properties>
        <title>Signals and Slots</title>
       </properties>
       <node identifier="99086a2f-c80c-5345-73c6-416b442092fa" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="d6214b9b-1a21-9d61-6d69-352e53300c2b" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="signals-and-slots">
<h1>Signals and Slots</h1>
<p>The concept of signals and slots has been introduced by the Qt toolkit and allows
for easy implementation of the Observer pattern in software.</p>
<p>A signal, which contains event information as it makes sense in the case at hand, can be
emitted (sent) by any part of the code and is received by one or more slots, which can be
any function in TYPO3 Flow. Almost no registration, deregistration or invocation code need be
written, because TYPO3 Flow automatically generates the needed infrastructure using AOP.</p>
<div class="section" id="defining-and-using-signals">
<h2>Defining and Using Signals</h2>
<p>To define a signal, simply create a method stub which starts with <tt class="docutils literal"><span class="pre">emit</span></tt> and
annotate it with a <tt class="docutils literal"><span class="pre">Signal</span></tt> annotation:</p>
<p>Example: Definition of a signal in PHP</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @param Comment $comment</span>
<span class="sd"> * @return void</span>
<span class="sd"> * @Flow\Signal</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="k">function</span> <span class="nf">emitCommentCreated</span><span class="p">(</span><span class="nx">Comment</span> <span class="nv">$comment</span><span class="p">)</span> <span class="p">{}</span>
</pre></div>
</div>
<p>The method signature can be freely defined to fit the needs of the event that is to be
signalled. Whatever parameters are defined will be handed over to any slots
listening to that signal.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The <tt class="docutils literal"><span class="pre">Signal</span></tt> annotation is picked up by the AOP framework and the method is filled
with implementation code as needed.</p>
</div>
<p>To emit a signal in your code, simply call the signal method whenever it makes sense,
like in this example:</p>
<p>Example: Emitting a Signal</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @param Comment $newComment</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">createAction</span><span class="p">(</span><span class="nx">Comment</span> <span class="nv">$newComment</span><span class="p">)</span> <span class="p">{</span>
        <span class="o">...</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">emitCommentCreated</span><span class="p">(</span><span class="nv">$newComment</span><span class="p">);</span>
        <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The signal will be dispatched to all slots listening to it.</p>
</div>
<div class="section" id="defining-slots">
<h2>Defining Slots</h2>
<p>Basically any method of any class can be used as a slot, even if never written
specifically for being a slot. The only requirement is a matching signature between signal
and slot, so that the parameters passed to the signal can be handed over to the slot
without problems. The following shows a slot, as you can see it differs in no way from any
non-slot method.</p>
<p>Example: A method that can be used as a slot</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>

<span class="sd"> * @param Comment $comment</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">sendNewCommentNotification</span><span class="p">(</span><span class="nx">Comment</span> <span class="nv">$comment</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$mail</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\TYPO3\SwiftMailer\Message</span><span class="p">();</span>
        <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">setFrom</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;john@doe.org &#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">))</span>
                <span class="o">-&gt;</span><span class="na">setTo</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;karsten@typo3.org &#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Karsten Dambekalns&#39;</span><span class="p">))</span>
                <span class="o">-&gt;</span><span class="na">setSubject</span><span class="p">(</span><span class="s1">&#39;New comment&#39;</span><span class="p">)</span>
                <span class="o">-&gt;</span><span class="na">setBody</span><span class="p">(</span><span class="nv">$comment</span><span class="o">-&gt;</span><span class="na">getContent</span><span class="p">())</span>
                <span class="o">-&gt;</span><span class="na">send</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Depending on the wiring there might be an extra parameter being given to the slot that
contains the class name and method name of the signal emitter, separated by <tt class="docutils literal"><span class="pre">::</span></tt>.</p>
</div>
<div class="section" id="wiring-signals-and-slots-together">
<h2>Wiring Signals and Slots Together</h2>
<p>Which slot is actually listening for which signal is configured (&#8220;wired&#8221;) in the bootstrap
code of a package. Any package can of course freely wire its own signals to its own
slots, but also wiring any other signal to any other slot is possible. You should be a
little careful when wiring your own or even other package&#8217;s signals to slots in other
packages, as the results could be non-obvious to someone using your package.</p>
<p>When TYPO3 Flow initializes, it runs the <tt class="docutils literal"><span class="pre">boot()</span></tt> method in a package&#8217;s <tt class="docutils literal"><span class="pre">Package</span></tt> class. This
is the place to wire signals to slots as needed for your package:</p>
<p>Example: Wiring signals and slots together</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Boot the package. We wire some signals to slots here.</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Flow\Core\Bootstrap $bootstrap The current bootstrap</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">boot</span><span class="p">(</span><span class="nx">\TYPO3\Flow\Core\Bootstrap</span> <span class="nv">$bootstrap</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$dispatcher</span> <span class="o">=</span> <span class="nv">$bootstrap</span><span class="o">-&gt;</span><span class="na">getSignalSlotDispatcher</span><span class="p">();</span>
        <span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">(</span>
                <span class="s1">&#39;Some\Package\Controller\CommentController&#39;</span><span class="p">,</span> <span class="s1">&#39;commentCreated&#39;</span><span class="p">,</span>
                <span class="s1">&#39;Some\Package\Service\Notification&#39;</span><span class="p">,</span> <span class="s1">&#39;sendNewCommentNotification&#39;</span>
        <span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>The first pair of parameters given to <tt class="docutils literal"><span class="pre">connect()</span></tt> identifies the signal you want to
wire, the second pair the slot.</p>
<p>The signal is identified by the class name and the signal name, which is the method name without
<tt class="docutils literal"><span class="pre">emit</span></tt>. In the above example, the method which triggers the <tt class="docutils literal"><span class="pre">commentCreated</span></tt> signal is called
<tt class="docutils literal"><span class="pre">emitCommentCreated()</span></tt>.</p>
<p>The slot is identified by the class name and method name which should be called. If the
method name starts with <tt class="docutils literal"><span class="pre">::</span></tt> the slot will be called statically.</p>
<p>An alternative way of specifying the slot is to give an object instead of a class name to
the <tt class="docutils literal"><span class="pre">connect</span></tt> method. This can also be used to pass a <tt class="docutils literal"><span class="pre">Closure</span></tt> instance to react to
signals, in this case the slot method name can be omitted.</p>
<p>There is one more parameter available: <tt class="docutils literal"><span class="pre">$passSignalInformation</span></tt>. It controls
whether or not the signal information (class name and method name of the signal
emitter, separated by <tt class="docutils literal"><span class="pre">::</span></tt>) should be passed to the slot as last parameter.
<tt class="docutils literal"><span class="pre">$passSignalInformation</span></tt> is <tt class="docutils literal"><span class="pre">TRUE</span></tt> by default.</p>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="d0f82210-e2e6-5647-aa10-84a72713cf20" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="81204592-6f63-6fdb-b754-cf2c07b6b84b" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="reflection" locale="">
       <properties>
        <title>Reflection</title>
       </properties>
       <node identifier="efe23f18-3a73-d7fa-ad3b-8cdafcf59daf" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="baa366f1-a77e-700c-0ca4-6176b9c4e7dd" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="reflection">
<h1>Reflection</h1>
<p>Reflection describes the practice to retrieve information about a program
itself and it&#8217;s internals during runtime. It usually also allows to modify
behavior and properties.</p>
<p>PHP already provides reflection capabilities, using them it&#8217;s possible to, for
example, change the accessibility of properties, e.g. from <tt class="docutils literal"><span class="pre">protected</span></tt> to
<tt class="docutils literal"><span class="pre">public</span></tt>, and access methods even though access to them is restricted.</p>
<p>Additionally it&#8217;s possible to gain information about what arguments a method
expects, and whether these are required or optional.</p>
<div class="section" id="reflection-in-typo3-flow">
<h2>Reflection in TYPO3 Flow</h2>
<p>TYPO3 Flow provides a powerful extension to PHP&#8217;s own basic reflection
functionality, not only adding more capabilities, but also speeding up
reflection massively. It makes heavy use of the annotations (tags) found in the
documentation blocks, which is another important reason why you should exercise care
about a correct formatting and respecting some rules when applying these.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A specific description about these DocComment formatting requirements is
available in the <cite>Coding Guidelines</cite>.</p>
</div>
<p>The reflection of TYPO3 Flow is handled via the Reflection Service which can be
injected as usual.</p>
<p>Example: defining and accessing simple reflection information</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * This is the description of the class.</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">CustomizedGoodsOrder</span> <span class="k">extends</span> <span class="nx">AbstractOrder</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @var \Magrathea\Erp\Service\OrderNumberGenerator</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$orderNumberGenerator</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @var \DateTime</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$timestamp</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * The customer who placed this order</span>
<span class="sd">         * @var \Magrathea\Erp\Domain\Model\Customer</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$customer</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * The order number, for example ME-3020-BB</span>
<span class="sd">         * @var string</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$orderNumber</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @param \Magrathea\Erp\Domain\Model\Customer $customer;</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Customer</span> <span class="nv">$customer</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">timestamp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\DateTime</span><span class="p">();</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">customer</span> <span class="o">=</span> <span class="nv">$customer</span><span class="p">;</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">orderNumber</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">orderNumberGenerator</span><span class="o">-&gt;</span><span class="na">createOrderNumber</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="sd">/**</span>
<span class="sd">         * @return \Magrathea\Erp\Domain\Model\Customer</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">getCustomer</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">customer</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In an application, after wiring $reflectionService with
<tt class="docutils literal"><span class="pre">\TYPO3\Flow\Reflection\ReflectionService</span></tt> via, for example, Dependency
Injection, there are a couple of options available. The following two examples
just should give a slight overview.</p>
<p>Listing all sub classes of the <tt class="docutils literal"><span class="pre">AbstractOrder</span></tt> class*</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reflectionService</span><span class="o">-&gt;</span><span class="na">getAllSubClassNamesForClass</span><span class="p">(</span><span class="s1">&#39;Magrathea\Erp\Domain\Model\AbstractOrder&#39;</span><span class="p">));</span>
</pre></div>
</div>
<p>returns <tt class="docutils literal"><span class="pre">array('Magrathea\Erp\Domain\Model\CustomizedGoodsOrder')</span></tt>.</p>
<p>Fetching the plain annotation tags of the <tt class="docutils literal"><span class="pre">customer</span></tt> property from the
<tt class="docutils literal"><span class="pre">CustomizedGoodsOrder</span></tt> class</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reflectionService</span><span class="o">-&gt;</span><span class="na">getPropertyTagsValues</span><span class="p">(</span><span class="s1">&#39;Magrathea\Erp\Domain\Model\CustomizedGoodsOrder&#39;</span><span class="p">,</span> <span class="s1">&#39;customer&#39;</span><span class="p">));</span><span class="sb">``</span>
</pre></div>
</div>
<p>returns <tt class="docutils literal"><span class="pre">array('var'</span> <span class="pre">=&gt;</span> <span class="pre">'\Magrathea\Erp\Domain\Model\Customer')</span></tt></p>
<p>The API doc of the ReflectionService shows all available methods. Generally
said, whatever information is needed to gain information about classes, their
properties and methods and their sub or parent classes and interface
implementations, can be retrieved via the reflection service.</p>
</div>
<div class="section" id="custom-annotation-classes">
<h2>Custom annotation classes</h2>
<p>A powerful feature is the ability to introduce customized annotation classes;
this achieves, for example, what across the framework often can be seen with
the <tt class="docutils literal"><span class="pre">&#64;Flow\…</span></tt> or <tt class="docutils literal"><span class="pre">&#64;ORM\…</span></tt> annotations.</p>
<div class="section" id="create-an-annotation-class">
<h3>Create an annotation class</h3>
<p>An annotation class is best created in a direct subdirectory of your
<tt class="docutils literal"><span class="pre">Classes</span></tt> one and carries the name <tt class="docutils literal"><span class="pre">Annotations</span></tt>. The class itself receives
the name exactly like the annotation should be.</p>
<p>Example: a ``Reportable`` annotation for use as class and property annotation:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">namespace</span> <span class="nx">Magrathea\Erp\Annotations</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * Marks the class or property as reportable, It will then be doing</span>
<span class="sd"> * foo and bar, but not quux.</span>
<span class="sd"> *</span>
<span class="sd"> * @Annotation</span>
<span class="sd"> * @Target({&quot;CLASS&quot;, &quot;PROPERTY&quot;})</span>
<span class="sd"> */</span>
<span class="k">final</span> <span class="k">class</span> <span class="nc">Reportable</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * The name of the report. (Can be given as anonymous argument.)</span>
<span class="sd">         * @var string</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="nv">$reportName</span><span class="p">;</span>

        <span class="sd">/**</span>
<span class="sd">         * @param array $values</span>
<span class="sd">         */</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="k">array</span> <span class="nv">$values</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$values</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$values</span><span class="p">[</span><span class="s1">&#39;reportName&#39;</span><span class="p">]))</span> <span class="p">{</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="nx">\InvalidArgumentException</span><span class="p">(</span><span class="s1">&#39;A Reporting annotation must specify a report name.&#39;</span><span class="p">,</span> <span class="mi">1234567890</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reportName</span> <span class="o">=</span> <span class="nb">isset</span><span class="p">(</span><span class="nv">$values</span><span class="p">[</span><span class="s1">&#39;reportName&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$values</span><span class="p">[</span><span class="s1">&#39;reportName&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="nv">$values</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">];</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</div>
<p>This defines a <tt class="docutils literal"><span class="pre">Reportable</span></tt> annotation, with one argument, <tt class="docutils literal"><span class="pre">reportName</span></tt>,
which is required in this case. It can be given with it&#8217;s name or anonymous,
as the sole (and/or first) argument to the value. The annotation can only be
used on classes or properties, using it on a method will throw an exception.
This is checked by the annotation parser, based on the <tt class="docutils literal"><span class="pre">Target</span></tt> annotation.
The documentation of the class and it&#8217;s properties can be used to generate
annotation reference documentation, so provide helpful descriptions and names.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">An annotation can also be simpler, using only public properties. The use of
a constructor allows for some checks and gives the possibility to have
anonymous arguments, if needed.</p>
</div>
<p>This annotation now can be set to arbitrary classes or properties, also across
packages. The namespace is introduced using the <tt class="docutils literal"><span class="pre">use</span></tt> statement and to
shorten the annotation; in the class this annotation can be set to the class
itself and to properties:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Magrathea\Erp\Annotations</span> <span class="k">as</span> <span class="nx">ERP</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * This is the description of the class.</span>
<span class="sd"> * @ERP\Reportable(reportName=&quot;OrderReport&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">CustomizedGoodsOrder</span> <span class="k">extends</span> <span class="nx">AbstractOrder</span> <span class="p">{</span>

        <span class="sd">/**</span>
<span class="sd">         * @ERP\Reportable</span>
<span class="sd">         * @var \Magrathea\Erp\Service\OrderNumberGenerator</span>
<span class="sd">         */</span>
        <span class="k">protected</span> <span class="nv">$orderNumberGenerator</span><span class="p">;</span>
</pre></div>
</div>
</div>
<div class="section" id="accessing-annotation-classes">
<h3>Accessing annotation classes</h3>
<p>With the reflection service, just an instance of your created annotation class
is returned, populated with the appropriate information of the annotation
itself! So complying with the walkthrough, the following approach is possible:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$classAnnotation</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reflectionService</span><span class="o">-&gt;</span><span class="na">getClassAnnotation</span><span class="p">(</span>
        <span class="s1">&#39;Magrathea\Erp\Domain\Model\CustomizedGoodsOrder&#39;</span><span class="p">,</span>
        <span class="s1">&#39;Magrathea\Erp\Annotations\Reportable&#39;</span><span class="p">)</span>
<span class="p">);</span>
<span class="nv">$classAnnotation</span> <span class="nx">instanceof</span> <span class="nx">\Magrathea\Erp\Annotations\Reportable</span><span class="p">;</span>
<span class="nv">$classAnnotation</span><span class="o">-&gt;</span><span class="na">reportName</span> <span class="o">===</span> <span class="s1">&#39;OrderReport&#39;</span><span class="p">;</span>

<span class="nv">$propertyAnnotation</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reflectionService</span><span class="o">-&gt;</span><span class="na">getPropertyAnnotation</span><span class="p">(</span>
        <span class="s1">&#39;Magrathea\Erp\Domain\Model\CustomizedGoodsOrder&#39;</span><span class="p">,</span>
        <span class="s1">&#39;orderNumberGenerator&#39;</span><span class="p">,</span>
        <span class="s1">&#39;Magrathea\Erp\Annotations\Reportable&#39;</span>
<span class="p">);</span>
<span class="nv">$propertyAnnotation</span> <span class="nx">instanceof</span> <span class="nx">\Magrathea\Erp\Annotations\Reportable</span><span class="p">;</span>
<span class="nv">$propertyAnnotation</span><span class="o">-&gt;</span><span class="na">reportName</span> <span class="o">===</span> <span class="k">NULL</span><span class="p">;</span>
</pre></div>
</div>
<p>It&#8217;s even possible to collect all annotation classes of a particular class, done via
<tt class="docutils literal"><span class="pre">reflectionService-&gt;getClassAnnotations('Magrathea\Erp\Domain\Model\CustomizedGoodsOrder');</span></tt>
which returns an array of annotations, in this case  <tt class="docutils literal"><span class="pre">TYPO3\Flow\Annotations\Entity</span></tt>
and our <tt class="docutils literal"><span class="pre">Magrathea\Erp\Annotations\Reportable</span></tt>.</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="98f4cb78-9410-3294-85b2-5e972b9de6e5" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="fe74da3a-b369-cf4a-c694-0232e00520ea" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="filemonitoring" locale="">
       <properties>
        <title>File Monitoring (to be written)</title>
       </properties>
       <node identifier="b780e127-4b11-c796-ad62-e6afe175a211" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="585f6d7a-0d68-a80e-0c0a-c53846028242" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="file-monitoring-to-be-written">
<h1>File Monitoring (to be written)</h1>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="dcde2bba-94a3-ddb2-e4be-75d48decd036" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="aeac6ba4-7eff-2cff-c9ef-5b4d8a67a3a0" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="testing" locale="">
       <properties>
        <title>Testing (to be written)</title>
       </properties>
       <node identifier="0602ab95-7a5f-34ed-f47b-29893d5d3be4" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="4fad7a2f-79b2-a2b7-5d01-a188c5ef9a17" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="testing-to-be-written">
<h1>Testing (to be written)</h1>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="fab72e92-0b55-9c78-df2b-4d1ecacb7e02" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="16f86b1d-9d49-d001-e229-9084234fec97" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="utilityfunctions" locale="">
       <properties>
        <title>Utility Functions</title>
       </properties>
       <node identifier="b866a381-f36c-8ebf-f02f-ec6f2714b49d" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="40842dcb-1f48-58f5-f7ff-d8d37a7d6755" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="utility-functions">
<h1>Utility Functions</h1>
<p>This chapter contains short introductions to helpful utility functions available
in TYPO3 Flow. Please see the API documentation for a full reference:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">TYPO3\Flow\Reflection\ObjectAccess</span></tt> should be used to get/set properties on
objects, arrays and similar structures.</li>
<li><tt class="docutils literal"><span class="pre">TYPO3\Flow\Utility\Arrays</span></tt> contains some array helper functions for merging
arrays or creating them from strings.</li>
<li><tt class="docutils literal"><span class="pre">TYPO3\Flow\Utility\Files</span></tt> contains functions for manipulating files and directories,
and for unifying file access across the different platforms.</li>
<li><tt class="docutils literal"><span class="pre">TYPO3\Flow\Utility\MediaTypes</span></tt> contains a list of internet media types and
their corresponding file types, and can be used to map between them.</li>
<li><tt class="docutils literal"><span class="pre">TYPO3\Flow\Utility\Now</span></tt> is a singleton <tt class="docutils literal"><span class="pre">DateTime</span></tt> class containing
the current time. It should always be used when you need access to the current
time.</li>
</ul>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="2f8300b0-9335-6647-9303-b42d74c14e94" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
     </node>
     <node identifier="ce1b846b-cb15-e2c4-eca0-00d781e9dc87" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="partiv" locale="">
      <properties>
       <title>Part IV: Deployment and Administration (to be written)</title>
      </properties>
      <node identifier="9f9dd4e6-8f78-dbe4-059a-db091d392093" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="7853c9c8-fee6-a63e-14d5-a1c1684b3797" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="part-iv-deployment-and-administration-to-be-written">
<h1>Part IV: Deployment and Administration (to be written)</h1>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="adb4ab6e-728f-42d9-57de-9871f85f5e24" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     </node>
     <node identifier="9b5f2af2-eeae-797d-06bf-59b2a72ad982" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="partv" locale="">
      <properties>
       <title>Part V: Appendixes</title>
      </properties>
      <node identifier="ef195ee3-de31-ce96-9b03-0128a32652d1" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="3ad7e02c-5a7a-8133-a4a7-4a875f92e9c1" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="part-v-appendixes">
<h1>Part V: Appendixes</h1>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html">TYPO3 Flow Validator Reference</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#alphanumericvalidator">AlphanumericValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#genericobjectvalidator">GenericObjectValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#collectionvalidator">CollectionValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#countvalidator">CountValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#datetimerangevalidator">DateTimeRangeValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#datetimevalidator">DateTimeValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#emailaddressvalidator">EmailAddressValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#floatvalidator">FloatValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#integervalidator">IntegerValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#labelvalidator">LabelValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#localeidentifiervalidator">LocaleIdentifierValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#notemptyvalidator">NotEmptyValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#numberrangevalidator">NumberRangeValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#numbervalidator">NumberValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#rawvalidator">RawValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#regularexpressionvalidator">RegularExpressionValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#stringlengthvalidator">StringLengthValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#stringvalidator">StringValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#textvalidator">TextValidator</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/validatorreference.html#uuidvalidator">UuidValidator</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html">TYPO3 Flow Annotation Reference</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#after">After</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#afterreturning">AfterReturning</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#afterthrowing">AfterThrowing</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#around">Around</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#aspect">Aspect</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#autowiring">Autowiring</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#before">Before</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#entity">Entity</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#flushescaches">FlushesCaches</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#identity">Identity</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#ignorevalidation">IgnoreValidation</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#inject">Inject</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#internal">Internal</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#introduce">Introduce</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#lazy">Lazy</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#pointcut">Pointcut</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#proxy">Proxy</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#scope">Scope</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#session">Session</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#signal">Signal</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#skipcsrfprotection">SkipCsrfProtection</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#transient">Transient</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#validate">Validate</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#validationgroups">ValidationGroups</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/annotationreference.html#valueobject">ValueObject</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html">TYPO3 Flow TypeConverter Reference</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#arrayconverter">ArrayConverter</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#booleanconverter">BooleanConverter</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#collectionconverter">CollectionConverter</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#datetimeconverter">DateTimeConverter</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#floatconverter">FloatConverter</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#integerconverter">IntegerConverter</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#objectconverter">ObjectConverter</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#persistentobjectconverter">PersistentObjectConverter</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#sessionconverter">SessionConverter</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#stringconverter">StringConverter</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/typeconverterreference.html#uritypeconverter">UriTypeConverter</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html">Fluid ViewHelper Reference</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-alias">f:alias</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-base">f:base</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-comment">f:comment</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-count">f:count</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-cycle">f:cycle</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-debug">f:debug</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-else">f:else</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-flashmessages">f:flashMessages</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-for">f:for</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form">f:form</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-button">f:form.button</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-checkbox">f:form.checkbox</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-hidden">f:form.hidden</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-password">f:form.password</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-radio">f:form.radio</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-select">f:form.select</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-submit">f:form.submit</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-textarea">f:form.textarea</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-textfield">f:form.textfield</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-upload">f:form.upload</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-form-validationresults">f:form.validationResults</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-crop">f:format.crop</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-currency">f:format.currency</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-date">f:format.date</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-htmlentitiesdecode">f:format.htmlentitiesDecode</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-htmlentities">f:format.htmlentities</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-htmlspecialchars">f:format.htmlspecialchars</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-identifier">f:format.identifier</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-json">f:format.json</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-nl2br">f:format.nl2br</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-number">f:format.number</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-padding">f:format.padding</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-printf">f:format.printf</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-raw">f:format.raw</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-striptags">f:format.stripTags</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-format-urlencode">f:format.urlencode</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-groupedfor">f:groupedFor</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-identity-json">f:identity.json</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-if">f:if</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-layout">f:layout</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-link-action">f:link.action</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-link-email">f:link.email</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-link-external">f:link.external</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-widget-link">f:widget.link</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-link-widget">f:link.widget</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-renderchildren">f:renderChildren</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-render">f:render</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-section">f:section</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-security-ifaccess">f:security.ifAccess</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-security-ifauthenticated">f:security.ifAuthenticated</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-security-ifhasrole">f:security.ifHasRole</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-then">f:then</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-translate">f:translate</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-uri-action">f:uri.action</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-uri-email">f:uri.email</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-uri-external">f:uri.external</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-uri-resource">f:uri.resource</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-widget-uri">f:widget.uri</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-uri-widget">f:uri.widget</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-widget-autocomplete">f:widget.autocomplete</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/fluidviewhelperreference.html#f-widget-paginate">f:widget.paginate</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/commandreference.html">TYPO3 Flow Command Reference</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/commandreference.html#package-typo3-flow">Package TYPO3.FLOW</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/commandreference.html#package-typo3-fluid">Package TYPO3.FLUID</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/commandreference.html#package-typo3-kickstart">Package TYPO3.KICKSTART</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/predefinedconstantsreference.html">Predefined Constants Reference</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/contributingtotypo3flow.html">Contributing to TYPO3 Flow</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/contributingtotypo3flow.html#report-and-validate-issues">Report and Validate Issues</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/contributingtotypo3flow.html#improve-documentation">Improve Documentation</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/contributingtotypo3flow.html#work-on-the-code">Work on the Code</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines.html">Coding Guidelines</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html">PHP Coding Guidelines &amp; Best Practices</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html">JavaScript Coding Guidelines</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs.html">ChangeLogs</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/100.html">1.0.0</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/100beta2.html">1.0.0 beta 2</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/101.html">1.0.1</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/102.html">1.0.2</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/103.html">1.0.3</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/104.html">1.0.4</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/105.html">1.0.5</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/106.html">1.0.6</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110.html">1.1.0</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110-beta1.html">1.1.0-beta1</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110-beta2.html">1.1.0-beta2</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110-beta3.html">1.1.0-beta3</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110-rc1.html">1.1.0-rc1</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110-rc2.html">1.1.0-rc2</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/200.html">2.0.0</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/200-beta1.html">2.0.0-beta1</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/201.html">2.0.1</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/202.html">2.0.2</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/210.html">2.1.0</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/210-rc1.html">2.1.0-RC1</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/210-beta1.html">2.1.0-beta1</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/211.html">2.1.1</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/220-beta1.html">2.2.0-beta1</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/220-beta2.html">2.2.0-beta2</a></li>
</ul>
</li>
</ul>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="06485c46-889e-7193-fa15-454261da95bb" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      <node identifier="86b3d9fa-63ba-5420-c891-22d8cbd80ecf" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="validatorreference" locale="">
       <properties>
        <title>TYPO3 Flow Validator Reference</title>
       </properties>
       <node identifier="c71c8f5b-80d7-76a0-d5a8-ed23fb6aab6b" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="d86ab0db-68c9-4925-836c-2c00d17a9df8" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="typo3-flow-validator-reference">
<h1>TYPO3 Flow Validator Reference</h1>
<p>This reference was automatically generated from code on 2012-12-12</p>
<div class="section" id="alphanumericvalidator">
<h2>AlphanumericValidator</h2>
<p>Validator for alphanumeric strings.</p>
<p>The given $value is valid if it is an alphanumeric string, which is defined as [[:alnum:]].</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
<div class="section" id="genericobjectvalidator">
<h2>GenericObjectValidator</h2>
<p>A generic object validator which allows for specifying property validators.</p>
<p>Checks if the given value is valid according to the property validators.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
<div class="section" id="collectionvalidator">
<h2>CollectionValidator</h2>
<p>A generic collection validator.</p>
<p>Checks for a collection and if needed validates the items in the collection.
This is done with the specified element validator or a validator based on
the given element type and validation group.</p>
<p>Either elementValidator or elementType must be given, otherwise validation
will be skipped.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
<div class="section" id="arguments">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">elementValidator</span></tt> (string, optional): The validator type to use for the collection elements</li>
<li><tt class="docutils literal"><span class="pre">elementType</span></tt> (string, optional): The type of the elements in the collection</li>
<li><tt class="docutils literal"><span class="pre">validationGroups</span></tt> (string, optional): The validation groups to link to</li>
</ul>
</div>
</div>
<div class="section" id="countvalidator">
<h2>CountValidator</h2>
<p>Validator for countable things</p>
<p>The given value is valid if it is an array or Countable that contains the specified amount of elements.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
<div class="section" id="id1">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">minimum</span></tt> (integer, optional): The minimum count to accept</li>
<li><tt class="docutils literal"><span class="pre">maximum</span></tt> (integer, optional): The maximum count to accept</li>
</ul>
</div>
</div>
<div class="section" id="datetimerangevalidator">
<h2>DateTimeRangeValidator</h2>
<p>Validator for checking Date and Time boundaries</p>
<p>Adds errors if the given DateTime does not match the set boundaries.</p>
<p>latestDate and earliestDate may be each &lt;time&gt;, &lt;start&gt;/&lt;duration&gt; or &lt;duration&gt;/&lt;end&gt;, where &lt;duration&gt; is an
ISO 8601 duration and &lt;start&gt; or &lt;end&gt; or &lt;time&gt; may be &#8216;now&#8217; or a PHP supported format. (1)</p>
<p>In general, you are able to provide a timestamp or a timestamp with additional calculation. Calculations are done
as described in ISO 8601 (2), with an introducing &#8220;P&#8221;. P7MT2H30M for example mean a period of 7 months, 2 hours
and 30 minutes (P introduces a period at all, while a following T introduces the time-section of a period. This
is not at least in order not to confuse months and minutes, both represented as M).
A period is separated from the timestamp with a forward slash &#8220;/&#8221;. If the period follows the timestamp, that
period is added to the timestamp; if the period precedes the timestamp, it&#8217;s subtracted.
The timestamp can be one of PHP&#8217;s supported date formats (1), so also &#8220;now&#8221; is supported.</p>
<p>Use cases:</p>
<p>If you offer something that has to be manufactured and you ask for a delivery date, you might assure that this
date is at least two weeks in advance; this could be done with the expression &#8220;now/P2W&#8221;.
If you have a library of ancient goods and want to track a production date that is at least 5 years ago, you can
express it with &#8220;P5Y/now&#8221;.</p>
<p>Examples:</p>
<dl class="docutils">
<dt>If you want to test if a given date is at least five minutes ahead, use</dt>
<dd>earliestDate: now/PT5M</dd>
<dt>If you want to test if a given date was at least 10 days ago, use</dt>
<dd>latestDate: P10D/now</dd>
<dt>If you want to test if a given date is between two fix boundaries, just combine the latestDate and earliestDate-options:</dt>
<dd>earliestDate: 2007-03-01T13:00:00Z
latestDate: 2007-03-30T13:00:00Z</dd>
</dl>
<p>Footnotes:</p>
<p><a class="reference external" href="http://de.php.net/manual/en/datetime.formats.compound.php">http://de.php.net/manual/en/datetime.formats.compound.php</a> (1)
<a class="reference external" href="http://en.wikipedia.org/wiki/ISO_8601#Durations">http://en.wikipedia.org/wiki/ISO_8601#Durations</a> (2)
<a class="reference external" href="http://en.wikipedia.org/wiki/ISO_8601#Time_intervals">http://en.wikipedia.org/wiki/ISO_8601#Time_intervals</a> (3)</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
<div class="section" id="id2">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">latestDate</span></tt> (string, optional): The latest date to accept</li>
<li><tt class="docutils literal"><span class="pre">earliestDate</span></tt> (string, optional): The earliest date to accept</li>
</ul>
</div>
</div>
<div class="section" id="datetimevalidator">
<h2>DateTimeValidator</h2>
<p>Validator for DateTime objects.</p>
<p>Checks if the given value is a valid DateTime object.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
<div class="section" id="id3">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">locale</span></tt> (string|Locale, optional): The locale to use for date parsing</li>
<li><tt class="docutils literal"><span class="pre">strictMode</span></tt> (boolean, optional): Use strict mode for date parsing</li>
<li><tt class="docutils literal"><span class="pre">formatLength</span></tt> (string, optional): The format length, see DatesReader::FORMAT_LENGTH_*</li>
<li><tt class="docutils literal"><span class="pre">formatType</span></tt> (string, optional): The format type, see DatesReader::FORMAT_TYPE_*</li>
</ul>
</div>
</div>
<div class="section" id="emailaddressvalidator">
<h2>EmailAddressValidator</h2>
<p>Validator for email addresses</p>
<p>Checks if the given value is a valid email address.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
<div class="section" id="floatvalidator">
<h2>FloatValidator</h2>
<p>Validator for floats.</p>
<p>The given value is valid if it is of type float or a string matching the regular expression [0-9.e+-]</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
<div class="section" id="integervalidator">
<h2>IntegerValidator</h2>
<p>Validator for integers.</p>
<p>Checks if the given value is a valid integer.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
<div class="section" id="labelvalidator">
<h2>LabelValidator</h2>
<p>A validator for labels.</p>
<p>Labels usually allow all kinds of letters, numbers, punctuation marks and
the space character. What you don&#8217;t want in labels though are tabs, new
line characters or HTML tags. This validator is for such uses.</p>
<p>The given value is valid if it matches the regular expression specified in PATTERN_VALIDCHARACTERS.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
<div class="section" id="localeidentifiervalidator">
<h2>LocaleIdentifierValidator</h2>
<p>A validator for locale identifiers.</p>
<p>This validator validates a string based on the expressions of the
Flow I18n implementation.</p>
<p>Is valid if the given value is a valid &#8220;locale identifier&#8221;.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
<div class="section" id="notemptyvalidator">
<h2>NotEmptyValidator</h2>
<p>Validator for not empty values.</p>
<p>Checks if the given value is not empty (NULL, empty string, empty array
or empty object that implements the Countable interface).</p>
</div>
<div class="section" id="numberrangevalidator">
<h2>NumberRangeValidator</h2>
<p>Validator for general numbers</p>
<p>The given value is valid if it is a number in the specified range.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
<div class="section" id="id4">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">minimum</span></tt> (integer, optional): The minimum value to accept</li>
<li><tt class="docutils literal"><span class="pre">maximum</span></tt> (integer, optional): The maximum value to accept</li>
</ul>
</div>
</div>
<div class="section" id="numbervalidator">
<h2>NumberValidator</h2>
<p>Validator for general numbers.</p>
<p>Checks if the given value is a valid number.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
<div class="section" id="id5">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">locale</span></tt> (string|Locale, optional): The locale to use for number parsing</li>
<li><tt class="docutils literal"><span class="pre">strictMode</span></tt> (boolean, optional): Use strict mode for number parsing</li>
<li><tt class="docutils literal"><span class="pre">formatLength</span></tt> (string, optional): The format length, see NumbersReader::FORMAT_LENGTH_*</li>
<li><tt class="docutils literal"><span class="pre">formatType</span></tt> (string, optional): The format type, see NumbersReader::FORMAT_TYPE_*</li>
</ul>
</div>
</div>
<div class="section" id="rawvalidator">
<h2>RawValidator</h2>
<p>A validator which accepts any input.</p>
<p>This validator is always valid.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
<div class="section" id="regularexpressionvalidator">
<h2>RegularExpressionValidator</h2>
<p>Validator based on regular expressions.</p>
<p>Checks if the given value matches the specified regular expression.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
<div class="section" id="id6">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">regularExpression</span></tt> (string): The regular expression to use for validation, used as given</li>
</ul>
</div>
</div>
<div class="section" id="stringlengthvalidator">
<h2>StringLengthValidator</h2>
<p>Validator for string length.</p>
<p>Checks if the given value is a valid string (or can be cast to a string
if an object is given) and its length is between minimum and maximum
specified in the validation options.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
<div class="section" id="id7">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">minimum</span></tt> (integer, optional): Minimum length for a valid string</li>
<li><tt class="docutils literal"><span class="pre">maximum</span></tt> (integer, optional): Maximum length for a valid string</li>
</ul>
</div>
</div>
<div class="section" id="stringvalidator">
<h2>StringValidator</h2>
<p>Validator for strings.</p>
<p>Checks if the given value is a string.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
<div class="section" id="textvalidator">
<h2>TextValidator</h2>
<p>Validator for &#8220;plain&#8221; text.</p>
<p>Checks if the given value is a valid text (contains no XML tags).</p>
<p>Be aware that the value of this check entirely depends on the output context.
The validated text is not expected to be secure in every circumstance, if you
want to be sure of that, use a customized regular expression or filter on output.</p>
<p>See <a class="reference external" href="http://php.net/filter_var">http://php.net/filter_var</a> for details.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
<div class="section" id="uuidvalidator">
<h2>UuidValidator</h2>
<p>Validator for Universally Unique Identifiers.</p>
<p>Checks if the given value is a syntactically valid UUID.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">A value of NULL or an empty string (&#8216;&#8217;) is considered valid</p>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="e5318913-64d3-6587-d3c6-2b2e949ed5a4" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="51f6efe8-6bf4-29fa-5c11-e455688a1b58" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="annotationreference" locale="">
       <properties>
        <title>TYPO3 Flow Annotation Reference</title>
       </properties>
       <node identifier="5ed8926d-761f-1646-7f63-2d7303032a73" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="cfa5bfae-51db-99b1-55ea-c34b5b8d083e" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="typo3-flow-annotation-reference">
<h1>TYPO3 Flow Annotation Reference</h1>
<p>This reference was automatically generated from code on 2012-12-10</p>
<div class="section" id="after">
<h2>After</h2>
<p>Declares a method as an after advice to be triggered after any
pointcut matching the given expression.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
<div class="section" id="arguments">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">pointcutExpression</span></tt> (string): The pointcut expression. (Can be given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="afterreturning">
<h2>AfterReturning</h2>
<p>Declares a method as an after returning advice to be triggered
after any pointcut matching the given expression returns.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
<div class="section" id="id1">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">pointcutExpression</span></tt> (string): The pointcut expression. (Can be given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="afterthrowing">
<h2>AfterThrowing</h2>
<p>Declares a method as an after throwing advice to be triggered
after any pointcut matching the given expression throws an exception.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
<div class="section" id="id2">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">pointcutExpression</span></tt> (string): The pointcut expression. (Can be given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="around">
<h2>Around</h2>
<p>Declares a method as an around advice to be triggered around any
pointcut matching the given expression.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
<div class="section" id="id3">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">pointcutExpression</span></tt> (string): The pointcut expression. (Can be given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="aspect">
<h2>Aspect</h2>
<p>Marks a class as an aspect.</p>
<p>The class will be read by the AOP framework of Flow and inspected for
pointcut expressions and advice.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Class</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="autowiring">
<h2>Autowiring</h2>
<p>Used to disable autowiring for Dependency Injection on the
whole class or on the annotated property only.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method, Class</td>
</tr>
</tbody>
</table>
<div class="section" id="id4">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">enabled</span></tt> (boolean): Whether autowiring is enabled. (Can be given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="before">
<h2>Before</h2>
<p>Declares a method as an before advice to be triggered before any
pointcut matching the given expression.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
<div class="section" id="id5">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">pointcutExpression</span></tt> (string): The pointcut expression. (Can be given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="entity">
<h2>Entity</h2>
<p>Marks an object as an entity.</p>
<p>Behaves like DoctrineORMMappingEntity so it is interchangeable
with that.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Class</td>
</tr>
</tbody>
</table>
<div class="section" id="id6">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">repositoryClass</span></tt> (string): Name of the repository class to use for managing the entity.</li>
<li><tt class="docutils literal"><span class="pre">readOnly</span></tt> (boolean): Whether the entity should be read-only.</li>
</ul>
</div>
</div>
<div class="section" id="flushescaches">
<h2>FlushesCaches</h2>
<p>Marks a CLI command as a cache-flushing command.</p>
<p>Usually used for framework purposes only.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="identity">
<h2>Identity</h2>
<p>Marks a property as being (part of) the identity of an object.</p>
<p>If multiple properties are annotated as Identity, a compound
identity is created.</p>
<p>For Doctrine a unique key over all involved properties will be
created - thus the limitations of that need to be observed.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Property</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="ignorevalidation">
<h2>IgnoreValidation</h2>
<p>Used to ignore validation on a specific method argument.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
<div class="section" id="id7">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">argumentName</span></tt> (string): Name of the argument to skip validation for. (Can be given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="inject">
<h2>Inject</h2>
<p>Used to enable property injection.</p>
<p>Flow will build Dependency Injection code for the property and try
to inject a value as specified by the var annotation.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Property</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="internal">
<h2>Internal</h2>
<p>Used to mark a command as internal - it will not be shown in
CLI help output.</p>
<p>Usually used for framework purposes only.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="introduce">
<h2>Introduce</h2>
<p>Introduces the given interface or property into any target class matching
the given pointcut expression.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Class, Property</td>
</tr>
</tbody>
</table>
<div class="section" id="id8">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">pointcutExpression</span></tt> (string): The pointcut expression. (Can be given as anonymous argument.)</li>
<li><tt class="docutils literal"><span class="pre">interfaceName</span></tt> (string): The interface name to introduce.</li>
</ul>
</div>
</div>
<div class="section" id="lazy">
<h2>Lazy</h2>
<p>Marks a property or class as lazy-loaded.</p>
<p>This is only relevant for anything based on the generic persistence
layer of Flow. For Doctrine based persistence this is ignored.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Class, Property</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="pointcut">
<h2>Pointcut</h2>
<p>Declares a named pointcut. The annotated method does not become an advice
but can be used as a named pointcut instead of the given expression.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
<div class="section" id="id9">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">expression</span></tt> (string): The pointcut expression. (Can be given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="proxy">
<h2>Proxy</h2>
<p>Used to disable proxy building for an object.</p>
<p>If disabled, neither Dependency Injection nor AOP can be used
on the object.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Class</td>
</tr>
</tbody>
</table>
<div class="section" id="id10">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">enabled</span></tt> (boolean): Whether proxy building for the target is disabled. (Can be given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="scope">
<h2>Scope</h2>
<p>Used to set the scope of an object.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Class</td>
</tr>
</tbody>
</table>
<div class="section" id="id11">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">value</span></tt> (string): The scope of an object: prototype, singleton, session. (Usually given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="session">
<h2>Session</h2>
<p>Used to control the behavior of session handling when the annotated
method is called.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
<div class="section" id="id12">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">autoStart</span></tt> (boolean): Whether the annotated method triggers the start of a session.</li>
</ul>
</div>
</div>
<div class="section" id="signal">
<h2>Signal</h2>
<p>Marks a method as a signal for the signal/slot implementation
of Flow. The method will be augmented as needed (using AOP)
to be a usable signal.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="skipcsrfprotection">
<h2>SkipCsrfProtection</h2>
<p>Action methods marked with this annotation will not be secured
against CSRF.</p>
<p>Since CSRF is a risk for write operations, this is useful for read-only
actions. The overhead for CRSF token generation and validation can be
skipped in those cases.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="transient">
<h2>Transient</h2>
<p>Marks a property as transient - it will never be considered by the
persistence layer for storage and retrieval.</p>
<p>Useful for calculated values and any other properties only needed
during runtime.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Property</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="validate">
<h2>Validate</h2>
<p>Controls how a property or method argument will be validated by Flow.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Method, Property</td>
</tr>
</tbody>
</table>
<div class="section" id="id13">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">type</span></tt> (string): The validator type, either a FQCN or a Flow validator class name.</li>
<li><tt class="docutils literal"><span class="pre">options</span></tt> (array): Options for the validator, validator-specific.</li>
<li><tt class="docutils literal"><span class="pre">argumentName</span></tt> (string): The name of the argument this annotation is attached to, if used on a method. (Can be given as anonymous argument.)</li>
<li><tt class="docutils literal"><span class="pre">validationGroups</span></tt> (array): The validation groups for which this validator should be executed.</li>
</ul>
</div>
</div>
<div class="section" id="validationgroups">
<h2>ValidationGroups</h2>
<div class="section" id="id14">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">validationGroups</span></tt> (array): The validation groups for which validation on this method should be executed. (Can be given as anonymous argument.)</li>
</ul>
</div>
</div>
<div class="section" id="valueobject">
<h2>ValueObject</h2>
<p>Marks the annotate class as a value object.</p>
<p>Regarding Doctrine the object is treated like an entity, but Flow
applies some optimizations internally, e.g. to store only one instance
of a value object.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Applicable to:</th><td class="field-body">Class</td>
</tr>
</tbody>
</table>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="78ff5142-cd19-030d-333e-1bd58cd628a3" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="bf51c714-f403-1556-abf0-d6aca83443f6" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="typeconverterreference" locale="">
       <properties>
        <title>TYPO3 Flow TypeConverter Reference</title>
       </properties>
       <node identifier="673218ae-14a1-4873-f3f5-d7abb6aaebb8" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="6aafa2bc-9217-7c73-0f3d-6267946cba66" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="typo3-flow-typeconverter-reference">
<h1>TYPO3 Flow TypeConverter Reference</h1>
<p>This reference was automatically generated from code on 2012-12-12</p>
<div class="section" id="arrayconverter">
<h2>ArrayConverter</h2>
<p>Converter which transforms arrays to arrays.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body">1</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body">array</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source type:</th><td class="field-body">array</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="booleanconverter">
<h2>BooleanConverter</h2>
<p>Converter which transforms simple types to a boolean, by simply casting it.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body"><p class="first">1</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body"><p class="first">boolean</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source types:</th><td class="field-body"><ul class="first last simple">
<li>boolean</li>
<li>string</li>
</ul>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="collectionconverter">
<h2>CollectionConverter</h2>
<p>Converter which transforms simple types to a Doctrine ArrayCollection.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body"><p class="first">1</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body"><p class="first">DoctrineCommonCollectionsCollection</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source types:</th><td class="field-body"><ul class="first last simple">
<li>string</li>
<li>array</li>
</ul>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="datetimeconverter">
<h2>DateTimeConverter</h2>
<p>Converter which transforms from different input formats into DateTime objects.</p>
<p>Source can be either a string or an array. The date string is expected to be formatted
according to DEFAULT_DATE_FORMAT.</p>
<p>But the default date format can be overridden in the initialize*Action() method like this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arguments</span><span class="p">[</span><span class="s1">&#39;&lt;argumentName&gt;&#39;</span><span class="p">]</span>
  <span class="o">-&gt;</span><span class="na">getPropertyMappingConfiguration</span><span class="p">()</span>
  <span class="o">-&gt;</span><span class="na">forProperty</span><span class="p">(</span><span class="s1">&#39;&lt;propertyName&gt;&#39;</span><span class="p">)</span> <span class="c1">// this line can be skipped in order to specify the format for all properties</span>
  <span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span><span class="s1">&#39;TYPO3\Flow\Property\TypeConverter\DateTimeConverter&#39;</span><span class="p">,</span> <span class="nx">\TYPO3\Flow\Property\TypeConverter\DateTimeConverter</span><span class="o">::</span><span class="na">CONFIGURATION_DATE_FORMAT</span><span class="p">,</span> <span class="s1">&#39;&lt;dateFormat&gt;&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>If the source is of type array, it is possible to override the format in the source:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">array</span><span class="p">(</span>
 <span class="s1">&#39;date&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;dateString&gt;&#39;</span><span class="p">,</span>
 <span class="s1">&#39;dateFormat&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;dateFormat&gt;&#39;</span>
<span class="p">);</span>
</pre></div>
</div>
<p>By using an array as source you can also override time and timezone of the created DateTime object:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">array</span><span class="p">(</span>
 <span class="s1">&#39;date&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;dateString&gt;&#39;</span><span class="p">,</span>
 <span class="s1">&#39;hour&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;hour&gt;&#39;</span><span class="p">,</span> <span class="c1">// integer</span>
 <span class="s1">&#39;minute&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;minute&gt;&#39;</span><span class="p">,</span> <span class="c1">// integer</span>
 <span class="s1">&#39;seconds&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;seconds&gt;&#39;</span><span class="p">,</span> <span class="c1">// integer</span>
 <span class="s1">&#39;timezone&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;timezone&gt;&#39;</span><span class="p">,</span> <span class="c1">// string, see http://www.php.net/manual/timezones.php</span>
<span class="p">);</span>
</pre></div>
</div>
<p>As an alternative to providing the date as string, you might supply day, month and year as array items each:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">array</span><span class="p">(</span>
 <span class="s1">&#39;day&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;day&gt;&#39;</span><span class="p">,</span> <span class="c1">// integer</span>
 <span class="s1">&#39;month&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;month&gt;&#39;</span><span class="p">,</span> <span class="c1">// integer</span>
 <span class="s1">&#39;year&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&lt;year&gt;&#39;</span><span class="p">,</span> <span class="c1">// integer</span>
<span class="p">);</span>
</pre></div>
</div>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body"><p class="first">1</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body"><p class="first">DateTime</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source types:</th><td class="field-body"><ul class="first last simple">
<li>string</li>
<li>integer</li>
<li>array</li>
</ul>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="floatconverter">
<h2>FloatConverter</h2>
<p>Converter which transforms a simple type to a float.</p>
<p>This is basically done by simply casting it, except you provide some configuration options
which will make this converter use Flow&#8217;s locale parsing capabilities in order to respect
deviating decimal separators.</p>
<p><strong>Advanced usage in action controller context</strong></p>
<p>Using default locale:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">protected</span> <span class="k">function</span> <span class="nf">initializeCreateAction</span><span class="p">()</span> <span class="p">{</span>
       <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arguments</span><span class="p">[</span><span class="s1">&#39;newBid&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getPropertyMappingConfiguration</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">forProperty</span><span class="p">(</span><span class="s1">&#39;price&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
               <span class="s1">&#39;TYPO3\Flow\Property\TypeConverter\FloatConverter&#39;</span><span class="p">,</span> <span class="s1">&#39;locale&#39;</span><span class="p">,</span> <span class="k">TRUE</span>
       <span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Just providing TRUE as option value will use the current default locale. In case that default locale is &#8220;DE&#8221;
for Germany for example, where a comma is used as decimal separator, the mentioned code will return
(float)15.5 when the input was (string)&#8221;15,50&#8221;.</p>
<p>Using arbitrary locale:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">protected</span> <span class="k">function</span> <span class="nf">initializeCreateAction</span><span class="p">()</span> <span class="p">{</span>
       <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">arguments</span><span class="p">[</span><span class="s1">&#39;newBid&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">getPropertyMappingConfiguration</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">forProperty</span><span class="p">(</span><span class="s1">&#39;price&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
               <span class="s1">&#39;TYPO3\Flow\Property\TypeConverter\FloatConverter&#39;</span><span class="p">,</span> <span class="s1">&#39;locale&#39;</span><span class="p">,</span> <span class="s1">&#39;fr&#39;</span>
       <span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
<p><strong>Parsing mode</strong></p>
<p>There are two parsing modes available, strict and lenient mode. Strict mode will check all constraints of the provided
format, and if any of them are not fulfilled, the conversion will not take place.
In Lenient mode the parser will try to extract the intended number from the string, even if it&#8217;s not well formed.
Default for strict mode is TRUE.</p>
<p>Example setting lenient mode (abridged):</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
       <span class="s1">&#39;TYPO3\Flow\Property\TypeConverter\FloatConverter&#39;</span><span class="p">,</span> <span class="s1">&#39;strictMode&#39;</span><span class="p">,</span> <span class="k">FALSE</span>
<span class="p">);</span>
</pre></div>
</div>
<p><strong>Format type</strong></p>
<p>Format type can be decimal, percent or currency; represented as class constant FORMAT_TYPE_DECIMAL,
FORMAT_TYPE_PERCENT or FORMAT_TYPE_CURRENCY of class TYPO3FlowI18nCldrReaderNumbersReader.
Default, if none given, is FORMAT_TYPE_DECIMAL.</p>
<p>Example setting format type `currency` (abridged):</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
       <span class="s1">&#39;TYPO3\Flow\Property\TypeConverter\FloatConverter&#39;</span><span class="p">,</span> <span class="s1">&#39;formatType&#39;</span><span class="p">,</span> <span class="nx">\TYPO3\Flow\I18n\Cldr\Reader\NumbersReader</span><span class="o">::</span><span class="na">FORMAT_TYPE_CURRENCY</span>
<span class="p">);</span>
</pre></div>
</div>
<p><strong>Format length</strong></p>
<p>Format type can be default, full, long, medium or short; represented as class constant FORMAT_LENGTH_DEFAULT,
FORMAT_LENGTH_FULL, FORMAT_LENGTH_LONG etc., of class  TYPO3FlowI18nCldrReaderNumbersReader.
The format length has a technical background in the CLDR repository, and specifies whether a different number
pattern should be used. In most cases leaving this DEFAULT would be the correct choice.</p>
<p>Example setting format length (abridged):</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
       <span class="s1">&#39;TYPO3\Flow\Property\TypeConverter\FloatConverter&#39;</span><span class="p">,</span> <span class="s1">&#39;formatLength&#39;</span><span class="p">,</span> <span class="nx">\TYPO3\Flow\I18n\Cldr\Reader\NumbersReader</span><span class="o">::</span><span class="na">FORMAT_LENGTH_FULL</span>
<span class="p">);</span>
</pre></div>
</div>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body"><p class="first">1</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body"><p class="first">float</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source types:</th><td class="field-body"><ul class="first last simple">
<li>float</li>
<li>integer</li>
<li>string</li>
</ul>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="integerconverter">
<h2>IntegerConverter</h2>
<p>Converter which transforms a simple type to an integer, by simply casting it.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body"><p class="first">1</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body"><p class="first">integer</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source types:</th><td class="field-body"><ul class="first last simple">
<li>integer</li>
<li>string</li>
</ul>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="objectconverter">
<h2>ObjectConverter</h2>
<p>This converter transforms arrays to simple objects (POPO) by setting properties.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body">0</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body">object</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source type:</th><td class="field-body">array</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="persistentobjectconverter">
<h2>PersistentObjectConverter</h2>
<p>This converter transforms arrays or strings to persistent objects. It does the following:</p>
<ul class="simple">
<li>If the input is string, it is assumed to be a UUID. Then, the object is fetched from persistence.</li>
<li>If the input is array, we check if it has an identity property.</li>
<li>If the input has an identity property and NO additional properties, we fetch the object from persistence.</li>
<li>If the input has an identity property AND additional properties, we fetch the object from persistence,
and set the sub-properties. We only do this if the configuration option &#8220;CONFIGURATION_MODIFICATION_ALLOWED&#8221; is TRUE.</li>
<li>If the input has NO identity property, but additional properties, we create a new object and return it.
However, we only do this if the configuration option &#8220;CONFIGURATION_CREATION_ALLOWED&#8221; is TRUE.</li>
</ul>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body"><p class="first">1</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body"><p class="first">object</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source types:</th><td class="field-body"><ul class="first last simple">
<li>string</li>
<li>array</li>
</ul>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="sessionconverter">
<h2>SessionConverter</h2>
<p>This converter transforms a session identifier into a real session object.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body">1</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body">TYPO3FlowSessionSession</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source type:</th><td class="field-body">string</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="stringconverter">
<h2>StringConverter</h2>
<p>Converter which transforms simple types to a string.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body"><p class="first">1</p>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body"><p class="first">string</p>
</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source types:</th><td class="field-body"><ul class="first last simple">
<li>string</li>
<li>integer</li>
</ul>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="uritypeconverter">
<h2>UriTypeConverter</h2>
<p>A type converter for converting URI strings to Http Uri objects</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Priority:</th><td class="field-body">1</td>
</tr>
<tr class="field-even field"><th class="field-name">Target type:</th><td class="field-body">TYPO3FlowHttpUri</td>
</tr>
<tr class="field-odd field"><th class="field-name">Source type:</th><td class="field-body">string</td>
</tr>
</tbody>
</table>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="7735d014-708a-e0f4-d21e-defe19867c56" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="f21057fd-2916-66f3-d469-e5970c1b3869" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="fluidviewhelperreference" locale="">
       <properties>
        <title>Fluid ViewHelper Reference</title>
       </properties>
       <node identifier="2b32ebb4-e79d-9fa5-fee1-aba167e246e5" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="e1963daa-c7d6-ce4d-f577-bd4881b7ffb5" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="fluid-viewhelper-reference">
<h1>Fluid ViewHelper Reference</h1>
<p>This reference was automatically generated from code on 2012-12-12</p>
<div class="section" id="f-alias">
<h2>f:alias</h2>
<p>Declares new variables which are aliases of other variables.
Takes a &#8220;map&#8221;-Parameter which is an associative array which defines the shorthand mapping.</p>
<p>The variables are only declared inside the &lt;f:alias&gt;...&lt;/f:alias&gt;-tag. After the
closing tag, all declared variables are removed again.</p>
<div class="section" id="arguments">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">map</span></tt> (array): array that specifies which variables should be mapped to which alias</li>
</ul>
</div>
<div class="section" id="examples">
<h3>Examples</h3>
<p><strong>Single alias</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">alias</span> <span class="nx">map</span><span class="o">=</span><span class="s2">&quot;{x: &#39;foo&#39;}&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">x</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">alias</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">foo</span>
</pre></div>
</div>
<p><strong>Multiple mappings</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">alias</span> <span class="nx">map</span><span class="o">=</span><span class="s2">&quot;{x: foo.bar.baz, y: foo.bar.baz.name}&quot;</span><span class="o">&gt;</span>
  <span class="p">{</span><span class="nx">x</span><span class="o">.</span><span class="nx">name</span><span class="p">}</span> <span class="k">or</span> <span class="p">{</span><span class="nx">y</span><span class="p">}</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">alias</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="k">or</span> <span class="p">[</span><span class="nx">name</span><span class="p">]</span>
<span class="nx">depending</span> <span class="nx">on</span> <span class="p">{</span><span class="nx">foo</span><span class="o">.</span><span class="nx">bar</span><span class="o">.</span><span class="nx">baz</span><span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-base">
<h2>f:base</h2>
<p>View helper which creates a &lt;base href=&#8221;...&#8221;&gt;&lt;/base&gt; tag. The Base URI
is taken from the current request.
In Flow, this ViewHelper is no longer required to make the links work.</p>
<div class="section" id="id1">
<h3>Examples</h3>
<p><strong>Example</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">base</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">base</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://yourdomain.tld/&quot;</span> <span class="o">/&gt;</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">your</span> <span class="nx">domain</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-comment">
<h2>f:comment</h2>
<p>This ViewHelper prevents rendering of any content inside the tag
Note: Contents of the comment will still be <strong>parsed</strong> thus throwing an
Exception if it contains syntax errors. You can put child nodes in
CDATA tags to avoid this.</p>
<div class="section" id="id2">
<h3>Examples</h3>
<p><strong>Commenting out fluid code</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Before</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">comment</span><span class="o">&gt;</span>
  <span class="k">This</span> <span class="nx">is</span> <span class="nx">completely</span> <span class="nx">hidden</span><span class="o">.</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">debug</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">does</span> <span class="k">not</span> <span class="nx">get</span> <span class="nx">parsed</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">debug</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">comment</span><span class="o">&gt;</span>
<span class="nx">After</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Before</span>
<span class="nx">After</span>
</pre></div>
</div>
<p><strong>Prevent parsing</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">comment</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="nx">CDATA</span><span class="p">[</span>
 <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">some</span><span class="o">.</span><span class="nx">invalid</span><span class="o">.</span><span class="nx">syntax</span> <span class="o">/&gt;</span>
<span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">comment</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-count">
<h2>f:count</h2>
<p>This ViewHelper counts elements of the specified array or countable object.</p>
<div class="section" id="id3">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">subject</span></tt> (array, optional): The array or Countable to be counted</li>
</ul>
</div>
<div class="section" id="id4">
<h3>Examples</h3>
<p><strong>Count array elements</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nb">count</span> <span class="nx">subject</span><span class="o">=</span><span class="s2">&quot;{0:1, 1:2, 2:3, 3:4}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mi">4</span>
</pre></div>
</div>
<p><strong>inline notation</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">objects</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nb">count</span><span class="p">()}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mi">10</span> <span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">number</span> <span class="nx">of</span> <span class="nx">items</span> <span class="nx">in</span> <span class="p">{</span><span class="nx">objects</span><span class="p">})</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-cycle">
<h2>f:cycle</h2>
<p>This ViewHelper cycles through the specified values.
This can be often used to specify CSS classes for example.
<strong>Note:</strong> To achieve the &#8220;zebra class&#8221; effect in a loop you can also use the &#8220;iteration&#8221; argument of the <strong>for</strong> ViewHelper.</p>
<div class="section" id="id5">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">values</span></tt> (array): The array or object implementing ArrayAccess (for example SplObjectStorage) to iterated over</li>
<li><tt class="docutils literal"><span class="pre">as</span></tt> (string): The name of the iteration variable</li>
</ul>
</div>
<div class="section" id="id6">
<h3>Examples</h3>
<p><strong>Simple</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{0:1, 1:2, 2:3, 3:4}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span><span class="o">&gt;&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">cycle</span> <span class="nx">values</span><span class="o">=</span><span class="s2">&quot;{0: &#39;foo&#39;, 1: &#39;bar&#39;, 2: &#39;baz&#39;}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;cycle&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">cycle</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">cycle</span><span class="o">&gt;&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">foobarbazfoo</span>
</pre></div>
</div>
<p><strong>Alternating CSS class</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{0:1, 1:2, 2:3, 3:4}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">cycle</span> <span class="nx">values</span><span class="o">=</span><span class="s2">&quot;{0: &#39;odd&#39;, 1: &#39;even&#39;}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;zebraClass&quot;</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;{zebraClass}&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">foo</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">cycle</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;odd&quot;</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;even&quot;</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;odd&quot;</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;even&quot;</span><span class="o">&gt;</span><span class="mi">4</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-debug">
<h2>f:debug</h2>
<p>Viewhelper that outputs its childnodes with TYPO3var_dump()</p>
<div class="section" id="id7">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional):</li>
<li><tt class="docutils literal"><span class="pre">typeOnly</span></tt> (boolean, optional): Whether only the type should be returned instead of the whole chain.</li>
</ul>
</div>
<div class="section" id="id8">
<h3>Examples</h3>
<p><strong>inline notation and custom title</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">object</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">debug</span><span class="p">(</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Custom title&#39;</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">all</span> <span class="nx">properties</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">object</span><span class="p">}</span> <span class="nx">nicely</span> <span class="nx">highlighted</span> <span class="p">(</span><span class="nx">with</span> <span class="nx">custom</span> <span class="nx">title</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>only output the type</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">object</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">debug</span><span class="p">(</span><span class="nx">typeOnly</span><span class="o">:</span> <span class="mi">1</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">the</span> <span class="nx">type</span> <span class="k">or</span> <span class="k">class</span> <span class="nc">name</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">object</span><span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-else">
<h2>f:else</h2>
<p>Else-Branch of a condition. Only has an effect inside of &#8220;If&#8221;. See the If-ViewHelper for documentation.</p>
<div class="section" id="id9">
<h3>Examples</h3>
<p><strong>Output content if condition is not met</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;{someCondition}&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">else</span><span class="o">&gt;</span>
    <span class="nx">condition</span> <span class="nx">was</span> <span class="k">not</span> <span class="k">true</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">else</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Everything</span> <span class="nx">inside</span> <span class="nx">the</span> <span class="s2">&quot;else&quot;</span> <span class="nx">tag</span> <span class="nx">is</span> <span class="nx">displayed</span> <span class="k">if</span> <span class="nx">the</span> <span class="nx">condition</span> <span class="nx">evaluates</span> <span class="nx">to</span> <span class="k">FALSE</span><span class="o">.</span>
<span class="nx">Otherwise</span> <span class="nx">nothing</span> <span class="nx">is</span> <span class="nx">outputted</span> <span class="nx">in</span> <span class="k">this</span> <span class="nx">example</span><span class="o">.</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-flashmessages">
<h2>f:flashMessages</h2>
<p>View helper which renders the flash messages (if there are any) as an unsorted list.</p>
<div class="section" id="id10">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">as</span></tt> (string, optional): The name of the current flashMessage variable for rendering inside</li>
<li><tt class="docutils literal"><span class="pre">severity</span></tt> (string, optional): severity of the messages (One of the TYPO3FlowErrorMessage::SEVERITY_* constants)</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
<div class="section" id="id11">
<h3>Examples</h3>
<p><strong>Simple</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">flashMessages</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;flashmessages-ok&quot;</span><span class="o">&gt;</span><span class="nx">Some</span> <span class="k">Default</span> <span class="nx">Message</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;flashmessages-warning&quot;</span><span class="o">&gt;</span><span class="nx">Some</span> <span class="nx">Warning</span> <span class="nx">Message</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
<p><strong>Output with css class</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">flashMessages</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;specialClass&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;specialClass&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;specialClass-ok&quot;</span><span class="o">&gt;</span><span class="k">Default</span> <span class="nx">Message</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;specialClass-notice&quot;</span><span class="o">&gt;&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Some</span> <span class="nx">notice</span> <span class="nx">message</span><span class="o">&lt;/</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">With</span> <span class="nx">message</span> <span class="nx">title</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
<p><strong>Output flash messages as a list, with arguments and filtered by a severity</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">flashMessages</span> <span class="nx">severity</span><span class="o">=</span><span class="s2">&quot;Warning&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;flashMessages&quot;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nb">dl</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;messages&quot;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{flashMessages}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;flashMessage&quot;</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">dt</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">flashMessage</span><span class="o">.</span><span class="nx">code</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">dt</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">dd</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">flashMessage</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">dd</span><span class="o">&gt;</span>
        <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
        <span class="o">&lt;/</span><span class="nb">dl</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">flashMessages</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nb">dl</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;messages&quot;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">dt</span><span class="o">&gt;</span><span class="mi">1013</span><span class="o">&lt;/</span><span class="nx">dt</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">dd</span><span class="o">&gt;</span><span class="nx">Some</span> <span class="nx">Warning</span> <span class="nx">Message</span><span class="o">.&lt;/</span><span class="nx">dd</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nb">dl</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-for">
<h2>f:for</h2>
<p>Loop view helper which can be used to interate over array.
Implements what a basic foreach()-PHP-method does.</p>
<div class="section" id="id12">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">each</span></tt> (array): The array or SplObjectStorage to iterated over</li>
<li><tt class="docutils literal"><span class="pre">as</span></tt> (string): The name of the iteration variable</li>
<li><tt class="docutils literal"><span class="pre">key</span></tt> (string, optional): The name of the variable to store the current array key</li>
<li><tt class="docutils literal"><span class="pre">reverse</span></tt> (boolean, optional): If enabled, the iterator will start with the last element and proceed reversely</li>
<li><tt class="docutils literal"><span class="pre">iteration</span></tt> (string, optional): The name of the variable to store iteration information (index, cycle, isFirst, isLast, isEven, isOdd)</li>
</ul>
</div>
<div class="section" id="id13">
<h3>Examples</h3>
<p><strong>Simple Loop</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{0:1, 1:2, 2:3, 3:4}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">foo</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mi">1234</span>
</pre></div>
</div>
<p><strong>Output array key</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{fruit1: &#39;apple&#39;, fruit2: &#39;pear&#39;, fruit3: &#39;banana&#39;, fruit4: &#39;cherry&#39;}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;fruit&quot;</span> <span class="nb">key</span><span class="o">=</span><span class="s2">&quot;label&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">label</span><span class="p">}</span><span class="o">:</span> <span class="p">{</span><span class="nx">fruit</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">fruit1</span><span class="o">:</span> <span class="nx">apple</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">fruit2</span><span class="o">:</span> <span class="nx">pear</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">fruit3</span><span class="o">:</span> <span class="nx">banana</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">fruit4</span><span class="o">:</span> <span class="nx">cherry</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
<p><strong>Iteration information</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{0:1, 1:2, 2:3, 3:4}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span> <span class="nx">iteration</span><span class="o">=</span><span class="s2">&quot;fooIterator&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">Index</span><span class="o">:</span> <span class="p">{</span><span class="nx">fooIterator</span><span class="o">.</span><span class="nx">index</span><span class="p">}</span> <span class="nx">Cycle</span><span class="o">:</span> <span class="p">{</span><span class="nx">fooIterator</span><span class="o">.</span><span class="nx">cycle</span><span class="p">}</span> <span class="nx">Total</span><span class="o">:</span> <span class="p">{</span><span class="nx">fooIterator</span><span class="o">.</span><span class="nx">total</span><span class="p">}{</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">condition</span><span class="o">:</span> <span class="nx">fooIterator</span><span class="o">.</span><span class="nx">isEven</span><span class="p">,</span> <span class="nx">then</span><span class="o">:</span> <span class="s1">&#39; Even&#39;</span><span class="p">)}{</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">condition</span><span class="o">:</span> <span class="nx">fooIterator</span><span class="o">.</span><span class="nx">isOdd</span><span class="p">,</span> <span class="nx">then</span><span class="o">:</span> <span class="s1">&#39; Odd&#39;</span><span class="p">)}{</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">condition</span><span class="o">:</span> <span class="nx">fooIterator</span><span class="o">.</span><span class="nx">isFirst</span><span class="p">,</span> <span class="nx">then</span><span class="o">:</span> <span class="s1">&#39; First&#39;</span><span class="p">)}{</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">condition</span><span class="o">:</span> <span class="nx">fooIterator</span><span class="o">.</span><span class="nx">isLast</span><span class="p">,</span> <span class="nx">then</span><span class="o">:</span> <span class="s1">&#39; Last&#39;</span><span class="p">)}</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">Index</span><span class="o">:</span> <span class="mi">0</span> <span class="nx">Cycle</span><span class="o">:</span> <span class="mi">1</span> <span class="nx">Total</span><span class="o">:</span> <span class="mi">4</span> <span class="nx">Odd</span> <span class="nx">First</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">Index</span><span class="o">:</span> <span class="mi">1</span> <span class="nx">Cycle</span><span class="o">:</span> <span class="mi">2</span> <span class="nx">Total</span><span class="o">:</span> <span class="mi">4</span> <span class="nx">Even</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">Index</span><span class="o">:</span> <span class="mi">2</span> <span class="nx">Cycle</span><span class="o">:</span> <span class="mi">3</span> <span class="nx">Total</span><span class="o">:</span> <span class="mi">4</span> <span class="nx">Odd</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">Index</span><span class="o">:</span> <span class="mi">3</span> <span class="nx">Cycle</span><span class="o">:</span> <span class="mi">4</span> <span class="nx">Total</span><span class="o">:</span> <span class="mi">4</span> <span class="nx">Even</span> <span class="nx">Last</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-form">
<h2>f:form</h2>
<div class="section" id="id14">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">action</span></tt> (string, optional): target action</li>
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array, optional): additional arguments</li>
<li><tt class="docutils literal"><span class="pre">controller</span></tt> (string, optional): name of target controller</li>
<li><tt class="docutils literal"><span class="pre">package</span></tt> (string, optional): name of target package</li>
<li><tt class="docutils literal"><span class="pre">subpackage</span></tt> (string, optional): name of target subpackage</li>
<li><tt class="docutils literal"><span class="pre">object</span></tt> (mixed, optional): object to use for the form. Use in conjunction with the &#8220;property&#8221; attribute on the sub tags</li>
<li><tt class="docutils literal"><span class="pre">section</span></tt> (string, optional): The anchor to be added to the action URI (only active if $actionUri is not set)</li>
<li><tt class="docutils literal"><span class="pre">format</span></tt> (string, optional): The requested format (e.g. &#8221;.html&#8221;) of the target page (only active if $actionUri is not set)</li>
<li><tt class="docutils literal"><span class="pre">additionalParams</span></tt> (array, optional): additional action URI query parameters that won&#8217;t be prefixed like $arguments (overrule $arguments) (only active if $actionUri is not set)</li>
<li><tt class="docutils literal"><span class="pre">absolute</span></tt> (boolean, optional): If set, an absolute action URI is rendered (only active if $actionUri is not set)</li>
<li><tt class="docutils literal"><span class="pre">addQueryString</span></tt> (boolean, optional): If set, the current query parameters will be kept in the action URI (only active if $actionUri is not set)</li>
<li><tt class="docutils literal"><span class="pre">argumentsToBeExcludedFromQueryString</span></tt> (array, optional): arguments to be removed from the action URI. Only active if $addQueryString = TRUE and $actionUri is not set</li>
<li><tt class="docutils literal"><span class="pre">fieldNamePrefix</span></tt> (string, optional): Prefix that will be added to all field names within this form</li>
<li><tt class="docutils literal"><span class="pre">actionUri</span></tt> (string, optional): can be used to overwrite the &#8220;action&#8221; attribute of the form tag</li>
<li><tt class="docutils literal"><span class="pre">objectName</span></tt> (string, optional): name of the object that is bound to this form. If this argument is not specified, the name attribute of this form is used to determine the FormObjectName</li>
<li><tt class="docutils literal"><span class="pre">enctype</span></tt> (string, optional): MIME type with which the form is submitted</li>
<li><tt class="docutils literal"><span class="pre">method</span></tt> (string, optional): Transfer type (GET or POST)</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of form</li>
<li><tt class="docutils literal"><span class="pre">onreset</span></tt> (string, optional): JavaScript: On reset of the form</li>
<li><tt class="docutils literal"><span class="pre">onsubmit</span></tt> (string, optional): JavaScript: On submit of the form</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
</div>
<div class="section" id="f-form-button">
<h2>f:form.button</h2>
<p>Creates a button.</p>
<div class="section" id="id15">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">type</span></tt> (string, optional): Specifies the type of button (e.g. &#8220;button&#8221;, &#8220;reset&#8221; or &#8220;submit&#8221;)</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of input tag</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (mixed, optional): Value of input tag</li>
<li><tt class="docutils literal"><span class="pre">property</span></tt> (string, optional): Name of Object Property. If used in conjunction with &lt;f:form object=&#8221;...&#8221;&gt;, &#8220;name&#8221; and &#8220;value&#8221; properties will be ignored.</li>
<li><tt class="docutils literal"><span class="pre">autofocus</span></tt> (string, optional): Specifies that a button should automatically get focus when the page loads</li>
<li><tt class="docutils literal"><span class="pre">disabled</span></tt> (string, optional): Specifies that the input element should be disabled when the page loads</li>
<li><tt class="docutils literal"><span class="pre">form</span></tt> (string, optional): Specifies one or more forms the button belongs to</li>
<li><tt class="docutils literal"><span class="pre">formaction</span></tt> (string, optional): Specifies where to send the form-data when a form is submitted. Only for type=&#8221;submit&#8221;</li>
<li><tt class="docutils literal"><span class="pre">formenctype</span></tt> (string, optional): Specifies how form-data should be encoded before sending it to a server. Only for type=&#8221;submit&#8221; (e.g. &#8220;application/x-www-form-urlencoded&#8221;, &#8220;multipart/form-data&#8221; or &#8220;text/plain&#8221;)</li>
<li><tt class="docutils literal"><span class="pre">formmethod</span></tt> (string, optional): Specifies how to send the form-data (which HTTP method to use). Only for type=&#8221;submit&#8221; (e.g. &#8220;get&#8221; or &#8220;post&#8221;)</li>
<li><tt class="docutils literal"><span class="pre">formnovalidate</span></tt> (string, optional): Specifies that the form-data should not be validated on submission. Only for type=&#8221;submit&#8221;</li>
<li><tt class="docutils literal"><span class="pre">formtarget</span></tt> (string, optional): Specifies where to display the response after submitting the form. Only for type=&#8221;submit&#8221; (e.g. &#8220;_blank&#8221;, &#8220;_self&#8221;, &#8220;_parent&#8221;, &#8220;_top&#8221;, &#8220;framename&#8221;)</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
<div class="section" id="id16">
<h3>Examples</h3>
<p><strong>Defaults</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">button</span><span class="o">&gt;</span><span class="nx">Send</span> <span class="nx">Mail</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">button</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nx">Send</span> <span class="nx">Mail</span><span class="o">&lt;/</span><span class="nx">button</span><span class="o">&gt;</span>
</pre></div>
</div>
<p><strong>Disabled cancel button with some HTML5 attributes</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;reset&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;buttonName&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;buttonValue&quot;</span> <span class="nx">disabled</span><span class="o">=</span><span class="s2">&quot;disabled&quot;</span> <span class="nx">formmethod</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="nx">formnovalidate</span><span class="o">=</span><span class="s2">&quot;formnovalidate&quot;</span><span class="o">&gt;</span><span class="nx">Cancel</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">button</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">disabled</span><span class="o">=</span><span class="s2">&quot;disabled&quot;</span> <span class="nx">formmethod</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="nx">formnovalidate</span><span class="o">=</span><span class="s2">&quot;formnovalidate&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;reset&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myForm[buttonName]&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;buttonValue&quot;</span><span class="o">&gt;</span><span class="nx">Cancel</span><span class="o">&lt;/</span><span class="nx">button</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-form-checkbox">
<h2>f:form.checkbox</h2>
<p>View Helper which creates a simple checkbox (&lt;input type=&#8221;checkbox&#8221;&gt;).</p>
<div class="section" id="id17">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">checked</span></tt> (boolean, optional): Specifies that the input element should be preselected</li>
<li><tt class="docutils literal"><span class="pre">multiple</span></tt> (boolean, optional): Specifies whether this checkbox belongs to a multivalue (is part of a checkbox group)</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of input tag</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (string): Value of input tag. Required for checkboxes</li>
<li><tt class="docutils literal"><span class="pre">property</span></tt> (string, optional): Name of Object Property. If used in conjunction with &lt;f:form object=&#8221;...&#8221;&gt;, &#8220;name&#8221; and &#8220;value&#8221; properties will be ignored.</li>
<li><tt class="docutils literal"><span class="pre">disabled</span></tt> (string, optional): Specifies that the input element should be disabled when the page loads</li>
<li><tt class="docutils literal"><span class="pre">errorClass</span></tt> (string, optional): CSS class to set if there are errors for this view helper</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
<div class="section" id="id18">
<h3>Examples</h3>
<p><strong>Example</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">checkbox</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myCheckBox&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;someValue&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;checkbox&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myCheckBox&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;someValue&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p><strong>Preselect</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">checkbox</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myCheckBox&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;someValue&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="s2">&quot;{object.value} == 5&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;checkbox&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myCheckBox&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;someValue&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="s2">&quot;checked&quot;</span> <span class="o">/&gt;</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nv">$object</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Bind to object property</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">checkbox</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;interests&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;TYPO3&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;checkbox&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;user[interests][]&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;TYPO3&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="s2">&quot;checked&quot;</span> <span class="o">/&gt;</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">property</span> <span class="s2">&quot;interests&quot;</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-form-hidden">
<h2>f:form.hidden</h2>
<p>Renders an &lt;input type=&#8221;hidden&#8221; ...&gt; tag.</p>
<div class="section" id="id19">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of input tag</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (mixed, optional): Value of input tag</li>
<li><tt class="docutils literal"><span class="pre">property</span></tt> (string, optional): Name of Object Property. If used in conjunction with &lt;f:form object=&#8221;...&#8221;&gt;, &#8220;name&#8221; and &#8220;value&#8221; properties will be ignored.</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
<div class="section" id="id20">
<h3>Examples</h3>
<p><strong>Example</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">hidden</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myHiddenValue&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;42&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myHiddenValue&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;42&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-form-password">
<h2>f:form.password</h2>
<p>View Helper which creates a simple Password Text Box (&lt;input type=&#8221;password&#8221;&gt;).</p>
<div class="section" id="id21">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of input tag</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (mixed, optional): Value of input tag</li>
<li><tt class="docutils literal"><span class="pre">property</span></tt> (string, optional): Name of Object Property. If used in conjunction with &lt;f:form object=&#8221;...&#8221;&gt;, &#8220;name&#8221; and &#8220;value&#8221; properties will be ignored.</li>
<li><tt class="docutils literal"><span class="pre">disabled</span></tt> (string, optional): Specifies that the input element should be disabled when the page loads</li>
<li><tt class="docutils literal"><span class="pre">maxlength</span></tt> (int, optional): The maxlength attribute of the input field (will not be validated)</li>
<li><tt class="docutils literal"><span class="pre">readonly</span></tt> (string, optional): The readonly attribute of the input field</li>
<li><tt class="docutils literal"><span class="pre">size</span></tt> (int, optional): The size of the input field</li>
<li><tt class="docutils literal"><span class="pre">errorClass</span></tt> (string, optional): CSS class to set if there are errors for this view helper</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
<div class="section" id="id22">
<h3>Examples</h3>
<p><strong>Example</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">password</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myPassword&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myPassword&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;default value&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-form-radio">
<h2>f:form.radio</h2>
<p>View Helper which creates a simple radio button (&lt;input type=&#8221;radio&#8221;&gt;).</p>
<div class="section" id="id23">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">checked</span></tt> (boolean, optional): Specifies that the input element should be preselected</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of input tag</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (string): Value of input tag. Required for radio buttons</li>
<li><tt class="docutils literal"><span class="pre">property</span></tt> (string, optional): Name of Object Property. If used in conjunction with &lt;f:form object=&#8221;...&#8221;&gt;, &#8220;name&#8221; and &#8220;value&#8221; properties will be ignored.</li>
<li><tt class="docutils literal"><span class="pre">disabled</span></tt> (string, optional): Specifies that the input element should be disabled when the page loads</li>
<li><tt class="docutils literal"><span class="pre">errorClass</span></tt> (string, optional): CSS class to set if there are errors for this view helper</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
<div class="section" id="id24">
<h3>Examples</h3>
<p><strong>Example</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">radio</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myRadioButton&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;someValue&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;radio&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myRadioButton&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;someValue&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p><strong>Preselect</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">radio</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myRadioButton&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;someValue&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="s2">&quot;{object.value} == 5&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;radio&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myRadioButton&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;someValue&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="s2">&quot;checked&quot;</span> <span class="o">/&gt;</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nv">$object</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Bind to object property</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">radio</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;newsletter&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="o">/&gt;</span> <span class="nx">yes</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">radio</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;newsletter&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;0&quot;</span> <span class="o">/&gt;</span> <span class="nx">no</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;radio&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;user[newsletter]&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="s2">&quot;checked&quot;</span> <span class="o">/&gt;</span> <span class="nx">yes</span>
<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;radio&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;user[newsletter]&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;0&quot;</span> <span class="o">/&gt;</span> <span class="nx">no</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">property</span> <span class="s2">&quot;newsletter&quot;</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-form-select">
<h2>f:form.select</h2>
<div class="section" id="id25">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of input tag</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (mixed, optional): Value of input tag</li>
<li><tt class="docutils literal"><span class="pre">property</span></tt> (string, optional): Name of Object Property. If used in conjunction with &lt;f:form object=&#8221;...&#8221;&gt;, &#8220;name&#8221; and &#8220;value&#8221; properties will be ignored.</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
<li><tt class="docutils literal"><span class="pre">multiple</span></tt> (string, optional): if set, multiple select field</li>
<li><tt class="docutils literal"><span class="pre">size</span></tt> (string, optional): Size of input field</li>
<li><tt class="docutils literal"><span class="pre">disabled</span></tt> (string, optional): Specifies that the input element should be disabled when the page loads</li>
<li><tt class="docutils literal"><span class="pre">options</span></tt> (array): Associative array with internal IDs as key, and the values are displayed in the select box</li>
<li><tt class="docutils literal"><span class="pre">optionValueField</span></tt> (string, optional): If specified, will call the appropriate getter on each object to determine the value.</li>
<li><tt class="docutils literal"><span class="pre">optionLabelField</span></tt> (string, optional): If specified, will call the appropriate getter on each object to determine the label.</li>
<li><tt class="docutils literal"><span class="pre">sortByOptionLabel</span></tt> (boolean, optional): If true, List will be sorted by label.</li>
<li><tt class="docutils literal"><span class="pre">selectAllByDefault</span></tt> (boolean, optional): If specified options are selected if none was set before.</li>
<li><tt class="docutils literal"><span class="pre">errorClass</span></tt> (string, optional): CSS class to set if there are errors for this view helper</li>
<li><tt class="docutils literal"><span class="pre">translate</span></tt> (array, optional): Configures translation of view helper output.</li>
</ul>
</div>
</div>
<div class="section" id="f-form-submit">
<h2>f:form.submit</h2>
<p>Creates a submit button.</p>
<div class="section" id="id26">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of input tag</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (mixed, optional): Value of input tag</li>
<li><tt class="docutils literal"><span class="pre">property</span></tt> (string, optional): Name of Object Property. If used in conjunction with &lt;f:form object=&#8221;...&#8221;&gt;, &#8220;name&#8221; and &#8220;value&#8221; properties will be ignored.</li>
<li><tt class="docutils literal"><span class="pre">disabled</span></tt> (string, optional): Specifies that the input element should be disabled when the page loads</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
<div class="section" id="id27">
<h3>Examples</h3>
<p><strong>Defaults</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">submit</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Send Mail&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p><strong>Dummy content for template preview</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">submit</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;mySubmit&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Send Mail&quot;</span><span class="o">&gt;&lt;</span><span class="nx">button</span><span class="o">&gt;</span><span class="nx">dummy</span> <span class="nx">button</span><span class="o">&lt;/</span><span class="nx">button</span><span class="o">&gt;&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">submit</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;mySubmit&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Send Mail&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-form-textarea">
<h2>f:form.textarea</h2>
<p>Textarea view helper.
The value of the text area needs to be set via the &#8220;value&#8221; attribute, as with all other form ViewHelpers.</p>
<div class="section" id="id28">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of input tag</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (mixed, optional): Value of input tag</li>
<li><tt class="docutils literal"><span class="pre">property</span></tt> (string, optional): Name of Object Property. If used in conjunction with &lt;f:form object=&#8221;...&#8221;&gt;, &#8220;name&#8221; and &#8220;value&#8221; properties will be ignored.</li>
<li><tt class="docutils literal"><span class="pre">rows</span></tt> (int, optional): The number of rows of a text area</li>
<li><tt class="docutils literal"><span class="pre">cols</span></tt> (int, optional): The number of columns of a text area</li>
<li><tt class="docutils literal"><span class="pre">disabled</span></tt> (string, optional): Specifies that the input element should be disabled when the page loads</li>
<li><tt class="docutils literal"><span class="pre">errorClass</span></tt> (string, optional): CSS class to set if there are errors for this view helper</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
<div class="section" id="id29">
<h3>Examples</h3>
<p><strong>Example</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">textarea</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myTextArea&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;This is shown inside the textarea&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">textarea</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myTextArea&quot;</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">is</span> <span class="nx">shown</span> <span class="nx">inside</span> <span class="nx">the</span> <span class="nx">textarea</span><span class="o">&lt;/</span><span class="nx">textarea</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-form-textfield">
<h2>f:form.textfield</h2>
<p>View Helper which creates a text field (&lt;input type=&#8221;text&#8221;&gt;).</p>
<div class="section" id="id30">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">required</span></tt> (boolean, optional): If the field is required or not</li>
<li><tt class="docutils literal"><span class="pre">type</span></tt> (string, optional): The field type, e.g. &#8220;text&#8221;, &#8220;email&#8221;, &#8220;url&#8221; etc.</li>
<li><tt class="docutils literal"><span class="pre">placeholder</span></tt> (string, optional): A string used as a placeholder for the value to enter</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of input tag</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (mixed, optional): Value of input tag</li>
<li><tt class="docutils literal"><span class="pre">property</span></tt> (string, optional): Name of Object Property. If used in conjunction with &lt;f:form object=&#8221;...&#8221;&gt;, &#8220;name&#8221; and &#8220;value&#8221; properties will be ignored.</li>
<li><tt class="docutils literal"><span class="pre">disabled</span></tt> (string, optional): Specifies that the input element should be disabled when the page loads</li>
<li><tt class="docutils literal"><span class="pre">maxlength</span></tt> (int, optional): The maxlength attribute of the input field (will not be validated)</li>
<li><tt class="docutils literal"><span class="pre">readonly</span></tt> (string, optional): The readonly attribute of the input field</li>
<li><tt class="docutils literal"><span class="pre">size</span></tt> (int, optional): The size of the input field</li>
<li><tt class="docutils literal"><span class="pre">errorClass</span></tt> (string, optional): CSS class to set if there are errors for this view helper</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
<div class="section" id="id31">
<h3>Examples</h3>
<p><strong>Example</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">textfield</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myTextBox&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;default value&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;myTextBox&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;default value&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-form-upload">
<h2>f:form.upload</h2>
<p>A view helper which generates an &lt;input type=&#8221;file&#8221;&gt; HTML element.
Make sure to set enctype=&#8221;multipart/form-data&#8221; on the form!</p>
<p>If a file has been uploaded successfully and the form is re-displayed due to validation errors,
this ViewHelper will render hidden fields that contain the previously generated resource so you
won&#8217;t have to upload the file again.</p>
<p>You can use a separate ViewHelper to display previously uploaded resources in order to remove/replace them.</p>
<div class="section" id="id32">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of input tag</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (mixed, optional): Value of input tag</li>
<li><tt class="docutils literal"><span class="pre">property</span></tt> (string, optional): Name of Object Property. If used in conjunction with &lt;f:form object=&#8221;...&#8221;&gt;, &#8220;name&#8221; and &#8220;value&#8221; properties will be ignored.</li>
<li><tt class="docutils literal"><span class="pre">disabled</span></tt> (string, optional): Specifies that the input element should be disabled when the page loads</li>
<li><tt class="docutils literal"><span class="pre">errorClass</span></tt> (string, optional): CSS class to set if there are errors for this view helper</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
</ul>
</div>
<div class="section" id="id33">
<h3>Examples</h3>
<p><strong>Example</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">upload</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;file&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;file&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;file&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p><strong>Multiple Uploads</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">upload</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;attachments.0.originalResource&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">upload</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;attachments.1.originalResource&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;file&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;formObject[attachments][0][originalResource]&quot;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;file&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;formObject[attachments][1][originalResource]&quot;</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-form-validationresults">
<h2>f:form.validationResults</h2>
<p>Validation results view helper</p>
<div class="section" id="id34">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">for</span></tt> (string, optional): The name of the error name (e.g. argument name or property name). This can also be a property path (like blog.title), and will then only display the validation errors of that property.</li>
<li><tt class="docutils literal"><span class="pre">as</span></tt> (string, optional): The name of the variable to store the current error</li>
</ul>
</div>
<div class="section" id="id35">
<h3>Examples</h3>
<p><strong>Output error messages as a list</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">validationResults</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;{validationResults.flattenedErrors}&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{validationResults.flattenedErrors}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span> <span class="nb">key</span><span class="o">=</span><span class="s2">&quot;propertyPath&quot;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">propertyPath</span><span class="p">}</span>
          <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{errors}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;error&quot;</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">error</span><span class="o">.</span><span class="nx">code</span><span class="p">}</span><span class="o">:</span> <span class="p">{</span><span class="nx">error</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
          <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
          <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
        <span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
      <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">validationResults</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="mi">1234567890</span><span class="o">:</span> <span class="nx">Validation</span> <span class="nx">errors</span> <span class="k">for</span> <span class="nx">argument</span> <span class="s2">&quot;newBlog&quot;</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
<p><strong>Output error messages for a single property</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">validationResults</span> <span class="k">for</span><span class="o">=</span><span class="s2">&quot;someProperty&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;{validationResults.flattenedErrors}&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{validationResults.errors}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;error&quot;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">error</span><span class="o">.</span><span class="nx">code</span><span class="p">}</span><span class="o">:</span> <span class="p">{</span><span class="nx">error</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
      <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">validationResults</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;errors&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="mi">1234567890</span><span class="o">:</span> <span class="nx">Some</span> <span class="nx">error</span> <span class="nx">message</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-format-crop">
<h2>f:format.crop</h2>
<p>Use this view helper to crop the text between its opening and closing tags.</p>
<div class="section" id="id36">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">maxCharacters</span></tt> (integer): Place where to truncate the string</li>
<li><tt class="docutils literal"><span class="pre">append</span></tt> (string, optional): What to append, if truncation happened</li>
</ul>
</div>
<div class="section" id="id37">
<h3>Examples</h3>
<p><strong>Defaults</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">crop</span> <span class="nx">maxCharacters</span><span class="o">=</span><span class="s2">&quot;10&quot;</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">is</span> <span class="nx">some</span> <span class="nx">very</span> <span class="nx">long</span> <span class="nx">text</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">crop</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">This</span> <span class="nx">is</span> <span class="nx">so</span><span class="o">...</span>
</pre></div>
</div>
<p><strong>Custom suffix</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">crop</span> <span class="nx">maxCharacters</span><span class="o">=</span><span class="s2">&quot;17&quot;</span> <span class="nx">append</span><span class="o">=</span><span class="s2">&quot; [more]&quot;</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">is</span> <span class="nx">some</span> <span class="nx">very</span> <span class="nx">long</span> <span class="nx">text</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">crop</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">This</span> <span class="nx">is</span> <span class="nx">some</span> <span class="nx">very</span> <span class="p">[</span><span class="nx">more</span><span class="p">]</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-format-currency">
<h2>f:format.currency</h2>
<p>Formats a given float to a currency representation.</p>
<div class="section" id="id38">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">currencySign</span></tt> (string, optional): (optional) The currency sign, eg $ or €.</li>
<li><tt class="docutils literal"><span class="pre">decimalSeparator</span></tt> (string, optional): (optional) The separator for the decimal point.</li>
<li><tt class="docutils literal"><span class="pre">thousandsSeparator</span></tt> (string, optional): (optional) The thousands separator.</li>
<li><tt class="docutils literal"><span class="pre">forceLocale</span></tt> (mixed, optional): Whether if, and what, Locale should be used; overriding $decimal- and $thousandsSeparator. May be boolean, string or TYPO3FlowI18nLocale</li>
</ul>
</div>
<div class="section" id="id39">
<h3>Examples</h3>
<p><strong>Defaults</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">currency</span><span class="o">&gt;</span><span class="mf">123.456</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">currency</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mi">123</span><span class="p">,</span><span class="mi">46</span>
</pre></div>
</div>
<p><strong>All parameters</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">currency</span> <span class="nx">currencySign</span><span class="o">=</span><span class="s2">&quot;$&quot;</span> <span class="nx">decimalSeparator</span><span class="o">=</span><span class="s2">&quot;.&quot;</span> <span class="nx">thousandsSeparator</span><span class="o">=</span><span class="s2">&quot;,&quot;</span><span class="o">&gt;</span><span class="mi">54321</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">currency</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mi">54</span><span class="p">,</span><span class="mf">321.00</span> <span class="err">$</span>
</pre></div>
</div>
<p><strong>Inline notation</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">someNumber</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">currency</span><span class="p">(</span><span class="nx">thousandsSeparator</span><span class="o">:</span> <span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="nx">currencySign</span><span class="o">:</span> <span class="s1">&#39;€&#39;</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mi">54</span><span class="p">,</span><span class="mi">321</span><span class="p">,</span><span class="mo">00</span> <span class="err">€</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">someNumber</span><span class="p">})</span>
</pre></div>
</div>
<p><strong>Inline notation with current locale used</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">someNumber</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">currency</span><span class="p">(</span><span class="nx">currencySign</span><span class="o">:</span> <span class="s1">&#39;€&#39;</span><span class="p">,</span> <span class="nx">forceLocale</span><span class="o">:</span> <span class="k">true</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mf">54.321</span><span class="p">,</span><span class="mo">00</span> <span class="err">€</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">someNumber</span><span class="p">}</span> <span class="k">and</span> <span class="nx">the</span> <span class="nb">current</span> <span class="nx">locale</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inline notation with specific locale used</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">someNumber</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">currency</span><span class="p">(</span><span class="nx">currencySign</span><span class="o">:</span> <span class="s1">&#39;EUR&#39;</span><span class="p">,</span> <span class="nx">forceLocale</span><span class="o">:</span> <span class="s1">&#39;de_DE&#39;</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mf">54.321</span><span class="p">,</span><span class="mo">00</span> <span class="nx">EUR</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">someNumber</span><span class="p">})</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-format-date">
<h2>f:format.date</h2>
<p>Formats a DateTime object.</p>
<div class="section" id="id40">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">date</span></tt> (mixed, optional): either a DateTime object or a string that is accepted by DateTime constructor</li>
<li><tt class="docutils literal"><span class="pre">format</span></tt> (string, optional): Format String which is taken to format the Date/Time</li>
<li><tt class="docutils literal"><span class="pre">forceLocale</span></tt> (mixed, optional): Whether if, and what, Locale should be used. May be boolean, string or TYPO3FlowI18nLocale</li>
<li><tt class="docutils literal"><span class="pre">localeFormatType</span></tt> (string, optional): Whether to format (according to locale set in $forceLocale) date, time or datetime. Must be one of TYPO3FlowI18nCldrReaderDatesReader::FORMAT_TYPE_*&#8217;s constants.</li>
<li><tt class="docutils literal"><span class="pre">localeFormatLength</span></tt> (string, optional): Format length if locale set in $forceLocale. Must be one of TYPO3FlowI18nCldrReaderDatesReader::FORMAT_LENGTH_*&#8217;s constants.</li>
</ul>
</div>
<div class="section" id="id41">
<h3>Examples</h3>
<p><strong>Defaults</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">dateObject</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mi">1980</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">13</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nb">current</span> <span class="nb">date</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Custom date format</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span> <span class="nx">format</span><span class="o">=</span><span class="s2">&quot;H:i&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">dateObject</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mo">01</span><span class="o">:</span><span class="mi">23</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nb">current</span> <span class="nb">time</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>strtotime string</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span> <span class="nx">format</span><span class="o">=</span><span class="s2">&quot;d.m.Y - H:i:s&quot;</span><span class="o">&gt;+</span><span class="mi">1</span> <span class="nx">week</span> <span class="mi">2</span> <span class="nx">days</span> <span class="mi">4</span> <span class="nx">hours</span> <span class="mi">2</span> <span class="nx">seconds</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mf">13.12</span><span class="o">.</span><span class="mi">1980</span> <span class="o">-</span> <span class="mi">21</span><span class="o">:</span><span class="mo">03</span><span class="o">:</span><span class="mi">42</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nb">current</span> <span class="nb">time</span><span class="p">,</span> <span class="nx">see</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">php</span><span class="o">.</span><span class="nx">net</span><span class="o">/</span><span class="nx">manual</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">function</span><span class="o">.</span><span class="nb">strtotime</span><span class="o">.</span><span class="nx">php</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>output date from unix timestamp</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span> <span class="nx">format</span><span class="o">=</span><span class="s2">&quot;d.m.Y - H:i:s&quot;</span><span class="o">&gt;@</span><span class="p">{</span><span class="nx">someTimestamp</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mf">13.12</span><span class="o">.</span><span class="mi">1980</span> <span class="o">-</span> <span class="mi">21</span><span class="o">:</span><span class="mo">03</span><span class="o">:</span><span class="mi">42</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nb">current</span> <span class="nb">time</span><span class="o">.</span> <span class="nx">Don</span><span class="err">&#39;</span><span class="nx">t</span> <span class="nx">forget</span> <span class="nx">the</span> <span class="s2">&quot;@&quot;</span> <span class="nx">in</span> <span class="nx">front</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">timestamp</span> <span class="nx">see</span> <span class="nx">http</span><span class="o">://</span><span class="nx">www</span><span class="o">.</span><span class="nx">php</span><span class="o">.</span><span class="nx">net</span><span class="o">/</span><span class="nx">manual</span><span class="o">/</span><span class="nx">en</span><span class="o">/</span><span class="nx">function</span><span class="o">.</span><span class="nb">strtotime</span><span class="o">.</span><span class="nx">php</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inline notation</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span><span class="p">(</span><span class="nb">date</span><span class="o">:</span> <span class="nx">dateObject</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mi">1980</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">13</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">dateObject</span><span class="p">})</span>
</pre></div>
</div>
<p><strong>Inline notation (2nd variant)</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">dateObject</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span><span class="p">()}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mi">1980</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">13</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">dateObject</span><span class="p">})</span>
</pre></div>
</div>
<p><strong>Inline notation, outputting date only, using current locale</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">dateObject</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span><span class="p">(</span><span class="nx">localeFormatType</span><span class="o">:</span> <span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="nx">forceLocale</span><span class="o">:</span> <span class="k">true</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mf">13.12</span><span class="o">.</span><span class="mi">1980</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">dateObject</span><span class="p">}</span> <span class="k">and</span> <span class="nx">the</span> <span class="nb">current</span> <span class="nx">locale</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inline notation with specific locale used</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">dateObject</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">date</span><span class="p">(</span><span class="nx">forceLocale</span><span class="o">:</span> <span class="s1">&#39;de_DE&#39;</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mf">13.12</span><span class="o">.</span><span class="mi">1980</span> <span class="mi">11</span><span class="o">:</span><span class="mi">15</span><span class="o">:</span><span class="mi">42</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">dateObject</span><span class="p">})</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-format-htmlentitiesdecode">
<h2>f:format.htmlentitiesDecode</h2>
<div class="section" id="id42">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">value</span></tt> (string, optional): string to format</li>
<li><tt class="docutils literal"><span class="pre">keepQuotes</span></tt> (boolean, optional): if TRUE, single and double quotes won&#8217;t be replaced (sets ENT_NOQUOTES flag)</li>
<li><tt class="docutils literal"><span class="pre">encoding</span></tt> (string, optional):</li>
</ul>
</div>
</div>
<div class="section" id="f-format-htmlentities">
<h2>f:format.htmlentities</h2>
<div class="section" id="id43">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">value</span></tt> (string, optional): string to format</li>
<li><tt class="docutils literal"><span class="pre">keepQuotes</span></tt> (boolean, optional): if TRUE, single and double quotes won&#8217;t be replaced (sets ENT_NOQUOTES flag)</li>
<li><tt class="docutils literal"><span class="pre">encoding</span></tt> (string, optional):</li>
<li><tt class="docutils literal"><span class="pre">doubleEncode</span></tt> (boolean, optional): If FALSE existing html entities won&#8217;t be encoded, the default is to convert everything.</li>
</ul>
</div>
</div>
<div class="section" id="f-format-htmlspecialchars">
<h2>f:format.htmlspecialchars</h2>
<div class="section" id="id44">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">value</span></tt> (string, optional): string to format</li>
<li><tt class="docutils literal"><span class="pre">keepQuotes</span></tt> (boolean, optional): if TRUE, single and double quotes won&#8217;t be replaced (sets ENT_NOQUOTES flag)</li>
<li><tt class="docutils literal"><span class="pre">encoding</span></tt> (string, optional):</li>
<li><tt class="docutils literal"><span class="pre">doubleEncode</span></tt> (boolean, optional): If FALSE existing html entities won&#8217;t be encoded, the default is to convert everything.</li>
</ul>
</div>
</div>
<div class="section" id="f-format-identifier">
<h2>f:format.identifier</h2>
<div class="section" id="id45">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">value</span></tt> (object, optional): the object to render the identifier for, or NULL if VH children should be used</li>
</ul>
</div>
</div>
<div class="section" id="f-format-json">
<h2>f:format.json</h2>
<p>Wrapper for PHPs json_encode function.</p>
<div class="section" id="id46">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">value</span></tt> (mixed, optional): The incoming data to convert, or NULL if VH children should be used</li>
<li><tt class="docutils literal"><span class="pre">forceObject</span></tt> (boolean, optional): Outputs an JSON object rather than an array</li>
</ul>
</div>
<div class="section" id="id47">
<h3>Examples</h3>
<p><strong>encoding a view variable</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">someArray</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">json</span><span class="p">()}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">[</span><span class="s2">&quot;array&quot;</span><span class="p">,</span><span class="s2">&quot;values&quot;</span><span class="p">]</span>
<span class="c1">// depending on the value of {someArray}</span>
</pre></div>
</div>
<p><strong>associative array</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">value</span><span class="o">:</span> <span class="p">{</span><span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">})}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="s2">&quot;foo&quot;</span><span class="o">:</span><span class="s2">&quot;bar&quot;</span><span class="p">,</span><span class="s2">&quot;bar&quot;</span><span class="o">:</span><span class="s2">&quot;baz&quot;</span><span class="p">}</span>
</pre></div>
</div>
<p><strong>non-associative array with forced object</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">value</span><span class="o">:</span> <span class="p">{</span><span class="mi">0</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">},</span> <span class="nx">forceObject</span><span class="o">:</span> <span class="mi">1</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="s2">&quot;0&quot;</span><span class="o">:</span><span class="s2">&quot;bar&quot;</span><span class="p">,</span><span class="s2">&quot;1&quot;</span><span class="o">:</span><span class="s2">&quot;baz&quot;</span><span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-format-nl2br">
<h2>f:format.nl2br</h2>
</div>
<div class="section" id="f-format-number">
<h2>f:format.number</h2>
<div class="section" id="id48">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">decimals</span></tt> (int, optional): The number of digits after the decimal point</li>
<li><tt class="docutils literal"><span class="pre">decimalSeparator</span></tt> (string, optional): The decimal point character</li>
<li><tt class="docutils literal"><span class="pre">thousandsSeparator</span></tt> (string, optional): The character for grouping the thousand digits</li>
</ul>
</div>
</div>
<div class="section" id="f-format-padding">
<h2>f:format.padding</h2>
<div class="section" id="id49">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">padLength</span></tt> (integer): Length of the resulting string. If the value of pad_length is negative or less than the length of the input string, no padding takes place.</li>
<li><tt class="docutils literal"><span class="pre">padString</span></tt> (string, optional): The padding string</li>
<li><tt class="docutils literal"><span class="pre">padType</span></tt> (string, optional): Append the padding at this site (Possible values: right,left,both. Default: right)</li>
</ul>
</div>
</div>
<div class="section" id="f-format-printf">
<h2>f:format.printf</h2>
<p>A view helper for formatting values with printf. Either supply an array for
the arguments or a single value.
See <a class="reference external" href="http://www.php.net/manual/en/function.sprintf.php">http://www.php.net/manual/en/function.sprintf.php</a></p>
<div class="section" id="id50">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array): The arguments for vsprintf</li>
</ul>
</div>
<div class="section" id="id51">
<h3>Examples</h3>
<p><strong>Scientific notation</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">printf</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{number: 362525200}&quot;</span><span class="o">&gt;%.</span><span class="mi">3</span><span class="nx">e</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">printf</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mf">3.625e+8</span>
</pre></div>
</div>
<p><strong>Argument swapping</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">printf</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{0: 3, 1: &#39;Kasper&#39;}&quot;</span><span class="o">&gt;%</span><span class="mi">2</span><span class="nv">$s</span> <span class="nx">is</span> <span class="nx">great</span><span class="p">,</span> <span class="nx">TYPO</span><span class="o">%</span><span class="mi">1</span><span class="nv">$d</span> <span class="nx">too</span><span class="o">.</span> <span class="nx">Yes</span><span class="p">,</span> <span class="nx">TYPO</span><span class="o">%</span><span class="mi">1</span><span class="nv">$d</span> <span class="nx">is</span> <span class="nx">great</span> <span class="k">and</span> <span class="nx">so</span> <span class="nx">is</span> <span class="o">%</span><span class="mi">2</span><span class="nv">$s</span><span class="o">!&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">printf</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Kasper</span> <span class="nx">is</span> <span class="nx">great</span><span class="p">,</span> <span class="nx">TYPO3</span> <span class="nx">too</span><span class="o">.</span> <span class="nx">Yes</span><span class="p">,</span> <span class="nx">TYPO3</span> <span class="nx">is</span> <span class="nx">great</span> <span class="k">and</span> <span class="nx">so</span> <span class="nx">is</span> <span class="nx">Kasper</span><span class="o">!</span>
</pre></div>
</div>
<p><strong>Single argument</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">printf</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{1: &#39;TYPO3&#39;}&quot;</span><span class="o">&gt;</span><span class="nx">We</span> <span class="nx">love</span> <span class="o">%</span><span class="nx">s</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">printf</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">We</span> <span class="nx">love</span> <span class="nx">TYPO3</span>
</pre></div>
</div>
<p><strong>Inline notation</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">someText</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nb">printf</span><span class="p">(</span><span class="nx">arguments</span><span class="o">:</span> <span class="p">{</span><span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;TYPO3&#39;</span><span class="p">})}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">We</span> <span class="nx">love</span> <span class="nx">TYPO3</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-format-raw">
<h2>f:format.raw</h2>
<p>Outputs an argument/value without any escaping. Is normally used to output
an ObjectAccessor which should not be escaped, but output as-is.</p>
<p>PAY SPECIAL ATTENTION TO SECURITY HERE (especially Cross Site Scripting),
as the output is NOT SANITIZED!</p>
<div class="section" id="id52">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">value</span></tt> (mixed, optional): The value to output</li>
</ul>
</div>
<div class="section" id="id53">
<h3>Examples</h3>
<p><strong>Child nodes</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">raw</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">string</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">raw</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">(</span><span class="nx">Content</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">string</span><span class="p">}</span> <span class="nx">without</span> <span class="nx">any</span> <span class="nx">conversion</span><span class="o">/</span><span class="nx">escaping</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Value attribute</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">raw</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;{string}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">(</span><span class="nx">Content</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">string</span><span class="p">}</span> <span class="nx">without</span> <span class="nx">any</span> <span class="nx">conversion</span><span class="o">/</span><span class="nx">escaping</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inline notation</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">string</span> <span class="o">-&gt;</span> <span class="na">f</span><span class="o">:</span><span class="nx">format</span><span class="o">.</span><span class="nx">raw</span><span class="p">()}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">(</span><span class="nx">Content</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">string</span><span class="p">}</span> <span class="nx">without</span> <span class="nx">any</span> <span class="nx">conversion</span><span class="o">/</span><span class="nx">escaping</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-format-striptags">
<h2>f:format.stripTags</h2>
<div class="section" id="id54">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">value</span></tt> (string, optional): string to format</li>
</ul>
</div>
</div>
<div class="section" id="f-format-urlencode">
<h2>f:format.urlencode</h2>
<div class="section" id="id55">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">value</span></tt> (string, optional): string to format</li>
</ul>
</div>
</div>
<div class="section" id="f-groupedfor">
<h2>f:groupedFor</h2>
<p>Grouped loop view helper.
Loops through the specified values.</p>
<p>The groupBy argument also supports property paths.</p>
<div class="section" id="id56">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">each</span></tt> (array): The array or SplObjectStorage to iterated over</li>
<li><tt class="docutils literal"><span class="pre">as</span></tt> (string): The name of the iteration variable</li>
<li><tt class="docutils literal"><span class="pre">groupBy</span></tt> (string): Group by this property</li>
<li><tt class="docutils literal"><span class="pre">groupKey</span></tt> (string, optional): The name of the variable to store the current group</li>
</ul>
</div>
<div class="section" id="id57">
<h3>Examples</h3>
<p><strong>Simple</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">groupedFor</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{0: {name: &#39;apple&#39;, color: &#39;green&#39;}, 1: {name: &#39;cherry&#39;, color: &#39;red&#39;}, 2: {name: &#39;banana&#39;, color: &#39;yellow&#39;}, 3: {name: &#39;strawberry&#39;, color: &#39;red&#39;}}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;fruitsOfThisColor&quot;</span> <span class="nx">groupBy</span><span class="o">=</span><span class="s2">&quot;color&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{fruitsOfThisColor}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;fruit&quot;</span><span class="o">&gt;</span>
    <span class="p">{</span><span class="nx">fruit</span><span class="o">.</span><span class="nx">name</span><span class="p">}</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">groupedFor</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">apple</span> <span class="nx">cherry</span> <span class="nx">strawberry</span> <span class="nx">banana</span>
</pre></div>
</div>
<p><strong>Two dimensional list</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">groupedFor</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{0: {name: &#39;apple&#39;, color: &#39;green&#39;}, 1: {name: &#39;cherry&#39;, color: &#39;red&#39;}, 2: {name: &#39;banana&#39;, color: &#39;yellow&#39;}, 3: {name: &#39;strawberry&#39;, color: &#39;red&#39;}}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;fruitsOfThisColor&quot;</span> <span class="nx">groupBy</span><span class="o">=</span><span class="s2">&quot;color&quot;</span> <span class="nx">groupKey</span><span class="o">=</span><span class="s2">&quot;color&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">color</span><span class="p">}</span> <span class="nx">fruits</span><span class="o">:</span>
      <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{fruitsOfThisColor}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;fruit&quot;</span> <span class="nb">key</span><span class="o">=</span><span class="s2">&quot;label&quot;</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">label</span><span class="p">}</span><span class="o">:</span> <span class="p">{</span><span class="nx">fruit</span><span class="o">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
        <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
      <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">groupedFor</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">green</span> <span class="nx">fruits</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">:</span> <span class="nx">apple</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">red</span> <span class="nx">fruits</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">:</span> <span class="nx">cherry</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">:</span> <span class="nx">strawberry</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">yellow</span> <span class="nx">fruits</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">:</span> <span class="nx">banana</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-identity-json">
<h2>f:identity.json</h2>
<p>Renders the identity of a persisted object (if it has an identity).
Useful for using the identity outside of the form view helpers
(e.g. JavaScript and AJAX).</p>
<p>Deprecated since 1.1.0. Use f:format.identifier and f:format.json
ViewHelpers instead.</p>
<div class="section" id="id58">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">object</span></tt> (object, optional): The persisted object</li>
</ul>
</div>
<div class="section" id="id59">
<h3>Examples</h3>
<p><strong>Single alias</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">persistence</span><span class="o">.</span><span class="nx">identity</span> <span class="nx">object</span><span class="o">=</span><span class="s2">&quot;{post.blog}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="mf">97e7</span><span class="nx">e90a</span><span class="o">-</span><span class="mi">413</span><span class="nx">c</span><span class="o">-</span><span class="mi">44</span><span class="nx">ef</span><span class="o">-</span><span class="nx">b2d0</span><span class="o">-</span><span class="nx">ddfa4387b5ca</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-if">
<h2>f:if</h2>
<p>This view helper implements an if/else condition.
Check TYPO3FluidCoreParserSyntaxTreeViewHelperNode::convertArgumentValue() to see how boolean arguments are evaluated</p>
<p><strong>Conditions:</strong></p>
<p>As a condition is a boolean value, you can just use a boolean argument.
Alternatively, you can write a boolean expression there.
Boolean expressions have the following form:
XX Comparator YY
Comparator is one of: ==, !=, &lt;, &lt;=, &gt;, &gt;= and %
The % operator converts the result of the % operation to boolean.</p>
<p>XX and YY can be one of:
- number
- Object Accessor
- Array
- a ViewHelper
Note: Strings at XX/YY are NOT allowed, however, for the time being,
a string comparison can be achieved with comparing arrays (see example
below).</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;{rank} &gt; 100&quot;</span><span class="o">&gt;</span>
  <span class="nx">Will</span> <span class="nx">be</span> <span class="nx">shown</span> <span class="k">if</span> <span class="nx">rank</span> <span class="nx">is</span> <span class="o">&gt;</span> <span class="mi">100</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;{rank} % 2&quot;</span><span class="o">&gt;</span>
  <span class="nx">Will</span> <span class="nx">be</span> <span class="nx">shown</span> <span class="k">if</span> <span class="nx">rank</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mf">0.</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;{rank} == {k:bar()}&quot;</span><span class="o">&gt;</span>
  <span class="nx">Checks</span> <span class="k">if</span> <span class="nx">rank</span> <span class="nx">is</span> <span class="nx">equal</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">result</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">ViewHelper</span> <span class="s2">&quot;k:bar&quot;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;{0: foo.bar} == {0: &#39;stringToCompare&#39;}&quot;</span><span class="o">&gt;</span>
  <span class="nx">Will</span> <span class="nx">result</span> <span class="k">true</span> <span class="k">if</span> <span class="p">{</span><span class="nx">foo</span><span class="o">.</span><span class="nx">bar</span><span class="p">}</span><span class="s1">&#39;s represented value equals &#39;</span><span class="nx">stringToCompare</span><span class="err">&#39;</span><span class="o">.</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
</pre></div>
</div>
<div class="section" id="id60">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">then</span></tt> (mixed, optional): Value to be returned if the condition if met.</li>
<li><tt class="docutils literal"><span class="pre">else</span></tt> (mixed, optional): Value to be returned if the condition if not met.</li>
<li><tt class="docutils literal"><span class="pre">condition</span></tt> (boolean): View helper condition</li>
</ul>
</div>
<div class="section" id="id61">
<h3>Examples</h3>
<p><strong>Basic usage</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;somecondition&quot;</span><span class="o">&gt;</span>
  <span class="k">This</span> <span class="nx">is</span> <span class="nx">being</span> <span class="nx">shown</span> <span class="nx">in</span> <span class="k">case</span> <span class="nx">the</span> <span class="nx">condition</span> <span class="nx">matches</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Everything</span> <span class="nx">inside</span> <span class="nx">the</span> <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span> <span class="nx">tag</span> <span class="nx">is</span> <span class="nx">being</span> <span class="nx">displayed</span> <span class="k">if</span> <span class="nx">the</span> <span class="nx">condition</span> <span class="nx">evaluates</span> <span class="nx">to</span> <span class="k">TRUE</span><span class="o">.</span>
</pre></div>
</div>
<p><strong>If / then / else</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;somecondition&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">then</span><span class="o">&gt;</span>
    <span class="k">This</span> <span class="nx">is</span> <span class="nx">being</span> <span class="nx">shown</span> <span class="nx">in</span> <span class="k">case</span> <span class="nx">the</span> <span class="nx">condition</span> <span class="nx">matches</span><span class="o">.</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">then</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">else</span><span class="o">&gt;</span>
    <span class="k">This</span> <span class="nx">is</span> <span class="nx">being</span> <span class="nx">displayed</span> <span class="nx">in</span> <span class="k">case</span> <span class="nx">the</span> <span class="nx">condition</span> <span class="nx">evaluates</span> <span class="nx">to</span> <span class="k">FALSE</span><span class="o">.</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">else</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Everything</span> <span class="nx">inside</span> <span class="nx">the</span> <span class="s2">&quot;then&quot;</span> <span class="nx">tag</span> <span class="nx">is</span> <span class="nx">displayed</span> <span class="k">if</span> <span class="nx">the</span> <span class="nx">condition</span> <span class="nx">evaluates</span> <span class="nx">to</span> <span class="k">TRUE</span><span class="o">.</span>
<span class="nx">Otherwise</span><span class="p">,</span> <span class="nx">everything</span> <span class="nx">inside</span> <span class="nx">the</span> <span class="s2">&quot;else&quot;</span><span class="o">-</span><span class="nx">tag</span> <span class="nx">is</span> <span class="nx">displayed</span><span class="o">.</span>
</pre></div>
</div>
<p><strong>inline notation</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">condition</span><span class="o">:</span> <span class="nx">someCondition</span><span class="p">,</span> <span class="nx">then</span><span class="o">:</span> <span class="s1">&#39;condition is met&#39;</span><span class="p">,</span> <span class="k">else</span><span class="o">:</span> <span class="s1">&#39;condition is not met&#39;</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">The</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">the</span> <span class="s2">&quot;then&quot;</span> <span class="nx">attribute</span> <span class="nx">is</span> <span class="nx">displayed</span> <span class="k">if</span> <span class="nx">the</span> <span class="nx">condition</span> <span class="nx">evaluates</span> <span class="nx">to</span> <span class="k">TRUE</span><span class="o">.</span>
<span class="nx">Otherwise</span><span class="p">,</span> <span class="nx">everything</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">the</span> <span class="s2">&quot;else&quot;</span><span class="o">-</span><span class="nx">attribute</span> <span class="nx">is</span> <span class="nx">displayed</span><span class="o">.</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-layout">
<h2>f:layout</h2>
<p>With this tag, you can select a layout to be used for the current template.</p>
<div class="section" id="id62">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Name of layout to use. If none given, &#8220;Default&#8221; is used.</li>
</ul>
</div>
</div>
<div class="section" id="f-link-action">
<h2>f:link.action</h2>
<p>A view helper for creating links to actions.</p>
<div class="section" id="id63">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">action</span></tt> (string): Target action</li>
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array, optional): Arguments</li>
<li><tt class="docutils literal"><span class="pre">controller</span></tt> (string, optional): Target controller. If NULL current controllerName is used</li>
<li><tt class="docutils literal"><span class="pre">package</span></tt> (string, optional): Target package. if NULL current package is used</li>
<li><tt class="docutils literal"><span class="pre">subpackage</span></tt> (string, optional): Target subpackage. if NULL current subpackage is used</li>
<li><tt class="docutils literal"><span class="pre">section</span></tt> (string, optional): The anchor to be added to the URI</li>
<li><tt class="docutils literal"><span class="pre">format</span></tt> (string, optional): The requested format, e.g. &#8221;.html</li>
<li><tt class="docutils literal"><span class="pre">additionalParams</span></tt> (array, optional): additional query parameters that won&#8217;t be prefixed like $arguments (overrule $arguments)</li>
<li><tt class="docutils literal"><span class="pre">addQueryString</span></tt> (boolean, optional): If set, the current query parameters will be kept in the URI</li>
<li><tt class="docutils literal"><span class="pre">argumentsToBeExcludedFromQueryString</span></tt> (array, optional): arguments to be removed from the URI. Only active if $addQueryString = TRUE</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Specifies the name of an anchor</li>
<li><tt class="docutils literal"><span class="pre">rel</span></tt> (string, optional): Specifies the relationship between the current document and the linked document</li>
<li><tt class="docutils literal"><span class="pre">rev</span></tt> (string, optional): Specifies the relationship between the linked document and the current document</li>
<li><tt class="docutils literal"><span class="pre">target</span></tt> (string, optional): Specifies where to open the linked document</li>
</ul>
</div>
<div class="section" id="id64">
<h3>Examples</h3>
<p><strong>Defaults</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nb">link</span><span class="o">.</span><span class="nx">action</span><span class="o">&gt;</span><span class="nx">some</span> <span class="nb">link</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nb">link</span><span class="o">.</span><span class="nx">action</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;currentpackage/currentcontroller&quot;</span><span class="o">&gt;</span><span class="nx">some</span> <span class="nb">link</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">routing</span> <span class="nx">setup</span> <span class="k">and</span> <span class="nb">current</span> <span class="nx">package</span><span class="o">/</span><span class="nx">controller</span><span class="o">/</span><span class="nx">action</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Additional arguments</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nb">link</span><span class="o">.</span><span class="nx">action</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;myAction&quot;</span> <span class="nx">controller</span><span class="o">=</span><span class="s2">&quot;MyController&quot;</span> <span class="nx">package</span><span class="o">=</span><span class="s2">&quot;YourCompanyName.MyPackage&quot;</span> <span class="nx">subpackage</span><span class="o">=</span><span class="s2">&quot;YourCompanyName.MySubpackage&quot;</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{key1: &#39;value1&#39;, key2: &#39;value2&#39;}&quot;</span><span class="o">&gt;</span><span class="nx">some</span> <span class="nb">link</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nb">link</span><span class="o">.</span><span class="nx">action</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;mypackage/mycontroller/mysubpackage/myaction?key1=value1&amp;amp;key2=value2&quot;</span><span class="o">&gt;</span><span class="nx">some</span> <span class="nb">link</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">routing</span> <span class="nx">setup</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-link-email">
<h2>f:link.email</h2>
<p>Email link view helper.
Generates an email link.</p>
<div class="section" id="id65">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">email</span></tt> (string): The email address to be turned into a link.</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Specifies the name of an anchor</li>
<li><tt class="docutils literal"><span class="pre">rel</span></tt> (string, optional): Specifies the relationship between the current document and the linked document</li>
<li><tt class="docutils literal"><span class="pre">rev</span></tt> (string, optional): Specifies the relationship between the linked document and the current document</li>
<li><tt class="docutils literal"><span class="pre">target</span></tt> (string, optional): Specifies where to open the linked document</li>
</ul>
</div>
<div class="section" id="id66">
<h3>Examples</h3>
<p><strong>basic email link</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nb">link</span><span class="o">.</span><span class="nx">email</span> <span class="nx">email</span><span class="o">=</span><span class="s2">&quot;foo@bar.tld&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;mailto:foo@bar.tld&quot;</span><span class="o">&gt;</span><span class="nx">foo</span><span class="o">@</span><span class="nx">bar</span><span class="o">.</span><span class="nx">tld</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</pre></div>
</div>
<p><strong>Email link with custom linktext</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nb">link</span><span class="o">.</span><span class="nx">email</span> <span class="nx">email</span><span class="o">=</span><span class="s2">&quot;foo@bar.tld&quot;</span><span class="o">&gt;</span><span class="nx">some</span> <span class="nx">custom</span> <span class="nx">content</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nb">link</span><span class="o">.</span><span class="nx">email</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;mailto:foo@bar.tld&quot;</span><span class="o">&gt;</span><span class="nx">some</span> <span class="nx">custom</span> <span class="nx">content</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-link-external">
<h2>f:link.external</h2>
<p>A view helper for creating links to external targets.</p>
<div class="section" id="id67">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">uri</span></tt> (string): the URI that will be put in the href attribute of the rendered link tag</li>
<li><tt class="docutils literal"><span class="pre">defaultScheme</span></tt> (string, optional): scheme the href attribute will be prefixed with if specified $uri does not contain a scheme already</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Specifies the name of an anchor</li>
<li><tt class="docutils literal"><span class="pre">rel</span></tt> (string, optional): Specifies the relationship between the current document and the linked document</li>
<li><tt class="docutils literal"><span class="pre">rev</span></tt> (string, optional): Specifies the relationship between the linked document and the current document</li>
<li><tt class="docutils literal"><span class="pre">target</span></tt> (string, optional): Specifies where to open the linked document</li>
</ul>
</div>
<div class="section" id="id68">
<h3>Examples</h3>
<p><strong>custom default scheme</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nb">link</span><span class="o">.</span><span class="nx">external</span> <span class="nx">uri</span><span class="o">=</span><span class="s2">&quot;typo3.org&quot;</span> <span class="nx">defaultScheme</span><span class="o">=</span><span class="s2">&quot;ftp&quot;</span><span class="o">&gt;</span><span class="nx">external</span> <span class="nx">ftp</span> <span class="nb">link</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nb">link</span><span class="o">.</span><span class="nx">external</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;ftp://typo3.org&quot;</span><span class="o">&gt;</span><span class="nx">external</span> <span class="nx">ftp</span> <span class="nb">link</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-widget-link">
<h2>f:widget.link</h2>
<p>widget.link ViewHelper
This ViewHelper can be used inside widget templates in order to render links pointing to widget actions</p>
<div class="section" id="id69">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">action</span></tt> (string, optional): Target action</li>
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array, optional): Arguments</li>
<li><tt class="docutils literal"><span class="pre">section</span></tt> (string, optional): The anchor to be added to the URI</li>
<li><tt class="docutils literal"><span class="pre">format</span></tt> (string, optional): The requested format, e.g. &#8221;.html</li>
<li><tt class="docutils literal"><span class="pre">ajax</span></tt> (boolean, optional): TRUE if the URI should be to an AJAX widget, FALSE otherwise.</li>
<li><tt class="docutils literal"><span class="pre">includeWidgetContext</span></tt> (boolean, optional): TRUE if the URI should contain the serialized widget context (only useful for stateless AJAX widgets)</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Specifies the name of an anchor</li>
<li><tt class="docutils literal"><span class="pre">rel</span></tt> (string, optional): Specifies the relationship between the current document and the linked document</li>
<li><tt class="docutils literal"><span class="pre">rev</span></tt> (string, optional): Specifies the relationship between the linked document and the current document</li>
<li><tt class="docutils literal"><span class="pre">target</span></tt> (string, optional): Specifies where to open the linked document</li>
</ul>
</div>
</div>
<div class="section" id="f-link-widget">
<h2>f:link.widget</h2>
<div class="section" id="id70">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">additionalAttributes</span></tt> (array, optional): Additional tag attributes. They will be added directly to the resulting HTML tag.</li>
<li><tt class="docutils literal"><span class="pre">action</span></tt> (string, optional): Target action</li>
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array, optional): Arguments</li>
<li><tt class="docutils literal"><span class="pre">section</span></tt> (string, optional): The anchor to be added to the URI</li>
<li><tt class="docutils literal"><span class="pre">format</span></tt> (string, optional): The requested format, e.g. &#8221;.html</li>
<li><tt class="docutils literal"><span class="pre">ajax</span></tt> (boolean, optional): TRUE if the URI should be to an AJAX widget, FALSE otherwise.</li>
<li><tt class="docutils literal"><span class="pre">includeWidgetContext</span></tt> (boolean, optional): TRUE if the URI should contain the serialized widget context (only useful for stateless AJAX widgets)</li>
<li><tt class="docutils literal"><span class="pre">class</span></tt> (string, optional): CSS class(es) for this element</li>
<li><tt class="docutils literal"><span class="pre">dir</span></tt> (string, optional): Text direction for this HTML element. Allowed strings: &#8220;ltr&#8221; (left to right), &#8220;rtl&#8221; (right to left)</li>
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Unique (in this file) identifier for this HTML element.</li>
<li><tt class="docutils literal"><span class="pre">lang</span></tt> (string, optional): Language for this element. Use short names specified in RFC 1766</li>
<li><tt class="docutils literal"><span class="pre">style</span></tt> (string, optional): Individual CSS styles for this element</li>
<li><tt class="docutils literal"><span class="pre">title</span></tt> (string, optional): Tooltip text of element</li>
<li><tt class="docutils literal"><span class="pre">accesskey</span></tt> (string, optional): Keyboard shortcut to access this element</li>
<li><tt class="docutils literal"><span class="pre">tabindex</span></tt> (integer, optional): Specifies the tab order of this element</li>
<li><tt class="docutils literal"><span class="pre">onclick</span></tt> (string, optional): JavaScript evaluated for the onclick event</li>
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string, optional): Specifies the name of an anchor</li>
<li><tt class="docutils literal"><span class="pre">rel</span></tt> (string, optional): Specifies the relationship between the current document and the linked document</li>
<li><tt class="docutils literal"><span class="pre">rev</span></tt> (string, optional): Specifies the relationship between the linked document and the current document</li>
<li><tt class="docutils literal"><span class="pre">target</span></tt> (string, optional): Specifies where to open the linked document</li>
</ul>
</div>
</div>
<div class="section" id="f-renderchildren">
<h2>f:renderChildren</h2>
<div class="section" id="id71">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array, optional):</li>
</ul>
</div>
</div>
<div class="section" id="f-render">
<h2>f:render</h2>
<div class="section" id="id72">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">section</span></tt> (string, optional): Name of section to render. If used in a layout, renders a section of the main content file. If used inside a standard template, renders a section of the same file.</li>
<li><tt class="docutils literal"><span class="pre">partial</span></tt> (string, optional): Reference to a partial.</li>
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array, optional): Arguments to pass to the partial.</li>
<li><tt class="docutils literal"><span class="pre">optional</span></tt> (boolean, optional): Set to TRUE, to ignore unknown sections, so the definition of a section inside a template can be optional for a layout</li>
</ul>
</div>
<div class="section" id="id73">
<h3>Examples</h3>
<p><strong>Rendering partials</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">render</span> <span class="nx">partial</span><span class="o">=</span><span class="s2">&quot;SomePartial&quot;</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{foo: someVariable}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">the</span> <span class="nx">content</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">partial</span> <span class="s2">&quot;SomePartial&quot;</span><span class="o">.</span> <span class="nx">The</span> <span class="nx">content</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">variable</span> <span class="p">{</span><span class="nx">someVariable</span><span class="p">}</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">available</span> <span class="nx">in</span> <span class="nx">the</span> <span class="nx">partial</span> <span class="k">as</span> <span class="p">{</span><span class="nx">foo</span><span class="p">}</span>
</pre></div>
</div>
<p><strong>Rendering sections</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;someSection&quot;</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">section</span><span class="o">.</span> <span class="p">{</span><span class="nx">foo</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">render</span> <span class="nx">section</span><span class="o">=</span><span class="s2">&quot;someSection&quot;</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{foo: someVariable}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">the</span> <span class="nx">content</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">section</span> <span class="s2">&quot;someSection&quot;</span><span class="o">.</span> <span class="nx">The</span> <span class="nx">content</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">variable</span> <span class="p">{</span><span class="nx">someVariable</span><span class="p">}</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">available</span> <span class="nx">in</span> <span class="nx">the</span> <span class="nx">partial</span> <span class="k">as</span> <span class="p">{</span><span class="nx">foo</span><span class="p">}</span>
</pre></div>
</div>
<p><strong>Rendering recursive sections</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;mySection&quot;</span><span class="o">&gt;</span>
 <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
   <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{myMenu}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;menuItem&quot;</span><span class="o">&gt;</span>
     <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
       <span class="p">{</span><span class="nx">menuItem</span><span class="o">.</span><span class="nx">text</span><span class="p">}</span>
       <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;{menuItem.subItems}&quot;</span><span class="o">&gt;</span>
         <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">render</span> <span class="nx">section</span><span class="o">=</span><span class="s2">&quot;mySection&quot;</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{myMenu: menuItem.subItems}&quot;</span> <span class="o">/&gt;</span>
       <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
     <span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
   <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
 <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">render</span> <span class="nx">section</span><span class="o">=</span><span class="s2">&quot;mySection&quot;</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{myMenu: menu}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">menu1</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">menu1a</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">menu1b</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
<span class="p">[</span><span class="o">...</span><span class="p">]</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">menu</span><span class="p">})</span>
</pre></div>
</div>
<p><strong>Passing all variables to a partial</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">render</span> <span class="nx">partial</span><span class="o">=</span><span class="s2">&quot;somePartial&quot;</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{_all}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">the</span> <span class="nx">content</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">partial</span> <span class="s2">&quot;somePartial&quot;</span><span class="o">.</span>
<span class="nx">Using</span> <span class="nx">the</span> <span class="nx">reserved</span> <span class="nx">keyword</span> <span class="s2">&quot;_all&quot;</span><span class="p">,</span> <span class="nx">all</span> <span class="nx">available</span> <span class="nx">variables</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">passed</span> <span class="nx">along</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">partial</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-section">
<h2>f:section</h2>
<div class="section" id="id74">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">name</span></tt> (string): Name of the section</li>
</ul>
</div>
<div class="section" id="id75">
<h3>Examples</h3>
<p><strong>Rendering sections</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;someSection&quot;</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">is</span> <span class="nx">a</span> <span class="nx">section</span><span class="o">.</span> <span class="p">{</span><span class="nx">foo</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">render</span> <span class="nx">section</span><span class="o">=</span><span class="s2">&quot;someSection&quot;</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{foo: someVariable}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">the</span> <span class="nx">content</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">section</span> <span class="s2">&quot;someSection&quot;</span><span class="o">.</span> <span class="nx">The</span> <span class="nx">content</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">variable</span> <span class="p">{</span><span class="nx">someVariable</span><span class="p">}</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">available</span> <span class="nx">in</span> <span class="nx">the</span> <span class="nx">partial</span> <span class="k">as</span> <span class="p">{</span><span class="nx">foo</span><span class="p">}</span>
</pre></div>
</div>
<p><strong>Rendering recursive sections</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;mySection&quot;</span><span class="o">&gt;</span>
 <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
   <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{myMenu}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;menuItem&quot;</span><span class="o">&gt;</span>
     <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
       <span class="p">{</span><span class="nx">menuItem</span><span class="o">.</span><span class="nx">text</span><span class="p">}</span>
       <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span> <span class="nx">condition</span><span class="o">=</span><span class="s2">&quot;{menuItem.subItems}&quot;</span><span class="o">&gt;</span>
         <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">render</span> <span class="nx">section</span><span class="o">=</span><span class="s2">&quot;mySection&quot;</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{myMenu: menuItem.subItems}&quot;</span> <span class="o">/&gt;</span>
       <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">if</span><span class="o">&gt;</span>
     <span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
   <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
 <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">render</span> <span class="nx">section</span><span class="o">=</span><span class="s2">&quot;mySection&quot;</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{myMenu: menu}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">menu1</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">menu1a</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">menu1b</span><span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">li</span><span class="o">&gt;</span>
<span class="p">[</span><span class="o">...</span><span class="p">]</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">of</span> <span class="p">{</span><span class="nx">menu</span><span class="p">})</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-security-ifaccess">
<h2>f:security.ifAccess</h2>
<p>This view helper implements an ifAccess/else condition.</p>
<div class="section" id="id76">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">then</span></tt> (mixed, optional): Value to be returned if the condition if met.</li>
<li><tt class="docutils literal"><span class="pre">else</span></tt> (mixed, optional): Value to be returned if the condition if not met.</li>
<li><tt class="docutils literal"><span class="pre">resource</span></tt> (string): Policy resource</li>
</ul>
</div>
</div>
<div class="section" id="f-security-ifauthenticated">
<h2>f:security.ifAuthenticated</h2>
<p>This view helper implements an ifAuthenticated/else condition.</p>
<div class="section" id="id77">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">then</span></tt> (mixed, optional): Value to be returned if the condition if met.</li>
<li><tt class="docutils literal"><span class="pre">else</span></tt> (mixed, optional): Value to be returned if the condition if not met.</li>
</ul>
</div>
</div>
<div class="section" id="f-security-ifhasrole">
<h2>f:security.ifHasRole</h2>
<p>This view helper implements an ifHasRole/else condition.</p>
<div class="section" id="id78">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">then</span></tt> (mixed, optional): Value to be returned if the condition if met.</li>
<li><tt class="docutils literal"><span class="pre">else</span></tt> (mixed, optional): Value to be returned if the condition if not met.</li>
<li><tt class="docutils literal"><span class="pre">role</span></tt> (string): The role</li>
</ul>
</div>
</div>
<div class="section" id="f-then">
<h2>f:then</h2>
</div>
<div class="section" id="f-translate">
<h2>f:translate</h2>
<p>Returns translated message using source message or key ID.</p>
<p>Also replaces all placeholders with formatted versions of provided values.</p>
<div class="section" id="id79">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">id</span></tt> (string, optional): Id to use for finding translation (trans-unit id in XLIFF)</li>
<li><tt class="docutils literal"><span class="pre">value</span></tt> (string, optional): If $key is not specified or could not be resolved, this value is used. If this argument is not set, child nodes will be used to render the default</li>
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array, optional): Numerically indexed array of values to be inserted into placeholders</li>
<li><tt class="docutils literal"><span class="pre">source</span></tt> (string, optional): Name of file with translations</li>
<li><tt class="docutils literal"><span class="pre">package</span></tt> (string, optional): Target package key. If not set, the current package key will be used</li>
<li><tt class="docutils literal"><span class="pre">quantity</span></tt> (mixed, optional): A number to find plural form for (float or int), NULL to not use plural forms</li>
<li><tt class="docutils literal"><span class="pre">locale</span></tt> (string, optional): An identifier of locale to use (NULL for use the default locale)</li>
</ul>
</div>
<div class="section" id="id80">
<h3>Examples</h3>
<p><strong>Translation by id</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">translate</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;user.unregistered&quot;</span><span class="o">&gt;</span><span class="nx">Unregistered</span> <span class="nx">User</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">translate</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">translation</span> <span class="nx">of</span> <span class="nx">label</span> <span class="nx">with</span> <span class="nx">the</span> <span class="nx">id</span> <span class="s2">&quot;user.unregistered&quot;</span> <span class="k">and</span> <span class="nx">a</span> <span class="nx">fallback</span> <span class="nx">to</span> <span class="s2">&quot;Unregistered User&quot;</span>
</pre></div>
</div>
<p><strong>Inline notation</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">f</span><span class="o">:</span><span class="nx">translate</span><span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;some.label.id&#39;</span><span class="p">,</span> <span class="k">default</span><span class="o">:</span> <span class="s1">&#39;fallback result&#39;</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">translation</span> <span class="nx">of</span> <span class="nx">label</span> <span class="nx">with</span> <span class="nx">the</span> <span class="nx">id</span> <span class="s2">&quot;some.label.id&quot;</span> <span class="k">and</span> <span class="nx">a</span> <span class="nx">fallback</span> <span class="nx">to</span> <span class="s2">&quot;fallback result&quot;</span>
</pre></div>
</div>
<p><strong>Custom source and locale</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">translate</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;some.label.id&quot;</span> <span class="nx">somesource</span><span class="o">=</span><span class="s2">&quot;SomeLabelsCatalog&quot;</span> <span class="nx">locale</span><span class="o">=</span><span class="s2">&quot;de_DE&quot;</span><span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">translation</span> <span class="nx">from</span> <span class="nx">custom</span> <span class="nx">source</span> <span class="s2">&quot;SomeLabelsCatalog&quot;</span> <span class="k">for</span> <span class="nx">locale</span> <span class="s2">&quot;de_DE&quot;</span>
</pre></div>
</div>
<p><strong>Custom source from other package</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">translate</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;some.label.id&quot;</span> <span class="nx">source</span><span class="o">=</span><span class="s2">&quot;LabelsCatalog&quot;</span> <span class="nx">package</span><span class="o">=</span><span class="s2">&quot;OtherPackage&quot;</span><span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">translation</span> <span class="nx">from</span> <span class="nx">custom</span> <span class="nx">source</span> <span class="s2">&quot;LabelsCatalog&quot;</span> <span class="nx">in</span> <span class="s2">&quot;OtherPackage&quot;</span>
</pre></div>
</div>
<p><strong>Arguments</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">translate</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{0: &#39;foo&#39;, 1: &#39;99.9&#39;}&quot;</span><span class="o">&gt;</span><span class="nx">Untranslated</span> <span class="p">{</span><span class="mi">0</span><span class="p">}</span> <span class="k">and</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="nx">number</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">translate</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">translation</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">label</span> <span class="s2">&quot;Untranslated foo and 99.9&quot;</span>
</pre></div>
</div>
<p><strong>Translation by label</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">translate</span><span class="o">&gt;</span><span class="nx">Untranslated</span> <span class="nx">label</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">translate</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">translation</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">label</span> <span class="s2">&quot;Untranslated label&quot;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-uri-action">
<h2>f:uri.action</h2>
<p>A view helper for creating URIs to actions.</p>
<div class="section" id="id81">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">action</span></tt> (string): Target action</li>
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array, optional): Arguments</li>
<li><tt class="docutils literal"><span class="pre">controller</span></tt> (string, optional): Target controller. If NULL current controllerName is used</li>
<li><tt class="docutils literal"><span class="pre">package</span></tt> (string, optional): Target package. if NULL current package is used</li>
<li><tt class="docutils literal"><span class="pre">subpackage</span></tt> (string, optional): Target subpackage. if NULL current subpackage is used</li>
<li><tt class="docutils literal"><span class="pre">section</span></tt> (string, optional): The anchor to be added to the URI</li>
<li><tt class="docutils literal"><span class="pre">format</span></tt> (string, optional): The requested format, e.g. &#8221;.html</li>
<li><tt class="docutils literal"><span class="pre">additionalParams</span></tt> (array, optional): additional query parameters that won&#8217;t be prefixed like $arguments (overrule $arguments)</li>
<li><tt class="docutils literal"><span class="pre">absolute</span></tt> (boolean, optional): If set, an absolute URI is rendered</li>
<li><tt class="docutils literal"><span class="pre">addQueryString</span></tt> (boolean, optional): If set, the current query parameters will be kept in the URI</li>
<li><tt class="docutils literal"><span class="pre">argumentsToBeExcludedFromQueryString</span></tt> (array, optional): arguments to be removed from the URI. Only active if $addQueryString = TRUE</li>
</ul>
</div>
<div class="section" id="id82">
<h3>Examples</h3>
<p><strong>Defaults</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">uri</span><span class="o">.</span><span class="nx">action</span><span class="o">&gt;</span><span class="nx">some</span> <span class="nb">link</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">uri</span><span class="o">.</span><span class="nx">action</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">currentpackage</span><span class="o">/</span><span class="nx">currentcontroller</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">routing</span> <span class="nx">setup</span> <span class="k">and</span> <span class="nb">current</span> <span class="nx">package</span><span class="o">/</span><span class="nx">controller</span><span class="o">/</span><span class="nx">action</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Additional arguments</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">uri</span><span class="o">.</span><span class="nx">action</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;myAction&quot;</span> <span class="nx">controller</span><span class="o">=</span><span class="s2">&quot;MyController&quot;</span> <span class="nx">package</span><span class="o">=</span><span class="s2">&quot;YourCompanyName.MyPackage&quot;</span> <span class="nx">subpackage</span><span class="o">=</span><span class="s2">&quot;YourCompanyName.MySubpackage&quot;</span> <span class="nx">arguments</span><span class="o">=</span><span class="s2">&quot;{key1: &#39;value1&#39;, key2: &#39;value2&#39;}&quot;</span><span class="o">&gt;</span><span class="nx">some</span> <span class="nb">link</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">uri</span><span class="o">.</span><span class="nx">action</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">mypackage</span><span class="o">/</span><span class="nx">mycontroller</span><span class="o">/</span><span class="nx">mysubpackage</span><span class="o">/</span><span class="nx">myaction</span><span class="o">?</span><span class="nx">key1</span><span class="o">=</span><span class="nx">value1</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">key2</span><span class="o">=</span><span class="nx">value2</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">routing</span> <span class="nx">setup</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-uri-email">
<h2>f:uri.email</h2>
<p>Email uri view helper.
Currently the specified email is simply prepended by &#8220;mailto:&#8221; but we might add spam protection.</p>
<div class="section" id="id83">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">email</span></tt> (string): The email address to be turned into a mailto uri.</li>
</ul>
</div>
<div class="section" id="id84">
<h3>Examples</h3>
<p><strong>basic email uri</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">uri</span><span class="o">.</span><span class="nx">email</span> <span class="nx">email</span><span class="o">=</span><span class="s2">&quot;foo@bar.tld&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">mailto</span><span class="o">:</span><span class="nx">foo</span><span class="o">@</span><span class="nx">bar</span><span class="o">.</span><span class="nx">tld</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-uri-external">
<h2>f:uri.external</h2>
<p>A view helper for creating URIs to external targets.
Currently the specified URI is simply passed through.</p>
<div class="section" id="id85">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">uri</span></tt> (string): target URI</li>
<li><tt class="docutils literal"><span class="pre">defaultScheme</span></tt> (string, optional): scheme the href attribute will be prefixed with if specified $uri does not contain a scheme already</li>
</ul>
</div>
<div class="section" id="id86">
<h3>Examples</h3>
<p><strong>custom default scheme</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">uri</span><span class="o">.</span><span class="nx">external</span> <span class="nx">uri</span><span class="o">=</span><span class="s2">&quot;typo3.org&quot;</span> <span class="nx">defaultScheme</span><span class="o">=</span><span class="s2">&quot;ftp&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">ftp</span><span class="o">://</span><span class="nx">typo3</span><span class="o">.</span><span class="nx">org</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-uri-resource">
<h2>f:uri.resource</h2>
<p>A view helper for creating URIs to resources.</p>
<div class="section" id="id87">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">path</span></tt> (string, optional): The location of the resource, can be either a path relative to the Public resource directory of the package or a resource://... URI</li>
<li><tt class="docutils literal"><span class="pre">package</span></tt> (string, optional): Target package key. If not set, the current package key will be used</li>
<li><tt class="docutils literal"><span class="pre">resource</span></tt> (TYPO3FlowResourceResource, optional): If specified, this resource object is used instead of the path and package information</li>
<li><tt class="docutils literal"><span class="pre">localize</span></tt> (boolean, optional): Whether resource localization should be attempted or not</li>
</ul>
</div>
<div class="section" id="id88">
<h3>Examples</h3>
<p><strong>Defaults</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nb">link</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;{f:uri.resource(path: &#39;CSS/Stylesheet.css&#39;)}&quot;</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nb">link</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://yourdomain.tld/_Resources/Static/YourPackage/CSS/Stylesheet.css&quot;</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="o">/&gt;</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nb">current</span> <span class="nx">package</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Other package resource</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">f</span><span class="o">:</span><span class="nx">uri</span><span class="o">.</span><span class="nx">resource</span><span class="p">(</span><span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;gfx/SomeImage.png&#39;</span><span class="p">,</span> <span class="nx">package</span><span class="o">:</span> <span class="s1">&#39;DifferentPackage&#39;</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">http</span><span class="o">://</span><span class="nx">yourdomain</span><span class="o">.</span><span class="nx">tld</span><span class="o">/</span><span class="nx">_Resources</span><span class="o">/</span><span class="k">Static</span><span class="o">/</span><span class="nx">DifferentPackage</span><span class="o">/</span><span class="nx">gfx</span><span class="o">/</span><span class="nx">SomeImage</span><span class="o">.</span><span class="nx">png</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">domain</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Resource URI</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">{</span><span class="nx">f</span><span class="o">:</span><span class="nx">uri</span><span class="o">.</span><span class="nx">resource</span><span class="p">(</span><span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;resource://DifferentPackage/Public/gfx/SomeImage.png&#39;</span><span class="p">)}</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">http</span><span class="o">://</span><span class="nx">yourdomain</span><span class="o">.</span><span class="nx">tld</span><span class="o">/</span><span class="nx">_Resources</span><span class="o">/</span><span class="k">Static</span><span class="o">/</span><span class="nx">DifferentPackage</span><span class="o">/</span><span class="nx">gfx</span><span class="o">/</span><span class="nx">SomeImage</span><span class="o">.</span><span class="nx">png</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">domain</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Resource object</strong>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;{f:uri.resource(resource: myImage.resource)}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Expected result:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://yourdomain.tld/_Resources/Persistent/69e73da3ce0ad08c717b7b9f1c759182d6650944.jpg&quot;</span> <span class="o">/&gt;</span>
<span class="p">(</span><span class="nx">depending</span> <span class="nx">on</span> <span class="nx">your</span> <span class="nx">resource</span> <span class="nx">object</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="f-widget-uri">
<h2>f:widget.uri</h2>
<p>widget.uri ViewHelper
This ViewHelper can be used inside widget templates in order to render URIs pointing to widget actions</p>
<div class="section" id="id89">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">action</span></tt> (string, optional): Target action</li>
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array, optional): Arguments</li>
<li><tt class="docutils literal"><span class="pre">section</span></tt> (string, optional): The anchor to be added to the URI</li>
<li><tt class="docutils literal"><span class="pre">format</span></tt> (string, optional): The requested format, e.g. &#8221;.html</li>
<li><tt class="docutils literal"><span class="pre">ajax</span></tt> (boolean, optional): TRUE if the URI should be to an AJAX widget, FALSE otherwise.</li>
<li><tt class="docutils literal"><span class="pre">includeWidgetContext</span></tt> (boolean, optional): TRUE if the URI should contain the serialized widget context (only useful for stateless AJAX widgets)</li>
</ul>
</div>
</div>
<div class="section" id="f-uri-widget">
<h2>f:uri.widget</h2>
<div class="section" id="id90">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">action</span></tt> (string, optional): Target action</li>
<li><tt class="docutils literal"><span class="pre">arguments</span></tt> (array, optional): Arguments</li>
<li><tt class="docutils literal"><span class="pre">section</span></tt> (string, optional): The anchor to be added to the URI</li>
<li><tt class="docutils literal"><span class="pre">format</span></tt> (string, optional): The requested format, e.g. &#8221;.html</li>
<li><tt class="docutils literal"><span class="pre">ajax</span></tt> (boolean, optional): TRUE if the URI should be to an AJAX widget, FALSE otherwise.</li>
<li><tt class="docutils literal"><span class="pre">includeWidgetContext</span></tt> (boolean, optional): TRUE if the URI should contain the serialized widget context (only useful for stateless AJAX widgets)</li>
</ul>
</div>
</div>
<div class="section" id="f-widget-autocomplete">
<h2>f:widget.autocomplete</h2>
<div class="section" id="id91">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">objects</span></tt> (TYPO3FlowPersistenceQueryResultInterface):</li>
<li><tt class="docutils literal"><span class="pre">for</span></tt> (string):</li>
<li><tt class="docutils literal"><span class="pre">searchProperty</span></tt> (string):</li>
<li><tt class="docutils literal"><span class="pre">configuration</span></tt> (array, optional):</li>
<li><tt class="docutils literal"><span class="pre">widgetId</span></tt> (string, optional): Unique identifier of the widget instance</li>
</ul>
</div>
</div>
<div class="section" id="f-widget-paginate">
<h2>f:widget.paginate</h2>
<p>This ViewHelper renders a Pagination of objects.</p>
<div class="section" id="id92">
<h3>Arguments</h3>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">objects</span></tt> (TYPO3FlowPersistenceQueryResultInterface):</li>
<li><tt class="docutils literal"><span class="pre">as</span></tt> (string):</li>
<li><tt class="docutils literal"><span class="pre">configuration</span></tt> (array, optional):</li>
<li><tt class="docutils literal"><span class="pre">widgetId</span></tt> (string, optional): Unique identifier of the widget instance</li>
</ul>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="f16a7473-5360-99c4-966b-228726711ea7" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="7a4bdeec-cca6-602f-2ce5-70a5f6a3122f" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="commandreference" locale="">
       <properties>
        <title>TYPO3 Flow Command Reference</title>
       </properties>
       <node identifier="8e8a4481-e4a4-b53e-bcc2-8f903f87671a" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="3261993e-02ba-0863-ba7e-f1d7c60f3da0" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="typo3-flow-command-reference">
<span id="id1"></span><h1>TYPO3 Flow Command Reference</h1>
<p>The commands in this reference are shown with their full command identifiers.
On your system you can use shorter identifiers, whose availability depends
on the commands available in total (to avoid overlap the shortest possible
identifier is determined during runtime).</p>
<p>To see the shortest possible identifiers on your system as well as further
commands that may be available, use:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">./</span><span class="nx">flow</span> <span class="nx">help</span>
</pre></div>
</div>
<p>The following reference was automatically generated from code on 2013-05-15</p>
<div class="section" id="package-typo3-flow">
<h2>Package TYPO3.FLOW</h2>
<div class="section" id="typo3-flow-cache-flush">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:cache:flush</span></tt></h3>
<p><strong>Flush all caches</strong></p>
<p>The flush command flushes all caches (including code caches) which have been
registered with Flow&#8217;s Cache Manager. It also removes any session data.</p>
<p>If fatal errors caused by a package prevent the compile time bootstrap
from running, the removal of any temporary data can be forced by specifying
the option <strong>&#8211;force</strong>.</p>
<p>This command does not remove the precompiled data provided by frozen
packages unless the <strong>&#8211;force</strong> option is used.</p>
<div class="section" id="options">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--force</span></tt></dt>
<dd>Force flushing of any temporary data</dd>
</dl>
</div>
<div class="section" id="related-commands">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:cache:warmup</span></tt></dt>
<dd>Warm up caches</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:freeze</span></tt></dt>
<dd>Freeze a package</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:refreeze</span></tt></dt>
<dd>Refreeze a package</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-cache-warmup">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:cache:warmup</span></tt></h3>
<p><strong>Warm up caches</strong></p>
<p>The warm up caches command initializes and fills – as far as possible – all
registered caches to get a snappier response on the first following request.
Apart from caches, other parts of the application may hook into this command
and execute tasks which take further steps for preparing the app for the big
rush.</p>
<div class="section" id="id2">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:cache:flush</span></tt></dt>
<dd>Flush all caches</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-configuration-generateschema">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:configuration:generateschema</span></tt></h3>
<p><strong>Generate a schema for the given configuration or YAML file.</strong></p>
<p>./flow configuration:generateschema &#8211;type Settings &#8211;path TYPO3.Flow.persistence</p>
<p>The schema will be output to standard output.</p>
<div class="section" id="id3">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--type</span></tt></dt>
<dd>Configuration type to create a schema for</dd>
<dt><tt class="docutils literal"><span class="pre">--path</span></tt></dt>
<dd>path to the subconfiguration separated by &#8221;.&#8221; like &#8220;TYPO3.Flow</dd>
<dt><tt class="docutils literal"><span class="pre">--yaml</span></tt></dt>
<dd>YAML file to create a schema for</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-configuration-listtypes">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:configuration:listtypes</span></tt></h3>
<p><strong>List registered configuration types</strong></p>
</div>
<div class="section" id="typo3-flow-configuration-show">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:configuration:show</span></tt></h3>
<p><strong>Show the active configuration settings</strong></p>
<p>The command shows the configuration of the current context as it is used by Flow itself.
You can specify the configuration type and path if you want to show parts of the configuration.</p>
<p>./flow configuration:show &#8211;type Settings &#8211;path TYPO3.Flow.persistence</p>
<div class="section" id="id4">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--type</span></tt></dt>
<dd>Configuration type to show</dd>
<dt><tt class="docutils literal"><span class="pre">--path</span></tt></dt>
<dd>path to subconfiguration separated by &#8221;.&#8221; like &#8220;TYPO3.Flow</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-configuration-validate">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:configuration:validate</span></tt></h3>
<p><strong>Validate the given configuration</strong></p>
<p><strong>Validate all configuration</strong>
./flow configuration:validate</p>
<p><strong>Validate configuration at a certain subtype</strong>
./flow configuration:validate &#8211;type Settings &#8211;path TYPO3.Flow.persistence</p>
<p>You can retrieve the available configuration types with:
./flow configuration:listtypes</p>
<div class="section" id="id5">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--type</span></tt></dt>
<dd>Configuration type to validate</dd>
<dt><tt class="docutils literal"><span class="pre">--path</span></tt></dt>
<dd>path to the subconfiguration separated by &#8221;.&#8221; like &#8220;TYPO3.Flow</dd>
<dt><tt class="docutils literal"><span class="pre">--verbose</span></tt></dt>
<dd>if TRUE, output more verbose information on the schema files which were used</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-core-migrate">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:core:migrate</span></tt></h3>
<p><strong>Migrate source files as needed</strong></p>
<p>This will apply pending code migrations defined in packages to all
packages that do not yet have those migration applied.</p>
<p>For every migration that has been run, it will create a commit in
the package. This allows for easy inspection, rollback and use of
the fixed code.</p>
<div class="section" id="id6">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--status</span></tt></dt>
<dd>Show the migration status, do not run migrations</dd>
<dt><tt class="docutils literal"><span class="pre">--packages-path</span></tt></dt>
<dd>If set, use the given path as base when looking for packages</dd>
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>If set, migrate only the given package</dd>
</dl>
</div>
<div class="section" id="id7">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrate</span></tt></dt>
<dd>Migrate the database schema</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-core-setfilepermissions">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:core:setfilepermissions</span></tt></h3>
<p><strong>Adjust file permissions for CLI and web server access</strong></p>
<p>This command adjusts the file permissions of the whole Flow application to
the given command line user and webserver user / group.</p>
<div class="section" id="arguments">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--commandline-user</span></tt></dt>
<dd>User name of the command line user, for example &#8220;john</dd>
<dt><tt class="docutils literal"><span class="pre">--webserver-user</span></tt></dt>
<dd>User name of the webserver, for example &#8220;www-data</dd>
<dt><tt class="docutils literal"><span class="pre">--webserver-group</span></tt></dt>
<dd>Group name of the webserver, for example &#8220;www-data</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-core-shell">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:core:shell</span></tt></h3>
<p><strong>Run the interactive Shell</strong></p>
<p>The shell command runs Flow&#8217;s interactive shell. This shell allows for
entering commands like through the regular command line interface but
additionally supports autocompletion and a user-based command history.</p>
</div>
<div class="section" id="typo3-flow-doctrine-create">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:create</span></tt></h3>
<p><strong>Create the database schema</strong></p>
<p>Creates a new database schema based on the current mapping information.</p>
<p>It expects the database to be empty, if tables that are to be created already
exist, this will lead to errors.</p>
<div class="section" id="id8">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--output</span></tt></dt>
<dd>A file to write SQL to, instead of executing it</dd>
</dl>
</div>
<div class="section" id="id9">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:update</span></tt></dt>
<dd>Update the database schema</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrate</span></tt></dt>
<dd>Migrate the database schema</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-doctrine-dql">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:dql</span></tt></h3>
<p><strong>Run arbitrary DQL and display results</strong></p>
<p>Any DQL queries passed after the parameters will be executed, the results will be output:</p>
<p>doctrine:dql &#8211;limit 10 &#8216;SELECT a FROM TYPO3FlowSecurityAccount a&#8217;</p>
<div class="section" id="id10">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--depth</span></tt></dt>
<dd>How many levels deep the result should be dumped</dd>
<dt><tt class="docutils literal"><span class="pre">--hydration-mode</span></tt></dt>
<dd>One of: object, array, scalar, single-scalar, simpleobject</dd>
<dt><tt class="docutils literal"><span class="pre">--offset</span></tt></dt>
<dd>Offset the result by this number</dd>
<dt><tt class="docutils literal"><span class="pre">--limit</span></tt></dt>
<dd>Limit the result to this number</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-doctrine-entitystatus">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:entitystatus</span></tt></h3>
<p><strong>Show the current status of entities and mappings</strong></p>
<p>Shows basic information about which entities exist and possibly if their
mapping information contains errors or not.</p>
<p>To run a full validation, use the validate command.</p>
<div class="section" id="id11">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--dump-mapping-data</span></tt></dt>
<dd>If set, the mapping data will be output</dd>
</dl>
</div>
<div class="section" id="id12">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:validate</span></tt></dt>
<dd>Validate the class/table mappings</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-doctrine-migrate">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrate</span></tt></h3>
<p><strong>Migrate the database schema</strong></p>
<p>Adjusts the database structure by applying the pending
migrations provided by currently active packages.</p>
<div class="section" id="id13">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--version</span></tt></dt>
<dd>The version to migrate to</dd>
<dt><tt class="docutils literal"><span class="pre">--output</span></tt></dt>
<dd>A file to write SQL to, instead of executing it</dd>
<dt><tt class="docutils literal"><span class="pre">--dry-run</span></tt></dt>
<dd>Whether to do a dry run or not</dd>
<dt><tt class="docutils literal"><span class="pre">--quiet</span></tt></dt>
<dd>If set, only the executed migration versions will be output, one per line</dd>
</dl>
</div>
<div class="section" id="id14">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationstatus</span></tt></dt>
<dd>Show the current migration status</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationexecute</span></tt></dt>
<dd>Execute a single migration</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationgenerate</span></tt></dt>
<dd>Generate a new migration</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationversion</span></tt></dt>
<dd>Mark/unmark a migration as migrated</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-doctrine-migrationexecute">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationexecute</span></tt></h3>
<p><strong>Execute a single migration</strong></p>
<p>Manually runs a single migration in the given direction.</p>
<div class="section" id="id15">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--version</span></tt></dt>
<dd>The migration to execute</dd>
</dl>
</div>
<div class="section" id="id16">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--direction</span></tt></dt>
<dd>Whether to execute the migration up (default) or down</dd>
<dt><tt class="docutils literal"><span class="pre">--output</span></tt></dt>
<dd>A file to write SQL to, instead of executing it</dd>
<dt><tt class="docutils literal"><span class="pre">--dry-run</span></tt></dt>
<dd>Whether to do a dry run or not</dd>
</dl>
</div>
<div class="section" id="id17">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrate</span></tt></dt>
<dd>Migrate the database schema</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationstatus</span></tt></dt>
<dd>Show the current migration status</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationgenerate</span></tt></dt>
<dd>Generate a new migration</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationversion</span></tt></dt>
<dd>Mark/unmark a migration as migrated</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-doctrine-migrationgenerate">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationgenerate</span></tt></h3>
<p><strong>Generate a new migration</strong></p>
<p>If $diffAgainstCurrent is TRUE (the default), it generates a migration file
with the diff between current DB structure and the found mapping metadata.</p>
<p>Otherwise an empty migration skeleton is generated.</p>
<div class="section" id="id18">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--diff-against-current</span></tt></dt>
<dd>Whether to base the migration on the current schema structure</dd>
</dl>
</div>
<div class="section" id="id19">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrate</span></tt></dt>
<dd>Migrate the database schema</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationstatus</span></tt></dt>
<dd>Show the current migration status</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationexecute</span></tt></dt>
<dd>Execute a single migration</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationversion</span></tt></dt>
<dd>Mark/unmark a migration as migrated</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-doctrine-migrationstatus">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationstatus</span></tt></h3>
<p><strong>Show the current migration status</strong></p>
<p>Displays the migration configuration as well as the number of
available, executed and pending migrations.</p>
<div class="section" id="id20">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrate</span></tt></dt>
<dd>Migrate the database schema</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationexecute</span></tt></dt>
<dd>Execute a single migration</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationgenerate</span></tt></dt>
<dd>Generate a new migration</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationversion</span></tt></dt>
<dd>Mark/unmark a migration as migrated</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-doctrine-migrationversion">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationversion</span></tt></h3>
<p><strong>Mark/unmark a migration as migrated</strong></p>
<p>If all is given as version, all available migrations are marked
as requested.</p>
<div class="section" id="id21">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--version</span></tt></dt>
<dd>The migration to execute</dd>
</dl>
</div>
<div class="section" id="id22">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--add</span></tt></dt>
<dd>The migration to mark as migrated</dd>
<dt><tt class="docutils literal"><span class="pre">--delete</span></tt></dt>
<dd>The migration to mark as not migrated</dd>
</dl>
</div>
<div class="section" id="id23">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrate</span></tt></dt>
<dd>Migrate the database schema</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationstatus</span></tt></dt>
<dd>Show the current migration status</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationexecute</span></tt></dt>
<dd>Execute a single migration</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrationgenerate</span></tt></dt>
<dd>Generate a new migration</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-doctrine-update">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:update</span></tt></h3>
<p><strong>Update the database schema</strong></p>
<p>Updates the database schema without using existing migrations.</p>
<p>It will not drop foreign keys, sequences and tables, unless &#8211;unsafe-mode is set.</p>
<div class="section" id="id24">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--unsafe-mode</span></tt></dt>
<dd>If set, foreign keys, sequences and tables can potentially be dropped.</dd>
<dt><tt class="docutils literal"><span class="pre">--output</span></tt></dt>
<dd>A file to write SQL to, instead of executing the update directly</dd>
</dl>
</div>
<div class="section" id="id25">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:create</span></tt></dt>
<dd>Create the database schema</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:migrate</span></tt></dt>
<dd>Migrate the database schema</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-doctrine-validate">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:validate</span></tt></h3>
<p><strong>Validate the class/table mappings</strong></p>
<p>Checks if the current class model schema is valid. Any inconsistencies
in the relations between models (for example caused by wrong or
missing annotations) will be reported.</p>
<p>Note that this does not check the table structure in the database in
any way.</p>
<div class="section" id="id26">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:doctrine:entitystatus</span></tt></dt>
<dd>Show the current status of entities and mappings</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-help-help">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:help:help</span></tt></h3>
<p><strong>Display help for a command</strong></p>
<p>The help command displays help for a given command:
./flow help &lt;commandIdentifier&gt;</p>
<div class="section" id="id27">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--command-identifier</span></tt></dt>
<dd>Identifier of a command for more details</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-package-activate">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:package:activate</span></tt></h3>
<p><strong>Activate an available package</strong></p>
<p>This command activates an existing, but currently inactive package.</p>
<div class="section" id="id28">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>The package key of the package to create</dd>
</dl>
</div>
<div class="section" id="id29">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:deactivate</span></tt></dt>
<dd>Deactivate a package</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-package-create">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:package:create</span></tt></h3>
<p><strong>Create a new package</strong></p>
<p>This command creates a new package which contains only the mandatory
directories and files.</p>
<div class="section" id="id30">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>The package key of the package to create</dd>
</dl>
</div>
<div class="section" id="id31">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.kickstart:kickstart:package</span></tt></dt>
<dd>Kickstart a new package</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-package-deactivate">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:package:deactivate</span></tt></h3>
<p><strong>Deactivate a package</strong></p>
<p>This command deactivates a currently active package.</p>
<div class="section" id="id32">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>The package key of the package to create</dd>
</dl>
</div>
<div class="section" id="id33">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:activate</span></tt></dt>
<dd>Activate an available package</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-package-delete">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:package:delete</span></tt></h3>
<p><strong>Delete an existing package</strong></p>
<p>This command deletes an existing package identified by the package key.</p>
<div class="section" id="id34">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>The package key of the package to create</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-package-freeze">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:package:freeze</span></tt></h3>
<p><strong>Freeze a package</strong></p>
<p>This function marks a package as <strong>frozen</strong> in order to improve performance
in a development context. While a package is frozen, any modification of files
within that package won&#8217;t be tracked and can lead to unexpected behavior.</p>
<p>File monitoring won&#8217;t consider the given package. Further more, reflection
data for classes contained in the package is cached persistently and loaded
directly on the first request after caches have been flushed. The precompiled
reflection data is stored in the <strong>Configuration</strong> directory of the
respective package.</p>
<p>By specifying <strong>all</strong> as a package key, all currently frozen packages are
frozen (the default).</p>
<div class="section" id="id35">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>Key of the package to freeze</dd>
</dl>
</div>
<div class="section" id="id36">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:unfreeze</span></tt></dt>
<dd>Unfreeze a package</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:refreeze</span></tt></dt>
<dd>Refreeze a package</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-package-list">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:package:list</span></tt></h3>
<p><strong>List available packages</strong></p>
<p>Lists all locally available packages. Displays the package key, version and
package title and its state – active or inactive.</p>
<div class="section" id="id37">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:activate</span></tt></dt>
<dd>Activate an available package</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:deactivate</span></tt></dt>
<dd>Deactivate a package</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-package-refreeze">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:package:refreeze</span></tt></h3>
<p><strong>Refreeze a package</strong></p>
<p>Refreezes a currently frozen package: all precompiled information is removed
and file monitoring will consider the package exactly once, on the next
request. After that request, the package remains frozen again, just with the
updated data.</p>
<p>By specifying <strong>all</strong> as a package key, all currently frozen packages are
refrozen (the default).</p>
<div class="section" id="id38">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>Key of the package to refreeze, or &#8216;all&#8217;</dd>
</dl>
</div>
<div class="section" id="id39">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:freeze</span></tt></dt>
<dd>Freeze a package</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:cache:flush</span></tt></dt>
<dd>Flush all caches</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-package-unfreeze">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:package:unfreeze</span></tt></h3>
<p><strong>Unfreeze a package</strong></p>
<p>Unfreezes a previously frozen package. On the next request, this package will
be considered again by the file monitoring and related services – if they are
enabled in the current context.</p>
<p>By specifying <strong>all</strong> as a package key, all currently frozen packages are
unfrozen (the default).</p>
<div class="section" id="id40">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>Key of the package to unfreeze, or &#8216;all&#8217;</dd>
</dl>
</div>
<div class="section" id="id41">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:freeze</span></tt></dt>
<dd>Freeze a package</dd>
<dt><tt class="docutils literal"><span class="pre">typo3.flow:cache:flush</span></tt></dt>
<dd>Flush all caches</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-routing-getpath">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:routing:getpath</span></tt></h3>
<p><strong>Generate a route path</strong></p>
<p>This command takes package, controller and action and displays the
generated route path and the selected route:</p>
<p>./flow routing:getPath &#8211;format json Acme.Demo\Sub\Package</p>
<div class="section" id="id42">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package</span></tt></dt>
<dd>Package key and subpackage, subpackage parts are separated with backslashes</dd>
</dl>
</div>
<div class="section" id="id43">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--controller</span></tt></dt>
<dd>Controller name, default is &#8216;Standard&#8217;</dd>
<dt><tt class="docutils literal"><span class="pre">--action</span></tt></dt>
<dd>Action name, default is &#8216;index&#8217;</dd>
<dt><tt class="docutils literal"><span class="pre">--format</span></tt></dt>
<dd>Requested Format name default is &#8216;html&#8217;</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-routing-list">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:routing:list</span></tt></h3>
<p><strong>List the known routes</strong></p>
<p>This command displays a list of all currently registered routes.</p>
</div>
<div class="section" id="typo3-flow-routing-routepath">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:routing:routepath</span></tt></h3>
<p><strong>Route the given route path</strong></p>
<p>This command takes a given path and displays the detected route and
the selected package, controller and action.</p>
<div class="section" id="id44">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--path</span></tt></dt>
<dd>The route path to resolve</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-routing-show">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:routing:show</span></tt></h3>
<p><strong>Show informations for a route</strong></p>
<p>This command displays the configuration of a route specified by index number.</p>
<div class="section" id="id45">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--index</span></tt></dt>
<dd>The index of the route as given by routing:list</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-security-importprivatekey">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:security:importprivatekey</span></tt></h3>
<p><strong>Import a private key</strong></p>
<p>Read a PEM formatted private key from stdin and import it into the
RSAWalletService. The public key will be automatically extracted and stored
together with the private key as a key pair.</p>
<div class="section" id="id46">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--used-for-passwords</span></tt></dt>
<dd>If the private key should be used for passwords</dd>
</dl>
</div>
<div class="section" id="id47">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:security:importpublickey</span></tt></dt>
<dd>Import a public key</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-flow-security-importpublickey">
<h3><tt class="docutils literal"><span class="pre">typo3.flow:security:importpublickey</span></tt></h3>
<p><strong>Import a public key</strong></p>
<p>Read a PEM formatted public key from stdin and import it into the
RSAWalletService.</p>
<div class="section" id="id48">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:security:importprivatekey</span></tt></dt>
<dd>Import a private key</dd>
</dl>
</div>
</div>
</div>
<div class="section" id="package-typo3-fluid">
<h2>Package TYPO3.FLUID</h2>
<div class="section" id="typo3-fluid-documentation-generatexsd">
<h3><tt class="docutils literal"><span class="pre">typo3.fluid:documentation:generatexsd</span></tt></h3>
<p><strong>Generate Fluid ViewHelper XSD Schema</strong></p>
<p>Generates Schema documentation (XSD) for your ViewHelpers, preparing the
file to be placed online and used by any XSD-aware editor.
After creating the XSD file, reference it in your IDE and import the namespace
in your Fluid template by adding the xmlns:* attribute(s):
&lt;html xmlns=&#8221;http://www.w3.org/1999/xhtml&#8221; xmlns:f=&#8221;http://typo3.org/ns/TYPO3/Fluid/ViewHelpers&#8221; ...&gt;</p>
<div class="section" id="id49">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--php-namespace</span></tt></dt>
<dd>Namespace of the Fluid ViewHelpers without leading backslash (for example &#8216;TYPO3FluidViewHelpers&#8217;). NOTE: Quote and/or escape this argument as needed to avoid backslashes from being interpreted!</dd>
</dl>
</div>
<div class="section" id="id50">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--xsd-namespace</span></tt></dt>
<dd>Unique target namespace used in the XSD schema (for example &#8220;<a class="reference external" href="http://yourdomain.org/ns/viewhelpers">http://yourdomain.org/ns/viewhelpers</a>&#8221;). Defaults to &#8220;<a class="reference external" href="http://typo3.org/ns">http://typo3.org/ns</a>/&lt;php namespace&gt;&#8221;.</dd>
<dt><tt class="docutils literal"><span class="pre">--target-file</span></tt></dt>
<dd>File path and name of the generated XSD schema. If not specified the schema will be output to standard output.</dd>
</dl>
</div>
</div>
</div>
<div class="section" id="package-typo3-kickstart">
<h2>Package TYPO3.KICKSTART</h2>
<div class="section" id="typo3-kickstart-kickstart-actioncontroller">
<h3><tt class="docutils literal"><span class="pre">typo3.kickstart:kickstart:actioncontroller</span></tt></h3>
<p><strong>Kickstart a new action controller</strong></p>
<p>Generates an Action Controller with the given name in the specified package.
In its default mode it will create just the controller containing a sample
indexAction.</p>
<p>By specifying the &#8211;generate-actions flag, this command will also create a
set of actions. If no model or repository exists which matches the
controller name (for example &#8220;CoffeeRepository&#8221; for &#8220;CoffeeController&#8221;),
an error will be shown.</p>
<p>Likewise the command exits with an error if the specified package does not
exist. By using the &#8211;generate-related flag, a missing package, model or
repository can be created alongside, avoiding such an error.</p>
<p>By specifying the &#8211;generate-templates flag, this command will also create
matching Fluid templates for the actions created. This option can only be
used in combination with &#8211;generate-actions.</p>
<p>The default behavior is to not overwrite any existing code. This can be
overridden by specifying the &#8211;force flag.</p>
<div class="section" id="id51">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>The package key of the package for the new controller with an optional subpackage, (e.g. &#8220;MyCompany.MyPackage/Admin&#8221;).</dd>
<dt><tt class="docutils literal"><span class="pre">--controller-name</span></tt></dt>
<dd>The name for the new controller. This may also be a comma separated list of controller names.</dd>
</dl>
</div>
<div class="section" id="id52">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--generate-actions</span></tt></dt>
<dd>Also generate index, show, new, create, edit, update and delete actions.</dd>
<dt><tt class="docutils literal"><span class="pre">--generate-templates</span></tt></dt>
<dd>Also generate the templates for each action.</dd>
<dt><tt class="docutils literal"><span class="pre">--generate-related</span></tt></dt>
<dd>Also create the mentioned package, related model and repository if neccessary.</dd>
<dt><tt class="docutils literal"><span class="pre">--force</span></tt></dt>
<dd>Overwrite any existing controller or template code. Regardless of this flag, the package, model and repository will never be overwritten.</dd>
</dl>
</div>
<div class="section" id="id53">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.kickstart:kickstart:commandcontroller</span></tt></dt>
<dd>Kickstart a new command controller</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-kickstart-kickstart-commandcontroller">
<h3><tt class="docutils literal"><span class="pre">typo3.kickstart:kickstart:commandcontroller</span></tt></h3>
<p><strong>Kickstart a new command controller</strong></p>
<p>Creates a new command controller with the given name in the specified
package. The generated controller class already contains an example command.</p>
<div class="section" id="id54">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>The package key of the package for the new controller</dd>
<dt><tt class="docutils literal"><span class="pre">--controller-name</span></tt></dt>
<dd>The name for the new controller. This may also be a comma separated list of controller names.</dd>
</dl>
</div>
<div class="section" id="id55">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--force</span></tt></dt>
<dd>Overwrite any existing controller.</dd>
</dl>
</div>
<div class="section" id="id56">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.kickstart:kickstart:actioncontroller</span></tt></dt>
<dd>Kickstart a new action controller</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-kickstart-kickstart-model">
<h3><tt class="docutils literal"><span class="pre">typo3.kickstart:kickstart:model</span></tt></h3>
<p><strong>Kickstart a new domain model</strong></p>
<p>This command generates a new domain model class. The fields are specified as
a variable list of arguments with field name and type separated by a colon
(for example &#8220;title:string&#8221; &#8220;size:int&#8221; &#8220;type:MyType&#8221;).</p>
<div class="section" id="id57">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>The package key of the package for the domain model</dd>
<dt><tt class="docutils literal"><span class="pre">--model-name</span></tt></dt>
<dd>The name of the new domain model class</dd>
</dl>
</div>
<div class="section" id="id58">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--force</span></tt></dt>
<dd>Overwrite any existing model.</dd>
</dl>
</div>
<div class="section" id="id59">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.kickstart:kickstart:repository</span></tt></dt>
<dd>Kickstart a new domain repository</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-kickstart-kickstart-package">
<h3><tt class="docutils literal"><span class="pre">typo3.kickstart:kickstart:package</span></tt></h3>
<p><strong>Kickstart a new package</strong></p>
<p>Creates a new package and creates a standard Action Controller and a sample
template for its Index Action.</p>
<p>For creating a new package without sample code use the package:create command.</p>
<div class="section" id="id60">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>The package key, for example &#8220;MyCompany.MyPackageName</dd>
</dl>
</div>
<div class="section" id="id61">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.flow:package:create</span></tt></dt>
<dd>Create a new package</dd>
</dl>
</div>
</div>
<div class="section" id="typo3-kickstart-kickstart-repository">
<h3><tt class="docutils literal"><span class="pre">typo3.kickstart:kickstart:repository</span></tt></h3>
<p><strong>Kickstart a new domain repository</strong></p>
<p>This command generates a new domain repository class for the given model name.</p>
<div class="section" id="id62">
<h4>Arguments</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--package-key</span></tt></dt>
<dd>The package key</dd>
<dt><tt class="docutils literal"><span class="pre">--model-name</span></tt></dt>
<dd>The name of the domain model class</dd>
</dl>
</div>
<div class="section" id="id63">
<h4>Options</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">--force</span></tt></dt>
<dd>Overwrite any existing repository.</dd>
</dl>
</div>
<div class="section" id="id64">
<h4>Related commands</h4>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">typo3.kickstart:kickstart:model</span></tt></dt>
<dd>Kickstart a new domain model</dd>
</dl>
</div>
</div>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="db30eaf0-a811-d317-4587-6ba7cb6811d4" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="f9684507-ad5d-39b6-6ffd-51a67ad28ac3" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="predefinedconstantsreference" locale="">
       <properties>
        <title>Predefined Constants Reference</title>
       </properties>
       <node identifier="33f467e6-ef48-9dcd-2beb-5d88eaf34590" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="cf8ba05f-ffc7-8b94-1721-762080dccd16" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="predefined-constants-reference">
<h1>Predefined Constants Reference</h1>
<p>The following constants are defined by the Flow core.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>Every <tt class="docutils literal"><span class="pre">…PATH…</span></tt> constant contains forward slashes (<tt class="docutils literal"><span class="pre">/</span></tt>)
as directory separator, no matter what operating system Flow is run on.</p>
<p class="last">Also note that every such path is absolute and has a trailing
directory separator.</p>
</div>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">FLOW_SAPITYPE</span></tt> (string)</dt>
<dd>The current request type, which is either <tt class="docutils literal"><span class="pre">CLI</span></tt> or <tt class="docutils literal"><span class="pre">Web</span></tt>.</dd>
<dt><tt class="docutils literal"><span class="pre">FLOW_PATH_FLOW</span></tt> (string)</dt>
<dd>The absolute path to the Flow package itself</dd>
<dt><tt class="docutils literal"><span class="pre">FLOW_PATH_ROOT</span></tt> (string)</dt>
<dd>The absolute path to the root of this Flow distribution, containing for example the <tt class="docutils literal"><span class="pre">Web</span></tt>, <tt class="docutils literal"><span class="pre">Configuration</span></tt>,
<tt class="docutils literal"><span class="pre">Data</span></tt>, <tt class="docutils literal"><span class="pre">Packages</span></tt> etc. directories.</dd>
<dt><tt class="docutils literal"><span class="pre">FLOW_PATH_WEB</span></tt> (string)</dt>
<dd>Absolute path to the <tt class="docutils literal"><span class="pre">Web</span></tt> folder where, among others, the <tt class="docutils literal"><span class="pre">index.php</span></tt> file resides.</dd>
<dt><tt class="docutils literal"><span class="pre">FLOW_PATH_CONFIGURATION</span></tt> (string)</dt>
<dd>Absolute path to the <tt class="docutils literal"><span class="pre">Configuration</span></tt> directory where the <tt class="docutils literal"><span class="pre">.yaml</span></tt> configuration files reside.</dd>
<dt><tt class="docutils literal"><span class="pre">FLOW_PATH_DATA</span></tt> (string)</dt>
<dd>Absolute path to the <tt class="docutils literal"><span class="pre">Data</span></tt> directory, containing the <tt class="docutils literal"><span class="pre">Logs</span></tt>, <tt class="docutils literal"><span class="pre">Persistent</span></tt>, <tt class="docutils literal"><span class="pre">Temporary</span></tt>,
and other directories.</dd>
<dt><tt class="docutils literal"><span class="pre">FLOW_PATH_PACKAGES</span></tt> (string)</dt>
<dd>Absolute path to the <tt class="docutils literal"><span class="pre">Packages</span></tt> directory, containing the <tt class="docutils literal"><span class="pre">Application</span></tt>, <tt class="docutils literal"><span class="pre">Framework</span></tt>,
<tt class="docutils literal"><span class="pre">Sites</span></tt>, <tt class="docutils literal"><span class="pre">Library</span></tt>, and similar package directories.</dd>
<dt><tt class="docutils literal"><span class="pre">FLOW_VERSION_BRANCH</span></tt> (string)</dt>
<dd>The current Flow branch version, for example <tt class="docutils literal"><span class="pre">1.2</span></tt>.</dd>
</dl>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="79ad5685-6ab0-a782-8bc3-8c00b39c5627" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="d6dfd65e-9eb7-9664-ee99-57cc9c10eb3a" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="contributingtotypo3flow" locale="">
       <properties>
        <title>Contributing to TYPO3 Flow</title>
       </properties>
       <node identifier="aff862c6-3b47-46e8-a647-f929e244ec39" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="974bb932-c318-dc19-885e-aef273eb1dea" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="contributing-to-typo3-flow">
<span id="ch-contributing"></span><h1>Contributing to TYPO3 Flow</h1>
<p>Got time, a computer and a brain? Here is how you can help:</p>
<div class="section" id="report-and-validate-issues">
<h2>Report and Validate Issues</h2>
<p>We don&#8217;t code bugs, at least not on purpose. But if you find one, report it in
our issue tracker. But please help us to solve it by attaching a detailed description
of how to reproduce the issue. If you can provide a unit test that shows the bug,
this rocks big time.</p>
<ul class="simple">
<li>Tasks: Find bugs, describe them, reproduce them in a unit test</li>
<li>Skills needed: Attention to detail, knowledge about PHP and PHPUnit is a plus</li>
</ul>
<p><strong>Report bugs in the</strong> <a class="reference external" href="http://forge.typo3.org/projects/flow3-distribution-base/issues">TYPO3 Flow Base Distribution issue tracker</a> <strong>!</strong></p>
</div>
<div class="section" id="improve-documentation">
<h2>Improve Documentation</h2>
<p>A complex system like ours needs a lot of documentation. And despite the
complexity that documentation should be easy and fun to read. Right?</p>
<ul class="simple">
<li>Tasks: Proof read existing documentation, writing new documentation</li>
<li>Skills needed: Writing skills and very good english are a must</li>
</ul>
<p>For a quick start follow these simple steps:</p>
<ol class="arabic">
<li><p class="first">Checkout the Package TYPO3.Flow with Git, and set up the git repository so you can contribute:</p>
<div class="highlight-none"><div class="highlight"><pre>$ git clone git://git.typo3.org/Packages/TYPO3.Flow.git
$ # set up git so you can push to Gerrit
</pre></div>
</div>
<p>If you do not know how to set up Git correctly, follow the easy steps of
<a class="reference external" href="http://www.wwwision.de/githelper/#Packages/TYPO3.Flow.git">our git wizard</a>.
Of course you can also use the package TYPO3.Flow from any TYPO3 Flow distribution you
installed already.</p>
</li>
<li><p class="first">Read the documentation and adjust it as needed - it is in the Documentation directory.</p>
</li>
<li><p class="first">Push it to gerrit, or alternatively upload a patch with the changes to the
<a class="reference external" href="http://forge.typo3.org/projects/package-typo3-flow/issues">TYPO3 Flow issue tracker</a>.</p>
</li>
</ol>
<p>If you like to see a rendered HTML result of the documentation a few more steps are necessary:</p>
<ol class="arabic">
<li><p class="first">Use any installed TYPO3 Flow distribution. If you don&#8217;t have TYPO3 Flow installed, install the
Base distribution as described in the Installation section of the Getting Started chapter.</p>
</li>
<li><p class="first">Set up git for use with gerrit (<a class="reference external" href="http://www.wwwision.de/githelper/#Packages/TYPO3.Flow.git">our git wizard</a> might help with that).</p>
</li>
<li><p class="first">Install Sphinx to render the documentation.</p>
</li>
<li><p class="first">Import and activate the package TYPO3.DocTools. It provides you with a command to render
standalone documentation.</p>
<div class="highlight-none"><div class="highlight"><pre>$ ./flow documentation:render --format html
</pre></div>
</div>
</li>
<li><p class="first">Read the documentation and adjust it as needed.</p>
</li>
<li><p class="first">Push it to gerrit, or alternatively upload a patch with the changes to the
<a class="reference external" href="http://forge.typo3.org/projects/package-typo3-flow/issues">TYPO3 Flow issue tracker</a>.</p>
</li>
</ol>
</div>
<div class="section" id="work-on-the-code">
<h2>Work on the Code</h2>
<p>You found a bug? Have an idea for a missing feature? Found clever solution to an
open task? Just write the code and submit it to us for inclusion. Do it on a
regular basis and become famous. So they say.</p>
<ul class="simple">
<li>Tasks: Write clean and useful code. Bonus points for beautiful code :-)</li>
<li>Skills needed: good to expert PHP knowledge, good understanding for OOP,
knowledge about patterns and &#8220;enterprise architecture&#8221; is a plus</li>
</ul>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="af4b417c-5eeb-9f3e-0cc3-d53297c57b6e" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
      </node>
      <node identifier="5582d15f-e4d1-0c1f-a33c-2d747c720da0" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="codingguidelines" locale="">
       <properties>
        <title>Coding Guidelines</title>
       </properties>
       <node identifier="3e78a1a9-9b4c-cf8e-e2f1-b7ab70a4f6eb" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="ab5b6a3f-51ae-77c6-0ff8-428ff2d715d3" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="coding-guidelines">
<h1>Coding Guidelines</h1>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html">PHP Coding Guidelines &amp; Best Practices</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#cgl-on-one-page">CGL on One Page</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#code-formatting-and-layout-aka-beautiful-code">Code Formatting and Layout aka &#8220;beautiful code&#8221;</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#general-considerations">General considerations</a><ul>
<li class="toctree-l4"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#indentation-and-line-formatting">Indentation and line formatting</a></li>
</ul>
</li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#naming">Naming</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#vendor-namespaces">Vendor namespaces</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#package-names">Package names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#namespace-and-class-names">Namespace and Class names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#importing-namespaces">Importing Namespaces</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#interface-names">Interface names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#exception-names">Exception names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#method-names">Method names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#variable-names">Variable names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#constant-names">Constant names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#filenames">Filenames</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#php-code-formatting">PHP code formatting</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#strings">Strings</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#arrays">Arrays</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#classes">Classes</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#functions-and-methods">Functions and methods</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#if-statements">if statements</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#switch-statements">switch statements</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#development-process">Development Process</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#test-driven-development">Test-Driven Development</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#commit-messages">Commit Messages</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#source-code-documentation">Source Code Documentation</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#documentation-blocks">Documentation Blocks</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#class-documentation">Class documentation</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#documenting-variables-constants-includes">Documenting variables, constants, includes</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#method-documentation">Method documentation</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#testcase-documentation">Testcase documentation</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#defining-the-public-api">Defining the Public API</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#overview-of-documentation-annotations">Overview of Documentation Annotations</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#best-practices">Best Practices</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#typo3-flow">TYPO3 Flow</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#error-handling-and-exceptions">Error Handling and Exceptions</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#throwing-an-exception">Throwing an exception</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#unit-testing">Unit Testing</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#cross-platform-coding">Cross Platform Coding</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#php-in-general">PHP in General</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/php.html#comments">Comments</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html">JavaScript Coding Guidelines</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#naming-conventions">Naming Conventions</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#doc-comments">Doc Comments</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#class-definitions">Class Definitions</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#prototype-class-definitions">Prototype Class Definitions</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#singleton-class-definitions">Singleton Class Definitions</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#class-doc-comments">Class Doc Comments</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#method-definitions">Method Definitions</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#property-definitions">Property Definitions</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#code-style">Code Style</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#using-jslint-to-validate-your-javascript">Using JSLint to validate your JavaScript</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#event-handling">Event Handling</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#extjs-specific-things">ExtJS specific things</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#how-to-extend-data-stores">How to extend data stores</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/the-definitive-guide/partv/codingguidelines/javascript.html#unit-testing">Unit Testing</a></li>
</ul>
</li>
</ul>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="061cb36f-baf6-3138-9f8d-e9bdf21de8af" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       <node identifier="25cc5cfd-1d11-4b3d-bf32-234ecf561317" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="php" locale="">
        <properties>
         <title><![CDATA[PHP Coding Guidelines & Best Practices]]></title>
        </properties>
        <node identifier="f03a9ef2-c7af-b061-ca87-ef2b853bedb9" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="1a8032f0-1e47-c169-b9bc-f5b5069aada8" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="php-coding-guidelines-best-practices">
<h1>PHP Coding Guidelines &amp; Best Practices</h1>
<p>Coding Standards are an important factor for achieving a high code quality. A common
visual style, naming conventions and other technical settings allow us to produce a
homogenous code which is easy to read and maintain. However, not all important factors can
be covered by rules and coding standards. Equally important is the style in which certain
problems are solved programmatically - it&#8217;s the personality and experience of the
individual developer which shines through and ultimately makes the difference between
technically okay code or a well considered, mature solution.</p>
<p>These guidelines try to cover both, the technical standards as well as giving incentives
for a common development style. These guidelines must be followed by everyone who creates
code for the TYPO3 Flow core. Because Neos is based on TYPO3 Flow, it follows the same principles -
therefore, whenever we mention TYPO3 Flow in the following sections, we equally refer to Neos.
We hope that you feel encouraged to follow these guidelines as well when creating your own
packages and TYPO3 Flow based applications.</p>
<div class="section" id="cgl-on-one-page">
<h2>CGL on One Page</h2>
<div class="figure">
<a class="reference external image-reference" href="flow/references/the-definitive-guide/partv/codingguidelines/../../_downloads/typo3_flow_coding_guidelines_on_one_page.pdf.html"><img alt="The Coding Guidelines on One Page" class="screenshot-detail" src="_Resources/Persistent/8153252c83fa0e8b70919e63f86ca4c59dee9657/TYPO3-Flow-Coding-Guidelines-on-one-page.png" style="width: 250px" /></a>
<p class="caption">The Coding Guidelines on One Page</p>
</div>
<p>The most important parts of our <a class="reference download internal" href="flow/references/the-definitive-guide/partv/codingguidelines/../../_downloads/typo3_flow_coding_guidelines_on_one_page.pdf.html"><tt class="xref download docutils literal"><span class="pre">Coding</span> <span class="pre">Guidelines</span> <span class="pre">in</span> <span class="pre">a</span> <span class="pre">one</span> <span class="pre">page</span> <span class="pre">document</span></tt></a>
you can print out and hang on your wall for easy reference.
Does it get any easier than that?</p>
</div>
<div class="section" id="code-formatting-and-layout-aka-beautiful-code">
<h2>Code Formatting and Layout aka &#8220;beautiful code&#8221;</h2>
<p>The visual style of programming code is very important. In the TYPO3 project we want many
programmers to contribute, but in the same style. This will help us to:</p>
<ul class="simple">
<li>Easily read/understand each others code and consequently easily spot security problems
or optimization opportunities</li>
<li>It is a signal about consistency and cleanliness, which is a motivating factor for
programmers striving for excellence</li>
</ul>
<p>Some people may object to the visual guidelines since everyone has his own habits. You
will have to overcome that in the case of TYPO3 Flow; the visual guidelines must be followed
along with coding guidelines for security. We want all contributions to the project to be
as similar in style and as secure as possible.</p>
<div class="section" id="general-considerations">
<h3>General considerations</h3>
<ul class="simple">
<li>Almost every PHP file in TYPO3 Flow contains exactly one class and does not output anything
if it is called directly. Therefore you start your file with a <tt class="docutils literal"><span class="pre">&lt;?php</span></tt> tag and must not end it
with the closing <tt class="docutils literal"><span class="pre">?&gt;</span></tt>.</li>
<li>Every file must contain a header stating namespace and licensing information<ul>
<li>Declare your namespace.</li>
<li>The copyright header itself must not start with <tt class="docutils literal"><span class="pre">/**</span></tt>, as this may confuse
documentation generators!</li>
</ul>
</li>
</ul>
<p>The TYPO3 Flow standard file header:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">namespace</span> <span class="nx">YourCompany\Package\Stuff\Here</span><span class="p">;</span>

<span class="cm">/*                                                                        *</span>
<span class="cm"> * This script belongs to the TYPO3 Flow package &quot;Vendor.Package&quot;.        *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * It is free software; you can redistribute it and/or modify it under    *</span>
<span class="cm"> * the terms of the GNU Lesser General Public License, either version 3   *</span>
<span class="cm"> * of the License, or (at your option) any later version.                 *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * The TYPO3 project - inspiring people to share!                         *</span>
<span class="cm"> *                                                                        */</span>
</pre></div>
</div>
<ul class="simple">
<li>Code lines are of arbitrary length, no strict limitations to 80 characters or something
similar (wake up, graphical displays have been available for decades now...). But feel
free to break lines for better readability if you think it makes sense!</li>
<li>Lines end with a newline a.k.a <tt class="docutils literal"><span class="pre">chr(10)</span></tt> - UNIX style</li>
<li>Files must be encoded in UTF-8 without byte order mark (BOM)</li>
</ul>
<p>Make sure you use the correct license and mention the correct package in the header, we
have some <a class="reference external" href="http://wiki.typo3.org/Flow_Licensing_Boilerplate">some boilerplate text</a>.</p>
<div class="section" id="indentation-and-line-formatting">
<h4>Indentation and line formatting</h4>
<p>Indentation is done with tabs - and not spaces! The beginning of a line is the only place
where tabs are used, in all other places use spaces. Always trim whitespace off the end of
a line.</p>
<p>Here&#8217;s a code snippet which shows the correct usage of tabs and spaces.</p>
<p>Correct use of tabs and spaces:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Returns the name of the currently set context.</span>
<span class="sd"> *</span>
<span class="sd"> * @return string Name of the current context</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">getContextName</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">contextName</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>There seem to be very passionate opinions about whether TABs or spaces should be used for
indentation of code blocks in the scripts. If you&#8217;d like to read more about this religious
discussion, you find some nice arguments in the <a class="reference external" href="http://discuss.fogcreek.com/joelonsoftware/default.asp?cmd=show&amp;ixPost=3978">Joel on Software</a> forum.</p>
</div>
</div>
<div class="section" id="naming">
<h3>Naming</h3>
<p>Naming is a repeatedly undervalued factor in the art of software development. Although
everybody seems to agree on that nice names are a nice thing to have, most developers
choose cryptic abbreviations in the end (to save some typing). Beware that we TYPO3 core
developers are very passionate about naming (some people call it fanatic, well ...). In
our opinion spending 15 minutes (or more ...) just to find a good name for a method is
well spent time! There are zillions of reasons for using proper names and in the end they
all lead to better readable, manageable, stable and secure code.</p>
<p>As a general note, english words (or abbreviations if necessary) must be used for all
class names, method names, comments, variables names, database table and field names. The
consensus is that english is much better to read for the most of us, compared to other
languages.</p>
<p>When using abbreviations or acronyms remember to make them camel-cased as needed, no
all-uppercase stuff. Admittedly there are a few places where we violate that rule
willingly (TYPO3 – will not change) and historically.</p>
</div>
<div class="section" id="vendor-namespaces">
<h3>Vendor namespaces</h3>
<p>The base for namespaces as well as package keys is the vendor namespace. Since Flow is
part of the TYPO3 project, the core team decided to choose &#8220;TYPO3&#8221; as our vendor
namespace. The Object Manager for example is known under the class name
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Object\ObjectManager</span></tt>. In our examples you will find the <tt class="docutils literal"><span class="pre">Acme</span></tt> vendor
namespace.</p>
<p>Why do we use vendor namespaces? This has two great benefits: first of all we don&#8217;t need a
central package key registry (like the one we have for TYPO3 CMS extensions) and secondly,
it allows anyone to seamlessly integrate third-party packages, such as Symfony2 components
and Zend Framework components or virtually any other PHP 5.3+ based library.</p>
<p>Think about your own vendor namespace for a few minutes. It will stay with you for a long
time.</p>
</div>
<div class="section" id="package-names">
<h3>Package names</h3>
<p>All package names start with an uppercase character and usually are written in
<tt class="docutils literal"><span class="pre">UpperCamelCase</span></tt>. In order to avoid problems with different filesystems,
only the characters a-z, A-Z, 0-9 and the dash sign &#8220;-&#8221; are allowed for package names –
don&#8217;t use special characters.</p>
<p>The full package key is then built by combining the vendor namespace and the package,
like <tt class="docutils literal"><span class="pre">TYPO3.Fluid</span></tt> or <tt class="docutils literal"><span class="pre">Acme.Demo</span></tt>.</p>
</div>
<div class="section" id="namespace-and-class-names">
<h3>Namespace and Class names</h3>
<ul class="simple">
<li>Only the characters a-z, A-Z and 0-9 are allowed for namespace and class names.</li>
<li>Namespaces are usually written in UpperCamelCase but variations are allowed for well
established names and abbreviations.</li>
<li>Class names are always written in <tt class="docutils literal"><span class="pre">UpperCamelCase</span></tt>.</li>
<li>The unqualified class name must be meant literally even without the namespace.</li>
<li>The main purpose of namespaces is categorization and ordering</li>
<li>Class names must be nouns, never adjectives.</li>
<li>The name of abstract classes must start with the word &#8220;Abstract&#8221;, class names of aspects
must end with the word &#8220;Aspect&#8221;.</li>
</ul>
<p>Incorrect naming of namespaces and classes</p>
<table border="1" class="docutils">
<colgroup>
<col width="37%" />
<col width="16%" />
<col width="47%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Fully qualified class name</th>
<th class="head">Unqualified name</th>
<th class="head">Remarks</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>\TYPO3\Flow\Session\Php</td>
<td>Php</td>
<td>The class is not a representation of PHP</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Flow\Cache\Backend\File</td>
<td>File</td>
<td>The class doesn&#8217;t represent a file!</td>
</tr>
<tr class="row-even"><td>\TYPO3\Flow\Session\Interface</td>
<td>Interface</td>
<td>Not allowed, &#8220;Interface&#8221; is a reserved keyword</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Foo\Controller\Default</td>
<td>Default</td>
<td>Not allowed, &#8220;Default&#8221; is a reserved keyword</td>
</tr>
<tr class="row-even"><td>\TYPO3\Flow\Object\Manager</td>
<td>Manager</td>
<td>Just &#8220;Manager&#8221; is too fuzzy</td>
</tr>
</tbody>
</table>
<p>Correct naming of namespaces and classes</p>
<table border="1" class="docutils">
<colgroup>
<col width="50%" />
<col width="20%" />
<col width="30%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Fully qualified class name</th>
<th class="head">Unqualified name</th>
<th class="head">Remarks</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>\TYPO3\Flow\Session\PhpSession</td>
<td>PhpSession</td>
<td>That&#8217;s a PHP Session</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Flow\Cache\Backend\FileBackend</td>
<td>FileBackend</td>
<td>A File Backend</td>
</tr>
<tr class="row-even"><td>\TYPO3\Flow\Session\SessionInterface</td>
<td>SessionInterface</td>
<td>Interface for a session</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Foo\Controller\StandardController</td>
<td>StandardController</td>
<td>The standard controller</td>
</tr>
<tr class="row-even"><td>\TYPO3\Flow\Object\ObjectManager</td>
<td>ObjectManager</td>
<td>&#8220;ObjectManager&#8221; is clearer</td>
</tr>
</tbody>
</table>
<p>Edge cases in naming of namespaces and classes</p>
<table border="1" class="docutils">
<colgroup>
<col width="33%" />
<col width="12%" />
<col width="55%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Fully qualified class name</th>
<th class="head">Unqualified name</th>
<th class="head">Remarks</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>\TYPO3\Flow\Mvc\ControllerInterface</td>
<td>ControllerInterface</td>
<td>Consequently the interface belongs to all the controllers in the Controller sub namespace</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Flow\Mvc\Controller\ControllerInterface</td>
<td>&nbsp;</td>
<td>Better</td>
</tr>
<tr class="row-even"><td>\TYPO3\Flow\Cache\AbstractBackend</td>
<td>AbstractBackend</td>
<td>Same here: In reality this class belongs to the backends</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Flow\Cache\Backend\AbstractBackend</td>
<td>&nbsp;</td>
<td>Better</td>
</tr>
</tbody>
</table>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">When specifying class names to PHP, always reference the global namespace inside
namespaced code by using a leading backslash. When referencing a class name inside a
string (e.g. given to the <tt class="docutils literal"><span class="pre">get</span></tt>-Method of the <tt class="docutils literal"><span class="pre">ObjectManager</span></tt>, in pointcut
expressions or in YAML files), never use a leading backslash. This follows the native
PHP notion of names in strings always being seen as fully qualified.</p>
</div>
</div>
<div class="section" id="importing-namespaces">
<h3>Importing Namespaces</h3>
<p>If you refer to other classes or interfaces you are encouraged to import the namespace with the
<tt class="docutils literal"><span class="pre">use</span></tt> statement if it improves readability.</p>
<p>Following rules apply:</p>
<ul class="simple">
<li>If importing namespaces creates conflicting class names you might alias class/interface or namespaces
with the <tt class="docutils literal"><span class="pre">as</span></tt> keyword.</li>
<li>One <tt class="docutils literal"><span class="pre">use</span></tt> statement per line, one <tt class="docutils literal"><span class="pre">use</span></tt> statement for each imported namespace</li>
<li>Imported namespaces should be ordered alphabetically (modern IDEs provide support for this)</li>
</ul>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last"><tt class="docutils literal"><span class="pre">use</span></tt> statements have no side-effects (e.g. they don’t trigger autoloading).
Nevertheless you should remove unused imports for better readability</p>
</div>
</div>
<div class="section" id="interface-names">
<h3>Interface names</h3>
<p>Only the characters a-z, A-Z and 0-9 are allowed for interface names – don&#8217;t use special
characters.</p>
<p>All interface names are written in <tt class="docutils literal"><span class="pre">UpperCamelCase</span></tt>. Interface names must be adjectives
or nouns and have the Interface suffix. A few examples follow:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\ObjectInterface</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\ObjectManagerInterface</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\MyObject\MySubObjectInterface</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\MyObject\MyHtmlParserInterface</span></tt></li>
</ul>
</div>
<div class="section" id="exception-names">
<h3>Exception names</h3>
<p>Exception naming basically follows the rules for naming classes. There are two possible
types of exceptions: generic exceptions and specific exceptions. Generic exceptions should
be named &#8220;Exception&#8221; preceded by their namespace. Specific exceptions should reside in
their own sub-namespace end with the word <tt class="docutils literal"><span class="pre">Exception</span></tt>.</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\Exception</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\Exception\InvalidClassNameException</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\MyObject\Exception</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\MyObject\Exception\OutOfCoffeeException</span></tt></li>
</ul>
</div>
<div class="section" id="method-names">
<h3>Method names</h3>
<p>All method names are written in lowerCamelCase. In order to avoid problems with different
filesystems, only the characters a-z, A-Z and 0-9 are allowed for method names – don&#8217;t use
special characters.</p>
<p>Make method names descriptive, but keep them concise at the same time. Constructors must
always be called <tt class="docutils literal"><span class="pre">__construct()</span></tt>, never use the class name as a method
name.</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">myMethod()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">someNiceMethodName()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">betterWriteLongMethodNamesThanNamesNobodyUnderstands()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">singYmcaLoudly()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">__construct()</span></tt></li>
</ul>
</div>
<div class="section" id="variable-names">
<h3>Variable names</h3>
<p>Variable names are written in <tt class="docutils literal"><span class="pre">lowerCamelCase</span></tt> and should be</p>
<ul class="simple">
<li>self-explanatory</li>
<li>not shortened beyond recognition, but rather longer if it makes their meaning clearer</li>
</ul>
<p>The following example shows two variables with the same meaning but different naming.
You&#8217;ll surely agree the longer versions are better (don&#8217;t you ...?).</p>
<p>Correct naming of variables</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">$singletonObjectsRegistry</span></tt></li>
<li><tt class="docutils literal"><span class="pre">$argumentsArray</span></tt></li>
<li><tt class="docutils literal"><span class="pre">$aLotOfHtmlCode</span></tt></li>
</ul>
<p>Incorrect naming of variables</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">$sObjRgstry</span></tt></li>
<li><tt class="docutils literal"><span class="pre">$argArr</span></tt></li>
<li><tt class="docutils literal"><span class="pre">$cx</span></tt></li>
</ul>
<p>As a special exception you may use variable names like <tt class="docutils literal"><span class="pre">$i</span></tt>, <tt class="docutils literal"><span class="pre">$j</span></tt> and <tt class="docutils literal"><span class="pre">$k</span></tt> for
numeric indexes in <tt class="docutils literal"><span class="pre">for</span></tt> loops if it&#8217;s clear what they mean on the first sight. But even
then you should want to avoid them.</p>
</div>
<div class="section" id="constant-names">
<h3>Constant names</h3>
<p>All constant names are written in <tt class="docutils literal"><span class="pre">UPPERCASE</span></tt>. This includes <tt class="docutils literal"><span class="pre">TRUE</span></tt>, <tt class="docutils literal"><span class="pre">FALSE</span></tt> and
<tt class="docutils literal"><span class="pre">NULL</span></tt>. Words can be separated by underscores - you can also use the underscore to group
constants thematically:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">STUFF_LEVEL</span></tt></li>
<li><tt class="docutils literal"><span class="pre">COOLNESS_FACTOR</span></tt></li>
<li><tt class="docutils literal"><span class="pre">PATTERN_MATCH_EMAILADDRESS</span></tt></li>
<li><tt class="docutils literal"><span class="pre">PATTERN_MATCH_VALIDHTMLTAGS</span></tt></li>
</ul>
<p>It is, by the way, a good idea to use constants for defining regular expression patterns
(as seen above) instead of defining them somewhere in your code.</p>
</div>
<div class="section" id="filenames">
<h3>Filenames</h3>
<p>These are the rules for naming files:</p>
<ul class="simple">
<li>All filenames are <tt class="docutils literal"><span class="pre">UpperCamelCase</span></tt>.</li>
<li>Class and interface files are named according to the class or interface they represent</li>
<li>Each file must contain only one class or interface</li>
<li>Names of files containing code for unit tests must be the same as the class which is
tested, appended with &#8220;Test.php&#8221;.</li>
<li>Files are placed in a directory structure representing the namespace structure.</li>
</ul>
<p>File naming in TYPO3 Flow</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">TYPO3.TemplateEngine/Classes/TYPO3/TemplateEngine/TemplateEngineInterface.php</span></tt></dt>
<dd>Contains the interface <tt class="docutils literal"><span class="pre">\TYPO3\TemplateEngine\TemplateEngineInterface</span></tt> which is part
of the package TYPO3.TemplateEngine</dd>
<dt><tt class="docutils literal"><span class="pre">TYPO3.Flow/Classes/TYPO3/Flow/Error/RuntimeException.php</span></tt></dt>
<dd>Contains the <tt class="docutils literal"><span class="pre">\TYPO3\Flow\Error\RuntimeException</span></tt> being a part of the package
TYPO3.Flow</dd>
<dt><tt class="docutils literal"><span class="pre">Acme.DataAccess/Classes/Acme/DataAccess/CustomQuery.php</span></tt></dt>
<dd>Contains class <tt class="docutils literal"><span class="pre">\Acme\DataAccess\CustomQuery</span></tt> which is part of the package
Acme.DataAccess</dd>
<dt><tt class="docutils literal"><span class="pre">TYPO3.Flow/Tests/Unit/Package/PackageManagerTest.php</span></tt></dt>
<dd>Contains the class <tt class="docutils literal"><span class="pre">\TYPO3\Flow\\Tests\Unit\Package\PackageManagerTest</span></tt> which
is a PHPUnit testcase for <tt class="docutils literal"><span class="pre">Package\PackageManager</span></tt>.</dd>
</dl>
</div>
</div>
<div class="section" id="php-code-formatting">
<h2>PHP code formatting</h2>
<div class="section" id="strings">
<h3>Strings</h3>
<p>In general, we use single quotes to enclose literal strings:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$vision</span> <span class="o">=</span> <span class="s1">&#39;Inspiring people to share&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>If you&#8217;d like to insert values from variables, concatenate strings:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$message</span> <span class="o">=</span> <span class="s1">&#39;Hey &#39;</span> <span class="o">.</span> <span class="nv">$name</span> <span class="o">.</span> <span class="s1">&#39;, you look &#39;</span> <span class="o">.</span> <span class="nv">$appearance</span> <span class="o">.</span> <span class="s1">&#39; today!&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>A space must be inserted before and after the dot for better readability:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$vision</span> <span class="o">=</span> <span class="s1">&#39;Inspiring people &#39;</span> <span class="o">.</span> <span class="s1">&#39;to share.&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>You may break a string into multiple lines if you use the dot operator. You&#8217;ll have to
indent each following line to mark them as part of the value assignment:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$vision</span> <span class="o">=</span> <span class="s1">&#39;Inspiring&#39;</span> <span class="o">.</span>
  <span class="s1">&#39;people &#39;</span> <span class="o">.</span>
  <span class="s1">&#39;to &#39;</span> <span class="o">.</span>
  <span class="s1">&#39;share&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>You should also consider using a PHP function such as <cite>sprintf()</cite> to concatenate strings to increase readability:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$message</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;Hey %s, you look %s today!&#39;</span><span class="p">,</span> <span class="nv">$name</span><span class="p">,</span> <span class="nv">$appearance</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="arrays">
<h3>Arrays</h3>
</div>
<div class="section" id="classes">
<h3>Classes</h3>
</div>
<div class="section" id="functions-and-methods">
<h3>Functions and methods</h3>
</div>
<div class="section" id="if-statements">
<h3>if statements</h3>
<ul class="simple">
<li>There needs to be one space between the <tt class="docutils literal"><span class="pre">if</span></tt> keyword and the opening brace &#8220;(&#8221; of the
test expression</li>
<li>After the closing brace &#8221;)&#8221; of the test expression follows one space before the curly
brace &#8220;{&#8220;</li>
<li><tt class="docutils literal"><span class="pre">else</span></tt> and <tt class="docutils literal"><span class="pre">elseif</span></tt> are on the same line as their corresponding curly braces</li>
</ul>
<p>if statements:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nv">$something</span> <span class="o">||</span> <span class="nv">$somethingElse</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">doThis</span><span class="p">();</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">doSomethingElse</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">weHaveALotOfCriteria</span><span class="p">()</span> <span class="o">===</span> <span class="k">TRUE</span>
  <span class="o">&amp;&amp;</span> <span class="nx">notEverythingFitsIntoOneLine</span><span class="p">()</span> <span class="o">===</span> <span class="k">TRUE</span>
  <span class="o">||</span> <span class="nx">youJustTendToLikeIt</span><span class="p">()</span> <span class="o">===</span> <span class="k">TRUE</span><span class="p">)</span> <span class="p">{</span>
     <span class="nx">doThis</span><span class="p">();</span>

<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="switch-statements">
<h3>switch statements</h3>
<ul class="simple">
<li>There needs to be one space between the <tt class="docutils literal"><span class="pre">switch</span></tt> keyword and the opening brace &#8220;(&#8221; of the
test expression</li>
<li>After the closing brace &#8221;)&#8221; of the test expression follows one space before the curly
brace &#8220;{&#8220;</li>
<li><tt class="docutils literal"><span class="pre">break</span></tt> is indented to the same level as <tt class="docutils literal"><span class="pre">case</span></tt> keywords</li>
</ul>
<p>switch statements:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">switch</span> <span class="p">(</span><span class="nv">$something</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">case</span> <span class="nx">FOO</span><span class="o">:</span>
     <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">handleFoo</span><span class="p">();</span>
  <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="nx">BAR</span><span class="o">:</span>
     <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">handleBar</span><span class="p">();</span>
  <span class="k">break</span><span class="p">;</span>
  <span class="k">default</span><span class="o">:</span>
     <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">handleDefault</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="development-process">
<h2>Development Process</h2>
<div class="section" id="test-driven-development">
<h3>Test-Driven Development</h3>
<p>In a nutshell: before coding a feature or fixing a bug, write an unit test.</p>
<p>Whatever you do: before committing changes to the repository, run all unit tests to make
sure nothing is broken!</p>
</div>
<div class="section" id="commit-messages">
<h3>Commit Messages</h3>
<p>To have a clear and focused history of code changes is greatly helped by using a
consistent way of writing commit messages. Because of this and to help with (partly)
automated generation of change logs for each release we have defined a fixed syntax for
commit messages that is to be used.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Never commit without a commit message explaining the commit!</p>
</div>
<p>The syntax is as follows:</p>
<ul>
<li><p class="first">Start with one of the following codes:</p>
<dl class="docutils">
<dt>[FEATURE]</dt>
<dd><p class="first last">A feature change. Most likely it will be an added feature, but it could also be removed. For additions there should
be a corresponding ticket in the issue tracker.</p>
</dd>
<dt>[BUGFIX]</dt>
<dd><p class="first last">A fix for a bug. There should be a ticket corresponding to this in the issue tracker as well as a new) unit test for
the fix.</p>
</dd>
<dt>[SECURITY]</dt>
<dd><p class="first last">A security related change. Those must only be committed by active contributors in agreement with the
<a class="reference external" href="http://typo3.org/teams/security/">TYPO3 Security Team</a>.</p>
</dd>
<dt>[TASK]</dt>
<dd><p class="first last">Anything not covered by the above categories, e.g. coding style cleanup or documentation changes. Usually only used
if there&#8217;s no corresponding ticket.</p>
</dd>
</dl>
<p>Except for [SECURITY] each of the above codes can be prefixed with [WIP] to mark a change <strong>work in progress</strong>. This
means that it is not yet ready for a final review. The [WIP] Prefix must be removed before a change is merged.</p>
</li>
<li><p class="first">The code is followed by a short summary in the same line, no full stop at the end.
If the change affects the public API or is likely to break things on the user side, start the line with <strong>[!!!]</strong>.
This indicates a breaking change that needs human action when updating. Make sure to explain why a change is breaking
and in what circumstances.</p>
</li>
<li><p class="first">Then follows (after a blank line) a custom message explaining what was done. It should
be written in a style that serves well for a change log read by users.</p>
</li>
<li><p class="first">If there is more to say about a change add a new paragraph with background information below.
In case of breaking changes give a hint on what needs to be changed by the user.</p>
</li>
<li><p class="first">If corresponding tickets exist, mention the ticket number(s) using footer lines after
another blank line and use the following actions:</p>
<dl class="docutils">
<dt>Fixes: #&lt;number&gt;</dt>
<dd><p class="first last">If the change fixes a bug.</p>
</dd>
<dt>Resolves: #&lt;number&gt;</dt>
<dd><p class="first last">If the change resolves a feature request or task.</p>
</dd>
<dt>Related: #&lt;number&gt;</dt>
<dd><p class="first last">If the change relates to an issue but does not resolve or fix it.</p>
</dd>
</dl>
</li>
<li><p class="first">Fixes may be targeted at not only the master branch (i.e. the next major/point release),
but also for a point release in an older branch. Thus a <tt class="docutils literal"><span class="pre">Releases</span></tt> footer must address
the target branches.</p>
</li>
</ul>
<p>A commit messages following the rules...:</p>
<div class="highlight-text"><div class="highlight"><pre>[TASK] Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: &quot;Fix bug&quot; and not &quot;Fixed
bug.&quot;  This convention matches up with commit messages generated by
commands like git merge and git revert.

Code snippets::

 should be written in
 ReStructuredText compatible
 format for better highlighting

Further paragraphs come after blank lines.

* Bullet points are okay, too
* An asterisk is used for the bullet, it can be preceded by a single
  space. This format is rendered correctly by Forge (redmine)
* Use a hanging indent

Resolves: #123
Resolves: #456
Related: #789
Releases: master, 1.1, 1.0
</pre></div>
</div>
<p>Examples of good and bad subject lines:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Introduce</span> <span class="nx">xyz</span> <span class="nx">service</span>                             <span class="c1">// BAD, missing code prefix</span>
<span class="p">[</span><span class="nx">BUGFIX</span><span class="p">]</span> <span class="nx">Fixed</span> <span class="nx">bug</span> <span class="nx">xyz</span>                            <span class="c1">// BAD, subject should be written in present tense</span>
<span class="p">[</span><span class="nx">WIP</span><span class="p">][</span><span class="o">!!!</span><span class="p">][</span><span class="nx">TASK</span><span class="p">]</span> <span class="nx">A</span> <span class="nx">breaking</span> <span class="nx">change</span>                <span class="c1">// BAD, subject has to start with [!!!] for breaking changes</span>
<span class="p">[</span><span class="nx">BUGFIX</span><span class="p">]</span> <span class="nx">SessionManager</span> <span class="nx">removes</span> <span class="nx">expired</span> <span class="nx">sessions</span>  <span class="c1">// GOOD, the line explains what the change does, not what the</span>
                                                     <span class="nx">bug</span> <span class="nx">is</span> <span class="nx">about</span> <span class="p">(</span><span class="k">this</span> <span class="nx">should</span> <span class="nx">be</span> <span class="nx">explained</span> <span class="nx">in</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">lines</span>
                                                     <span class="k">and</span> <span class="nx">in</span> <span class="nx">the</span> <span class="nx">related</span> <span class="nx">bug</span> <span class="nx">tracker</span> <span class="nx">ticket</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="source-code-documentation">
<h3>Source Code Documentation</h3>
<p>All code must be documented with inline comments. The syntax is similar to that known from
the Java programming language (JavaDoc). This way code documentation can automatically be
generated using <a class="reference external" href="http://pear.php.net/package/PHP_UML">PHP_UML</a>.</p>
</div>
<div class="section" id="documentation-blocks">
<h3>Documentation Blocks</h3>
<p>A file contains different documentation blocks, relating to the class in the file and the
members of the class. A documentation block is always used for the entity it precedes.</p>
</div>
<div class="section" id="class-documentation">
<h3>Class documentation</h3>
<p>Classes have their own documentation block describing the classes purpose.</p>
<p>Standard documentation block:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * First sentence is short description. Then you can write more, just as you like</span>
<span class="sd"> *</span>
<span class="sd"> * Here may follow some detailed description about what the class is for.</span>
<span class="sd"> *</span>
<span class="sd"> * Paragraphs are separated by an empty line.</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>
 <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Additional tags or annotations, such as <tt class="docutils literal"><span class="pre">&#64;see</span></tt> or <tt class="docutils literal"><span class="pre">&#64;Flow\Aspect</span></tt>, can be added as needed.</p>
</div>
<div class="section" id="documenting-variables-constants-includes">
<h3>Documenting variables, constants, includes</h3>
<p>Properties of a class should be documented as well. We use the short version for
documenting them.</p>
<p>Standard variable documentation block:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A short description, very much recommended</span>
<span class="sd"> *</span>
<span class="sd"> * @var string</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$title</span> <span class="o">=</span> <span class="s1">&#39;Untitled&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>In general you should try to code in a way that the types can be derived (e.g. by using type hints and annotations).
In some cases this is not possible, for example when iterating through an array of objects. In these cases it’s ok to
add inline &#64;var annotations to increase readability and to activate auto-completion and syntax-highlighting:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">protected</span> <span class="k">function</span> <span class="nf">someMethod</span><span class="p">(</span><span class="k">array</span> <span class="nv">$products</span><span class="p">)</span> <span class="p">{</span>
       <span class="sd">/** @var $product \Acme\SomePackage\Domain\Model\Product */</span>
       <span class="k">foreach</span> <span class="p">(</span><span class="nv">$products</span> <span class="k">as</span> <span class="nv">$product</span><span class="p">)</span> <span class="p">{</span>
               <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">getTitle</span><span class="p">();</span>
       <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="method-documentation">
<h3>Method documentation</h3>
<p>For a method, at least all parameters and the return value must be documented. The
<tt class="docutils literal"><span class="pre">&#64;access</span></tt> tag must not be used as it makes no sense (we&#8217;re using PHP 5 for a reason,
don&#8217;t we?)</p>
<p>Standard method documentation block:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A description for this method</span>
<span class="sd"> *</span>
<span class="sd"> * Paragraphs are separated by an empty line.</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $post A post</span>
<span class="sd"> * @param string $someString This parameter should contain some string</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">addStringToPost</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$post</span><span class="p">,</span> <span class="nv">$someString</span><span class="p">)</span> <span class="p">{</span>
 <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>A special note about the <tt class="docutils literal"><span class="pre">&#64;param</span></tt> tags: The parameter type and name are separated by one
space, not aligned. Do not put a colon after the parameter name. Always document the
return type, even if it is void - that way it is clearly visible it hasn&#8217;t just been
forgotten (only constructors never have a <tt class="docutils literal"><span class="pre">&#64;return</span></tt> annotation!).</p>
</div>
<div class="section" id="testcase-documentation">
<h3>Testcase documentation</h3>
<p>Testcases need to be marked as being a test and can have some more annotations.</p>
<p>Standard testcase documentation block:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">fooReturnsBarForQuux</span><span class="p">()</span> <span class="p">{</span>
 <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="defining-the-public-api">
<h3>Defining the Public API</h3>
<p>Not all methods with a public visibility are necessarily part of the intended public API
of a project. For TYPO3 Flow, only the methods explicitly defined as part of the public API
will be kept stable and are intended for use by developers using TYPO3 Flow. Also the API
documentation we produce will only cover the public API.</p>
<p>To mark a method as part of the public API, include an <tt class="docutils literal"><span class="pre">&#64;api</span></tt> annotation for it in the
docblock.</p>
<p>Defining the public API:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * This method is part of the public API.</span>
<span class="sd"> *</span>
<span class="sd"> * @return void</span>
<span class="sd"> * @api</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">fooBar</span><span class="p">()</span> <span class="p">{</span>
 <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">When something in a class or an interface is annotated with <tt class="docutils literal"><span class="pre">&#64;api</span></tt> make sure to also
annotate the class or interface itself! Otherwise it will be ignored completely when
official API documentation is rendered!</p>
</div>
</div>
<div class="section" id="overview-of-documentation-annotations">
<h3>Overview of Documentation Annotations</h3>
<p>There are not only documentation annotations that can be used. In TYPO3 Flow annotations are
also used in the MVC component, for defining aspects and advices for the AOP framework as
well as for giving instructions to the Persistence framework. See the individual chapters
for information on their purpose and use.</p>
<p>Here is a list of annotations used within the project. They are grouped by use case and
the order given here should be kept for the sake of consistency.</p>
<p>Interface Documentation</p>
<ul class="simple">
<li>&#64;api</li>
<li>&#64;since</li>
<li>&#64;deprecated</li>
</ul>
<p>Class Documentation</p>
<ul class="simple">
<li>&#64;FlowIntroduce</li>
<li>&#64;FlowEntity</li>
<li>&#64;FlowValueObject</li>
<li>&#64;FlowScope</li>
<li>&#64;FlowAutowiring</li>
<li>&#64;FlowLazy</li>
<li>&#64;FlowAspect</li>
<li>&#64;api</li>
<li>&#64;since</li>
<li>&#64;deprecated</li>
</ul>
<p>Property Documentation</p>
<ul class="simple">
<li>&#64;FlowIntroduce</li>
<li>&#64;FlowIdentity</li>
<li>&#64;FlowTransient</li>
<li>&#64;FlowLazy</li>
<li>&#64;FlowInject</li>
<li>&#64;FlowValidate</li>
<li>&#64;var</li>
<li>&#64;api</li>
<li>&#64;since</li>
<li>&#64;deprecated</li>
</ul>
<p>Constructor Documentation</p>
<ul class="simple">
<li>&#64;param</li>
<li>&#64;throws</li>
<li>&#64;api</li>
<li>&#64;since</li>
<li>&#64;deprecated</li>
</ul>
<p>Method Documentation</p>
<ul class="simple">
<li>&#64;FlowAfter</li>
<li>&#64;FlowAfterReturning</li>
<li>&#64;FlowAfterThrowing</li>
<li>&#64;FlowAround</li>
<li>&#64;FlowBefore</li>
<li>&#64;FlowPointcut</li>
<li>&#64;FlowAutowiring</li>
<li>&#64;FlowCompileStatic</li>
<li>&#64;FlowFlushesCaches</li>
<li>&#64;FlowInternal</li>
<li>&#64;FlowSession</li>
<li>&#64;FlowSignal</li>
<li>&#64;FlowIgnoreValidation</li>
<li>&#64;FlowSkipCsrfProtection</li>
<li>&#64;FlowValidate</li>
<li>&#64;FlowValidationGroups</li>
<li>&#64;param</li>
<li>&#64;return</li>
<li>&#64;throws</li>
<li>&#64;api</li>
<li>&#64;since</li>
<li>&#64;deprecated</li>
</ul>
<p>Testcase Documentation</p>
<ul class="simple">
<li>&#64;test</li>
<li>&#64;dataProvider</li>
<li>&#64;expectedException</li>
</ul>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Additional annotations (more or less only the <tt class="docutils literal"><span class="pre">&#64;todo</span></tt> and <tt class="docutils literal"><span class="pre">&#64;see</span></tt> come to mind here),
should be placed after all other annotations.</p>
</div>
</div>
</div>
<div class="section" id="best-practices">
<h2>Best Practices</h2>
<div class="section" id="typo3-flow">
<h3>TYPO3 Flow</h3>
<p>This section gives you an overview of TYPO3 Flow&#8217;s coding rules and best practices.</p>
</div>
<div class="section" id="error-handling-and-exceptions">
<h3>Error Handling and Exceptions</h3>
<p>TYPO3 Flow makes use of a hierarchy for its exception classes. The general rule is to throw
preferably specific exceptions and usually let them bubble up until a place where more
general exceptions are caught. Consider the following example:</p>
<p>Some method tried to retrieve an object from the object manager. However, instead of
providing a string containing the object name, the method passed an object (of course not
on purpose - something went wrong). The object manager now throws an <tt class="docutils literal"><span class="pre">InvalidObjectName</span></tt>
exception. In order to catch this exception you can, of course, catch it specifically - or
only consider a more general <tt class="docutils literal"><span class="pre">Object</span></tt> exception (or an even more general <tt class="docutils literal"><span class="pre">Flow</span></tt>
exception). This all works because we have the following hierarchy:</p>
<div class="highlight-text"><div class="highlight"><pre>+ \TYPO3\Flow\Exception
+ \TYPO3\Flow\Object\Exception
+ \TYPO3\Flow\Object\Exception\InvalidObjectNameException
</pre></div>
</div>
</div>
<div class="section" id="throwing-an-exception">
<h3>Throwing an exception</h3>
<p>When throwing an exception, make sure to provide a clear error message and an <em>error code
being the unix timestamp of when you write the ``throw`` statement</em>. That error code must
be unique, so watch out when doing copy and paste!</p>
<p>For every exception there should be a page on the TYPO3 wiki, as exception messages link
to that page, identified by the error code (unix timestamp).</p>
</div>
<div class="section" id="unit-testing">
<h3>Unit Testing</h3>
<p>Some notes for a start:</p>
<ul class="simple">
<li>Never use the object manager or factory in unit tests! If they are needed, mock them.</li>
<li>Avoid tests for the scope of an object. Those tests test the object factory, rather then
the test target. Such a test should be done by checking for the presence of an expected
&#64;scope annotation – eventually we will find an elegant way for this.</li>
</ul>
</div>
<div class="section" id="cross-platform-coding">
<h3>Cross Platform Coding</h3>
<ul class="simple">
<li>When concatenating paths, always use
<tt class="docutils literal"><span class="pre">\TYPO3\Flow\Utility\Files::concatenatePaths()</span></tt> to avoid trouble.</li>
</ul>
</div>
<div class="section" id="php-in-general">
<h3>PHP in General</h3>
<ul>
<li><p class="first">All code should be object oriented. This means there should be no functions outside
classes if not absolutely necessary. If you need a &#8220;container&#8221; for some helper methods,
consider creating a static class.</p>
</li>
<li><p class="first">All code must make use of PHP5 advanced features for object oriented programming.</p>
<ul class="simple">
<li>Use <a class="reference external" href="http://www.php.net/manual/language.namespaces.php">PHP namespaces</a></li>
<li>Always declare the scope (public, protected, private) of methods and member variables</li>
<li>Make use of iterators and exceptions, have a look at the <a class="reference external" href="http://www.php.net/manual/ref.spl.php">SPL</a></li>
</ul>
</li>
<li><p class="first">Make use of <a class="reference external" href="http://www.php.net/manual/language.oop5.typehinting.php">type-hinting</a> wherever possible</p>
</li>
<li><p class="first">Always use <tt class="docutils literal"><span class="pre">&lt;?php</span></tt> as opening tags (never only <tt class="docutils literal"><span class="pre">&lt;?</span></tt>)</p>
</li>
<li><p class="first">Never use the closing tag <tt class="docutils literal"><span class="pre">?&gt;</span></tt> at the end of a file, leave it out</p>
</li>
<li><p class="first">Never use the shut-up operator <tt class="docutils literal"><span class="pre">&#64;</span></tt> to suppress error messages. It makes debugging
harder, is dirty style and slow as hell</p>
</li>
<li><p class="first">Prefer strict comparisons whenever possible, to avoid problems with truthy and falsy
values that might behave different than what you expect. Here are some examples:</p>
<p>Examples of good and bad comparisons:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nv">$template</span><span class="p">)</span>             <span class="c1">// BAD</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$template</span><span class="p">))</span>      <span class="c1">// GOOD</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$template</span> <span class="o">!==</span> <span class="k">NULL</span><span class="p">))</span>   <span class="c1">// GOOD</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$template</span> <span class="o">!==</span> <span class="s1">&#39;&#39;</span><span class="p">))</span>     <span class="c1">// GOOD</span>

<span class="k">if</span> <span class="p">(</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$template</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// BAD! strlen(&quot;-1&quot;) is greater than 0</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$template</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$template</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// BETTER</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$foo</span> <span class="o">==</span> <span class="nv">$bar</span><span class="p">)</span>          <span class="c1">// BAD, avoid truthy comparisons</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$foo</span> <span class="o">!=</span> <span class="nv">$bar</span><span class="p">)</span>          <span class="c1">// BAD, avoid falsy comparisons</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$foo</span> <span class="o">===</span> <span class="nv">$bar</span><span class="p">))</span>        <span class="c1">// GOOD</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$foo</span> <span class="o">!==</span> <span class="nv">$bar</span><span class="p">))</span>        <span class="c1">// GOOD</span>
</pre></div>
</div>
<div class="figure">
<img alt="Truthy and falsy are fuzzy..." src="_Resources/Persistent/9f3d9d2397b47c80346d14b19c7bc02ade2cbf45/PHP-TrueFalse.jpg" style="width: 250px" />
<p class="caption">Truthy and falsy are fuzzy...</p>
</div>
</li>
<li><p class="first">Order of methods in classes. To gain a better overview, it helps if methods in classes
are always ordered in a certain way. We prefer the following:</p>
<ul class="simple">
<li>constructor</li>
<li>injection methods</li>
<li>initialization methods (including <tt class="docutils literal"><span class="pre">initializeObject()</span></tt>)</li>
<li>public methods</li>
<li>protected methods</li>
<li>private methods</li>
<li>shutdown methods</li>
<li>destructor</li>
</ul>
</li>
<li><p class="first">Avoid double-negation. Instead of <tt class="docutils literal"><span class="pre">exportSystemView(...,</span> <span class="pre">$noRecurse)</span></tt> use
<tt class="docutils literal"><span class="pre">exportSystemView(...,</span> <span class="pre">$recurse)</span></tt>. It is more logical to pass <tt class="docutils literal"><span class="pre">TRUE</span></tt> if you want
recursion instead of having to pass <tt class="docutils literal"><span class="pre">FALSE</span></tt>. In general, parameters negating things
are a bad idea.</p>
</li>
</ul>
</div>
<div class="section" id="comments">
<h3>Comments</h3>
<p>In general, comments are a good thing and we strive for creating a well-documented source
code. However, inline comments can often be a sign for a bad code structure or method
naming. <a class="footnote-reference" href="#id2" id="id1">[1]</a> As an example, consider the example for a coding smell:</p>
<div class="highlight-php"><div class="highlight"><pre> <span class="c1">// We only allow valid persons</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">is_object</span><span class="p">(</span><span class="nv">$p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$p</span><span class="o">-&gt;</span><span class="na">lastN</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$p</span><span class="o">-&gt;</span><span class="na">hidden</span> <span class="o">===</span> <span class="k">FALSE</span> <span class="o">&amp;&amp;</span> <span class="err">⏎</span>
 <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">environment</span><span class="o">-&gt;</span><span class="na">moonPhase</span> <span class="o">===</span> <span class="nx">MOON_LIB</span><span class="o">::</span><span class="na">CRESCENT</span><span class="p">)</span> <span class="p">{</span>
 <span class="nv">$xmM</span> <span class="o">=</span> <span class="nv">$thd</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This is a perfect case for the refactoring technique &#8220;extract method&#8221;: In order to avoid
the comment, create a new method which is as explanatory as the comment:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isValidPerson</span><span class="p">(</span><span class="nv">$person</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">$xmM</span> <span class="o">=</span> <span class="nv">$thd</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Bottom line is: You may (and are encouraged to) use inline comments if they support the
readability of your code. But always be aware of possible design flaws you probably try to
hide with them.</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>This is also referred to as a bad &#8220;smell&#8221; in the theory of Refactoring. We highly recommend reading &#8220;Refactoring&#8221; by Martin Fowler - if you didn&#8217;t already.</td></tr>
</tbody>
</table>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="67f7189e-610c-4cae-749f-2f93c858992c" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="cf93d2ce-0b2d-397a-674a-db0259ea8473" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="javascript" locale="">
        <properties>
         <title>JavaScript Coding Guidelines</title>
        </properties>
        <node identifier="56b2654f-2d40-b134-30e7-cd9472010499" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="6dca0dec-3d58-d733-d042-5d152a7ea3c0" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="javascript-coding-guidelines">
<h1>JavaScript Coding Guidelines</h1>
<p>Here, you will find an explanation of the JavaScript Coding Guidelines we use.
Generally, we strive to follow the TYPO3 Flow Coding Guidelines as closely as
possible, with exceptions which make sense in the JavaScript context.</p>
<p>This guideline explains mostly how we want JavaScript code to be formatted;
and it does <strong>not</strong> deal with the TYPO3 Neos User
Interface structure. If you want to know more about the TYPO3 Neos User
Interface architecture, have a look into the &#8220;Neos User Interface
Development&#8221; book.</p>
<div class="section" id="naming-conventions">
<h2>Naming Conventions</h2>
<ul>
<li><p class="first">one class per file, with the same naming convention as TYPO3 Flow.</p>
</li>
<li><p class="first">This means all classes are built like this:
<tt class="docutils literal"><span class="pre">&lt;PackageKey&gt;.&lt;SubNamespace&gt;.&lt;ClassName&gt;</span></tt>, and this class is
implemented in a JavaScript file located at
<tt class="docutils literal"><span class="pre">&lt;Package&gt;/.../JavaScript/&lt;SubNamespace&gt;/&lt;ClassName&gt;.js</span></tt></p>
</li>
<li><p class="first">Right now, the base directory for JavaScript in TYPO3 Flow packages
<tt class="docutils literal"><span class="pre">Resources/Public/JavaScript</span></tt>, but this might still change.</p>
</li>
<li><p class="first">We suggest that the base directory for JavaScript files is JavaScript.</p>
</li>
<li><p class="first">Files have to be encoded in UTF-8 without byte order mark (BOM).</p>
</li>
<li><p class="first">Classes and namespaces are written in <tt class="docutils literal"><span class="pre">UpperCamelCase</span></tt>, while properties and methods
are written in <tt class="docutils literal"><span class="pre">lowerCamelCase</span></tt>.</p>
</li>
<li><p class="first">The xtype of a class is always the fully qualified class name. Every class which can be
instantiated needs to have an xtype declaration.</p>
</li>
<li><p class="first">Never create a class which has classes inside itself. Example: if the class
<tt class="docutils literal"><span class="pre">TYPO3.Foo</span></tt> exists, it is prohibited to create a class <tt class="docutils literal"><span class="pre">TYPO3.Foo.Bar</span></tt>.You can
easily check this: If a directory with the same name as the JavaScript file exists, this
is prohibited.</p>
<p>Here follows an example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Foo</span><span class="o">.</span><span class="nx">Bar</span> <span class="c1">// implemented in .../Foo/Bar.js</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Foo</span><span class="o">.</span><span class="nx">Bar</span> <span class="o">=</span> <span class="o">...</span>

<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Foo</span> <span class="c1">// implemented in ...Foo.js</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Foo</span> <span class="o">=</span> <span class="o">.....</span> <span class="o">**</span><span class="nx">overriding</span> <span class="nx">the</span> <span class="s2">&quot;Bar&quot;</span> <span class="nx">class</span><span class="o">**</span>
</pre></div>
</div>
<p>So, if the class <tt class="docutils literal"><span class="pre">TYPO3.Foo.Bar</span></tt> is included <strong>before</strong> <tt class="docutils literal"><span class="pre">TYPO3.Foo</span></tt>, then
the second class definition completely overrides the <tt class="docutils literal"><span class="pre">Bar</span></tt> object. In order
to prevent such issues, this constellation is forbidden.</p>
</li>
<li><p class="first">Every class, method and class property should have a doc comment.</p>
</li>
<li><p class="first">Private methods and properties should start with an underscore (<tt class="docutils literal"><span class="pre">_</span></tt>)
and have a <tt class="docutils literal"><span class="pre">&#64;private</span></tt> annotation.</p>
</li>
</ul>
</div>
<div class="section" id="doc-comments">
<h2>Doc Comments</h2>
<p>Generally, doc comments follow the following form:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> *</span>
<span class="sd"> */</span>
</pre></div>
</div>
<p>See the sections below on which doc comments are available for the different
elements (classes, methods, ...).</p>
<p>We are using <a class="reference external" href="http://code.google.com/p/ext-doc/">http://code.google.com/p/ext-doc/</a> for rendering an API
documentation from the code, that&#8217;s why types inside <tt class="docutils literal"><span class="pre">&#64;param</span></tt>, <tt class="docutils literal"><span class="pre">&#64;type</span></tt> and
<tt class="docutils literal"><span class="pre">&#64;cfg</span></tt> have to be written in braces like this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">@</span><span class="nx">param</span> <span class="p">{</span><span class="nx">String</span><span class="p">}</span> <span class="nx">theFirstParameter</span> <span class="nx">A</span> <span class="nx">Description</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">first</span> <span class="nx">parameter</span>
<span class="o">@</span><span class="nx">param</span> <span class="p">{</span><span class="nx">My</span><span class="o">.</span><span class="nx">Class</span><span class="o">.</span><span class="nx">Name</span><span class="p">}</span> <span class="nx">theSecondParameter</span> <span class="nx">A</span> <span class="nx">description</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">second</span> <span class="nx">parameter</span>
</pre></div>
</div>
<p>Generally, we do not use <tt class="docutils literal"><span class="pre">&#64;api</span></tt> annotations, as private methods and attributes
are marked with <tt class="docutils literal"><span class="pre">&#64;private</span></tt> and prefixed with an underscore. So, <strong>everything
which is not marked as private belongs to the public API!</strong></p>
<p>We are not sure yet if we should use <tt class="docutils literal"><span class="pre">&#64;author</span></tt> annotations at all. (TODO Decide!)</p>
<p>To make a reference to another method of a class, use the
<tt class="docutils literal"><span class="pre">{&#64;link</span> <span class="pre">#methodOne</span> <span class="pre">This</span> <span class="pre">is</span> <span class="pre">an</span> <span class="pre">example</span> <span class="pre">link</span> <span class="pre">to</span> <span class="pre">method</span> <span class="pre">one}</span></tt> syntax.</p>
<p>If you want to do multi-line doc comments, you need to format them with <tt class="docutils literal"><span class="pre">&lt;br&gt;</span></tt>,
<tt class="docutils literal"><span class="pre">&lt;pre&gt;</span></tt> and other HTML tags:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Description of the class. Make it as long as needed,</span>
<span class="sd"> * feel free to explain how to use it.</span>
<span class="sd"> * This is a sample class &lt;br/&gt;</span>
<span class="sd"> * The file encoding should be utf-8 &lt;br/&gt;</span>
<span class="sd"> * UTF-8 Check: öäüß &lt;br/&gt;</span>
<span class="sd"> * {@link #methodOne This is an example link to method one}</span>
<span class="sd"> */</span>
</pre></div>
</div>
</div>
<div class="section" id="class-definitions">
<h2>Class Definitions</h2>
<p>Classes can be declared singleton or prototype. A class is <strong>singleton</strong>, if
only one instance of this class will exist at any given time. An class is of
type <strong>prototype</strong>, if more than one object can be created from the class at
run-time. Most classes will be of type <strong>prototype</strong>.</p>
<p>You will find examples for both below.</p>
<div class="section" id="prototype-class-definitions">
<h3>Prototype Class Definitions</h3>
<p>Example of a prototype class definition:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Ext</span><span class="o">.</span><span class="nx">ns</span><span class="p">(</span><span class="s2">&quot;TYPO3.TYPO3.Content&quot;</span><span class="p">);</span>

<span class="cm">/*                                                                        *</span>
<span class="cm"> * This script belongs to the TYPO3 Flow package &quot;TYPO3&quot;.                 *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * It is free software; you can redistribute it and/or modify it under    *</span>
<span class="cm"> * the terms of the GNU General Public License as published by the Free   *</span>
<span class="cm"> * Software Foundation, either version 3 of the License, or (at your      *</span>
<span class="cm"> * option) any later version.                                             *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * The TYPO3 project - inspiring people to share!                         *</span>
<span class="cm"> *                                                                        */</span>

<span class="sd">/**</span>
<span class="sd"> * @class TYPO3.TYPO3.Content.FrontendEditor</span>
<span class="sd"> *</span>
<span class="sd"> * The main frontend editor.</span>
<span class="sd"> *</span>
<span class="sd"> * @namespace TYPO3.TYPO3.Content</span>
<span class="sd"> * @extends Ext.Container</span>
<span class="sd"> */</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">FrontendEditor</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Ext</span><span class="o">.</span><span class="nx">Container</span><span class="p">,</span> <span class="p">{</span>
        <span class="c1">// here comes the class contents</span>
<span class="p">});</span>
<span class="nx">Ext</span><span class="o">.</span><span class="nx">reg</span><span class="p">(</span><span class="s1">&#39;TYPO3.TYPO3.Content.FrontendEditor&#39;</span><span class="p">,</span> <span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">FrontendEditor</span><span class="p">);</span>
</pre></div>
</div>
<ul class="simple">
<li>At the very beginning of the file is the namespace declaration of the
class, followed by a newline.</li>
<li>Then follows the class documentation block, which <strong>must</strong> start with
the <tt class="docutils literal"><span class="pre">&#64;class</span></tt> declaration in the first line.</li>
<li>Now comes a description of the class, possibly with examples.</li>
<li>Afterwards <strong>must</strong> follow the namespace of the class and the information about
object extension</li>
<li>Now comes the actual class definition, using <tt class="docutils literal"><span class="pre">Ext.extend</span></tt>.</li>
<li>As the last line of the class, it follows the xType registration. We always use
the fully qualified class name as xtype</li>
</ul>
<p>Usually, the constructor of the class receives a hash of parameters. The possible
configuration options need to be documented inside the class with the <tt class="docutils literal"><span class="pre">&#64;cfg</span></tt>
annotation:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">FrontendEditor</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Ext</span><span class="o">.</span><span class="nx">Container</span><span class="p">,</span> <span class="p">{</span>
        <span class="sd">/**</span>
<span class="sd">         * An explanation of the configuration option followed</span>
<span class="sd">         * by a blank line.</span>
<span class="sd">         *</span>
<span class="sd">         * @cfg {Number} configTwo</span>
<span class="sd">         */</span>
        <span class="nx">configTwo</span><span class="o">:</span> <span class="mi">10</span>
        <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="singleton-class-definitions">
<h3>Singleton Class Definitions</h3>
<p>Now comes a singleton class definition. You will see that it is very similar to a
prototype class definition, we will only highlight the differences.</p>
<p>Example of a singleton class definition:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Ext</span><span class="o">.</span><span class="nx">ns</span><span class="p">(</span><span class="s2">&quot;TYPO3.TYPO3.Core&quot;</span><span class="p">);</span>

<span class="cm">/*                                                                        *</span>
<span class="cm"> * This script belongs to the TYPO3 Flow package &quot;TYPO3&quot;.                 *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * It is free software; you can redistribute it and/or modify it under    *</span>
<span class="cm"> * the terms of the GNU General Public License as published by the Free   *</span>
<span class="cm"> * Software Foundation, either version 3 of the License, or (at your      *</span>
<span class="cm"> * option) any later version.                                             *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * The TYPO3 project - inspiring people to share!                         *</span>
<span class="cm"> *                                                                        */</span>

<span class="sd">/**</span>
<span class="sd"> * @class TYPO3.TYPO3.Core.Application</span>
<span class="sd"> *</span>
<span class="sd"> * The main entry point which controls the lifecycle of the application.</span>
<span class="sd"> *</span>
<span class="sd"> * @namespace TYPO3.TYPO3.Core</span>
<span class="sd"> * @extends Ext.util.Observable</span>
<span class="sd"> * @singleton</span>
<span class="sd"> */</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Core</span><span class="o">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Observable</span><span class="p">,</span> <span class="p">{</span>
        <span class="c1">// here comes the class contents</span>
<span class="p">});</span>
</pre></div>
</div>
<ul class="simple">
<li>You should add a <tt class="docutils literal"><span class="pre">&#64;singleton</span></tt> annotation to the class doc comment after the
<tt class="docutils literal"><span class="pre">&#64;namespace</span></tt> and <tt class="docutils literal"><span class="pre">&#64;extends</span></tt> annotation</li>
<li>In singleton classes, you use <tt class="docutils literal"><span class="pre">Ext.apply</span></tt>. Note that you need to use <tt class="docutils literal"><span class="pre">new</span></tt> to
instantiate the base class.</li>
<li>There is <strong>no xType</strong> registration in singletons, as they are available globally anyhow.</li>
</ul>
</div>
<div class="section" id="class-doc-comments">
<h3>Class Doc Comments</h3>
<p>Class Doc Comments should always be in the following order:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">&#64;class</span> <span class="pre">&lt;Name.Of.Class&gt;</span></tt> (required)</li>
<li>Then follows a description of the class, which can span multiple lines. Before and after
this description should be a blank line.</li>
<li><tt class="docutils literal"><span class="pre">&#64;namespace</span> <span class="pre">&lt;Name.Of.Namespace&gt;</span></tt> (required)</li>
<li><tt class="docutils literal"><span class="pre">&#64;extends</span> <span class="pre">&lt;Name.Of.BaseClass&gt;</span></tt> (required)</li>
<li><tt class="docutils literal"><span class="pre">&#64;singleton</span></tt> (required if the class is a singleton)</li>
</ul>
<p>If the class has a non-empty constructor, the following doc comments need to be added as
well, after a blank line:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">&#64;constructor</span></tt></li>
<li><tt class="docutils literal"><span class="pre">&#64;param</span> <span class="pre">{&lt;type&gt;}</span> <span class="pre">&lt;nameOfParameter&gt;</span> <span class="pre">&lt;description</span> <span class="pre">of</span> <span class="pre">parameter&gt;</span></tt> for every parameter of
the constructor</li>
</ul>
<p>Example of a class doc comment without constructor:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @class Acme.Foo.Bar</span>
<span class="sd"> *</span>
<span class="sd"> * Some Description of the class,</span>
<span class="sd"> * which can possibly span multiple lines</span>
<span class="sd"> *</span>
<span class="sd"> * @namespace Acme.Foo</span>
<span class="sd"> * @extends TYPO3.TYPO3.Core.SomeOtherClass</span>
<span class="sd"> */</span>
</pre></div>
</div>
<p>Example of a class doc comment with constructor:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @class Acme.TYPO3.Foo.ClassWithConstructor</span>
<span class="sd"> *</span>
<span class="sd"> * This class has a constructor!</span>
<span class="sd"> *</span>
<span class="sd"> * @namespace Acme.TYPO3.Foo</span>
<span class="sd"> * @extends TYPO3.TYPO3.Core.SomeOtherClass</span>
<span class="sd"> *</span>
<span class="sd"> * @constructor</span>
<span class="sd"> * @param {String} id The ID which to use</span>
<span class="sd"> */</span>
</pre></div>
</div>
</div>
<div class="section" id="method-definitions">
<h3>Method Definitions</h3>
<p>Methods should be documented the following way, with a blank line between methods.</p>
<p>Example of a method comment:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">...</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Core</span><span class="o">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Observable</span><span class="p">,</span> <span class="p">{</span>
        <span class="o">...</span> <span class="nx">property</span> <span class="nx">definitions</span> <span class="o">...</span>
        <span class="sd">/**</span>
<span class="sd">         * This is a method declaration; and the</span>
<span class="sd">         * explanatory text is followed by a newline.</span>
<span class="sd">         *</span>
<span class="sd">         * @param {String} param1 Parameter name</span>
<span class="sd">         * @param {String} param2 (Optional) Optional parameter</span>
<span class="sd">         * @return {Boolean} Return value</span>
<span class="sd">         */</span>
        <span class="nx">aPublicMethod</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">param1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="sd">/**</span>
<span class="sd">         * this is a private method of this class,</span>
<span class="sd">         * the private annotation marks them an prevent that they</span>
<span class="sd">         * are listed in the api doc. As they are private, they</span>
<span class="sd">         * have to start with an underscore as well.</span>
<span class="sd">         *</span>
<span class="sd">         * @return {void}</span>
<span class="sd">         * @private</span>
<span class="sd">         */</span>
        <span class="nx">_sampleMethod</span><span class="o">:</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="o">...</span>
</pre></div>
</div>
<p>Contrary to what is defined in the TYPO3 Flow PHP Coding Guidelines, methods which are public
<strong>automatically belong to the public API</strong>, without an <tt class="docutils literal"><span class="pre">&#64;api</span></tt> annotation. Contrary,
methods which do <strong>not belong to the public API</strong> need to begin with an underscore and
have the <tt class="docutils literal"><span class="pre">&#64;private</span></tt> annotation.</p>
<ul class="simple">
<li>All methods need to have JSDoc annotations.</li>
<li>Every method needs to have a <tt class="docutils literal"><span class="pre">&#64;return</span></tt> annotation. In case the method does not return
anything, a <tt class="docutils literal"><span class="pre">&#64;return</span> <span class="pre">{void}</span></tt> is needed, otherwise the concrete return value should be
described.</li>
</ul>
</div>
<div class="section" id="property-definitions">
<h3>Property Definitions</h3>
<p>All properties of a class need to be properly documented as well, with an <tt class="docutils literal"><span class="pre">&#64;type</span></tt>
annotation. If a property is private, it should start with an underscore and have the
<tt class="docutils literal"><span class="pre">&#64;private</span></tt> annotation at the last line of its doc comment:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">...</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Core</span><span class="o">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Observable</span><span class="p">,</span> <span class="p">{</span> <span class="c1">// this is just an example class definition</span>
        <span class="sd">/**</span>
<span class="sd">         * Explanation of the property</span>
<span class="sd">         * which is followed by a newline</span>
<span class="sd">         *</span>
<span class="sd">         * @type {String}</span>
<span class="sd">         */</span>
        <span class="nx">propertyOne</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>

        <span class="sd">/**</span>
<span class="sd">         * Now follows a private property</span>
<span class="sd">         * which starts with an underscore.</span>
<span class="sd">         *</span>
<span class="sd">         * @type {Number}</span>
<span class="sd">         * @private</span>
<span class="sd">         */</span>
        <span class="nx">_thePrivateProperty</span><span class="o">:</span> <span class="k">null</span><span class="p">,</span>
        <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="code-style">
<h3>Code Style</h3>
<ul>
<li><p class="first">use single quotes(&#8216;) instead of double quotes(&#8221;) for string quoting</p>
</li>
<li><p class="first">Multi-line strings (using <tt class="docutils literal"><span class="pre">\</span></tt>) are forbidden. Instead, multi-line strings should be
written like this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="s1">&#39;Some String&#39;</span> <span class="o">+</span>
<span class="s1">&#39; which spans&#39;</span> <span class="o">+</span>
<span class="s1">&#39; multiple lines&#39;</span>
</pre></div>
</div>
</li>
<li><p class="first">There is no limitation on line length.</p>
</li>
<li><p class="first">JavaScript constants (true, false, null) must be written in lowercase, and not uppercase.</p>
</li>
<li><p class="first">Custom JavaScript constants should be avoided.</p>
</li>
<li><p class="first">Use a single <tt class="docutils literal"><span class="pre">var</span></tt> statement at the top of a method to declare all variables:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">myVariable1</span><span class="p">,</span> <span class="nx">myVariable2</span><span class="p">,</span> <span class="nx">someText</span><span class="p">;</span>
        <span class="c1">// now, use myVariable1, ....</span>
<span class="p">}</span>

<span class="nx">Please</span> <span class="k">do</span> <span class="o">**</span><span class="k">not</span> <span class="nx">assign</span><span class="o">**</span> <span class="nx">values</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">variables</span> <span class="nx">in</span> <span class="nx">the</span> <span class="nx">initialization</span><span class="p">,</span> <span class="nx">except</span> <span class="k">empty</span>
<span class="k">default</span> <span class="nx">values</span><span class="o">::</span>

<span class="c1">// DO:</span>
<span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">myVariable1</span><span class="p">,</span> <span class="nx">myVariable2</span><span class="p">;</span>
        <span class="o">...</span>
<span class="p">}</span>
<span class="c1">// DO:</span>
<span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">myVariable1</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">myVariable2</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">myVariable3</span><span class="p">;</span>
        <span class="o">...</span>
<span class="p">}</span>
<span class="c1">// DON&#39;T</span>
<span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">variable1</span> <span class="o">=</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
                <span class="nx">variable2</span> <span class="o">=</span> <span class="nx">variable1</span> <span class="o">+</span> <span class="s1">&#39; World&#39;</span><span class="p">;</span>
        <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><p class="first">We use <strong>a single TAB</strong> for indentation.</p>
</li>
<li><p class="first">Use inline comments sparingly, they are often a hint that a new method must be
introduced.</p>
<p>Inline Comments must be indented <strong>one level deeper</strong> than the current nesting level:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">foo</span><span class="p">;</span>
                <span class="c1">// Explain what we are doing here.</span>
        <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><p class="first">Whitespace around control structures like <tt class="docutils literal"><span class="pre">if</span></tt>, <tt class="docutils literal"><span class="pre">else</span></tt>, ... should be inserted like
in the TYPO3 Flow CGLs:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">myExpression</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// if part</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// Else Part</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><p class="first">Arrays and Objects should <strong>never</strong> have a trailing comma after their last element</p>
</li>
<li><p class="first">Arrays and objects should be formatted in the following way:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">[</span>
        <span class="p">{</span>
                <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span>
        <span class="p">},</span> <span class="p">{</span>
                <span class="nx">x</span><span class="o">:</span> <span class="nx">y</span>
        <span class="p">}</span>
<span class="p">]</span>
</pre></div>
</div>
</li>
<li><p class="first">Method calls should be formatted the following way:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// for simple parameters:</span>
<span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">blah</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">scope</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
<span class="nx">object</span><span class="o">.</span><span class="nx">myMethod</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">baz</span><span class="p">);</span>

<span class="c1">// when the method takes a **single** parameter of type **object** as argument, and this object is specified directly in place:</span>
<span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">Panel</span><span class="p">({</span>
        <span class="nx">a</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span>
        <span class="nx">c</span><span class="o">:</span> <span class="s1">&#39;d&#39;</span>
<span class="p">});</span>

<span class="c1">// when the method takes more parameters, and one is a configuration object which is specified in place:</span>
<span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">blah</span><span class="p">(</span>
        <span class="p">{</span>
                <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span>
        <span class="p">},</span>
        <span class="nx">scope</span><span class="p">,</span>
        <span class="nx">options</span>
<span class="p">);</span><span class="o">&lt;</span>
</pre></div>
</div>
</li>
</ul>
<p>TODO: are there JS Code Formatters / Indenters, maybe the Spket JS Code Formatter?</p>
</div>
</div>
<div class="section" id="using-jslint-to-validate-your-javascript">
<h2>Using JSLint to validate your JavaScript</h2>
<p>JSLint is a JavaScript program that looks for problems in JavaScript programs. It is a
code quality tool. When C was a young programming language, there were several common
programming errors that were not caught by the primitive compilers, so an accessory
program called <tt class="docutils literal"><span class="pre">lint</span></tt> was developed that would scan a source file, looking for problems.
<tt class="docutils literal"><span class="pre">jslint</span></tt> is the same for JavaScript.</p>
<p>JavaScript code ca be validated on-line at <a class="reference external" href="http://www.jslint.com/">http://www.jslint.com/</a>. When validating the
JavaScript code, &#8220;The Good Parts&#8221; family options should be set. For that purpose, there is
a button &#8220;The Good Parts&#8221; to be clicked.</p>
<p>Instead of using it online, you can also use JSLint locally, which is now described. For
the sake of convenience, the small tutorial bellow demonstrates how to use JSlint with the
help of CLI wrapper to enable recursive validation among directories which streamlines the
validation process.</p>
<ul>
<li><p class="first">Download Rhino from <a class="reference external" href="http://www.mozilla.org/rhino/download.html">http://www.mozilla.org/rhino/download.html</a> and put it for instance
into <tt class="docutils literal"><span class="pre">/Users/john/WebTools/Rhino</span></tt></p>
</li>
<li><p class="first">Download <tt class="docutils literal"><span class="pre">JSLint.js</span></tt> (&#64;see attachment &#8220;jslint.js&#8221;, line 5667-5669 contains the
configuration we would like to have, still to decide) (TODO)</p>
</li>
<li><p class="first">Download <tt class="docutils literal"><span class="pre">jslint.php</span></tt> (&#64;see attachment &#8220;jslint.php&#8221; TODO), for example into
<tt class="docutils literal"><span class="pre">/Users/fudriot/WebTools/JSLint</span></tt></p>
</li>
<li><p class="first">Open and edit path in <tt class="docutils literal"><span class="pre">jslint.php</span></tt> -&gt; check variable <tt class="docutils literal"><span class="pre">$rhinoPath</span></tt> and
<tt class="docutils literal"><span class="pre">$jslintPath</span></tt></p>
</li>
<li><p class="first">Add an alias to make it more convenient in the terminal:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">alias</span> <span class="nx">jslint</span> <span class="s1">&#39;/Users/fudriot/WebTools/JSLint/jslint.php&#39;</span>
</pre></div>
</div>
</li>
</ul>
<p>Now, you can use JSLint locally:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// scan one file or multi-files</span>
<span class="nx">jslint</span> <span class="nb">file</span><span class="o">.</span><span class="nx">js</span>
<span class="nx">jslint</span> <span class="nb">file</span><span class="o">-</span><span class="mf">1.</span><span class="nx">js</span> <span class="nb">file</span><span class="o">-</span><span class="mf">2.</span><span class="nx">js</span>

<span class="c1">// scan one directory or multi-directory</span>
<span class="nx">jslint</span> <span class="nx">directory</span>
<span class="nx">jslint</span> <span class="nx">directory</span><span class="o">-</span><span class="mi">1</span> <span class="nx">directory</span><span class="o">-</span><span class="mi">2</span>

<span class="c1">// scan current directory</span>
<span class="nx">jslint</span> <span class="o">.</span>
</pre></div>
</div>
<p>It is also possible to adjust the validation rules JSLint uses. At the end of file
<tt class="docutils literal"><span class="pre">jslint.js</span></tt>, it is possible to customize the rules to be checked by JSlint by changing
options&#8217; value. By default, the options are taken over the book &#8220;JavaScript: The Good
Parts&#8221; which is written by the same author of JSlint.</p>
<p>Below are the options we use for TYPO3 v5:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">bitwise</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">eqeqeq</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">immed</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span><span class="nx">newcap</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">nomen</span><span class="o">:</span> <span class="k">false</span><span class="p">,</span>
<span class="nx">onevar</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">plusplus</span><span class="o">:</span> <span class="k">false</span><span class="p">,</span> <span class="nx">regexp</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">rhino</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">undef</span><span class="o">:</span> <span class="k">false</span><span class="p">,</span>
<span class="nx">white</span><span class="o">:</span> <span class="k">false</span><span class="p">,</span> <span class="nx">strict</span><span class="o">:</span> <span class="k">true</span>
</pre></div>
</div>
<p>In case some files needs to be evaluated with special rules, it is possible to add a
comment on the top of file which can override the default ones:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="cm">/* jslint white: true, evil: true, laxbreak: true, onevar: true, undef: true,</span>
<span class="cm">nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true,</span>
<span class="cm">newcap: true, immed: true */</span>
</pre></div>
</div>
<p>More information about the meaning and the reasons of the rules can be found at
<a class="reference external" href="http://www.jslint.com/lint.html">http://www.jslint.com/lint.html</a></p>
</div>
<div class="section" id="event-handling">
<h2>Event Handling</h2>
<p>When registering an event handler, always use explicit functions instead of inline
functions to allow overriding of the event handler.</p>
<p>Additionally, this function needs to be prefixed with <tt class="docutils literal"><span class="pre">on</span></tt> to mark it as event handler
function. Below follows an example for good and bad code.</p>
<p>Good Event Handler Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Application</span><span class="o">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;theEventName&#39;</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="nx">_onCustomEvent</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</pre></div>
</div>
<p>Bad Event Handler Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Application</span><span class="o">.</span><span class="nx">on</span><span class="p">(</span>
        <span class="s1">&#39;theEventName&#39;</span><span class="p">,</span>
        <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Text&#39;</span><span class="p">);</span>
        <span class="p">},</span>
        <span class="k">this</span>
<span class="p">);</span>
</pre></div>
</div>
<p>All events need to be explicitly documented inside the class where they are fired onto
with an <tt class="docutils literal"><span class="pre">&#64;event</span></tt> annotation:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Core</span><span class="o">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Observable</span><span class="p">,</span> <span class="p">{</span>
        <span class="sd">/**</span>
<span class="sd">         * @event eventOne Event declaration</span>
<span class="sd">         */</span>

        <span class="sd">/**</span>
<span class="sd">         * @event eventTwo Event with parameters</span>
<span class="sd">         * @param {String} param1 Parameter name</span>
<span class="sd">         * @param {Object} param2 Parameter name</span>
<span class="sd">         * &lt;ul&gt;</span>
<span class="sd">         * &lt;li&gt;&lt;b&gt;property1:&lt;/b&gt; description of property1&lt;/li&gt;</span>
<span class="sd">         * &lt;li&gt;&lt;b&gt;property2:&lt;/b&gt; description of property2&lt;/li&gt;</span>
<span class="sd">         * &lt;/ul&gt;</span>
<span class="sd">         */</span>
        <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Additionally, make sure to document if the scope of the event handler is not set to
<tt class="docutils literal"><span class="pre">this</span></tt>, i.e. does not point to its class, as the user expects this.</p>
</div>
<div class="section" id="extjs-specific-things">
<h2>ExtJS specific things</h2>
<p>TODO</p>
<ul class="simple">
<li>explain initializeObject</li>
<li>how to extend Ext components</li>
<li>can be extended by using constructor() not initComponents() like it is for panels and so
on</li>
</ul>
<div class="section" id="how-to-extend-data-stores">
<h3>How to extend data stores</h3>
<p>This is an example for how to extend an ExtJS data store:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">DummyStore</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Ext</span><span class="o">.</span><span class="nx">data</span><span class="o">.</span><span class="nx">Store</span><span class="p">,</span> <span class="p">{</span>

        <span class="nx">constructor</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">cfg</span> <span class="o">=</span> <span class="nx">cfg</span> <span class="o">||</span> <span class="p">{};</span>
                <span class="k">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">apply</span><span class="p">(</span>
                        <span class="p">{</span>
                                <span class="nx">autoLoad</span><span class="o">:</span> <span class="k">true</span>
                        <span class="p">},</span>
                        <span class="nx">cfg</span>
                <span class="p">);</span>

                <span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">DummyStore</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">call</span><span class="p">(</span>
                        <span class="k">this</span><span class="p">,</span>
                        <span class="nx">config</span>
                <span class="p">);</span>
        <span class="p">}</span>
<span class="p">});</span>
<span class="nx">Ext</span><span class="o">.</span><span class="nx">reg</span><span class="p">(</span><span class="s1">&#39;TYPO3.TYPO3.Content.DummyStore&#39;</span><span class="p">,</span> <span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">DummyStore</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="unit-testing">
<h2>Unit Testing</h2>
<ul class="simple">
<li>It&#8217;s highly recommended to write unit tests for javascript classes. Unit tests should be
located in the following location: <tt class="docutils literal"><span class="pre">Package/Tests/JavaScript/...</span></tt></li>
<li>The structure below this folder should reflect the structure below
<tt class="docutils literal"><span class="pre">Package/Resources/Public/JavaScript/...</span></tt> if possible.</li>
<li>The namespace for the Unit test classes is <tt class="docutils literal"><span class="pre">Package.Tests</span></tt>.</li>
<li>TODO: Add some more information about Unit Testing for JS</li>
<li>TODO: Add note about the testrunner when it&#8217;s added to the package</li>
<li>TODO: <a class="reference external" href="http://developer.yahoo.com/yui/3/test/">http://developer.yahoo.com/yui/3/test/</a></li>
</ul>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="803e11b9-6cbe-a36c-5d83-af5ab24ca719" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
      </node>
      <node identifier="298b6741-33e5-29b1-dc8e-28c8b4e739e9" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="changelogs" locale="">
       <properties>
        <title>ChangeLogs</title>
       </properties>
       <node identifier="bf79d4c5-d350-999e-c22f-6095b300ac56" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
        <node identifier="a984fdca-17b6-5a4a-f223-3b13b209a64b" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
         <properties>
          <text><![CDATA[<div class="section" id="changelogs">
<h1>ChangeLogs</h1>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/100.html">1.0.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/100beta2.html">1.0.0 beta 2</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/101.html">1.0.1</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/102.html">1.0.2</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/103.html">1.0.3</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/104.html">1.0.4</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/105.html">1.0.5</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/106.html">1.0.6</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110.html">1.1.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110-beta1.html">1.1.0-beta1</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110-beta2.html">1.1.0-beta2</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110-beta3.html">1.1.0-beta3</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110-rc1.html">1.1.0-rc1</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/110-rc2.html">1.1.0-rc2</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/200.html">2.0.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/200-beta1.html">2.0.0-beta1</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/201.html">2.0.1</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/202.html">2.0.2</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/210.html">2.1.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/210-rc1.html">2.1.0-RC1</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/210-beta1.html">2.1.0-beta1</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/211.html">2.1.1</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/220-beta1.html">2.2.0-beta1</a></li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/the-definitive-guide/partv/changelogs/220-beta2.html">2.2.0-beta2</a></li>
</ul>
</div>
</div>]]></text>
          <title></title>
         </properties>
        </node>
       </node>
       <node identifier="9ca08d72-e890-5f7d-b1a2-df8d6159d527" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       <node identifier="255bcdf6-579a-4326-9423-571863acb9b1" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="100" locale="">
        <properties>
         <title>1.0.0</title>
        </properties>
        <node identifier="fe3cb8b7-cb49-7457-974b-095d269f25f2" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="75b8b07a-2ba1-ff5d-3ed9-65269e27403b" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>1.0.0</h1>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-version-in-package-xml">
<h3>[TASK] Update version in Package.xml</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f9f52bac02e7bf729052f633dd5bf93ce7928428">f9f52ba</a></li>
</ul>
</div>
<div class="section" id="task-remove-not-fixable-functional-test">
<h3>[TASK] Remove not-fixable functional test</h3>
<p>Due to the changes to the session scope, this
test is not working anymore and there is no
easy way to test the expected behavior with
the current code base.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=02bc4a8e9a85832af20c105dd11b87ee54a42a01">02bc4a8</a></li>
</ul>
</div>
<div class="section" id="bugfix-renderannotation-handles-boolean-values-correctly">
<h3>[BUGFIX] renderAnnotation handles boolean values correctly</h3>
<p>When rendering annotations into proxy classes, boolean values for
options got lost.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31111">#31111</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1f172689920c1a2e0bc4697473e9a35bf655b54a">1f17268</a></li>
</ul>
</div>
<div class="section" id="task-make-migrate-annotations-php-a-tiny-bit-less-strict">
<h3>[TASK] Make migrate-annotations.php a tiny bit less strict</h3>
<p>When spaces (yuck) where used for indentation, &#64;validate annotations were
not migrated. This fixes that. Promise you will fix your indentation in
return.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d8af36d8ec07ff04742efa13d2faffa8f6f01064">d8af36d</a></li>
</ul>
</div>
<div class="section" id="bugfix-terminate-cleanly-after-displaying-exception-message-in-cli">
<h3>[BUGFIX] Terminate cleanly after displaying exception message in CLI</h3>
<p>If an exception occurred during a CLI request, it could happen that
another exception was thrown and displayed (SignalSlot, ObjectManager
not yet initialized) because the framework is in an early, unstable
state and thus cannot shutdown the bootstrap normally.</p>
<p>Therefore, if an exception was caught in the bootstrap, FLOW3 must exit
directly without trying to shutdown the bootstrap in the regular way.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3732564cfa933ed4064704d4047a82794acd2f2e">3732564</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-package-import-git-urls">
<h3>[BUGFIX] Fix package:import git URLs</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31104">#31104</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e493de834d5f04fbe484d69209262c3c55cda828">e493de8</a></li>
</ul>
</div>
<div class="section" id="task-disable-sql-query-logging-by-default">
<h3>[TASK] Disable SQL query logging by default</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4fdeed851ef125d271ff7835311fe014f63eff5b">4fdeed8</a></li>
</ul>
</div>
<div class="section" id="task-don-t-flush-caches-after-package-create">
<h3>[TASK] Don&#8217;t flush caches after package:create</h3>
<p>Creating a new package does not really require flushing
all caches because it only adds code (the package class)
but does not remove any code. In Development context this
should not cause any problems and developers save time
if caches are not flushed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=70f9da6c1ac989b8c386cb8d6e96e243e4a39d35">70f9da6</a></li>
</ul>
</div>
<div class="section" id="bugfix-missing-lazy-annotation-in-migration-script">
<h3>[BUGFIX] Missing Lazy annotation in migration script</h3>
<p>The Lazy annotation is missing in the migration-annotation.php script</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31083">#31083</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=69f039e5292ba60c2f68f349ebe431683625deba">69f039e</a></li>
</ul>
</div>
<div class="section" id="bugfix-minor-fix-in-linktest">
<h3>[BUGFIX] Minor fix in LinkTest</h3>
<p>This fixes a test for TYPO3FlowUtilityFiles::is_link()
that failed to properly delete a previously generated symlink</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=00f1cfebe896bb8a1dca4ec4f13dc37b70bc7acc">00f1cfe</a></li>
</ul>
</div>
<div class="section" id="task-remove-scope-annotations-for-prototypes">
<h3>[TASK] Remove scope annotations for prototypes</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f1eca95a65de4ceb7635c5d418b32aa0527d5781">f1eca95</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-doc-comment-parsing-of-single-line-descriptions">
<h3>[BUGFIX] Fix doc comment parsing of single line descriptions</h3>
<p>A simple bugfix and test for single line description in doc comment
blocks.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=629d5e38e14101233eae58a630da6b0be0e34ccc">629d5e3</a></li>
</ul>
</div>
<div class="section" id="task-drop-author-tags-from-source-code">
<h3>[TASK] Drop &#64;author tags from source code</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1da6a9eab6d4c51f183bdd199332d054552404e5">1da6a9e</a></li>
</ul>
</div>
<div class="section" id="bugfix-exception-when-entities-valueobjects-are-not-prototype">
<h3>[BUGFIX] Exception when entities/valueobjects are not prototype</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31042">#31042</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9c48618359df5e4a2d3d5e026a43adcb67944c18">9c48618</a></li>
</ul>
</div>
<div class="section" id="task-beautify-exception-messages-in-command-line-interface">
<h3>[TASK] Beautify exception messages in command line interface</h3>
<p>This wraps a try-catch block around the request handling part for
command line commands and renders a more friendly exception message
with a reference to the exception code and exception reference number,
if any.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2915d772762f8ffa72ee4df040356856fd258808">2915d77</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-is-link-work-around-work-for-paths-with-trailing-slash">
<h3>[BUGFIX] make is_link() work around work for paths with trailing slash</h3>
<p>On Windows TYPO3FlowUtilityFiles::is_link() compares the
given path with the resolved absolute path due to a bug in the
native is_link() implementation.
This fails if the given path ends on a slash because that is
stripped of by PHPs realpath() function.
This change strips of any trailing slash before comparing the
paths.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31061">#31061</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b306b18ac9efcba83ae9525bf470cc020d6d4b34">b306b18</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-unit-tests-using-the-real-reflectionservice">
<h3>[TASK] Clean up unit tests using the real ReflectionService</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=994f209eb72b9c9dd4e1c26bd2c7fcad4d9c5a40">994f209</a></li>
</ul>
</div>
<div class="section" id="task-cache-annotation-parsing-results">
<h3>[TASK] Cache annotation parsing results</h3>
<p>Now class and property annotations are collected during regular
class reflection and reused later. This avoids building a new
class/property reflection and parsing of code and docblocks for
every call reading annotations.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3cc446e5e1832f4f5ca0e7ba0d259b06b514c501">3cc446e</a></li>
</ul>
</div>
<div class="section" id="task-fix-edge-case-in-annotation-migration-script">
<h3>[TASK] Fix edge case in annotation migration script</h3>
<p>The script failed to replace (some?) nested ORM annotations with
prefixed ones.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b22b157a121a2d93ea8d07786a1aa21a3824e602">b22b157</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-error-when-doctrine-validate-finds-errors">
<h3>[BUGFIX] Fix error when doctrine:validate finds errors</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=207a6c976169f0e874c6bb5e072f3d84f92a6a59">207a6c9</a></li>
</ul>
</div>
<div class="section" id="bugfix-packagemanager-createpackage-creates-invalid-annotation">
<h3>[BUGFIX] PackageManager::createPackage() creates invalid annotation</h3>
<p>The PackageManager::createPackage() that is called by the
package:create command still creates a Package.php file with a
&#8220;&#64;scope&#8221; annotation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31052">#31052</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=139a4dac9fecd25c694657ef269ff43761be5eb5">139a4da</a></li>
</ul>
</div>
<div class="section" id="bugfix-reuse-flow3-classloader-in-reflectionservice">
<h3>[BUGFIX] Reuse FLOW3 classloader in ReflectionService</h3>
<p>There was a second class loader being created for the annotation
parser. It was lacking the available packages and thus failed
under some circumstances.</p>
<p>The changes adds reuse of the classloader already created in the
FLOW3 bootstrap.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31015">#31015</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=59b758615957dea8a2efc0defbac2a190b15b31e">59b7586</a></li>
</ul>
</div>
<div class="section" id="task-add-appendexceedingarguments-setting-to-all-default-routes">
<h3>[TASK] Add appendExceedingArguments setting to all default routes</h3>
<p>This adds the setting appendExceedingArguments to the default
fallback routes of FLOW3 in order to make more custom routes work
out of the box.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/30778">#30778</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b483234cc626e749c46ae495e3364329d28c4b8a">b483234</a></li>
</ul>
</div>
<div class="section" id="task-only-append-exceeding-request-arguments-to-uri-if-configured">
<h3>[!!!][TASK] Only append exceeding request arguments to URI if configured</h3>
<p>This changes the default behavior of the routing framework in
order to be more consequent and easier to extend in the future.
In detail this changes handling of arguments that are passed to
the router::resolve() method but are not part of the route
configuration.
Until now these arguments were just appended to the resulting
URI as query string, but this leads to unexpected behavior (see</p>
<p>Now, if you need this behavior, you have to explicitly tell the
route by enabling the setting &#8220;appendExceedingArguments&#8221;.
This is done for the default action route provided with FLOW3,
so that most links will work out of the box.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30778">#30778</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d74ce5d9cf5081ebe019c594b80c4d17b96d4fa8">d74ce5d</a></li>
</ul>
</div>
<div class="section" id="bugfix-routing-does-not-always-work-if-splitstring-is-optional">
<h3>[BUGFIX] Routing does not always work if splitString is optional</h3>
<p>If the route part following an identity route part optional
like &#8220;{post}(.html)&#8221;, the identityRoutePart creates a correct
link but matching of the URI without the optional part fails,
if the dynamic part contains the split string (in this example
if the post contains the string &#8221;.html&#8221;).
This change fixes this by always matching against the complete
routePath with an improved RegEx.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30929">#30929</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ce14c0003eb87316e760985c7fa59cbee5af1a72">ce14c00</a></li>
</ul>
</div>
<div class="section" id="task-safeguard-apc-use-in-cli-requests">
<h3>[TASK] Safeguard APC use (in CLI requests)</h3>
<p>When activating APC as cache for Doctrine one would get fatal
errors in CLI, because by default APC is disabled for CLI PHP.</p>
<p>Thus we check for the existence of apc_fetch() before actually
using the ApcCache.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=10fc76e9f70603634d9e0b9465a57ba12f2521ef">10fc76e</a></li>
</ul>
</div>
<div class="section" id="task-convenience-method-for-adding-flashmessages">
<h3>[TASK] Convenience Method for adding FlashMessages</h3>
<p>This adds a method addFlashMessage() to the AbstractController
This should be used for adding FlashMessages instead of
interacting with the FlashMessageContainer directly in order to
reduce interdependencies.
Besides this change renames the default severity of
FlashMessages from SEVERITY_MESSAGE to SEVERITY_OK.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/30825">#30825</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1f9a0e6552f5290244925dff7b5dc1cc15928491">1f9a0e6</a></li>
</ul>
</div>
<div class="section" id="task-teach-aop-classannotatedwith-methodannotatedwith">
<h3>[TASK] Teach AOP classAnnotatedWith &amp; methodAnnotatedWith</h3>
<p>Two new point cut designators added, includes tests. The pattern
given is used as is, only backslashes are escaped for ease of use.</p>
<p>Also changes the use of classTaggedWith and methodTaggedWith use in
FLOW3 itself to the new designators.</p>
<p>Related:# 27627</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=db6c8259102bf2715c6ce12e07e8c6219aabf73d">db6c825</a></li>
</ul>
</div>
<div class="section" id="task-useless-cleanup-of-return-annotations">
<h3>[TASK] Useless cleanup of &#64;return annotations...</h3>
<p>just because I touched those files anyway.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4e01754c2eaacc3ab09eee29bbb58f8654c27103">4e01754</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-new-annotation-syntax">
<h3>[TASK] Adjust to new annotation syntax</h3>
<p>The syntax for annotations changed with #27627, this adjusts the
code as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=42e8a5ebcca3faa970c5325d6fc99e4d0f79c5b7">42e8a5e</a></li>
</ul>
</div>
<div class="section" id="task-support-new-annotation-syntax">
<h3>[TASK] Support new annotation syntax</h3>
<p>This adds support for the new annotation syntax in a way that aims
to change as little code as needed. It does this by adding support
for namespaced annotations to DocCommentParser, adding some methods
to read annotations using Doctrine Common to the ReflectionService
and adjusts some other parts of the code that needed to be changed
already.</p>
<p>Existing annotations in userland code can be migrated using the
migrate-annotations.php script. Run it without arguments to get
instructions.</p>
<p>Further changes to fully resolve #27627 will follow.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f00f63fa2f6134a94a6b478dd6b2583e236705a9">f00f63f</a></li>
</ul>
</div>
<div class="section" id="task-add-our-annotations-as-classes">
<h3>[TASK] Add our annotations as classes</h3>
<p>This adds classes for all annotations used in FLOW3 to the
TYPO3FlowAnnotations namespace.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=32bb751e779df8c6bcd28ce54ce01335d9a446ad">32bb751</a></li>
</ul>
</div>
<div class="section" id="task-remove-leftover-encoding-declarations">
<h3>[TASK] Remove leftover encoding declarations</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30861">#30861</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b7573cb080369c31e15465a3debb470f8a0b4d85">b7573cb</a></li>
</ul>
</div>
<div class="section" id="bugfix-invalid-yaml-parser-result-should-be-empty-array">
<h3>[!!!][BUGFIX] invalid YAML parser result should be empty array</h3>
<p>A non array result of the symfony YAML parser will now be
converted to an empty array to not break things.</p>
<p>Breaking because the new parser seems to behave different than
HordeYaml in some circumstances, so errors may arise due to
missing configuration because the file wasn&#8217;t parsed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=795c7d004e089faa11903088661280ecbdc0fd78">795c7d0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-access-denied-exception-after-session-timeout-with-csrf">
<h3>[BUGFIX] Fix access denied exception after session timeout with CSRF</h3>
<p>This change nests the firewall inspection in the try catch block that
also catches AuthenticationRequired exceptions from requests. The
CsrfProtection pattern will check if any CSRF token is present in the
context and throws an AuthenticationRequired exception otherwise to
proceed to an entry point for re-authentication.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30436">#30436</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0edbd68a074a248a8ddd4b023002a7a51e98ca48">0edbd68</a></li>
</ul>
</div>
<div class="section" id="feature-initialize-session-and-session-objects-on-demand">
<h3>[FEATURE] Initialize session and session objects on demand</h3>
<p>The default behavior of FLOW3 was that a session was initialized – and
thus a cookie sent – on every request, no matter if the session was
needed or not. This feature delays session initialization until when a
session is really needed. Existing sessions will be resumed
automatically.</p>
<p>A new session is only started if the Session-&gt;start() method is called
explicitly, or if a method which was tagged with &#64;session autostart=true
was called.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/26358">#26358</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6d7d3b9ae15b120acb647526f92ed443fdab312a">6d7d3b9</a></li>
</ul>
</div>
<div class="section" id="task-get-rid-of-some-duplicate-code">
<h3>[TASK] Get rid of some duplicate code</h3>
<p>Moves one duplicate method up and removes one that was
completely unused by now.</p>
<p>The tests for the latter have been moved to where the code
is actually still used.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c03a6ab106b95c131d79c7fa505d978233fcf08c">c03a6ab</a></li>
</ul>
</div>
<div class="section" id="task-change-default-authentication-strategy">
<h3>[!!!][TASK] Change default authentication strategy</h3>
<p>This changes the default authentication strategy from &#8220;anyToken&#8221;
to &#8220;atLeastOneToken&#8221; in order to provoke an exception if
authentication fails in the common use case (login with username
and password).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29488">#29488</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d77d259613775337751115098200e6175adfcb28">d77d259</a></li>
</ul>
</div>
<div class="section" id="task-remove-scope-annotations-from-interfaces">
<h3>[TASK] Remove scope annotations from interfaces</h3>
<p>They have no effect and in userland code even trigger an error.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b7326a86c391c26745d172d34dd3b532d6d067ba">b7326a8</a></li>
</ul>
</div>
<div class="section" id="task-make-phpsessions-configurable">
<h3>[TASK] Make PHPSessions configurable</h3>
<p>Resolve: #30848</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0800ec1be94a63719efaea59c146f2de12e7fbfe">0800ec1</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-flash-messages-api">
<h3>[!!!][TASK] Clean up Flash Messages API</h3>
<ul class="simple">
<li>FlashMessageContainer is moved to TYPO3FlowMVC</li>
<li>FlashMessage is removed</li>
<li>FlashMessageContainer now uses TYPO3FlowErrorMessage instead of
FlashMessage objects</li>
<li>Message has an optional argument &#8220;title&#8221;, which is not used so far
but that way is compatible to v4 flashMessages</li>
<li>Message has now a &#8220;severity&#8221; property</li>
</ul>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30825">#30825</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2dc4ac4cbd6e370edb3aab21fcf5ec8e15ef4077">2dc4ac4</a></li>
</ul>
</div>
<div class="section" id="bugfix-proxy-class-builder-should-work-with-null-default">
<h3>[BUGFIX] Proxy Class Builder should work with NULL default</h3>
<p>Optional arguments with NULL default value will now be correctly
autowired in the proxy class. Therefor optional arguments after
a default NULL will be correctly handled.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30858">#30858</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8175869916ad95c8bdd06498c8caaad5d6c1ceac">8175869</a></li>
</ul>
</div>
<div class="section" id="bugfix-security-randomizer-fallback-does-not-work">
<h3>[BUGFIX] Security_Randomizer fallback does not work</h3>
<p>This fix should allow Security_Randomizer to work on Win x64
by making sure that the mt_rand fallback actually returns random
bytes.</p>
<p>see <a class="reference external" href="http://sourceforge.net/tracker/?group_id=294448&amp;atid=1243705">http://sourceforge.net/tracker/?group_id=294448&amp;atid=1243705</a>
for more details</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29976">#29976</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1dd7ba68d3f0b6d6b2c0f9ef9f480e80aab08f2d">1dd7ba6</a></li>
</ul>
</div>
<div class="section" id="task-use-symphony-yaml-parser-for-settings-instead-horde-yaml">
<h3>[TASK] Use Symphony YAML parser for settings instead Horde/YAML</h3>
<p>Drop Horde YAML parser and use Symfony YAML parser instead.
It is now included in the new package
Symfony.Component.Yaml be sure to have in active to test this.</p>
<p>Also drop Symfony Console Component</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30826">#30826</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=23468adc78877afc51af7a4c39fe3e649afb226e">23468ad</a></li>
</ul>
</div>
<div class="section" id="bugfix-no-endless-recursion-on-a-missing-cli-php-binary">
<h3>[BUGFIX] No endless recursion on a missing CLI PHP binary</h3>
<p>If a wrong path has been specified or a PHP binary is used which
does not support CLI, FLOW3 could end up in an endless recursion
on executing the compile sub command.</p>
<p>This change set adds a check for the proper SAPI type in FLOW3&#8217;s
command line script.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30633">#30633</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a7da3409cb3173d17fcabae5c5cc0c10911f0672">a7da340</a></li>
</ul>
</div>
<div class="section" id="task-classloader-returns-true-now-if-class-was-found">
<h3>[TASK] ClassLoader returns TRUE now if class was found</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bd7ea42b46a1d54c90a8b7a3527ec6a0bdd70ff4">bd7ea42</a></li>
</ul>
</div>
<div class="section" id="task-fix-type-annotation-for-reflectionservice-in-objectserializer">
<h3>[TASK] Fix type annotation for ReflectionService in ObjectSerializer</h3>
<p>The var annotation for the ReflectionService property was wrong.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7e90134862d94ac139e1cc3112893bdbfd6eb126">7e90134</a></li>
</ul>
</div>
<div class="section" id="task-fixed-consistent-typo-in-variable-name">
<h3>[TASK] Fixed consistent typo in variable name</h3>
<p>In the bootstrap one variable was called
$possibleComanndControllerIdentifier instead of
$possibleCommandControllerIdentifier</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d8bed4b60100ef11ad8a29ca0127521f3a866351">d8bed4b</a></li>
</ul>
</div>
<div class="section" id="bugfix-static-route-parts-are-not-reset">
<h3>[BUGFIX] Static Route Parts are not reset</h3>
<p>StaticRoutePart::resolve() sets the value to the route parts
name (= the corresponding URI part).
RoutePart::match() merges the route parts value into the
resulting request arguments. The value of the route part must be
reset to NULL before the route parth is processed.
The StaticRoutePart currently fails to do so. Usually this has
no effect because match() is always called before resolve() but
it fails when using FLOW3 with an app server like AiP.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30542">#30542</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9d03bb5259c34403d95f7048da9c80e8a7fb7543">9d03bb5</a></li>
</ul>
</div>
<div class="section" id="task-use-indexedreader-instead-of-our-own-fix">
<h3>[TASK] Use IndexedReader instead of our own &#8220;fix&#8221;</h3>
<p>There was a mapAnnotationsToKeys() method in our annotation
driver. Using the IndexedReader from Doctrine is the better
option.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6216c3d791d7fe33503c06c03566e607b52e9b1b">6216c3d</a></li>
</ul>
</div>
<div class="section" id="task-another-cosmetic-fix">
<h3>[TASK] Another cosmetic fix.</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b46db7bf9436bf9e3beeffd89ccef1acdc06bcfc">b46db7b</a></li>
</ul>
</div>
<div class="section" id="task-trivial-cosmetic-fixes">
<h3>[TASK] Trivial cosmetic fixes.</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cb9d87ad8f93a34e272dca8128250cfed82faf9c">cb9d87a</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-default-value-text-for-datatype">
<h3>[BUGFIX] Wrong default value &#8216;Text&#8217; for $dataType</h3>
<p>The default value &#8216;Text&#8217; for $dataType in the signature of the method
addNewArgument should be &#8216;string&#8217; because there is no TypeConverter for
&#8216;Text&#8217;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29978">#29978</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2b29376b3ea683ccf15ae925a6cd0373d3749491">2b29376</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-regression-flush-caches-blocked-by-aggregate-analysis">
<h3>[BUGFIX] Fix regression: flush caches blocked by aggregate analysis</h3>
<p>On trying to flush the caches after a package has been removed or
deactivated, the Reflection Service can fail due to stale class schema
cache entries. Like the other similar code, the code introduced in
I5538230b42624629a6746ebff5e9e5dae6e93859 must also check if the class
still exists.</p>
<ul class="simple">
<li>Relates: <a class="reference external" href="http://forge.typo3.org/issues/29416">#29416</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bdb224d862d122e9f3ba97b123d21a3454537efe">bdb224d</a></li>
</ul>
</div>
<div class="section" id="task-clarify-persistence-behavior-for-inheritance-in-aggregate-roots">
<h3>[TASK] Clarify persistence behavior for inheritance in aggregate roots</h3>
<p>This adds a number of functional tests to make sure the repository
behaves as expected. For Person and User, the latter being a subclass
of the former, a PersonRepository will also be able to handle User:</p>
<ul class="simple">
<li>it will return both types</li>
<li>it will accept both types for add/remove/update</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29543">#29543</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=095a742b7d86e082e273444585d222169bce19c0">095a742</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-sure-only-complete-hierarchies-are-aggregate-root">
<h3>[!!!][BUGFIX] Make sure only complete hierarchies are aggregate root</h3>
<p>Reported as &#8220;Aggregate root detection for Person vs AbstractParty is
broken&#8221; the issue at hand was that one could not rely on certain
semantics bound to aggregate root handling:</p>
<p>The association from Account to Person is cascaded during persist,
because the fact that Person has a PersonRepository is not detected
from the type hint to AbstractParty in the Account class.</p>
<p>The solution this change introduces is as follows: all classes in a
hierarchy must have a repository assigned. This can be done by
having one repository on the tip of the hierarchy, but any entity
can have it&#8217;s own repository as well.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29416">#29416</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=23961c893f130fad1a0cada8891a81f5aec084df">23961c8</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-class-schema-building-code">
<h3>[TASK] Clean up class schema building code</h3>
<p>Extract some code into methods to make coming changed
easier.</p>
<p>Also add another test to the unit test for ClassSchema.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c2cf3aa08b6c257d3aecd5df37e7e1562ecfad9c">c2cf3aa</a></li>
</ul>
</div>
<div class="section" id="task-some-tiny-spelling-fixes">
<h3>[TASK] Some tiny spelling fixes</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=570457782d633273d19deca3aeca50262b420bbf">5704577</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-file-exists-check-through-resourcestreamwrapper">
<h3>[BUGFIX] Allow file exists check through ResourceStreamWrapper</h3>
<p>For file exists checks, we need to make sure that the
ResourceStreamWrapper returns FALSE when checking  the path for a
non-existing persistent resource, and does not continue to the package
check.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/30254">#30254</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0ef0e45d5fee21220038defa9bed6dc641f1a7c4">0ef0e45</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-column-names-for-association-properties">
<h3>[!!!][BUGFIX] Fix column names for association properties</h3>
<p>For associations without a join table the column names in the
model tables followed the target type, not the property name as
it was intended (flow3_resource_resourcepointer instead of
resourcepointer).</p>
<p>This is a breaking change, as it requires database changes. For
the framework packages migrations are included, for custom code
generating a migration (or using update) is needed.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30223">#30223</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=395997deae0c4230636276d0c2c0bf7a22d6fcc1">395997d</a></li>
</ul>
</div>
<div class="section" id="task-simplify-license-header-in-php-files">
<h3>[TASK] Simplify license header in PHP files</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29415">#29415</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1a7fd5984752efae57af95ebe5b54ab56dadba1a">1a7fd59</a></li>
</ul>
</div>
<div class="section" id="task-fix-foreign-key-handling-in-migration">
<h3>[TASK] Fix foreign key handling in migration</h3>
<p>Migrating down would not work because FK constraints where not named.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3831728995ab9b8f2c0f2a0ec12df1205118d8aa">3831728</a></li>
</ul>
</div>
<div class="section" id="task-fix-failing-unit-test-after-securitycontext-change">
<h3>[TASK]&nbsp;Fix failing unit test after SecurityContext change</h3>
<p>Fix a failing unit test after change 5358.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=35bda30a32e6f6db3fd51651289400ad9877cea8">35bda30</a></li>
</ul>
</div>
<div class="section" id="bugfix-aop-proxies-are-no-longer-broken-if-call-exists">
<h3>[BUGFIX] AOP proxies are no longer broken if __call() exists</h3>
<p>If a class contains a magic __call() method, AOP proxy classes are
broken due to a is_callable() use – method_exists() in addition would
be correct.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30351">#30351</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3e36de833c1308ebf4aa3081f0d8e741e6085542">3e36de8</a></li>
</ul>
</div>
<div class="section" id="bugfix-version-annotations-are-not-ignored-anymore">
<h3>[BUGFIX] &#64;version annotations are not ignored anymore</h3>
<p>For optimization reasons FLOW3&#8217;s Reflection Service ignored &#64;version
annotations. Due to this, Doctrine&#8217;s Optimistic Locking feature could
not be used.</p>
<p>This change set removes &#64;version from the list of ignored tags.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30380">#30380</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9c8570559b39140255d8aa0b59e8926b2f9c73a0">9c85705</a></li>
</ul>
</div>
<div class="section" id="bugfix-no-persistence-side-effects-anymore-in-functional-tests">
<h3>[BUGFIX] No persistence side effects anymore in functional tests</h3>
<p>Doctrine&#8217;s Unit of Work still contained objects from previous tests.
In order to prevent side effects, the Entity Manager must be cleared
before executing further tests.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30379">#30379</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=10af83a3299ea8b0719bc470f28d5d1c8ca481e8">10af83a</a></li>
</ul>
</div>
<div class="section" id="feature-support-mapping-of-integer-to-string">
<h3>[FEATURE] Support mapping of integer to string</h3>
<p>Just a small additional source type in the StringConverter.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30317">#30317</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=892d67dcb85b93ba1f2a121672bf9243cceb26ec">892d67d</a></li>
</ul>
</div>
<div class="section" id="task-guard-the-account-for-null-when-getting-a-party">
<h3>[TASK] Guard the account for NULL when getting a party</h3>
<p>This could happen, if the account in the persistence was deleted during
a session.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2ae3f0ce684d00a0b352db1e7b0a3431a4551152">2ae3f0c</a></li>
</ul>
</div>
<div class="section" id="bugfix-cli-help-throws-exception-if-related-comments-are-not-available">
<h3>[BUGFIX] CLI Help throws exception if related comments are not available</h3>
<p>The flow3:help:help command parses &#64;see annotations of the
commands and retrieves the method description of related
commands.
This leads to an exception if the target command is not
available (e.g. if the respective package is not loaded).</p>
<p>This change fixes this by replacing the short description
with &#8220;&lt;i&gt;Command not available&lt;/i&gt;&#8221; in those cases.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30261">#30261</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=75a8b899390e115cbf5028abcb485029547aeb7d">75a8b89</a></li>
</ul>
</div>
<div class="section" id="bugfix-cli-commandmanager-throws-exception-for-ambiguous-commands">
<h3>[BUGFIX] CLI CommandManager throws exception for ambiguous commands</h3>
<p>This change ensures that the CommandManager returns the complete
CommandIdentifier for commands with the same controller and command
names, for example:
package.key:controller:command and
otherpackage.key:controller:command</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30260">#30260</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5e5daa1b69c58ba531b270ed685e9528ba01a413">5e5daa1</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-persistentobjectconverter-unit-test">
<h3>[TASK] Clean up PersistentObjectConverter unit test</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=87863f3dd1db5786c03ba9c2ee4f91b7b718ec59">87863f3</a></li>
</ul>
</div>
<div class="section" id="bugfix-read-objectconverter-configuration-correctly">
<h3>[BUGFIX] Read ObjectConverter configuration correctly</h3>
<p>When checking for property mapping configuration the ObjectConverter
asks for the &#8220;ArrayToObjectConverter&#8221; configuration. This is a leftover
and should be &#8220;ObjectConverter&#8221;.</p>
<p>Also remove the unused persistence manager that is injected.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30262">#30262</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a9d8cc9e25281b876204e333c99d833993120046">a9d8cc9</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-objectconverter-to-use-constructor-parameters">
<h3>[BUGFIX] Allow ObjectConverter to use constructor parameters</h3>
<p>We need this for image upload in Phoenix.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30255">#30255</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d366973e7ac31b49939d6a17ff642193620800dd">d366973</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-file-creation-through-resourcestreamwrapper">
<h3>[BUGFIX] Allow file creation through ResourceStreamWrapper</h3>
<p>For file creation, we need to make sure that the ResourceStreamWrapper
also returns the path for a non-existing persistent resource.</p>
<p>We need that e.g. for TYPO3 image uploads to work.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30254">#30254</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c0319226fb990162c30d216e51ffcf349af20ca4">c031922</a></li>
</ul>
</div>
<div class="section" id="bugfix-do-not-override-parent-instance-in-compiled-proxies">
<h3>[BUGFIX] Do not override parent instance in compiled proxies</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30234">#30234</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0275a5fff4f950ad969447836b2312cac7c99e6c">0275a5f</a></li>
</ul>
</div>
<div class="section" id="task-create-lower-cased-uris-by-default">
<h3>[!!!][TASK] Create lower cased URIs by default</h3>
<p>The routing framework is capable of creating case sensitive
URIs so it is possible to resolve different actions depending
on the case of URI segments.</p>
<p>This changes the behavior to convert URIs to lower case by
default as that is the most common requirement.</p>
<p>If you want to keep the case, you can achieve that by setting
toLowerCase to FALSE. This can be done for the whole route or
for specific Route Parts:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Case</span><span class="nv"> </span><span class="s">sensitive</span><span class="nv"> </span><span class="s">Route&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span>    <span class="s">&#39;posts/{post}/{category}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;TYPO3.Blog&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Post&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;index&#39;</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;html&#39;</span>
  <span class="l-Scalar-Plain">toLowerCase</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>

<span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="s">&#39;Case</span><span class="nv"> </span><span class="s">sensitive</span><span class="nv"> </span><span class="s">Route</span><span class="nv"> </span><span class="s">Part&#39;</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span>    <span class="s">&#39;posts/{post}/{category}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;TYPO3.Blog&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Post&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;index&#39;</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;html&#39;</span>
  <span class="l-Scalar-Plain">routeParts</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">post</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">toLowerCase</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</pre></div>
</div>
<p>Note: This is a breaking change in the sense that dynamic route
parts are now resolved to a lower cased string by default.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29977">#29977</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=755a73526244e29df6b1c106b6e16e9309508e8a">755a735</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-recursion-error-in-typo3flowvar-dump">
<h3>[BUGFIX] Fix recursion error in TYPO3Flowvar_dump()</h3>
<p>A var_dump of for example the PersistenceManager results in a memory
error. This happens because the dumped object is not checked against
the blacklisted class list.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30163">#30163</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=01ffa9ce3068e09ab1b771e366b30d17df5af997">01ffa9c</a></li>
</ul>
</div>
<div class="section" id="task-fix-unit-test-side-effects">
<h3>[TASK] Fix unit test side effects</h3>
<p>The CacheFactoryTest created directories in the distribution
root when run from there. Now it used a mocked filesystem.</p>
<p>The warnings about chmod() seem to be unavoidable, some
comments about that were added to the affected test.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b301de55bdd60a75fd9c23a7b8f724607e770b06">b301de5</a></li>
</ul>
</div>
<div class="section" id="feature-add-generic-identity-routeparthandler">
<h3>[FEATURE] Add generic Identity RoutePartHandler</h3>
<p>This implements improved routing for persisted objects.</p>
<p>When an object type is specified in the routing configuration,
the new &#8220;IdentityRoutePart&#8221; is used to match/resolve the route
part.</p>
<p>By default the resolved URI representation (path segment) is
built from the identity properties of the domain model. If no
identity properties are defined, the technical identifier (UUID)
is used.</p>
<p>Additionally a custom URI pattern can be defined in the route.
For properties of type DateTime the date format can be specified
prefixed by a colon.</p>
<p>If a path segment already exists, the IdentityRoutePart handler
will append an increasing counter to ensure unique URIs.</p>
<p>Sample Route:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span>    <span class="s">&#39;posts/{post}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;TYPO3.Blog&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Post&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;show&#39;</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;html&#39;</span>
  <span class="l-Scalar-Plain">routeParts</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">post</span><span class="p-Indicator">:</span>
      <span class="l-Scalar-Plain">objectType</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">TYPO3\Blog\Domain\Model\Post</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/8736">#8736</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=38232efbd45fa0cf83dc5d5b6dd6df4c8521a081">38232ef</a></li>
</ul>
</div>
<div class="section" id="bugfix-don-t-remove-referenced-entities">
<h3>[BUGFIX]&nbsp;Don&#8217;t remove referenced entities</h3>
<p>This change adds a check to the removal of dereferenced
entities in the AbstractBackend. If the entity was visited
during the peristence, another reference to the entity was found and it will not be removed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2c949e36da65af8f579d465bfa0e5f9a9028b4f1">2c949e3</a></li>
</ul>
</div>
<div class="section" id="feature-improve-default-routing-for-entities">
<h3>[!!!][FEATURE] Improve default routing for entities</h3>
<p>This improves the default dynamic route part handler so that it
can resolve objects that are known to the persistence manager.
If the routing comes across an object when creating an URI, the
identifier (UUID) of the object is used to resolve the URI part.</p>
<p>This is a breaking change, because routes with dynamic parts now
also match objects even if no custom route part handler is used.</p>
<p>The route:</p>
<div class="highlight-yaml"><div class="highlight"><pre><span class="p-Indicator">-</span>
  <span class="l-Scalar-Plain">uriPattern</span><span class="p-Indicator">:</span>    <span class="s">&#39;posts/{post}&#39;</span>
  <span class="l-Scalar-Plain">defaults</span><span class="p-Indicator">:</span>
    <span class="s">&#39;@package&#39;</span><span class="p-Indicator">:</span>    <span class="s">&#39;TYPO3.Blog&#39;</span>
    <span class="s">&#39;@controller&#39;</span><span class="p-Indicator">:</span> <span class="s">&#39;Post&#39;</span>
    <span class="s">&#39;@action&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;show&#39;</span>
    <span class="s">&#39;@format&#39;</span><span class="p-Indicator">:</span>     <span class="s">&#39;html&#39;</span>
</pre></div>
</div>
<p>Will now result in the URI &#8220;posts/&lt;UUID&gt;&#8221;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/8736">#8736</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0863e5249839a36c7fc4cf5462e41b95f0d136ed">0863e52</a></li>
</ul>
</div>
<div class="section" id="task-reanimate-some-actioncontroller-unit-tests">
<h3>[TASK] Reanimate some ActionController unit tests</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cc2caa52abf6b3d17707177da365d6a4d5a3e8ff">cc2caa5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-check-against-ignorevalidation-annotations">
<h3>[BUGFIX] Fix check against &#64;ignorevalidation annotations</h3>
<p>The check for argument names against &#64;ignorevalidation annotations
was done with the raw argument name, but the annotation is to be
given with a leading dollar sign:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">@</span><span class="nx">ignorevalidation</span> <span class="nv">$fooBar</span>
</pre></div>
</div>
<p>The check thus always failed.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29761">#29761</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=87418d9b0b8c9454993da1e4b6711c8e363f5469">87418d9</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-case-of-sub-package-key-arguments-in-router-getcontrollerobjectname">
<h3>[BUGFIX] Fix case of sub package key arguments in Router::getControllerObjectName()</h3>
<p>This just changes the method argument name to be in sync with the annotation</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=72269db19faaf0e00a87aa7a6ec1415d3855a32a">72269db</a></li>
</ul>
</div>
<div class="section" id="feature-provide-signal-for-after-objects-have-been-persisted">
<h3>[FEATURE] Provide signal for after objects have been persisted</h3>
<p>This provides two signals – one for the generic and one for the
Doctrine persistence manager - which is emitted right after
persistAll() was called.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b28cd358af478aa79e12bf5e32e4e308e3683773">b28cd35</a></li>
</ul>
</div>
<div class="section" id="bugfix-proxy-code-of-advised-abstract-classes-don-t-produce-errors">
<h3>[BUGFIX] Proxy code of advised abstract classes don&#8217;t produce errors</h3>
<p>The AOP ProxyClassBuilder produced invalid code when signals were
defined in an abstract class. This was due to invalid proxy class
code and a wrong initialization procedure.</p>
<p>This change fixes the issue by making sure that the advice information
is also built for parent proxy classes when sub classes are used.</p>
<p>Additionally this change set contains functional tests for the
AOP proxy and the signal slot mechanism.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/28638">#28638</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=43f08cbd553613dea9c927c297ab677440806f04">43f08cb</a></li>
</ul>
</div>
<div class="section" id="bugfix-lifecycle-annotations-were-not-detected">
<h3>[BUGFIX] Lifecycle annotations were not detected</h3>
<p>The detection of Doctrine lifecycle event annotations was broken
since  the last Doctrine update (because of the changed return values
of the annotation reader).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29908">#29908</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=31a934570e6fc2cff811a8ec35bfd423c14d50da">31a9345</a></li>
</ul>
</div>
<div class="section" id="bugfix-resource-resource-manager-can-also-handle-files-without-extension">
<h3>[BUGFIX] (Resource): Resource manager can also handle files without extension</h3>
<p>Furthermore, we use move_uploaded_file instead of rename to move the target
file to the final destination, as this also works across partition boundaries
in all cases.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29572">#29572</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c6546f423f870d83b1a7cfb7667b6bfee5b38ca1">c6546f4</a></li>
</ul>
</div>
<div class="section" id="task-use-correct-respone-mock-in-functionaltestcase">
<h3>[TASK] Use correct respone mock in FunctionalTestCase</h3>
<p>The sendWebRequest() method used mocked ResponseInterface, but lacks
the setStatus() method present in the WebResponse class. This change
makes it use a mock of WebResponse.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1c27b883039bca2e7b65251ed3fc564a9d29a468">1c27b88</a></li>
</ul>
</div>
<div class="section" id="feature-support-dropping-instances-in-the-object-manager">
<h3>[FEATURE] Support dropping instances in the Object Manager</h3>
<p>This adds a non-API function to the Object Manager which allows for
unregistering instances of arbitrary objects. The next time an object
of that type is requested, a new instance will be created.</p>
<p>This function can be used in functional tests, but must be used with
care because if other parts of the application already use an instance
of the respective type, the whole application might become unstable
because multiple instances of a singleton could be the result.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30018">#30018</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d22fa5ee33802ccafc7b64ce278e40a2286d55bb">d22fa5e</a></li>
</ul>
</div>
<div class="section" id="bugfix-less-persistence-side-effects-in-functional-tests">
<h3>[BUGFIX] Less persistence side effects in functional tests</h3>
<p>Previously, the persistence manager was only teared down after a whole
test case ran through. This change makes sure that this clean up happens
after each individual test to ensure that data generated by previous
tests are gone when the next test is run.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30017">#30017</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=eca27e400e89769d6a7a77379e1692c0d8d0ec8d">eca27e4</a></li>
</ul>
</div>
<div class="section" id="bugfix-invalid-static-resource-symlinks-are-removed-again">
<h3>[BUGFIX] Invalid static resource symlinks are removed again</h3>
<p>Whenever the resource publishing of FLOW3 finds an invalid
symbolic link in the static resources directory, it should
remove that link and re-publish the resources of the package
in question.</p>
<p>Because UtilityFiles::removeDirectoryRecursively() could
not cope with symbolic links, this auto-cleanup failed.</p>
<p>This change set makes removeDirectoryRecursively() and
emptyDirectoryRecursively() symlink aware and sets its
behavior to not follow links but remove the links instead.</p>
<p>Note: change set I2d5c544e6db728594209294cfe779b8bad3c6d59
did not completely fix the issue. If the old symbolic link
pointed to nowhere, the publishStaticResources() method
failed.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29777">#29777</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5adfc6f4a3e808e88e4673f625065563e5553d5b">5adfc6f</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-enable-mapping-of-value-objects">
<h3>[BUGFIX] (Property): Enable mapping of Value Objects</h3>
<p>If a value object is edited through a Fluid form, we should not try to fetch it
from persistence, but need to re-create it from scratch due do the value object
semantics.</p>
<p>Thus, we need to discard the __identity property in that case.</p>
<p>The change set also adds a functional test.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29905">#29905</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ba7f2df6b70770cb06e05cddc101a0f4429c729b">ba7f2df</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-help-command-controller-argument-use">
<h3>[BUGFIX] Fix help command controller argument use</h3>
<p>The command controller was intended to be used with the optional
command identifier without using that as a named option - but that
is a requirement. Thus we now use the first exceeding argument
if the option is not given.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29895">#29895</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=320877b9db981e3bbc8b2908480240bfd6838edb">320877b</a></li>
</ul>
</div>
<div class="section" id="bugfix-optional-cli-arguments-have-to-be-named">
<h3>[!!!][BUGFIX] Optional CLI arguments have to be named</h3>
<p>This reverts commit 090c243226aee1ede12ab289d651bdbb80564f92 and brings back Ia9f59326e5c4dc793102db20883ae798ae2f27cd which was correct after all.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=29088818c2970d5c6991e0e367e1af7690d39bc1">2908881</a></li>
</ul>
</div>
<div class="section" id="revert-bugfix-optional-cli-arguments-have-to-be-named">
<h3>Revert &#8220;[!!!][BUGFIX] Optional CLI arguments have to be named&#8221;</h3>
<p>This reverts commit a43360b35c0b44288d204462b825dfa564bd3cf2</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=090c243226aee1ede12ab289d651bdbb80564f92">090c243</a></li>
</ul>
</div>
<div class="section" id="id64">
<h3>[!!!][BUGFIX] Optional CLI arguments have to be named</h3>
<p>Currently exceeding arguments are ignored if a command has optional
arguments, because the RequestBuilder then can&#8217;t differentiate them.</p>
<p>This change requires options to be named:
For commands expecting one optional argument you were able to write
./flow3 command value
Now you&#8217;d have to write
./flow3 command &#8211;optional-argument value</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29792">#29792</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a43360b35c0b44288d204462b825dfa564bd3cf2">a43360b</a></li>
</ul>
</div>
<div class="section" id="id66">
<h3>[BUGFIX] Invalid static resource symlinks are removed again</h3>
<p>Whenever the resource publishing of FLOW3 finds an invalid
symbolic link in the static resources directory, it should
remove that link and re-publish the resources of the package
in question.</p>
<p>Because UtilityFiles::removeDirectoryRecursively() could
not cope with symbolic links, this auto-cleanup failed.</p>
<p>This change set makes removeDirectoryRecursively() and
emptyDirectoryRecursively() symlink aware and sets its
behavior to not follow links but remove the links instead.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29777">#29777</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=af9ac039850c0371d60d4e3d065d0dfc29af5795">af9ac03</a></li>
</ul>
</div>
<div class="section" id="bugfix-repository-does-not-crash-with-wrong-argument-type">
<h3>[BUGFIX] Repository does not crash with wrong argument type</h3>
<p>This fixes the safe guard in the add(), remove() and update()
functions of the base repository.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3a9a2b117cd113f6875c0fa51bcda269d769ca63">3a9a2b1</a></li>
</ul>
</div>
<div class="section" id="task-remove-license-annotation-from-files">
<h3>[TASK] Remove &#64;license annotation from files</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29415">#29415</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=410f7464501e5c2995fe9fb0edf6bd69a379cf77">410f746</a></li>
</ul>
</div>
<div class="section" id="task-fix-a-method-docblock-in-rawvalidator">
<h3>[TASK] Fix a method docblock in RawValidator</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d5f5e448b6ded66f62b03e0bdafa4a39ebb5ee8e">d5f5e44</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id69">
<h3>[TASK] Update version in Package.xml</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=58f143c18edd51a003f180036d4e58bd0d2ba0d1">58f143c</a></li>
</ul>
</div>
<div class="section" id="bugfix-ajaxwidgetcontext-is-not-stored-in-session">
<h3>[BUGFIX] AjaxWidgetContext is not stored in session</h3>
<p>This change adds the required Session autostart annotation
to the AjaxWidgetContext.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31119">#31119</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=4b480637f842093727ddd86f0515e9868813a9d1">4b48063</a></li>
</ul>
</div>
<div class="section" id="id71">
<h3>[TASK] Remove scope annotations for prototypes</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=caafde689130c64fbf014ec21bb4e5d158887755">caafde6</a></li>
</ul>
</div>
<div class="section" id="id72">
<h3>[TASK] Drop &#64;author tags from source code</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=9c2e837a50ecc8505d73131b45a77a61fcf487ca">9c2e837</a></li>
</ul>
</div>
<div class="section" id="task-fix-two-failing-unit-tests">
<h3>[TASK] Fix two failing unit tests</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31015">#31015</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=cf7b9db796fdc3f9895e300bd40ad3aaad9eda52">cf7b9db</a></li>
</ul>
</div>
<div class="section" id="id74">
<h3>[TASK] Fix two failing unit tests</h3>
<p>Two tests started to fail because the annotation reader was not
initialized. Bad functional style unit tests fixed the dirty
way...</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=88941212d7d29e4e3999c0b6e111e9ee5d653338">8894121</a></li>
</ul>
</div>
<div class="section" id="id77">
<h3>[TASK] Adjust to new annotation syntax</h3>
<p>The syntax for annotations changed with #27627, this adjusts the
code as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=984cc21af56b9ff0c2dbd40c41aaad703f7fe209">984cc21</a></li>
</ul>
</div>
<div class="section" id="feature-catch-routing-exceptions-in-uri-and-link-viewhelpers">
<h3>[FEATURE] Catch Routing Exceptions in uri and link ViewHelpers</h3>
<p>This change makes sure that exceptions that are thrown by the
router are caught and rethrown as ViewHelper exceptions in all
ViewHelpers that make use of the UriBuilder.
This makes it easier for developers to debug their templates
(see #30777).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30777">#30777</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=24a8e237a5134b7576b24dcc18d27200d312819b">24a8e23</a></li>
</ul>
</div>
<div class="section" id="id80">
<h3>[TASK] Remove scope annotations from interfaces</h3>
<p>They have no effect and in userland code even trigger an error.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=77b5d7734939512c10195d08f3d1541230258f32">77b5d77</a></li>
</ul>
</div>
<div class="section" id="task-cleaned-up-flash-messages-api">
<h3>[TASK] Cleaned up Flash Messages API</h3>
<p>Adjust to Flash Message cleanup in TYPO3.Flow.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=11ddba9982b1a13a5127b07d45e793ac9fb944c0">11ddba9</a></li>
</ul>
</div>
<div class="section" id="task-fix-case-of-a-see-annotation">
<h3>[TASK] Fix case of a &#64;see annotation</h3>
<p>The annotation used &#64;See (uppercase s), but &#64;see is correct.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=10e0d074a671728500cc1550c1dc96dbb4d9566c">10e0d07</a></li>
</ul>
</div>
<div class="section" id="id81">
<h3>[TASK] Simplify license header in PHP files</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29415">#29415</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=14bacba86377f6fb7dbcf486dca40d63b0647550">14bacba</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id83">
<h3>[TASK] Update version in Package.xml</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=ce241a6df0756d046e5170e135091fb814b450d0">ce241a6</a></li>
</ul>
</div>
<div class="section" id="bugfix-generating-actioncontrollers-using-a-comma-separated-list-creates-wrong-models-and-repositories">
<h3>[BUGFIX] Generating ActionControllers using a comma separated list creates wrong Models and Repositories</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30980">#30980</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=3a630b87bee6934250fc3b225c3a07675940b15c">3a630b8</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-kickstarter-use-addflashmessage-in-crud-controller">
<h3>[BUGFIX] Make Kickstarter use addFlashMessage() in CRUD controller</h3>
<p>This uses addFlashMessage() instead of flashMessageContainer-&gt;add() in
generated CRUD controllers.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31082">#31082</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=0d3d4b056c1cf1f82d7e6b1891de8c35a22df780">0d3d4b0</a></li>
</ul>
</div>
<div class="section" id="task-use-new-keyword-instead-of-create">
<h3>[TASK] Use new keyword instead of create()</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=87c89da18f3508c3817d55ad25cf0c9a218e70dd">87c89da</a></li>
</ul>
</div>
<div class="section" id="id86">
<h3>[TASK] Remove scope annotations for prototypes</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=5a53a2e505ddd415b98fc1eccd8a5b82f3081ee7">5a53a2e</a></li>
</ul>
</div>
<div class="section" id="id87">
<h3>[TASK] Drop &#64;author tags from source code</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=12f7ae936c1ffc0296b405f7a61684c434c027bf">12f7ae9</a></li>
</ul>
</div>
<div class="section" id="id88">
<h3>[TASK] Adjust to new annotation syntax</h3>
<p>The syntax for annotations changed with #27627, this adjusts the
code as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=542653d002ec10e9c2beaf887de8c3aa2c28f9ca">542653d</a></li>
</ul>
</div>
<div class="section" id="bugfix-datetime-properties-throw-exception">
<h3>[BUGFIX] DateTime properties throw exception</h3>
<p>When kickstarting models that contain properties of type
DateTime, CRUD Views throw exceptions because the property
can&#8217;t be converted to string implicitly.
This is fixed by wrapping DateTime properties in
format.date ViewHelpers in the affected templates.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30526">#30526</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=ca4761bec9e2745acd71172ecc18f638cc6a717f">ca4761b</a></li>
</ul>
</div>
<div class="section" id="feature-generate-fields-in-views-if-model-already-exists">
<h3>[FEATURE] Generate fields in views if Model already exists</h3>
<p>When generating views add reflection of model-class to generate
fields for existing properties in views</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30253">#30253</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=afad63b2029e4b0e489a9006d30c2f2a403f9c6d">afad63b</a></li>
</ul>
</div>
<div class="section" id="id93">
<h3>[TASK] Simplify license header in PHP files</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29415">#29415</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=895ac16bc69c9c63dece5b996daed8e59c9265a2">895ac16</a></li>
</ul>
</div>
<div class="section" id="bugfix-render-return-annotation-in-crud-actions">
<h3>[BUGFIX] Render &#64;return annotation in CRUD actions</h3>
<p>Generated CRUD actions did not have a &#64;return annotation at all.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30052">#30052</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=db3fb3b65aa496183bb13a6e27b9d9367c6deea8">db3fb3b</a></li>
</ul>
</div>
<div class="section" id="task-tweak-help-for-kickstart-actioncontroller">
<h3>[TASK] Tweak help for kickstart:actioncontroller</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=9f6d1a36b7de03b18a3f16867db0fe07eb5c385b">9f6d1a3</a></li>
</ul>
</div>
<div class="section" id="feature-display-update-schema-reminder">
<h3>[FEATURE] Display update schema reminder</h3>
<p>After kickstarting a new action controller with
&#8211;generate-related or a new model, the command
now displays a hint that the database schema
needs to be updated manually.</p>
<p>Also adjusts the KickstartCommandController to
use outputLine() instead of echo and return.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29883">#29883</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=033cb9413e1796a225d861734eb04bec57faf235">033cb94</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id97">
<h3>[TASK] Update version in Package.xml</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=7792f9c81767e29361fe061a8a9913747c9ab4ac">7792f9c</a></li>
</ul>
</div>
<div class="section" id="id98">
<h3>[TASK] Remove scope annotations for prototypes</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=0bf7e4ecf6ec671e68e00ffa363e8dad01e18cf3">0bf7e4e</a></li>
</ul>
</div>
<div class="section" id="id99">
<h3>[TASK] Drop &#64;author tags from source code</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=fd10606d88e422e129dc090bc97bdf158aabb268">fd10606</a></li>
</ul>
</div>
<div class="section" id="id100">
<h3>[TASK] Adjust to new annotation syntax</h3>
<p>The syntax for annotations changed with #27627, this adjusts the
code as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=a541ef328d980fec386f9130afc0163a2a0b41a5">a541ef3</a></li>
</ul>
</div>
<div class="section" id="task-use-collection-interface-not-arraycollection">
<h3>[TASK] Use Collection interface, not ArrayCollection</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=9ecaa42358d11215e887a1e2db89043104c31047">9ecaa42</a></li>
</ul>
</div>
<div class="section" id="fix-case-of-column-annotation">
<h3>fix case of &#64;column annotation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=904d2035c29092b828d2377e27facfeb62dec3e5">904d203</a></li>
</ul>
</div>
<div class="section" id="task-make-personrepository-a-generic-partyrepository">
<h3>[!!!][TASK] Make PersonRepository a generic PartyRepository</h3>
<p>The change to fix #29416 requires any AbstractParty to have a
repository, not only subclasses like Person.</p>
<p>If you were using PersonRepository, use PartyRepository instead
now.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29416">#29416</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=a074d691cd1f0af1b98095472c0d0aadf2061928">a074d69</a></li>
</ul>
</div>
<div class="section" id="id103">
<h3>[TASK] Simplify license header in PHP files</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29415">#29415</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=acaf644386be8559c830b2dba710b0954a60f1db">acaf644</a></li>
</ul>
</div>
<div class="section" id="id105">
<h3>[TASK] Fix foreign key handling in migration</h3>
<p>Migrating down would not work because FK constraints where not named.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=718546f47763af3fd26b2a49d995d1a566fd3f11">718546f</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-association-property-column-names">
<h3>[BUGFIX] Adjust association property column names</h3>
<p>The needed migration to go with the fix for #30223 (see change Ia32cfcc6cd49385a61845243e67cb0ddd62f5268).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/30223">#30223</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=b275c75c2799a7e46d037a1653e7b7a625445412">b275c75</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id107">
<h3>[TASK] Update version in Package.xml</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=daf32c84a59e715991270cbc232345595c50a7a5">daf32c8</a></li>
</ul>
</div>
<div class="section" id="id108">
<h3>[TASK] Drop &#64;author tags from source code</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=f246ff5d7dc8c1981b1b1c4b46737804d151b4df">f246ff5</a></li>
</ul>
</div>
<div class="section" id="id109">
<h3>[TASK] Adjust to new annotation syntax</h3>
<p>The syntax for annotations changed with #27627, this adjusts the
code as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27627">#27627</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=f988beaf19300c81d73814e0af2cbeb4ce13d5e8">f988bea</a></li>
</ul>
</div>
<div class="section" id="task-tiny-fix-to-reload-js-call-in-template">
<h3>[TASK] Tiny fix to reload JS call in template</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=3fdc79956081360c9c2efb22f2fae9fd69a941a7">3fdc799</a></li>
</ul>
</div>
<div class="section" id="id111">
<h3>[TASK] Simplify license header in PHP files</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29415">#29415</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=33b40a7dd8bc828547b44e28ea5bca5cdedbc31a">33b40a7</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine">
<h2>Doctrine</h2>
<div class="section" id="id113">
<h3>[TASK] Update version in Package.xml</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.git?a=commit;h=2e9cad2857c7fcff6c00286990704cc498204294">2e9cad2</a></li>
</ul>
</div>
<div class="section" id="task-update-orm-to-2-2-0-dev">
<h3>[TASK] Update ORM to 2.2.0-DEV</h3>
<p>Still includes 4 of our own patches on top of upstream commit
509e5fb12ff0ab7fc933338bd999c9c850297243.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.git?a=commit;h=0054a16404deb92a9e4455787ab3a75ac1a2785b">0054a16</a></li>
</ul>
</div>
<div class="section" id="task-update-common-to-2-2-0-dev">
<h3>[TASK] Update Common to 2.2.0-DEV</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.git?a=commit;h=2ab045411ffe5ada3f1c569b822e0f573d8ea0fb">2ab0454</a></li>
</ul>
</div>
<div class="section" id="task-update-orm-to-2-1-x">
<h3>[TASK] Update ORM to 2.1.x</h3>
<p>Still includes 5 of our own patches on top of upstream commit
623ab9cee97b99188f0b5bb671ef8e2618485bf5.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.git?a=commit;h=8c09ee292f3e859bde583e4d38700a3a5ba146b8">8c09ee2</a></li>
</ul>
</div>
<div class="section" id="task-update-data-fixtures-plugin">
<h3>[TASK] Update data fixtures plugin</h3>
<p>It is now at 76f8221609129651937f52553f3e1b2bd915fd3e.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.git?a=commit;h=e836b0e5139a2685db736d8eea693e24410e0116">e836b0e</a></li>
</ul>
</div>
<div class="section" id="task-update-migrations-to-master">
<h3>[TASK] Update Migrations to master</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.git?a=commit;h=ce1497ea7d08beeb11649cc2f3bcf259edd1b780">ce1497e</a></li>
</ul>
</div>
<div class="section" id="task-update-dbal-to-2-1-4-dev">
<h3>[TASK] Update DBAL to 2.1.4-DEV</h3>
<p>Still includes two of our own patches on top of upstream commit
17005ec6a0d1c6647597c37749a1087807e12c83</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.git?a=commit;h=507921715f6b3a35e37116ad7733be28b960a32d">5079217</a></li>
</ul>
</div>
<div class="section" id="task-update-common-to-2-1-2-release">
<h3>[TASK] Update Common to 2.1.2 release</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.git?a=commit;h=e4ed890a582ed9c60a2b522d97f07f806fd3e071">e4ed890</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="ea832229-c91c-f62a-8d59-cee74187c125" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="bb2dd8a5-236e-13ac-a1b1-6af0cdb6ae1f" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="100beta2" locale="">
        <properties>
         <title>1.0.0 beta 2</title>
        </properties>
        <node identifier="24d402ce-905c-f090-95f9-35e5d7e44a38" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="5e37d86d-6a24-1bdb-8d44-19c5dfed7c50" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="beta-2">
<h1>1.0.0 beta 2</h1>
<div class="section" id="task-remove-license-annotation-from-files">
<h2>[TASK] Remove &#64;license annotation from files</h2>
<ul class="simple">
<li>Authored on Mon Sep 12 11:07:54 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Mon Sep 12 11:09:06 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=439d2e22e2a05689a1c69c1413f8d313d2f08bcb">439d2e2</a></li>
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I6c67fdc1d55171b717791f7d558b41209653793c,n,z">I6c67fdc1d55171b717791f7d558b41209653793c</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29415">#29415</a></li>
</ul>
<blockquote>
<div>799 files changed, 0 insertions(+), 799 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-allow-use-of-the-collection-interface-in-type-hints">
<h2>[BUGFIX] Allow use of the Collection interface in &#8220;type hints&#8221;</h2>
<ul class="simple">
<li>Authored on Thu Sep 1 15:16:56 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Fri Sep 9 15:14:28 2011 +0200 by Robert Lemke</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cb1ff889fb940b4f8efb3f91677b5379ca43d12b">cb1ff88</a></li>
</ul>
<p>In type hints as well as &#64;var and &#64;param annotations it is better to
use the Collection interface instead of concrete implementations like
ArrayCollection. This was not possible so far.</p>
<p>This changes makes it possible to use Collection instead. When FLOW3 has
to create an instance for Collection, it will create an ArrayCollection.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I7edbaee97932469018ec89e640bfed10d4d54252,n,z">I7edbaee97932469018ec89e640bfed10d4d54252</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29419">#29419</a></li>
</ul>
<blockquote>
<div>9 files changed, 166 insertions(+), 163 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-type-declaration-errors-give-hint-on-root-cause">
<h2>[BUGFIX] Type declaration errors give hint on root cause</h2>
<ul class="simple">
<li>Authored on Fri Sep 9 13:20:23 2011 +0200 by Robert Lemke</li>
<li>Committed on Fri Sep 9 14:03:19 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bdcb2420ac97d330accc646042a1b07589c44307">bdcb242</a></li>
</ul>
<p>The TypeHandling::parseType() function will now throw a more specific
exception which allows other code parts to display more meaningful
error messages if a variable type was declared wrongly.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I010378956d80b66824bf9012b24ca36a8031c562,n,z">I010378956d80b66824bf9012b24ca36a8031c562</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/25816">#25816</a></li>
</ul>
<blockquote>
<div>6 files changed, 52 insertions(+), 7 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-setfilepermissions-does-not-use-sudo-anymore">
<h2>[BUGFIX] setfilepermissions does not use sudo anymore</h2>
<ul class="simple">
<li>Authored on Fri Sep 9 12:05:52 2011 +0200 by Robert Lemke</li>
<li>Committed on Fri Sep 9 12:05:52 2011 +0200 by Robert Lemke</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f7cc2c8861248157e89aa0d93a52c465b2bfa108">f7cc2c8</a></li>
</ul>
<p>This changes the behavior of the setfilerpermissions
command. Instead of using sudo right away, the bash
script now checks if it is run as root and if not
displays a message that it should.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Ied6dae7d4a78909442ac5087767267214f6ebc12,n,z">Ied6dae7d4a78909442ac5087767267214f6ebc12</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29326">#29326</a></li>
</ul>
<blockquote>
<div>1 files changed, 8 insertions(+), 5 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-improve-message-for-compile-errors">
<h2>[TASK] Improve message for compile errors</h2>
<ul class="simple">
<li>Authored on Fri Sep 9 11:47:55 2011 +0200 by Robert Lemke</li>
<li>Committed on Fri Sep 9 11:47:55 2011 +0200 by Robert Lemke</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7874d79e40b729444995987ce7a67bc243b0a964">7874d79</a></li>
</ul>
<p>If the compile run fails, FLOW3 will display a long exception
message stating that either the PHP binary could not be executed
or something else went wrong.</p>
<p>This patch splits up the messages in two and checks if the binary
could be executed and only then gives a hint on configuring the
PHP binary path.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Ia9379496add1721a0b388a8665934a641caa470d,n,z">Ia9379496add1721a0b388a8665934a641caa470d</a></li>
</ul>
<blockquote>
<div>1 files changed, 6 insertions(+), 1 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-rename-csrf-token-to-csrftoken">
<h2>[TASK] Rename __CSRF-TOKEN to __csrfToken</h2>
<ul class="simple">
<li>Authored on Fri Sep 9 10:57:37 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Fri Sep 9 10:58:33 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6da0628400724c467a2560c680eda34f535f5e54">6da0628</a></li>
</ul>
<p>The name for the CSRF token did not follow our camelCase conventions.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I270994c9f5e930bcd5109057c2623cc25265383e,n,z">I270994c9f5e930bcd5109057c2623cc25265383e</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27233">#27233</a></li>
</ul>
<blockquote>
<div>4 files changed, 8 insertions(+), 8 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-fix-default-error-message-rendering-in-actioncontroller">
<h2>[TASK] Fix default error message rendering in ActionController</h2>
<ul class="simple">
<li>Authored on Wed Sep 7 15:47:39 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Fri Sep 9 10:25:26 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=883d02307c9f953476f31e775afb63fedaa89f17">883d023</a></li>
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I1fe74815ebf7554ad271f347200ab0dcfebc2edb,n,z">I1fe74815ebf7554ad271f347200ab0dcfebc2edb</a></li>
</ul>
<blockquote>
<div>1 files changed, 1 insertions(+), 1 deletions(-)</div></blockquote>
</div>
<div class="section" id="feature-styled-cli-response-and-help-descriptions">
<h2>[FEATURE] Styled CLI response and help descriptions</h2>
<ul class="simple">
<li>Authored on Thu Sep 8 14:51:05 2011 +0200 by Robert Lemke</li>
<li>Committed on Thu Sep 8 17:06:02 2011 +0200 by Robert Lemke</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=15d69186af3d0fdffbc45976aec3d85e31b9a96b">15d6918</a></li>
</ul>
<p>This introduces support for styled output in the CLI response
and some brushed up help functionality.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Ibe31c602800a1699b3ef37d9128836efa64314d4,n,z">Ibe31c602800a1699b3ef37d9128836efa64314d4</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29407">#29407</a></li>
</ul>
<blockquote>
<div>6 files changed, 266 insertions(+), 34 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-reformatted-and-improved-doc-comments-of-commands">
<h2>[TASK] Reformatted and improved doc comments of commands</h2>
<ul class="simple">
<li>Authored on Thu Sep 8 15:03:24 2011 +0200 by Robert Lemke</li>
<li>Committed on Thu Sep 8 17:01:32 2011 +0200 by Bastian Waidelich</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=79164d7569f588b1b39e186fdfb5d66416b2447b">79164d7</a></li>
</ul>
<p>This change set contains several fixes and enhancements of the doc
comments of FLOW3&#8217;s commands. These are mostly adjustments to the new
CLI help support.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29407">#29407</a></li>
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I07a421a5384f6ccf5935f6467d63b9746b663659,n,z">I07a421a5384f6ccf5935f6467d63b9746b663659</a></li>
</ul>
<blockquote>
<div>7 files changed, 108 insertions(+), 35 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-aop-fix-call-to-parent-method-if-method-is-not-proxied-in-subclass">
<h2>[BUGFIX] AOP: Fix call to parent method if method is not proxied in subclass</h2>
<ul class="simple">
<li>Authored on Mon May 30 20:44:30 2011 +0200 by Lienhart Woitok</li>
<li>Committed on Thu Sep 8 15:50:16 2011 +0200 by Andreas Förthner</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ea0931397852d76e99d6fa5a2543b49c6c207029">ea09313</a></li>
</ul>
<p>If a method is overridden in a subclass that calls its advice parent class,
but no proxy method is generated for this method, invokeJoinPoint has to
call invokeJoinPoint of the parent class. This has to be done regardless
of the method being in advice mode or not.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Ie89b99577ad4843d2d6fef5f86bb3a9371dab57c,n,z">Ie89b99577ad4843d2d6fef5f86bb3a9371dab57c</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29576">#29576</a></li>
</ul>
<blockquote>
<div>5 files changed, 32 insertions(+), 1 deletions(-)</div></blockquote>
</div>
<div class="section" id="feature-serialization-can-handle-entities-in-arrays">
<h2>[FEATURE] Serialization can handle entities in arrays</h2>
<ul class="simple">
<li>Authored on Tue Sep 6 16:17:17 2011 +0200 by Andreas Förthner</li>
<li>Committed on Thu Sep 8 14:20:54 2011 +0200 by Andreas Förthner</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2e39bf1491f141ebe548a4db936a3733760d34ed">2e39bf1</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27015">#27015</a></li>
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I10f925a56c15d199e3f49bc0974496b88120f129,n,z">I10f925a56c15d199e3f49bc0974496b88120f129</a></li>
</ul>
<blockquote>
<div>3 files changed, 115 insertions(+), 6 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-arrays-setvaluebypath-works-with-arrayaccess">
<h2>[TASK] Arrays::setValueByPath works with ArrayAccess</h2>
<ul class="simple">
<li>Authored on Wed May 25 17:29:09 2011 +0200 by Andreas Förthner</li>
<li>Committed on Thu Sep 8 14:19:59 2011 +0200 by Andreas Förthner</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5fdd10aff7bcc561dcd8df94004299c41cb26dcc">5fdd10a</a></li>
</ul>
<p>By this change the method is not limited to simply arrays
anymore. Instead objects implementing ArrayAccess are
also accepted.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I6ca03ea3b54671c1d08faf2c79ecc7b4f92cc656,n,z">I6ca03ea3b54671c1d08faf2c79ecc7b4f92cc656</a></li>
</ul>
<blockquote>
<div>2 files changed, 39 insertions(+), 9 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-mvc-actioncontroller-erroraction-forgets-subpackagekey">
<h2>[BUGFIX] (MVC): ActionController ErrorAction forgets SubpackageKey</h2>
<ul class="simple">
<li>Authored on Tue Sep 6 09:21:34 2011 +0200 by Sebastian Kurfuerst</li>
<li>Committed on Thu Sep 8 10:26:17 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2d82dad18baef6741acb0d020b81b46059e18271">2d82dad</a></li>
</ul>
<p>In case a validation error happened, a forward() is done to the referring
action, which then re-displays the form.</p>
<p>However, when the referring action contains a subpackage key, this redirection
was broken.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Id4dfaea7d919ba2eb8d031be505d76815927999f,n,z">Id4dfaea7d919ba2eb8d031be505d76815927999f</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/28487">#28487</a></li>
</ul>
<blockquote>
<div>2 files changed, 50 insertions(+), 12 deletions(-)</div></blockquote>
</div>
<div class="section" id="feature-simple-remote-package-import-support">
<h2>[FEATURE] Simple remote package import support</h2>
<ul class="simple">
<li>Authored on Mon Sep 5 15:42:37 2011 +0200 by Robert Lemke</li>
<li>Committed on Wed Sep 7 15:54:24 2011 +0200 by Robert Lemke</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b207a55abfc59eb8c691eee60d864c7394b5a66b">b207a55</a></li>
</ul>
<p>This adds a new command package:import which allows for importing
a package from git.typo3.org. Currently only packages of the TYPO3
vendor namespace are supported and it requires that the git command
line tool is installed and executable by PHP.</p>
<p>Note that it is very likely that this feature won&#8217;t stay like this in
future versions of FLOW3.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I918471c7be1ad1fe2b387325b08911695591890a,n,z">I918471c7be1ad1fe2b387325b08911695591890a</a></li>
<li>Relates: <a class="reference external" href="http://forge.typo3.org/issues/29489">#29489</a></li>
</ul>
<blockquote>
<div>5 files changed, 113 insertions(+), 0 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-datetimeconverter-returns-errors-instead-of-throwing-exceptions">
<h2>[!!!][BUGFIX] DateTimeConverter returns Errors instead of throwing exceptions</h2>
<ul class="simple">
<li>Authored on Tue Sep 6 09:41:46 2011 +0200 by Sebastian Kurfuerst</li>
<li>Committed on Wed Sep 7 14:34:08 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b47d1c61aaaf67c6d9c3379d87fe132ff7bded80">b47d1c6</a></li>
</ul>
<p>As described in the Property Mapper reference manual, DateTimeConverter should
only throw exceptions when detecting developer failures. If user failures
happen, such as invalid input, an TYPO3FlowErrorError object should instead
be returned, as this is shown to the end-user in a friendly way, and the original
form is redisplayed.</p>
<p>Furthermore, DateTimeConverter must convert an empty date string (&#8216;&#8217;) to NULL;
else it is not possible to define optional DateTime properties.</p>
<p>If you need a required DateTime property, use the &#64;validate NotEmpty annotation
in your model.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Ie95602c44e9d86586353514cbde2cd06259f3b30,n,z">Ie95602c44e9d86586353514cbde2cd06259f3b30</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27806">#27806</a></li>
</ul>
<blockquote>
<div>2 files changed, 52 insertions(+), 20 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-two-small-code-style-fixes">
<h2>[TASK] Two small code (style) fixes</h2>
<ul class="simple">
<li>Authored on Thu Sep 1 17:55:48 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Wed Sep 7 11:04:54 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8be02b2e553215e96542ff6badf2ac6c47ae7065">8be02b2</a></li>
</ul>
<p>Adds a leading backslash to a &#64;var annotation and replaces one create()
call on the ObjectManager by use of the new keyword.</p>
<p>New version of reverted Id2e04252faf7b2d51b06de2e5b98cb14b1640ba7 with
a fixed unit test</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Ic1445022d4a7e8251bba47341bc347276df740f2,n,z">Ic1445022d4a7e8251bba47341bc347276df740f2</a></li>
</ul>
<blockquote>
<div>3 files changed, 41 insertions(+), 19 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-fix-a-typehint-in-actioncontroller">
<h2>[TASK] Fix a typehint in ActionController</h2>
<ul class="simple">
<li>Authored on Tue Sep 6 16:05:24 2011 +0200 by Christopher Hlubek</li>
<li>Committed on Tue Sep 6 16:05:24 2011 +0200 by Christopher Hlubek</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3659434563683fd0f865e06a29c558eaf966656b">3659434</a></li>
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,If6b952e484007ce035dd27aa4cae1010498e5ae0,n,z">If6b952e484007ce035dd27aa4cae1010498e5ae0</a></li>
</ul>
<blockquote>
<div>1 files changed, 1 insertions(+), 1 deletions(-)</div></blockquote>
</div>
<div class="section" id="feature-remove-support-for-uuid-annotation-and-support-id">
<h2>[FEATURE] Remove support for &#64;uuid annotation and support &#64;Id</h2>
<ul class="simple">
<li>Authored on Thu Apr 28 15:38:25 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Tue Sep 6 15:11:50 2011 +0200 by Christopher Hlubek</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=974086360faccb442d270fb7a8370f94ccebce1b">9740863</a></li>
</ul>
<p>Support for userland access to the framework-provided technical entity
identifier was built for a specific use case not needed anymore, and the
idea of exposing that internal identifier is bad to begin with.</p>
<p>This change however allows the &#64;Id annotation to be used to get the
identifier of an object from a custom property.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I0a61acb9693a1ca6cf769da15873c499f2ce3078,n,z">I0a61acb9693a1ca6cf769da15873c499f2ce3078</a></li>
</ul>
<blockquote>
<div>12 files changed, 36 insertions(+), 159 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-interactive-shell-works-again">
<h2>[BUGFIX] Interactive shell works again</h2>
<ul class="simple">
<li>Authored on Mon Sep 5 16:52:58 2011 +0200 by Robert Lemke</li>
<li>Committed on Tue Sep 6 11:48:32 2011 +0200 by Robert Lemke</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2b52d22ee35312440284a09ed3557bd20c82ade7">2b52d22</a></li>
</ul>
<p>The interactive shell (flow3:core:shell) could not launch
the sub process anymore because the name of the FLOW3 script
has changed from &#8220;flow3&#8221; to &#8220;flow3.php&#8221;. Due to this, no
command could be executed within the interactive shell.</p>
<p>This change set adjusts the script name and all commands
should work again.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I35928b0b36a8cb4cb82f3520077a3d658794a10e,n,z">I35928b0b36a8cb4cb82f3520077a3d658794a10e</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29292">#29292</a></li>
</ul>
<blockquote>
<div>5 files changed, 29 insertions(+), 6 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-enable-lazy-loading-for-session-entities">
<h2>[TASK] Enable lazy loading for session entities</h2>
<ul class="simple">
<li>Authored on Fri Jun 17 09:55:13 2011 +0200 by Andreas Förthner</li>
<li>Committed on Tue Sep 6 11:23:04 2011 +0200 by Andreas Förthner</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6c490dec7bdd261a867dabd58bf855bebdbb25b4">6c490de</a></li>
</ul>
<p>By this, persisted entities that are referenced
in the session are (de)serialized as lazy loading
proxies. This is a huge performance gain compared
to serializing the original entities.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I996b221dc82187f117b00223e5373e080dca7593,n,z">I996b221dc82187f117b00223e5373e080dca7593</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29506">#29506</a></li>
</ul>
<blockquote>
<div>1 files changed, 1 insertions(+), 1 deletions(-)</div></blockquote>
</div>
<div class="section" id="feature-make-lazy-loading-possible-for-getobjectbyidentifier">
<h2>[FEATURE] Make lazy loading possible for getObjectByIdentifier</h2>
<ul class="simple">
<li>Authored on Fri Jun 17 09:54:04 2011 +0200 by Andreas Förthner</li>
<li>Committed on Tue Sep 6 11:22:53 2011 +0200 by Andreas Förthner</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ba3a4738cc1dad2b2fef2e17cc5e097834e650e0">ba3a473</a></li>
</ul>
<p>Lazy loading can be switched on by a new optional parameter.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I20954588a14b68f63f9b32a841c5bc2aba4cc7c0,n,z">I20954588a14b68f63f9b32a841c5bc2aba4cc7c0</a></li>
<li>Relates: <a class="reference external" href="http://forge.typo3.org/issues/29506">#29506</a></li>
</ul>
<blockquote>
<div>3 files changed, 11 insertions(+), 4 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-package-commands-no-longer-issue-a-fatal-error">
<h2>[BUGFIX] package:* commands no longer issue a fatal error</h2>
<ul class="simple">
<li>Authored on Mon Sep 5 15:23:28 2011 +0200 by Robert Lemke</li>
<li>Committed on Tue Sep 6 11:10:46 2011 +0200 by Robert Lemke</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=df34272c15e2a8d04ef0f15a896d1e13865cd883">df34272</a></li>
</ul>
<p>Most package:* commands and sometimes also the flow3:cache:flush
command issued a fatal error. The actual command was executed
successfully, but the SignalAspect caused a fatal error because
the proxy code cache had already been flushed and therefore
FLOW3 was in an unstable state.</p>
<p>Those commands which flush the code caches will now exit right away
to avoid any further code execution.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I8bbb9112cec12f1888e79896787db8a9d4e125a0,n,z">I8bbb9112cec12f1888e79896787db8a9d4e125a0</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29414">#29414</a></li>
</ul>
<blockquote>
<div>5 files changed, 38 insertions(+), 2 deletions(-)</div></blockquote>
</div>
<div class="section" id="revert-task-two-small-code-style-fixes">
<h2>Revert &#8220;[TASK] Two small code (style) fixes&#8221;</h2>
<ul class="simple">
<li>Authored on Tue Sep 6 08:43:37 2011 +0200 by Robert Lemke</li>
<li>Committed on Tue Sep 6 08:43:37 2011 +0200 by Gerrit Code Review</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=593ef34f10168729c489bdee31d8d1dd99ec670a">593ef34</a></li>
</ul>
<p>Breaks unit tests.</p>
<p>This reverts commit 784dae35ce078702ca088a85e569c3b44bbe74cb</p>
<blockquote>
<div>2 files changed, 2 insertions(+), 2 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-injected-settings-are-now-from-the-correct-package">
<h2>[BUGFIX] Injected settings are now from the correct package</h2>
<ul class="simple">
<li>Authored on Mon Sep 5 18:21:38 2011 +0200 by Robert Lemke</li>
<li>Committed on Mon Sep 5 18:21:38 2011 +0200 by Robert Lemke</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c850b2a033dcf382bf4607a95af29ecf03b99329">c850b2a</a></li>
</ul>
<p>This fixes a bug caused by the Configuration Builder which resulted
in settings of a wrong package being injected into classes under
certain circumstances.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Id2c26e600efb6ac34733d42cc0e518526e583fee,n,z">Id2c26e600efb6ac34733d42cc0e518526e583fee</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29486">#29486</a></li>
</ul>
<blockquote>
<div>1 files changed, 3 insertions(+), 1 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-skip-functional-tests-for-doctrine-if-doctrine-is-not-used">
<h2>[BUGFIX] Skip functional tests for Doctrine if Doctrine is not used</h2>
<ul class="simple">
<li>Authored on Mon Sep 5 12:40:00 2011 +0200 by Christopher Hlubek</li>
<li>Committed on Mon Sep 5 12:40:35 2011 +0200 by Christopher Hlubek</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4dcf8f3e315e35c130db96ffda3b334cc1fbecaf">4dcf8f3</a></li>
</ul>
<p>The functional tests for Doctrine should only be run if the Doctrine
persistence manager is actually configured. Otherwise this causes
the functional tests not to run with alternative implementations.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I09afeda006d1a59beeec9ac76f400dfd999c413e,n,z">I09afeda006d1a59beeec9ac76f400dfd999c413e</a></li>
</ul>
<blockquote>
<div>4 files changed, 21 insertions(+), 2 deletions(-)</div></blockquote>
</div>
<div class="section" id="feature-enable-use-of-shut-up-operator">
<h2>[FEATURE] Enable use of &#64; (shut-up-operator)</h2>
<ul class="simple">
<li>Authored on Fri Sep 2 18:44:16 2011 +0200 by Ferdinand Kuhl</li>
<li>Committed on Mon Sep 5 12:02:19 2011 +0200 by Robert Lemke</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1cf1c8974f03f032b9d51ae36c219fb64690b6db">1cf1c89</a></li>
</ul>
<p>By default, FLOW3 makes sure to convert any error into an exception
so that even notices don&#8217;t go undiscovered.</p>
<p>But foreign code is not always clean and so E_NOTICE or E_STRICT
are quite common. If one doesn&#8217;t want to deactivate this kinds of errors
generally the &#64;-Operator is the only way to temporarily disable
error-reporting.</p>
<p>This patch allows the error-handler to return immediately if it
detects that the parent function made use of the shut-up
operator</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Id8d70b594e69e0de390b29624304de32442a74e4,n,z">Id8d70b594e69e0de390b29624304de32442a74e4</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29358">#29358</a></li>
</ul>
<blockquote>
<div>1 files changed, 8 insertions(+), 1 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-make-migrate-php-executable">
<h2>[TASK] Make migrate.php executable</h2>
<ul class="simple">
<li>Authored on Fri Sep 2 10:56:38 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Fri Sep 2 10:57:04 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fcfd801d9521ddb7da46c9ae6d0c27fb3e6ce911">fcfd801</a></li>
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I21c89f0d801a2d92754a727805df44864f49cbf7,n,z">I21c89f0d801a2d92754a727805df44864f49cbf7</a></li>
</ul>
<blockquote>
<div>0 files changed, 0 insertions(+), 0 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-fix-use-of-sys-get-temp-dir-in-environmenttest">
<h2>[BUGFIX] Fix use of sys_get_temp_dir() in EnvironmentTest</h2>
<ul class="simple">
<li>Authored on Fri Sep 2 10:08:37 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Fri Sep 2 10:10:31 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=aad9e634f78978b3967caa784f089cdfb73d5922">aad9e63</a></li>
</ul>
<p>There was a parameter given to sys_get_temp_dir(), but it accepts none.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Ie4b240b4de3a91f8c31e4334c52af6e93d225fd9,n,z">Ie4b240b4de3a91f8c31e4334c52af6e93d225fd9</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29452">#29452</a></li>
</ul>
<blockquote>
<div>1 files changed, 2 insertions(+), 2 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-reflection-prevent-use-of-reflectionservice-for-doctrine-proxies">
<h2>[BUGFIX] (Reflection): Prevent use of ReflectionService for Doctrine Proxies</h2>
<ul class="simple">
<li>Authored on Fri Sep 2 08:28:00 2011 +0200 by Sebastian Kurfuerst</li>
<li>Committed on Fri Sep 2 08:31:04 2011 +0200 by Sebastian Kurfuerst</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=98f877bb3524bff1db2c991b494d1cc10682c2ad">98f877b</a></li>
</ul>
<p>When calling the ReflectionService with a class name for a doctrine proxy,
really weird side-effects can happen, as the Doctrine Proxy class is then
also stored in the Reflection Cache. On the next compilation run, really
weird side-effects can happen. See the corresponding issue for a full
description.</p>
<p>By throwing an exception when a doctrine class is reflected, we prevent
the issue from appearing in the first place.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29449">#29449</a></li>
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Ia709b70e4e31facfd88563c5836009d7cee6d7b2,n,z">Ia709b70e4e31facfd88563c5836009d7cee6d7b2</a></li>
</ul>
<blockquote>
<div>4 files changed, 99 insertions(+), 0 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-remove-generic-persistence-pdo-backend">
<h2>[!!!][TASK] Remove generic persistence PDO backend</h2>
<ul class="simple">
<li>Authored on Thu Sep 1 11:05:41 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Thu Sep 1 18:00:56 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=45cacad12b8a14886e34dfeb64d9db61a34acace">45cacad</a></li>
</ul>
<p>The generic persistence PDO backend is no longer maintained,
there is no use for it. If you want to target a RDBMS, use the
Doctrine 2 integration.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Ife28072288018b233f3781c7f70f63a8cd1c6b39,n,z">Ife28072288018b233f3781c7f70f63a8cd1c6b39</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29412">#29412</a></li>
</ul>
<blockquote>
<div>5 files changed, 1 insertions(+), 2596 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-generic-abstract-backend-does-not-cascade-persist">
<h2>[BUGFIX] Generic abstract backend does not cascade persist</h2>
<ul class="simple">
<li>Authored on Wed Aug 31 18:01:25 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Thu Sep 1 18:00:50 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a149b6426d4519cd246706518498ce7286b69809">a149b64</a></li>
</ul>
<p>This changes makes checkPropertyValue() return the value it found, as
expected in collectProperties() - both methods in AbstractBackend.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29392">#29392</a></li>
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I4cafd98ef456c46eed6ae3933238cb7e7e4e345d,n,z">I4cafd98ef456c46eed6ae3933238cb7e7e4e345d</a></li>
</ul>
<blockquote>
<div>1 files changed, 2 insertions(+), 0 deletions(-)</div></blockquote>
</div>
<div class="section" id="id25">
<h2>[TASK] Two small code (style) fixes</h2>
<ul class="simple">
<li>Authored on Thu Sep 1 17:55:48 2011 +0200 by Karsten Dambekalns</li>
<li>Committed on Thu Sep 1 18:00:01 2011 +0200 by Karsten Dambekalns</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=784dae35ce078702ca088a85e569c3b44bbe74cb">784dae3</a></li>
</ul>
<p>Adds a leading backslash to a &#64;var annotation and replaces one create()
call on the ObjectManager by use of the new keyword.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,Id2e04252faf7b2d51b06de2e5b98cb14b1640ba7,n,z">Id2e04252faf7b2d51b06de2e5b98cb14b1640ba7</a></li>
</ul>
<blockquote>
<div>2 files changed, 2 insertions(+), 2 deletions(-)</div></blockquote>
</div>
<div class="section" id="task-make-generic-persistence-follow-new-paradigms">
<h2>[TASK] Make generic persistence follow new paradigms</h2>
<ul class="simple">
<li>Authored on Tue Aug 30 19:46:02 2011 +0200 by Christopher Hlubek</li>
<li>Committed on Wed Aug 31 10:44:13 2011 +0200 by Christopher Hlubek</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=afe640d9ed35d1e005aabac542ee0824c007b50c">afe640d</a></li>
</ul>
<p>This change fixes the introduces changedObjects properties by adding
an additional collection and changes the abstract backend to ignore
nested reconstituted aggregate root objects when processing an
object.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I6c359803e740ca8e29213557344da21680f8accf,n,z">I6c359803e740ca8e29213557344da21680f8accf</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29201">#29201</a></li>
</ul>
<blockquote>
<div>5 files changed, 54 insertions(+), 17 deletions(-)</div></blockquote>
</div>
<div class="section" id="bugfix-actioncontroller-should-initialize-errors-correctly">
<h2>[BUGFIX] ActionController should initialize Errors correctly</h2>
<ul class="simple">
<li>Authored on Tue Aug 30 18:11:07 2011 +0200 by Christian Müller</li>
<li>Committed on Tue Aug 30 18:11:07 2011 +0200 by Christian Müller</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ba62d0b91bb5140edc619332e0856deb73584442">ba62d0b</a></li>
</ul>
<p>The ActionController should use the correct controller API in
getErrorFlashMessage() so that arguments can be rendered.</p>
<ul class="simple">
<li>Change-Id: <a class="reference external" href="https://review.typo3.org/#q,I47b30096e2a183a19aa062001082f6509b5e5fce,n,z">I47b30096e2a183a19aa062001082f6509b5e5fce</a></li>
</ul>
<blockquote>
<div>1 files changed, 1 insertions(+), 1 deletions(-)</div></blockquote>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="682f9108-b886-72ba-157d-6c19387fe3fb" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="c46732a8-de4c-6a23-b67c-a5d5720c12e0" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="101" locale="">
        <properties>
         <title>1.0.1</title>
        </properties>
        <node identifier="a689dfeb-f4e9-d6d9-4720-41e07fb58c2b" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="619429cd-bbcf-0767-2abd-a3bae4256dc3" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>1.0.1</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-update-surf-configuration-for-release-job">
<h3>[TASK] Update Surf configuration for release job</h3>
<p>This updates the Surf configuration to interact with
the TYPO3.Release package on the FLOW3 website.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31896">#31896</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=0303a6d8b4eed7412485f33b88327eec2496aa4e">0303a6d</a></li>
</ul>
</div>
<div class="section" id="task-adjust-readme-txt-and-upgrading-txt-for-1-0-1">
<h3>[TASK] Adjust Readme.txt and Upgrading.txt for 1.0.1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=ae0c8190e7cb0f71e1876c65013c9f79407a4f20">ae0c819</a></li>
</ul>
</div>
<div class="section" id="bugfix-clean-up-configuration-readme">
<h3>[BUGFIX] Clean up configuration README</h3>
<p>Removes mentions of the non-used files FLOW3.yaml and Packages.yaml.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31215">#31215</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=46af2d3dc756fc60c004c818a15372ea7a4f8f5b">46af2d3</a></li>
</ul>
</div>
</div>
<div class="section" id="common">
<h2>Common</h2>
<p>No changes</p>
</div>
<div class="section" id="doctrine">
<h2>Doctrine</h2>
<p>No changes</p>
</div>
<div class="section" id="symfony-component-yaml">
<h2>Symfony.Component.Yaml</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="bugfix-fix-link-to-issue-tracker">
<h3>[BUGFIX] Fix link to issue tracker</h3>
<p>Adapts the project link after a renaming of the FLOW3 package in forge.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31781">#31781</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=365ddb6d0e40dc8ca02840fd836206f70fd54770">365ddb6</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-persistence-doctrine-query-serialization-cycle">
<h3>[BUGFIX] Fix Persistence\\\\Doctrine\\\\Query serialization cycle</h3>
<p>If you assign a QueryResult to a ViewHelper and later on use
$result-&gt;getQuery(), this query is not executable any more, if
you used complex &#8220;where&#8221;-clauses involving joins, as these
joins are not reapplied to the object during the __wakeup()
call.</p>
<p>This patch ensures the query being callable like the
original one after __wakeup() by saving all joins in array
and reapplies them after wakeup. A functional test is
included.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31696">#31696</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d1c5cd65f218da7441d1e7ee68417eacb49e699b">d1c5cd6</a></li>
</ul>
</div>
<div class="section" id="bugfix-escape-phpbinarypathandfilename-in-command-execution">
<h3>[BUGFIX] Escape phpBinaryPathAndFilename in Command execution</h3>
<p>Currently the bootstrap fails to properly escape the php path
when dispatching sub requests in command execution.
This leads to exceptions when the path contains spaces or other
special characters.
This is fixed by putting the command in quotes and replacing
backslashes.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30040">#30040</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cfc654feff6c8926d72160a797a98ec35355a79a">cfc654f</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-usage-of-query-parameter">
<h3>[BUGFIX] Allow usage of query parameter &#8220;_&#8221;</h3>
<p>Assert that the length of $argumentName is &gt;= 2 before accessing it at
position 1</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31773">#31773</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dfebde272d181e0f7c6b3acc6bb959de4069fd9a">dfebde2</a></li>
</ul>
</div>
<div class="section" id="bugfix-symlink-related-unit-tests-fail-on-some-windows-systems">
<h3>[BUGFIX] Symlink related Unit Tests fail on some Windows systems</h3>
<p>This replaces sys_get_temp_dir() by tempnam() in unit tests that
use symlinks to avoid them from failing on some Windows
environments.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31070">#31070</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4c9bcc0b97bc8690379ff4d82b6b7cad51e60bac">4c9bcc0</a></li>
</ul>
</div>
<div class="section" id="bugfix-cli-arguments-should-be-usable-with-equals-sign">
<h3>[BUGFIX] CLI arguments should be usable with equals sign (=)</h3>
<p>With this fix the last argument may use the equals sign (=)
again to separate between argument name and value.</p>
<p>Besides writing an additional test case which reproduces the issue,
the other test cases have been strengthened by replacing assertEquals()
by assertSame().</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30493">#30493</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2b137a04202b0cbbee6001f532083f8e5c6087a1">2b137a0</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-argument-list-before-initializing-action-arguments">
<h3>[BUGFIX] Reset argument list before initializing action arguments</h3>
<p>This change fixes a problem with functional tests of controller
actions. It&#8217;s also needed to reset the state of the controller when
multiple requests are dispatched.</p>
<p>It also refactors a unit test to use the actual arguments class instead
of a mock which is more expressive.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31134">#31134</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4cafbe10de7382e5c48742fa6f4857c19cbdf05e">4cafbe1</a></li>
</ul>
</div>
<div class="section" id="bugfix-enhance-entity-classname-detection-in-repository-constructor">
<h3>[BUGFIX] Enhance entity classname detection in repository constructor</h3>
<p>Fix bug where all occurrences of the word &#8220;Repository&#8221; were stripped
out during the automatic retrieval of the entity classname. This changes
the behavior in the way, that only removes the last occurrence.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30312">#30312</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=685890765cf92d18fe58da6ca59dd3ced9bf997e">6858907</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-annotations-in-actioncontroller-for-ignorevalidation">
<h3>[BUGFIX] Use annotations in ActionController for IgnoreValidation</h3>
<p>Use annotations for the action method instead of method tags values
which return wrong results if an explicit argumentName is given
to the annotation. See the functional test that is added.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31452">#31452</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=52d1e370f7145050ac002f274614416759a777f0">52d1e37</a></li>
</ul>
</div>
<div class="section" id="bugfix-proxy-class-builder-should-retain-original-annotations">
<h3>[BUGFIX] Proxy class builder should retain original annotations</h3>
<p>Original metadata information on proxied methods should be retained
to allow for code inspection and usage of metadata for dynamic code
generation.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31270">#31270</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=72dd3de06a8f6bcc7f26e83b8e4f29c04edb36d6">72dd3de</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-correct-method-to-get-cli-arguments-for-dql-command">
<h3>[BUGFIX] Use correct method to get CLI arguments for DQL command</h3>
<p>Call TYPO3\\\\FLOW3\\\\MVC\\\\CLI\\\\Request::getExceedingArguments() instead of the
removed TYPO3\\\\FLOW3\\\\MVC\\\\CLI\\\\Request::getCommandLineArguments()</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31474">#31474</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4c91d3f317e65d821e25757c858cb5563c678b04">4c91d3f</a></li>
</ul>
</div>
<div class="section" id="task-display-line-number-of-exception-in-command-line-mode">
<h3>[TASK] Display line number of exception in command line mode</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31269">#31269</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=94ecbf9922fa602c03c7c46215ffb8f1ced43f1c">94ecbf9</a></li>
</ul>
</div>
<div class="section" id="task-optimized-aop-pointcut-filter-matching">
<h3>[TASK] Optimized AOP Pointcut Filter matching</h3>
<p>This change set greatly reduces compilation time for AOP proxies for
applications intensively using AOP and security policies. It is a quick
fix rather than the ultimate solution.</p>
<p>Class name and method name matching have been simplified, matching
against annotations does not support regular expressions any more
(wasn&#8217;t supported officially anyway) and the order of a few point cut
expressions has been optimized.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/9568">#9568</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=66df0697686cd344c266e93eee78ad0f25639366">66df069</a></li>
</ul>
</div>
<div class="section" id="bugfix-logout-must-not-rely-on-a-session">
<h3>[BUGFIX] Logout must not rely on a session</h3>
<p>AuthenticationProvider::logout() currently throws an Exception
if no session has been initialized yet.
This change fixes this by checking whether the Security Context
has been initialized.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31311">#31311</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=93b608a41770d9ce4993eaaa42f9c5ec2f4853f5">93b608a</a></li>
</ul>
</div>
<div class="section" id="feature-make-path-for-migrate-annotations-configurable">
<h3>[FEATURE] Make path for migrate-annotations configurable</h3>
<p>Optional parameter &#8211;packages-path to configure an individual absolute
path to the folder with the packages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31160">#31160</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c8e6c9771f40ec344164978275d2792eac5875ad">c8e6c97</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="bugfix-reset-widgetviewhelpers-when-being-reused-from-viewhelpernode">
<h3>[BUGFIX] Reset WidgetViewHelpers when being reused from ViewHelperNode</h3>
<ul class="simple">
<li>Introduce an AbstractViewHelper::resetState method to handle any kind
of stateful interaction, empty by default.</li>
<li>Make ViewHelperNode call resetState when reusing a ViewHelper, and also
call it when reusing it in a compiled template.</li>
<li>AbstractWidgetViewHelper implements resetState for creating a new
WidgetContext object.</li>
</ul>
<p>As ViewHelpers are supposed to be stateless they were create once per
RenderingContext and reused whenever the RenderingContext fits.
Some ViewHelpers are not stateless, e.g. AJAX widgets.</p>
<p>AJAX widgets push their WidgetContext into an AjaxWidgetContextHolder
before they get rendered.</p>
<p>As soon as AJAX-WidgetViewHelpers were used multiple times within the
same RenderingContext (widgets in ForViewHelpers for example) different
widgets share the same ViewHelper containing the same WidgetContext.
Because the WidgetContext contains all stateful information about a
widget, only the last rendered widget gets stored in the ContextHolder.
That makes equal AJAX widgets within a for-loop impossible because
each GUI representation interacts with only the last rendered PHP object.</p>
<p>A test case has been committed to Viewhelpertest with <a class="reference external" href="http://review.typo3.org/6594">http://review.typo3.org/6594</a></p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31667">#31667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=79e1d93532d8d77920a68085a4188c5eeb3571a5">79e1d93</a></li>
</ul>
</div>
<div class="section" id="bugfix-pre-selecting-entities-does-not-work-with-multiple-flag-set">
<h3>[BUGFIX] pre-selecting entities does not work with multiple flag set</h3>
<p>The SelectViewHelper is not able to retrieve the selected uuid values for
a collection of objects</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29395">#29395</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=2a960bfe6818f55516dcb1eb2f340a7a13960666">2a960bf</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="bugfix-wrong-doc-comment-in-generated-crud-controller">
<h3>[BUGFIX] Wrong doc comment in generated CRUD controller</h3>
<p>In the create action of a CRUD controller, the parameter is
$newSomething, while the docblock says it&#8217;s $something. This leads to
e.g. a warning in some IDEs.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31494">#31494</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=005f8fd46ad4e58e111132cf41b2eb7948d779ea">005f8fd</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="task-add-hint-to-remove-subroute-definition-after-deactivating-package">
<h3>[TASK] Add hint to remove SubRoute definition after deactivating package</h3>
<p>When a SubRoute definition refers to a non-existing or disabled
package an exception is thrown, which confused some followers of
the mini tutorial of the Welcome screen.</p>
<p>This change adds a notice to remove the SubRoute definition
after deactivating the Welcome package.</p>
<p>Besides this renames &#8220;Remove the Welcome package ...&#8221; to
&#8220;Disable the Welcome package ...&#8221;.</p>
<p>Note: Some infos have been added to the exception wiki page at
<a class="reference external" href="http://wiki.typo3.org/wiki/Exception1318414040">http://wiki.typo3.org/wiki/Exception1318414040</a></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31284">#31284</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=5360a38035c5b427af2769d8a03bd0c1b8146194">5360a38</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="d0581c13-a7c2-f6cc-8039-1123106b21f9" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="d81b22f1-12f6-8183-aa3e-7c16c62b2559" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="102" locale="">
        <properties>
         <title>1.0.2</title>
        </properties>
        <node identifier="e2c8876f-672c-1f06-61cb-e730412f3540" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="cdc65817-3146-b70a-4b24-456fa1cb3bd8" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>1.0.2</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-make-doctrine-package-protected">
<h3>[TASK] Make Doctrine package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.git?a=commit;h=f87567cac7ab8392c936b5366e5ba0d7f168f43f">f87567c</a></li>
</ul>
</div>
</div>
<div class="section" id="symfony-component-yaml">
<h2>Symfony.Component.Yaml</h2>
<div class="section" id="task-make-yaml-package-protected">
<h3>[TASK] Make Yaml package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Symfony.Component.Yaml.git?a=commit;h=7884051cfd11f387241e42ef06c63a7746fd3fbc">7884051</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="bugfix-make-emptydirectoryrecursively-ignore-and">
<h3>[BUGFIX] Make emptyDirectoryRecursively() ignore . and ..</h3>
<p>The check for this breaks when the iterator returns . and .., they are
then handled like files, which cannot work.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32762">#32762</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fa850f3efd00d37e5124a81c2d809ffdf79349df">fa850f3</a></li>
</ul>
</div>
<div class="section" id="bugfix-unit-tests-remove-their-temporary-files">
<h3>[BUGFIX] Unit tests remove their temporary files</h3>
<p>Some unit tests create many temporary files outside vfs://
that are now removed after running the test.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32723">#32723</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f95aa8385b91967eb342513d08dbdbc4f87cb38e">f95aa83</a></li>
</ul>
</div>
<div class="section" id="bugfix-files-emptydirectoryrecursively-affects-targets-of-symlinks">
<h3>[BUGFIX] Files::emptyDirectoryRecursively affects targets of symlinks</h3>
<p>\TYPO3\FLOW3\Utility\Files::removeDirectoryRecursively() fails to
properly unlink directory symlinks on Windows.</p>
<p>Thus \TYPO3\FLOW3\Utility\Files::emptyDirectoryRecursively()
iterates through the target files of a symlinked folder and
removes them!</p>
<p>This change fixes this by introducing a custom unlink() function
that can remove a symlink regardless of it&#8217;s type (file/directory).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32550">#32550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=12eea665d94747288a82a9a0e02094ac6ab8d42b">12eea66</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-tests-with-phpunit-3-6-5-in-strict-mode">
<h3>[BUGFIX] Fix unit tests with PHPUnit 3.6.5 in strict mode</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32738">#32738</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d5533b0bb05c88853df170a4b988984e459552c3">d5533b0</a></li>
</ul>
</div>
<div class="section" id="bugfix-logout-doesn-t-work-anymore">
<h3>[BUGFIX] Logout doesn&#8217;t work anymore</h3>
<p>Since 93b608a calling AuthenticationProviderManager::logout()
without initializing the Security Context first, returns without
actually destroying the authentication cookie.</p>
<p>This change fixes this by introducing a new convenience method
isAuthenticated() to the AuthentcationManagerInterface allowing the
AuthenticationProviderManager to check whether a user is
authenticated before trying to fetch the session.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32285">#32285</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6ba03e4810791eb15f43282789b8dd29d8d57c09">6ba03e4</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-eol-characters-break-parsing-of-doc-comments">
<h3>[BUGFIX] &#8220;Wrong&#8221; EOL characters break parsing of doc comments</h3>
<p>When \n\r was used as EOL instead of just \n the parsed doc comments
would retain the \r which would cause confusing exceptions in some
cases later on.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31363">#31363</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32466">#32466</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31087">#31087</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6ca1f9b2734e083f0f707af0d2f83f7bf5da87de">6ca1f9b</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-validation-upon-persistence-work-again">
<h3>[BUGFIX] Make validation upon persistence work again</h3>
<p>The validation upon persistence was dropped (more or less by accident)
when we switched to Doctrine. This change brings it back.</p>
<p>In addition it fixes the exception message produced in the generic
AbstractBackend when validation fails.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31502">#31502</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3522f1b264b022a5fabc2dc9c7a05a82c88b5d67">3522f1b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-tests-failing-with-phpunit-3-6">
<h3>[BUGFIX] Fix unit tests failing with PHPUnit 3.6</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32015">#32015</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f030d705121da8dc5946e0d6a097cef9c70fb2b7">f030d70</a></li>
</ul>
</div>
<div class="section" id="task-make-flow3-package-protected">
<h3>[TASK] Make FLOW3 package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c82dc98ace74c80f3f5386a6f55bbef63c187c5f">c82dc98</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-flush-the-doctrine-orm-if-it-is-open">
<h3>[BUGFIX] Only flush() the Doctrine ORM if it is open</h3>
<p>In some cases it can happen, that the EntityManager is closed at the end
of a request This can be a valid situation (see #30933 for more).</p>
<p>This change makes persistAll() check if the EntityManager is open
before calling flush() on it.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30934">#30934</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=491119035d378be54da1894ee083d1f5dacc5dde">4911190</a></li>
</ul>
</div>
<div class="section" id="bugfix-acl-file-permissions-do-not-work-correctly">
<h3>[BUGFIX] ACL file permissions do not work correctly</h3>
<p>When setting file permissions the setting of ACL would succeed but
the set permissions did not work as expected. This changes fixes that.</p>
<p>In addition it makes the calls in a chain so that the check for the
return value of the chmod commands is more robust. The directories
that are created are now always owned by the command line user.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32499">#32499</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9ae0f93715a01307ed474446562eb9d74275f197">9ae0f93</a></li>
</ul>
</div>
<div class="section" id="bugfix-trigger-allobjectspersisted-after-every-functional-test">
<h3>[BUGFIX] Trigger allObjectsPersisted after every functional test</h3>
<p>The tearDown() method of the base functional test case clears the
persistence manager&#8217;s state so it is ready for the next test, avoiding
side effects.</p>
<p>However, certain repositories (such as the TYPO3CR NodeRepository) rely
on the signal &#8220;allObjectsPersisted&#8221; which triggers their internal
cleanup function. If this signal is not, sent, the next test will still
see added objects stored directly in the repository.</p>
<p>The solution is to call persistAll() in the tearDown() method, even if
the just executed test doesn&#8217;t require it.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32346">#32346</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=36a893c22e774810d0511797ab4d989531342f67">36a893c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-check-for-stripped-comments">
<h3>[BUGFIX] Fix check for stripped comments</h3>
<p>The bootstrap checks for the presence of doc comments, to avoid
problems with some bytecode caches that strip comments.</p>
<p>That check did not work correctly (FALSE is returned but the check
expects an empty string). In case an error is seen, the exception
cannot be thrown as well (no classloader available at that point).
That exception issue has been been fixed for another check as well.</p>
<p>On top of this the check for magic_quotes_gpc has been adjusted a
tiny bit.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32049">#32049</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8264f7eb5286fe42cc8a9413ffb43a77d33917a3">8264f7e</a></li>
</ul>
</div>
<div class="section" id="task-move-objectvalidationfailedexception-out-of-generic">
<h3>[TASK] Move ObjectValidationFailedException out of Generic</h3>
<p>The exception is not specific to generic persistence, thus it should
not be inside the Generic namespace.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31502">#31502</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a8e6d8e2adce35928fea0e424128ea6adfe6d291">a8e6d8e</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-authenticationcontroller-to-flashmessages">
<h3>[BUGFIX] Adjust AuthenticationController to FlashMessages</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31931">#31931</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d381413f8b4f8acce8ffb80364dde7cea558c8b4">d381413</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="task-make-fluid-package-protected">
<h3>[TASK] Make Fluid package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=d57a87b61a5703461676e8b819a500968c985c1f">d57a87b</a></li>
</ul>
</div>
<div class="section" id="id24">
<h3>[BUGFIX] Fix unit tests failing with PHPUnit 3.6</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32016">#32016</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=bf98ab6dc79464c39eb104420e1bdd8deea04439">bf98ab6</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="task-make-party-package-protected">
<h3>[TASK] Make Party package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=b5e5c6d71da63308a2f1e110f8cdfd53ce2296fe">b5e5c6d</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="bugfix-fix-links-on-welcome-screen">
<h3>[BUGFIX] Fix links on Welcome screen</h3>
<p>The links to the FLOW3 website were mostly wrong.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32005">#32005</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=6cd06cb0e4b10a2d0bef8967652d08f049f35216">6cd06cb</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="ecae0d1c-6216-8195-cf2d-dc1497e6a702" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="6b2ec1ab-5f7b-174d-bceb-a5944d40bb99" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="103" locale="">
        <properties>
         <title>1.0.3</title>
        </properties>
        <node identifier="e975fdea-077a-4d05-df20-dee3261d79be" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="03512c62-f04e-b13a-153e-0432f2afb79c" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>1.0.3</h1>
<div class="section" id="doctrine">
<h2>Doctrine</h2>
<div class="section" id="task-update-to-current-2-2-0-versions">
<h3>[TASK] Update to current 2.2.0 versions</h3>
<p>Common is at upstream 2.2.0, with DataFixtures at
bed8908ae929562317e5c59dc0bee24f3b63067e.</p>
<p>DBAL is at upstream 2.2.1 plus on of our changes, with Migrations at
9e81984b0f126b0830d9ac6acc2d1da81aba2b94.</p>
<p>ORM is at upstream 2.2.0 plus three of our own changes on top.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.git?a=commit;h=6475cb6acfd24d1e5b1db51dfc7f501d4de173a5">6475cb6</a></li>
</ul>
</div>
</div>
<div class="section" id="symfony-component-yaml">
<h2>Symfony.Component.Yaml</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="bugfix-makes-account-expiry-work-as-expected">
<h3>[BUGFIX] Makes account expiry work as expected</h3>
<p>The expiry if an account was checked in a way that left an account
enabled until after it&#8217;s last day. Now it will expire exactly when
it should.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33707">#33707</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=873bdd5376defbd863929258b2e52f63b8b73dbe">873bdd5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-default-lifetime-use-in-cache-backend">
<h3>[BUGFIX] Fix default lifetime use in cache backend</h3>
<p>This fixes the FileBackend so it actually uses the default lifetime
in cases it should do that.</p>
<p>ArrayAccess detection for configuration in AbstractBackend is fixed
along the way and the RedisBackend code cleaned up a little.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33562">#33562</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f22d865d9d0c1bf66e65071b10398c357f21b909">f22d865</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-doctrine-2-2-libraries">
<h3>[TASK] Adjust to Doctrine 2.2 libraries</h3>
<p>This adjusts the FLOW3 annotation driver and the ClassMetadata
implementation to the changes in Doctrine 2.</p>
<p>Also the proxy interface in Common is now used, the fixture
needs to be adjusted.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3f66b479bf6695a327f153154eab9359cb84ecbf">3f66b47</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-flow3-1-0-functional-tests">
<h3>[BUGFIX] Fix FLOW3 1.0 Functional Tests</h3>
<p>I introduced an error inside the functional tests in <a class="reference external" href="https://review.typo3.org/#change,7715">https://review.typo3.org/#change,7715</a>
and this followup commit fixes it.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32830">#32830</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0736b6a449cf8b055e9725710fdce274b96d9855">0736b6a</a></li>
</ul>
</div>
<div class="section" id="bugfix-hint-at-possible-exception-cause">
<h3>[BUGFIX] Hint at possible exception cause</h3>
<p>When using &#64;MappedSuperclass without &#64;Entity an exception is thrown.
Since FLOW3 needs the &#64;Entity annotation even with a mapped superclass,
this change adds a hint to the exception message.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/27285">#27285</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=68ac2a0194d087bd79072cb787867a7fe3acfe08">68ac2a0</a></li>
</ul>
</div>
<div class="section" id="bugfix-arraymergerecursiveoverrule-does-not-override-arrays-with-simple-types">
<h3>[BUGFIX] ArrayMergeRecursiveOverrule does not override arrays with simple types</h3>
<p>If the first element contains an array, and the second element contains a simple
type at a certain position, the ORIGINAL array is used. That bug prevents to reset
array in configuration for example.</p>
<p>A full example is given in issue #32984.</p>
<p>I also added first unit tests for the ArrayMergeRecursiveOverrule function.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32984">#32984</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d65fe22c195a8f16b579c33c965eb2c2d2dc78c3">d65fe22</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-updating-a-doctrine-lazy-loading-proxy-work">
<h3>[BUGFIX] Make updating a Doctrine Lazy Loading Proxy work</h3>
<p>When a Doctrine lazy loading proxy is persisted again, a fatal error is thrown
because the Reflection Service cannot handle Doctrine Proxies.</p>
<p>We work around this issue by asking the Doctrine Entity Manager to resolve the
class name.</p>
<p>A Functional Test reproducing the issue is included.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32830">#32830</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d7af18a9d8346dc7d6395e6eb91d9de1cfe61e93">d7af18a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-uribuilder-with-subrequests">
<h3>[BUGFIX] Fix UriBuilder with subrequests</h3>
<p>This change fixes the argument handling of the UriBuilder for nested
subrequests. The namespaces of all parent requests get added
recursively.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30536">#30536</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6629f53025e73b73d2c04d043f561637b1fa23be">6629f53</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="bugfix-make-partyrepository-a-singleton">
<h3>[BUGFIX] Make PartyRepository a singleton</h3>
<p>The PartyRepository lacked the Scope annotation it should have had.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33600">#33600</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=3df5d045ff836d7f026dde207daa111b1f4114dd">3df5d04</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<p>No changes</p>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="96ef0d40-4a76-ed3d-38a2-9a6f62c0dd30" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="179328e6-39a6-eb88-9c2b-f9eb26085180" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="104" locale="">
        <properties>
         <title>1.0.4</title>
        </properties>
        <node identifier="e064b8b5-c0b6-a444-393b-c5617445bf46" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="1145bc60-31e1-fa0e-f518-224110dc3821" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>1.0.4</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="bugfix-fixes-wrong-url-to-tutorials-page-in-readme-txt">
<h3>[BUGFIX] Fixes wrong URL to tutorials page in Readme.txt</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33031">#33031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=0c887eb0e02343c7b90e512411ab2adbc4a5f760">0c887eb</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="security-protect-arguments-of-form-referrer-with-hmac">
<h3>[SECURITY] Protect arguments of form __referrer with HMAC</h3>
<p>The request arguments of the referring request are
a serialized string written to one of the hidden
fields in a Fluid form. This string has to be protected
by a HMAC to protect FLOW3 from possible unserialize
attacks.</p>
<p>Note: For now there is no object known within the FLOW3
Distribution, that could be used for an unserialize
exploit!</p>
<p>This change also backports some convenience hmac methods
to the hash service from the current master, to have the
bugfix in sync.</p>
<ul class="simple">
<li>Security-Bulletin: <a class="reference external" href="http://typo3.org/teams/security/security-bulletins/flow3/flow3-sa-2012-001/">FLOW3-SA-2012-001</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35300">#35300</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cd39af5dddd1695b499ca038c5add38d46436e4c">cd39af5</a></li>
</ul>
</div>
<div class="section" id="bugfix-typo-in-return-statement-for-getaccessdecisionvoters">
<h3>[BUGFIX] typo in return statement for getAccessDecisionVoters()</h3>
<p>Fix return value to array.
Fix type hinting for var $securityContext and $authenticationManager</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34620">#34620</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7e055f0b2c7e2d0f92992afd0c97007b50ef4aac">7e055f0</a></li>
</ul>
</div>
<div class="section" id="bugfix-resourcestreamwrapper-returns-wrong-value-for-fseek">
<h3>[BUGFIX] ResourceStreamWrapper returns wrong value for fseek</h3>
<p>Calling fseek will always return the wrong value, as fseek
return 0 on success otherwise -1.
The stream_wrapper expects a boolean value. So 0 will be
evaluated to false and -1 will be evaluated to true</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34608">#34608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=461bb056be2d6855aa3def46b4dcbe18fca28cd7">461bb05</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-variable-name-inside-rename-function">
<h3>[BUGFIX] Wrong variable name inside rename function</h3>
<p>Use the proper variable name to create the stream wrapper.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34547">#34547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=93c28d81df8721ae1facc8d720dbc7c0a4048d5e">93c28d81</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-duplicate-error-id-in-stringvalidator">
<h3>[BUGFIX] Fixes duplicate error id in StringValidator</h3>
<p>StringValidator uses the error id 1238108068, but that is
used in StringLengthValidator. This change makes the former
use 1238108070 instead.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33973">#33973</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e1f1478eba905740584e9990a68cbf6b7d4c0b4c">e1f1478</a></li>
</ul>
</div>
<div class="section" id="bugfix-isauthenticated-should-work-in-authentication-request">
<h3>[BUGFIX] isAuthenticated should work in authentication request</h3>
<p>AuthenticationManager::isAuthenticated now checks for resumable
and new sessions before returning FALSE, so it works also in the
request that triggers the authentication.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33311">#33311</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=27f00f62768c2b322e87d815e5bef9f5bd2bb2ea">27f00f6</a></li>
</ul>
</div>
<div class="section" id="bugfix-now-filters-correctly-for-destruct-in-pointcut-filter">
<h3>[BUGFIX] Now filters correctly for &#8216;__destruct&#8217; in pointcut filter</h3>
<p>The filter for proxyable methods in SessionObjectMethodsPointcutFilter skips
the method &#8216;__desctruct&#8217; instead of &#8216;__destruct&#8217;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34293">#34293</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=55150fe526b60d0200b6afd40731b8c36cef1bc4">55150fe</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id10">
<h3>[SECURITY] Protect arguments of form __referrer with HMAC</h3>
<p>The request arguments of the referring request are
a serialized string written to one of the hidden
fields in a Fluid form. This string has to be protected
by a HMAC to protect FLOW3 from possible unserialize
attacks.</p>
<p>Note: For now there is no object known within the FLOW3
Distribution, that could be used for an unserialize
exploit!</p>
<ul class="simple">
<li>Security-Bulletin: <a class="reference external" href="http://typo3.org/teams/security/security-bulletins/flow3/flow3-sa-2012-001/">FLOW3-SA-2012-001</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35300">#35300</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=7bc4e35752779bab0c51fc82387088d9217277ba">7bc4e35</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="d79cb91d-00b2-7d7b-6d2e-255bbb8cc371" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="4df2d7bb-e844-6228-3d8a-b21b33401ca8" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="105" locale="">
        <properties>
         <title>1.0.5</title>
        </properties>
        <node identifier="7c5499b3-795d-eb16-a25b-df3006e7ac52" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="ca66c448-69aa-9b80-f777-b6f3a1a984a2" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>1.0.5</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-change-comment-on-rewritebase-directive">
<h3>[TASK] Change comment on RewriteBase directive</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=ba9d4e94e8facafdf9078a89d0e0f96b417ef71f">ba9d4e9</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-settings-yaml-example-a-working-example">
<h3>[BUGFIX] Make Settings.yaml.example a working example</h3>
<p>With this change the Settings.yaml.example can be used as is,
because the key &#8220;doctrine&#8221; is commented out now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33410">#33410</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=5fbea995fa0d15310aff0c259d332c0cd1749dd4">5fbea99</a></li>
</ul>
</div>
<div class="section" id="task-update-upgrading-txt-with-new-version-number">
<h3>[TASK] Update Upgrading.txt with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=c59c471781d198b3746cdf5deee1e47a75e9489e">c59c471</a></li>
</ul>
</div>
</div>
<div class="section" id="common">
<h2>Common</h2>
<p>No changes</p>
</div>
<div class="section" id="doctrine">
<h2>Doctrine</h2>
<p>No changes</p>
</div>
<div class="section" id="symfony-component-yaml">
<h2>Symfony.Component.Yaml</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="bugfix-action-arguments-of-type-datetime-throw-exception">
<h3>[BUGFIX] Action arguments of type DateTime throw Exception</h3>
<p>If an action argument is an object, the ValidatorResolver tries to
instantiate that object to use it as Validator without checks.</p>
<p>This change solves this by checking if the specified object implements
the ValidatorInterface.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35338">#35338</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=64a8f49896332e8f69c9d01ba2f6e68f0640e213">64a8f49</a></li>
</ul>
</div>
<div class="section" id="bugfix-nested-arrays-in-annotation-options-are-no-longer-dropped">
<h3>[BUGFIX] Nested arrays in Annotation options are no longer dropped</h3>
<p>When giving a nested array of options to an annotation the rendered
form in proxy classes was cut off.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37193">#37193</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=04c348617735fe345087c19a5dac55192240206d">04c3486</a></li>
</ul>
</div>
<div class="section" id="bugfix-html-should-be-escaped-in-debug-exception">
<h3>[BUGFIX] HTML should be escaped in Debug Exception</h3>
<p>HTML in the code that is output as part of the stack trace is
escaped now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/25961">#25961</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1c3316531f1311937377d9c8a676018baaafab49">1c33165</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-error-message-about-command-controller-classes">
<h3>[BUGFIX] Fix error message about command controller classes</h3>
<p>If you create a CommandController which is not in the &#8220;Controller&#8221; directory
of a package or where the name does not end in &#8220;CommandController&#8221; you will
get an error saying &#8220;Invalid controller class name [...] 1305100019&#8221;.</p>
<p>This change makes the error message a little more helpful.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33139">#33139</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cc72a1c6dd12855c7d9dd43aed48db8aca0f7a03">cc72a1c</a></li>
</ul>
</div>
<div class="section" id="bugfix-persistencemanager-add-now-requires-objects-being-new">
<h3>[BUGFIX] PersistenceManager-&gt;add() now requires objects being new</h3>
<p>The add method in repositories did also update existing entities,
this can be dangerous, as it allows an attacker to misuse creation
forms (i.e. a register form) and change existing entities.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34527">#34527</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=df6b6f457cbe2d282a7b3d857acac7987635a54d">df6b6f4</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-exception-message-in-repository-remove">
<h3>[BUGFIX] Fix Wrong exception message in Repository-&gt;remove()</h3>
<p>The message would say add() was involved, which is wrong.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37448">#37448</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c13969e78cdac842040e465871e77070a5946a18">c13969e</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-functional-test-if-doctrine-is-not-enabled">
<h3>[BUGFIX] Skip functional test if Doctrine is not enabled</h3>
<p>The Flow3AnnotationDriverTest should be skipped if Doctrine is not
enabled to prevent problems if no actual driver or connection
can be created.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=304431233d823af73f894f120094b2590e645869">3044312</a></li>
</ul>
</div>
<div class="section" id="feature-add-tostring-and-make-resource-use-more-convenient">
<h3>[FEATURE] Add __toString() and make Resource use more convenient</h3>
<p>To use a Resource with file operations, one can use the
resource:// scheme and the __toString() method of any
ResourcePointer.</p>
<p>To make this a little easier, this change adds two new
methods to the Resource class:</p>
<p>__toString() returns the SHA1 of the ResourcePointer the
Resource is holding (as is documented for ages).</p>
<p>getUri() returns a ready-to-use resource://&lt;sha1&gt; URI of
the ResourcePointer the Resource is holding.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29694">#29694</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34177">#34177</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8c7ec51b5a0e90a859c102fde6f5f0859babed1a">8c7ec51</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow3-php-now-uses-return-code-from-setfilepermissions-sh">
<h3>[BUGFIX] flow3.php now uses return code from setfilepermissions.sh</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36279">#36279</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a0de72aa66bbed2b44c88221ab8ffbdfb810a6b2">a0de72a</a></li>
</ul>
</div>
<div class="section" id="bugfix-proxy-methods-with-referenced-arguments-should-work">
<h3>[BUGFIX] Proxy methods with referenced arguments should work</h3>
<p>Arguments given by reference would result in an exception if
the method was proxied due to AOP.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30914">#30914</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/13333">#13333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fed005bf03d37e0ae48db565d28ca87653e9341b">fed005b</a></li>
</ul>
</div>
<div class="section" id="task-update-package-xml-with-new-version-number">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=29961d6d31b442d0b44375161105ad7c03e0b807">29961d6</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-handling-of-numeric-annotation-parameters">
<h3>[BUGFIX] Fixes handling of numeric annotation parameters</h3>
<p>Annotations like &#64;FooBar(amount=2) lost their parameter value
in renderAnnotation(). This change fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33932">#33932</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1fb98a958e7a28698997724385d78e094c8ad3a9">1fb98a9</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-flow3-bat-output-usage-texts-matching-windows">
<h3>[BUGFIX] Make flow3.bat output usage texts matching Windows</h3>
<p>When using flow3.bat on Windows the usage information would tell the
user to call &#8221;./flow3&#8221;, which doesn&#8217;t fit the Windows world.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33048">#33048</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b33afd7b7190150e521f19e22c2de5b957f313c4">b33afd7</a></li>
</ul>
</div>
<div class="section" id="task-add-early-returns-to-security-context-hasrole">
<h3>[TASK] Add early returns to Security\Context::hasRole</h3>
<p>Change the behavior of hasRole so it has an early return
when the authenticationManager is not yet authenticated
(and thus no role can be assigned to the authenticated user).</p>
<p>Also an earlier return on the Everyone role.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32841">#32841</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=024f8fc597af78b351991780486f44f742c9ecfe">024f8fc</a></li>
</ul>
</div>
<div class="section" id="bugfix-keep-class-doc-comments-when-building-proxies">
<h3>[BUGFIX] Keep class doc comments when building proxies</h3>
<p>Currently the doc comment of a class is replaced with
&#8220;Autogenerated Proxy Class&#8221; when the proxy class is generated.
This change fixes this and keeps the original doc comment.</p>
<p>That is particulary useful if you rely on the original comment
when creating automatic class documentations.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34110">#34110</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=465c4cbe06fa750999907d351595778f3adde96c">465c4cb</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="bugfix-fixes-doc-comment-of-form-validationresultsviewhelper">
<h3>[BUGFIX] Fixes doc comment of Form.ValidationResultsViewHelper</h3>
<p>The example in the class doc comment was outdated and is fixed with
this change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31380">#31380</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a481d4ad57a2141c4ccd6d6c1385cd2bff4b51ec">a481d4a</a></li>
</ul>
</div>
<div class="section" id="id20">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=5e72fd95cf1f8d088553bc573b242fb9fb59e4ea">5e72fd9</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="bugfix-kickstart-kickstart-model-should-give-correct-example">
<h3>[BUGFIX] Kickstart kickstart:model should give correct example</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36155">#36155</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=4bd6bc27673eb05522f4316236f249bdc92060ca">4bd6bc2</a></li>
</ul>
</div>
<div class="section" id="id22">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=d6d142f23ce7bd03dddde2566dd21ff6afcca496">d6d142f</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="bugfix-primaryelectronicaddress-should-check-before-adding">
<h3>[BUGFIX] PrimaryElectronicAddress should check before adding</h3>
<p>With setPrimaryElectronicAddress the electronic address is also
added to the electronicAddress collection but it should check
first if it is already in to avoid creating duplicate entries.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29484">#29484</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=736f2ecbe68d7d85832ff21ddc84e8cb8663b4b6">736f2ec</a></li>
</ul>
</div>
<div class="section" id="id24">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=f21f580691325786ff27db6f71ce48d9ad6ee087">f21f580</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="bugfix-fix-links-and-update-about-content">
<h3>[BUGFIX] Fix links and update &#8220;About&#8221; content</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36580">#36580</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=d37f215bb03158617c45497532477008a7a9cf34">d37f215</a></li>
</ul>
</div>
<div class="section" id="id26">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=2116b955f9ecce7741df954d07af55c0177865e6">2116b95</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="e0724371-7533-5d94-a183-5772971d01c6" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="30d5bab4-dda6-6dbd-bdc4-c56e365ef860" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="106" locale="">
        <properties>
         <title>1.0.6</title>
        </properties>
        <node identifier="2b535c15-ef52-0924-0c2a-ef61ed6ecbf6" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="68ebdc00-5fc0-c597-8456-a32d1ec17eac" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>1.0.6</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-update-upgrading-txt-with-new-version-number">
<h3>[TASK] Update Upgrading.txt with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=33052141c09d9e814396a1b3c9af49182017fcc9">3305214</a></li>
</ul>
</div>
<div class="section" id="task-add-phoenix-distribution-build-surf-configuration">
<h3>[TASK] Add Phoenix distribution build surf configuration</h3>
<p>Note: This needs the corresponding change in BuildEssentials as well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38500">#38500</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=87fc97555ff60219d2bdee72be4b763e197dbebd">87fc975</a></li>
</ul>
</div>
<div class="section" id="task-refactor-flow3-distribution-build-into-generic-and-specific-parts">
<h3>[TASK] Refactor FLOW3 Distribution Build into generic and specific parts</h3>
<p>As we do not only build a single distribution but multiple ones using Jenkins,
we should refactor the common environment-variable handling into a base setup
to be included in each individual deployment.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38500">#38500</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=e6d8570a6a8d2f84f3a38df7a5d95f2bfd724a2b">e6d8570</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine">
<h2>Doctrine</h2>
<p>No changes</p>
</div>
<div class="section" id="symfony-component-yaml">
<h2>Symfony.Component.Yaml</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-package-xml-with-new-version-number">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ba702074a4b7e4da2eac1686d605487721d262f8">ba70207</a></li>
</ul>
</div>
<div class="section" id="bugfix-missing-setting-namespace-in-error-message">
<h3>[BUGFIX] Missing setting namespace in error message</h3>
<p>When an invalid PHP binary is found, the error message hint at setting
the path in settings misses the setting namespace TYPO3 in the beginning.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39142">#39142</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=eec2d821e6705828a114fb91d13daa334a5d940c">eec2d82</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-broken-links-standardview-template">
<h3>[BUGFIX] Fix broken links StandardView template</h3>
<p>The links pointed to URLs no longer working.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39062">#39062</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=95a33175c2f314fc7da32c1976dcbf53170b2969">95a3317</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-publishingconfiguration-to-be-persisted">
<h3>[BUGFIX] Allow PublishingConfiguration to be persisted</h3>
<p>Any resource publishing configuration attached to a resource could
not be persisted, because the needed mapping information for
Doctrine was missing and the target type of the relation was an
interface.</p>
<p>This change adds an AbstractPublishingConfiguration and the needed
annotations, plus a schema migration.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32826">#32826</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1c0a3c41df4440a80dbc211f5614ef252649569f">1c0a3c4</a></li>
</ul>
</div>
<div class="section" id="bugfix-injections-only-on-last-level-of-class-hierarchy">
<h3>[BUGFIX] Injections only on last level of class hierarchy</h3>
<p>Property injections are no longer called for every level of your
class hierarchy, which means they are only executed once now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31179">#31179</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5a6703dc5887ba89dd35406b05113fa9b98a479d">5a6703d</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-abstract-classes-in-ensureaggregaterootinheritancechainconsistency">
<h3>[BUGFIX] Skip abstract classes in ensureAggregateRootInheritanceChainConsistency</h3>
<p>When using an abstract base class for domain models, the checks done in
ensureAggregateRootInheritanceChainConsistency() would fail, even though
it is fine to have an abstract base class not being aggregate root.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31522">#31522</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d466d6036a9f19cd0dfbf1b7801fa90447b345e6">d466d60</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-code-documentation-of-datetimeparser">
<h3>[BUGFIX] Fix code documentation of DatetimeParser</h3>
<p>The parser code documentation would state the parse methods
expect \DateTime instances, but in fact strings are expected.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34050">#34050</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6af6a7f9372306c009b9765c17814e16bb85cad0">6af6a7f</a></li>
</ul>
</div>
<div class="section" id="id11">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cbc3ba52c0c5336872ce56bfb401ed5f4b8b02de">cbc3ba5</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id12">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=e1bc4927b0f3566db74be3a88d20621cddd70d37">e1bc492</a></li>
</ul>
</div>
<div class="section" id="id13">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=ba2f8851e3c1d474e752040c98ea30a6d3d6873d">ba2f885</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id14">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=d6eff74f4a3b1c846573bf51e175604f2324c5fa">d6eff74</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstart-package-gives-wrong-hint-for-valid-package-key">
<h3>[BUGFIX] kickstart:package gives wrong hint for valid package key</h3>
<p>The kickstarter wrongly claims that a valid package key
may contain underscores. This patch corrects the respective
messages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38999">#38999</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=5d05e147c6fd5fa3d679ecbed16e240e4ecbeae2">5d05e14</a></li>
</ul>
</div>
<div class="section" id="id16">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=422ff9b71a765ed3cca9ae1e2c2bb2888afaac9b">422ff9b</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id17">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=4e9ac659fb9833dfdb0ccfeb4cdd9e081847d220">4e9ac65</a></li>
</ul>
</div>
<div class="section" id="id18">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=5eb599138c8c1239e45f0f43650606200495bd54">5eb5991</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id19">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=3f79629c96fe8cec64d142c338408c0292d3cbf9">3f79629</a></li>
</ul>
</div>
<div class="section" id="id20">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=624c0ccf6904238f0a787f3cb48a37e3eba37018">624c0cc</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="822ee33d-60c4-f80a-0824-507ca10547e9" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="c94eff4e-a8ce-5b60-b5df-82b8f79edf7e" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="110" locale="">
        <properties>
         <title>1.1.0</title>
        </properties>
        <node identifier="7cbb294e-f193-9691-7b56-26033906dadd" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="83944432-df13-eec4-b72f-69d9266046cc" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>1.1.0</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-update-upgrading-txt">
<h3>[TASK] Update Upgrading.txt</h3>
<p>This change adds missing content to the instructions (based on the [!!!]
changes from the overview of merged changes) and reorganizes the document
a little.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=79aad6f11cc765887c36f55b2517e4963649c88e">79aad6f</a></li>
</ul>
</div>
<div class="section" id="task-mention-repository-interface-changes-in-upgrading-txt">
<h3>[TASK] Mention Repository(Interface) changes in Upgrading.txt</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=410b1a871c539690cf69517cd3b9a90a23432f33">410b1a8</a></li>
</ul>
</div>
<div class="section" id="task-add-phoenix-distribution-build-surf-configuration">
<h3>[TASK] Add Phoenix distribution build surf configuration</h3>
<p>Note: This needs the corresponding change in BuildEssentials as well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38500">#38500</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=fef1a40c5c6dd3510c591ddcd472dac526b6c7a8">fef1a40</a></li>
</ul>
</div>
<div class="section" id="task-update-upgrading-instructions">
<h3>[TASK] Update upgrading instructions</h3>
<p>Adds instructions to replace DataNotSerializeableException with
DataNotSerializableException.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=0bfbf2e6f74133225ea530fec477dc336760d4bb">0bfbf2e</a></li>
</ul>
</div>
<div class="section" id="task-adjust-release-deployment-descriptor">
<h3>[TASK] Adjust release deployment descriptor</h3>
<p>This adds the configuration needed to push tags based on
the PUSH_TAGS environment variable and tweaks some tiny
(style) issues.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=138dfc36418977b4c019db2fb38c1323a569a64a">138dfc3</a></li>
</ul>
</div>
<div class="section" id="task-mention-phpsession-configuration-change-in-upgrading-txt">
<h3>[TASK] Mention PhpSession configuration change in Upgrading.txt</h3>
<p>This informs about the PhpSession settings key change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37993">#37993</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=052524c7bd296814da0af023ba77fafd35c11a89">052524c</a></li>
</ul>
</div>
<div class="section" id="task-correct-information-about-frozen-packages">
<h3>[TASK] Correct information about frozen packages</h3>
<p>The upgrading instructions explained that packages were frozen by
default, which is no longer true.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=c5b25bfe8c62cf0e935c9531b2ec4f8faebdec41">c5b25bf</a></li>
</ul>
</div>
<div class="section" id="task-update-upgrading-txt-with-two-more-adjustments">
<h3>[TASK] Update Upgrading.txt with two more adjustments</h3>
<p>Add the needed changes for getOriginalRequestMappingResults() and
getOriginalRequest()-&gt;getArguments() to the upgrading instructions.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37762">#37762</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=8cad35ab295fe0a75f32cbdca3465a01c5769f41">8cad35a</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-dead-symlinks-from-release-archives">
<h3>[BUGFIX] Remove dead symlinks from release archives</h3>
<p>The default Surf configuration symlinks Data and Configuration
to a shared folder. For release archives that leads to dead
symlinks being in the archives.</p>
<p>This changes disables both symlink tasks in the release
deployment descriptor.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37569">#37569</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=70608e77eeb7ec75ad0e57e5c6fd9f034cefee96">70608e7</a></li>
</ul>
</div>
<div class="section" id="task-adjust-surf-deployment-descriptor">
<h3>[TASK] Adjust Surf deployment descriptor</h3>
<p>The deployment descriptor used to release archives of FLOW3
needed a little adjustment.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=abb312c262cebcbec429262b8384ebbeb4c4602d">abb312c</a></li>
</ul>
</div>
<div class="section" id="task-amend-upgrade-instructions">
<h3>[TASK] Amend upgrade instructions</h3>
<p>This brings the update instructions in sync with the
amended version from the wiki.</p>
<p>Some edits have been applied and also synced back to
the wiki.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=7bd58320bd058ff7e2bbdcae1fa5ac471b3eb840">7bd5832</a></li>
</ul>
</div>
<div class="section" id="id6">
<h3>[TASK] Update Upgrading.txt</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=698c177691cb5c24b96cad5d30113827eac5bafd">698c177</a></li>
</ul>
</div>
<div class="section" id="task-change-comment-on-rewritebase-directive">
<h3>[TASK] Change comment on RewriteBase directive</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=36de07efc1bf0475c98263203a44b69b0ec7ff7b">36de07e</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-settings-yaml-example-a-working-example">
<h3>[BUGFIX] Make Settings.yaml.example a working example</h3>
<p>With this change the Settings.yaml.example can be used as is,
because the key &#8220;doctrine&#8221; is commented out now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33410">#33410</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=b7570a03555b9f7f362e9af32ada0a0982172eea">b7570a0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-wrong-url-to-tutorials-page-in-readme-txt">
<h3>[BUGFIX] Fixes wrong URL to tutorials page in Readme.txt</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33031">#33031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=0ceedb094ebae330ea3b90faf2c4f5002466981d">0ceedb0</a></li>
</ul>
</div>
<div class="section" id="task-document-yaml-syntax-changes-for-upgrade">
<h3>[TASK] Document YAML syntax changes for upgrade</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33268">#33268</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=6d97b48bf5642e20e677cc4aa4c9cfde4142f1ec">6d97b48</a></li>
</ul>
</div>
<div class="section" id="task-update-upgrading-txt-for-1-1">
<h3>[TASK] Update Upgrading.txt for 1.1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=0807179c909e87214dacf4b91ac53e2e1f7b6391">0807179</a></li>
</ul>
</div>
<div class="section" id="task-adjust-surf-deployment-descriptor-to-new-git-option">
<h3>[TASK] Adjust Surf deployment descriptor to new git option</h3>
<p>The branch option is now git-checkout-branch.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=d48af1a18c9e4352db2f74e8ce60d8b9a46ee8b9">d48af1a</a></li>
</ul>
</div>
<div class="section" id="task-add-shortcuts-folder-to-gitignore">
<h3>[TASK] Add .Shortcuts folder to .gitignore</h3>
<p>Related to <a class="reference external" href="https://review.typo3.org/7164">https://review.typo3.org/7164</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=0f55c7faa307976ef38746ac65df2ddffba589b8">0f55c7f</a></li>
</ul>
</div>
<div class="section" id="task-update-surf-configuration-for-release-job">
<h3>[TASK] Update Surf configuration for release job</h3>
<p>This updates the Surf configuration to interact with
the TYPO3.Release package on the FLOW3 website.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31896">#31896</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=757364cf219b84ba78890b749cf7f55223f0909f">757364c</a></li>
</ul>
</div>
<div class="section" id="task-split-doctrine-package-into-three-parts">
<h3>[TASK] Split Doctrine package into three parts</h3>
<p>Following our vendor name concept, the package Doctrine would need to
include all of the code from the Doctrine project. Obviously it doesn&#8217;t.
To solves this (and to make maintenance easier), the package has been
split into three separate packages.</p>
<p>This change adjusts the FLOW3 base distributions as needed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31219">#31219</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=b44e86ebde92616e6725ef07cfdb1b68325ddd15">b44e86e</a></li>
</ul>
</div>
<div class="section" id="bugfix-clean-up-configuration-readme">
<h3>[BUGFIX] Clean up configuration README</h3>
<p>Removes mentions of the non-used files FLOW3.yaml and Packages.yaml.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31215">#31215</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=41eb1f780c1bcb4323bfbb214c2361b3fd109a49">41eb1f7</a></li>
</ul>
</div>
</div>
<div class="section" id="common">
<h2>Common</h2>
<div class="section" id="task-refactor-flow3-distribution-build-into-generic-and-specific-parts">
<h3>[TASK] Refactor FLOW3 Distribution Build into generic and specific parts</h3>
<p>As we do not only build a single distribution but multiple ones using Jenkins,
we should refactor the common environment-variable handling into a base setup
to be included in each individual deployment.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38500">#38500</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=5a9f769301faa498aa6a799dff8e520655f15771">5a9f769</a></li>
</ul>
</div>
<div class="section" id="task-disable-test-timeout-when-using-php-invoker">
<h3>[TASK] Disable test timeout when using PHP_Invoker</h3>
<p>when PHP_Invoker is installed, PHPUnit will by default only let a test
run for one second. This kills most of our functional tests when being
run in this setup.</p>
<p>Setting this default value to 0 (undefined) fixes the problem.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=ce42ca6fd9b372f4009c8778edd49ae5ce72efbb">ce42ca6</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-relocated-functionaltestrequesthandler">
<h3>[TASK] Adjust to relocated FunctionalTestRequestHandler</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=ab6e4cbe067c14ec5b60430aa539a8098bfbef3a">ab6e4cb</a></li>
</ul>
</div>
<div class="section" id="task-make-typo3-flow3-var-dump-available-in-unit-tests">
<h3>[TASK] Make TYPO3\FLOW3\var_dump() available in unit tests</h3>
<p>FLOW3&#8217;s var_dump() function could not be used in unit tests
because the class loader has no way to derive the path and
filename from the function name. In a non-testing context
that&#8217;s no problem as the containing file is loaded anyway
but that was not the case in a unit testing context.</p>
<p>Now the Debugger class is loaded in the unit test bootstrap.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=faec8c5bde4259010eae5f676ec336af35b98dee">faec8c5</a></li>
</ul>
</div>
<div class="section" id="task-rename-functional-test-request-handler">
<h3>[TASK]&nbsp;Rename functional test request handler</h3>
<p>The functional test request handler was moved to the Tests\Functional
namespace after the recent class loader change.</p>
<p>Related to <a class="reference external" href="https://review.typo3.org/7252">https://review.typo3.org/7252</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=948a244ef527ecfb8aea64f20d69b5ddb483be0c">948a244</a></li>
</ul>
</div>
<div class="section" id="task-adjust-unit-test-bootstrap">
<h3>[TASK] Adjust Unit Test bootstrap</h3>
<p>The complete removal of the whitelist in change I7ec62f19 made the
generated HTML coverage report unusable and includes any code. But we
can ignore coverage for Doctrine and Symfony.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32333">#32333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=78587cbed4cb78e1c6f49a5a5b66c0bc36d10a4f">78587cb</a></li>
</ul>
</div>
<div class="section" id="task-adjust-functional-test-bootstrap">
<h3>[TASK] Adjust Functional Test bootstrap</h3>
<p>This adjusts the functional test bootstrap for PHP to fit the
new bootstrap and request handling mechanism. Also removes
a whitelist filter from the unit test bootstrap which prevented
using code coverage while executing single tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32333">#32333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=9ee94c7265b879525518fec8c284a6c51dbf9cff">9ee94c7</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-ping-task-files-remove-phpunit-tasks">
<h3>[TASK] Clean up ping task files; remove phpunit tasks</h3>
<p>The phpunit tasks can be done more efficient by using phpunit
directly, thus they are dropped. Some other legacy cruft has
been removed as well.</p>
<p>I re-enabled some commented out stuff in exchange. :)</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=17cf7a3f2206d7afcc1be15df845bd30bda8425a">17cf7a3</a></li>
</ul>
</div>
<div class="section" id="task-exclude-yaml-and-doctrine-sources-from-php-fileset">
<h3>[TASK] Exclude Yaml and Doctrine sources from PHP fileset</h3>
<p>This fileset (files-php) is used for code metrics, and  we do not really
want our CI server to compute those for 3rd party code.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=b8565ba9b237e02581b0ede62552c7da68202281">b8565ba</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine-common">
<h2>Doctrine.Common</h2>
<div class="section" id="task-update-to-2-2-2">
<h3>[TASK] Update to 2.2.2</h3>
<p>DataFixtures is at f201391349f3dc6bd9c9c698927ea7c78104c461.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37468">#37468</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=63f85c63a6f8d992b36c71a617213836d3b7ba77">63f85c6</a></li>
</ul>
</div>
<div class="section" id="task-fixes-code-style">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=df66b8f797842e6388f19da98f7fa3b6c50909b9">df66b8f</a></li>
</ul>
</div>
<div class="section" id="task-update-to-2-2-1">
<h3>[TASK] Update to 2.2.1</h3>
<p>DataFixtures is at ffee818a6e3af526b774de11b690a36512fa6235.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34760">#34760</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=bd3776c0c0b9ca9b1ce94fabc08d76c1d3a00a87">bd3776c</a></li>
</ul>
</div>
<div class="section" id="task-update-to-2-2-0">
<h3>[TASK] Update to 2.2.0</h3>
<p>DataFixtures is at bed8908ae929562317e5c59dc0bee24f3b63067e.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=81c7bb37b4ca7726a2ff6fa1c189311b31dd50bc">81c7bb3</a></li>
</ul>
</div>
<div class="section" id="task-update-to-current-2-2-0-dev">
<h3>[TASK] Update to current 2.2.0-DEV</h3>
<p>Equivalent to upstream commit 3107f295eb17ed40116ae4cd2499e5c5c3adde42.</p>
<p>DataFixtures is at f09c0840df9cb7968c89acb91a9fa262f158b1c5.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=aea87d6ad6c2ce3381f7ecae2178625dfac8ac74">aea87d6</a></li>
</ul>
</div>
<div class="section" id="task-make-doctrine-common-package-protected">
<h3>[TASK] Make Doctrine.Common package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=926f321366030da85cd97135e98a5ed918f3a104">926f321</a></li>
</ul>
</div>
<div class="section" id="task-isolate-doctrine-common-from-old-doctrine-package">
<h3>[TASK] Isolate Doctrine Common from old Doctrine package</h3>
<p>This change removes DBAL and ORM, moves Common into the classes folder
directly and adjusts metadata as needed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31219">#31219</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=d476728520ae729df49f176656b70334f92536bd">d476728</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine-dbal">
<h2>Doctrine.DBAL</h2>
<div class="section" id="id26">
<h3>[TASK] Update to 2.2.2</h3>
<p>Contains one of our own changes to fix connection charset with MySQL
for PHP &lt; 5.3.6 (<a class="reference external" href="https://review.typo3.org/4587">https://review.typo3.org/4587</a>).</p>
<p>Migrations is at fe98141b1e460baf5ab52f9139e1ae238101b28b.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37468">#37468</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=dc5292c774dd8befcd77790baaa7b3259f9365e5">dc5292c</a></li>
</ul>
</div>
<div class="section" id="task-add-doctrine-common-to-the-dependencies">
<h3>[TASK] Add Doctrine.Common to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=8ef15939e0b505eca65f5cb2d7701b8d4de584e7">8ef1593</a></li>
</ul>
</div>
<div class="section" id="id29">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=4db9ec9e4e8fdf50f63928d6d086b52fca577ed7">4db9ec9</a></li>
</ul>
</div>
<div class="section" id="id31">
<h3>[TASK] Update to 2.2.1</h3>
<p>Contains one of our own changes to fix connection charset with MySQL
for PHP &lt; 5.3.6 (<a class="reference external" href="https://review.typo3.org/4587">https://review.typo3.org/4587</a>).</p>
<p>Migrations is at 9e81984b0f126b0830d9ac6acc2d1da81aba2b94.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=8ecd70a98fddc074bb9be37470892e3d54a6a8b6">8ecd70a</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-mysql-connection-charset-work-on-php-5-3-6">
<h3>[BUGFIX] Make MySQL connection charset work on PHP &lt; 5.3.6</h3>
<p>The charset connection option is built into the DSN, but it is ignored
in PHP below 5.3.6.</p>
<p>This change adds the charset to a SET NAMES command used as value for
\PDO::MYSQL_ATTR_INIT_COMMAND for PHP &lt; 5.3.6 if no init command has been
set by the user.</p>
<p>This was once fixed with <a class="reference external" href="https://review.typo3.org/4587">https://review.typo3.org/4587</a> and the fix got
lost again with <a class="reference external" href="https://review.typo3.org/7672">https://review.typo3.org/7672</a>.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33125">#33125</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=b231de400af149a7e6a980939b067c6177707e3d">b231de4</a></li>
</ul>
</div>
<div class="section" id="id34">
<h3>[TASK] Update to current 2.2.0-DEV</h3>
<p>Equivalent to upstream commit 15bcd83a392df19de22cde6c9d5b28c1f7207751.</p>
<p>Migrations is at 9610f6bfe3bfb99c98da1f425e6c71bf02e52aaf.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=e5a49320058057c9078b514f6c7191f179dfe17a">e5a4932</a></li>
</ul>
</div>
<div class="section" id="task-make-doctrine-dbal-package-protected">
<h3>[TASK] Make Doctrine.DBAL package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=dbd853797b1df9baa66a7aac9bb72ff276188421">dbd8537</a></li>
</ul>
</div>
<div class="section" id="task-isolate-doctrine-dbal-from-old-doctrine-package">
<h3>[TASK] Isolate Doctrine DBAL from old Doctrine package</h3>
<p>This change removes Common and ORM, moves DBAL into the classes folder
directly and adjusts metadata as needed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31219">#31219</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=7ccdcd035924e3b3de53d6d00177c44a9d623c55">7ccdcd0</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine-orm">
<h2>Doctrine.ORM</h2>
<div class="section" id="bugfix-fix-clone-side-effects-in-persistentcollection">
<h3>[BUGFIX] Fix clone side effects in PersistentCollection</h3>
<p>When a PersistentCollection (PC) is loaded and is cloned before it is
initialized, anything that is already in that collection will be duplicated
if the collection is initialized after it has been marked dirty. The cause is
a too late clone operation on the internal (Array)Collection (AC) in the PC.</p>
<ul class="simple">
<li>PC is loaded, but not initialized. The internal AC is empty.</li>
<li>PC is cloned. PC&#8217; calls initialize() in __clone()</li>
<li>PC&#8217; fills AC (as that has not been cloned yet)</li>
<li>PC&#8217; clones AC</li>
</ul>
<p>As a result the AC in PC now contains elements, but PC still is
uninitialized. If PC is afterwards initialized and dirty, the elements
already in AC will be considered new and added again to the AC.</p>
<p>The effect will be constraint violations in join tables due to duplicate
entries.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37476">#37476</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=bb917bf601df2baf220e0a9612c9f609d5ed16a4">bb917bf</a></li>
</ul>
</div>
<div class="section" id="id39">
<h3>[TASK] Update to 2.2.2</h3>
<p>Upstream release plus two of our own changes on top:</p>
<ul class="simple">
<li>12c6917 Throw exception if no identifier can be found in UnitOfWork</li>
<li>f2b493f In proxies add docblocks and move __wakeup() call around</li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37468">#37468</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=43d79933ae2536ba9f07cc86fee7502af7c35ac5">43d7993</a></li>
</ul>
</div>
<div class="section" id="task-add-doctrine-dbal-to-the-dependencies">
<h3>[TASK] Add Doctrine.DBAL to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=53d845c9246e127db42d01d9feff5f29ebad12ae">53d845c</a></li>
</ul>
</div>
<div class="section" id="id42">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=fc55d08be898e4039c4f2fb07be52c1ce8a3bc9a">fc55d08</a></li>
</ul>
</div>
<div class="section" id="id44">
<h3>[TASK] Update to 2.2.1</h3>
<p>Upstream release plus three of our own changes on top:</p>
<ul class="simple">
<li>9bfd46b Use temporary file and rename for proxy class creation</li>
<li>1582551 Throw exception if no identifier can be found in UnitOfWork</li>
<li>5fba342 In proxies add docblocks and move __wakeup() call around</li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34760">#34760</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=d2ce448456fe3d7b1ba2bd4b11c20433c27178bf">d2ce448</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-atomic-writes-in-proxy-factory">
<h3>[BUGFIX] Fix atomic writes in proxy factory</h3>
<p>This fixes the atomic writes check so it actually works.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/27989">#27989</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=07cd1a61c32538c2a4484e6e52faacc366f99292">07cd1a6</a></li>
</ul>
</div>
<div class="section" id="id47">
<h3>[TASK] Update to 2.2.0</h3>
<p>Upstream release plus three of our own changes on top:</p>
<ul class="simple">
<li>96f0bd1 Use temporary file and rename for proxy class creation</li>
<li>f846d64 Throw exception if no identifier can be found in UnitOfWork</li>
<li>fe0b562 In proxies add docblocks and move __wakeup() call around</li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=d6321bb480a30d9312e4308ae9b5b5fef14b12ad">d6321bb</a></li>
</ul>
</div>
<div class="section" id="id49">
<h3>[TASK] Update to current 2.2.0-DEV</h3>
<p>Upstream commit d34c39555d356e771452a6f397a4cb1146594304 plus four
of our own changes on top.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=fdbbdc51965a89b3ea8e9b1bbcb0cd2d89d9124c">fdbbdc5</a></li>
</ul>
</div>
<div class="section" id="task-make-doctrine-orm-package-protected">
<h3>[TASK] Make Doctrine.ORM package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=fa83423fe1c7e21451ffc386e72bee1b7a1f053e">fa83423</a></li>
</ul>
</div>
<div class="section" id="task-isolate-doctrine-orm-from-old-doctrine-package">
<h3>[TASK] Isolate Doctrine ORM from old Doctrine package</h3>
<p>This change removes Common and DBAL, moves ORM into the classes folder
directly and adjusts metadata as needed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31219">#31219</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=729f21b4586a2db0ae0ef76e81bc8a98f91a43b9">729f21b</a></li>
</ul>
</div>
</div>
<div class="section" id="symfony-component-domcrawler">
<h2>Symfony.Component.DomCrawler</h2>
<p>No changes</p>
</div>
<div class="section" id="symfony-component-yaml">
<h2>Symfony.Component.Yaml</h2>
<div class="section" id="task-clean-up-package-xml">
<h3>[TASK] Clean up Package.xml</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Symfony.Component.Yaml.git?a=commit;h=db6daedfba2286bfd501d715d5c72041203c2d04">db6daed</a></li>
</ul>
</div>
<div class="section" id="id53">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Symfony.Component.Yaml.git?a=commit;h=5d0bff830c3612ade80dc0d9221371fa67b0bf62">5d0bff8</a></li>
</ul>
</div>
<div class="section" id="bugfix-update-yaml-component">
<h3>[BUGFIX] Update YAML component</h3>
<p>This updates the Symfony YAML component from 1.0.6 to 2.1.0.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31289">#31289</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Symfony.Component.Yaml.git?a=commit;h=cb659bca12875e06f4f91f2055f8db24232bbda5">cb659bc</a></li>
</ul>
</div>
<div class="section" id="task-make-yaml-package-protected">
<h3>[TASK] Make Yaml package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Symfony.Component.Yaml.git?a=commit;h=b7947423346c10399e25a275acd3d6e2ec7bc123">b794742</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="add-changelog-for-flow3-1-0-6">
<h3>Add changelog for FLOW3 1.0.6</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3fd525c7b260aa4ec90e603b3d9ba8ce2697c65a">3fd525c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-reflection-on-php-5-3-16">
<h3>[BUGFIX] Fix reflection on PHP 5.3.16</h3>
<p>The fix for <a class="reference external" href="https://bugs.php.net/62715">https://bugs.php.net/62715</a> landed in PHP 5.3.16, and because of
<a class="reference external" href="https://bugs.php.net/62874">https://bugs.php.net/62874</a> reflection fails (in Production context) with a
pretty unhelpful exception:</p>
<blockquote>
<div>Fatal error: Uncaught exception … with message &#8216;Parameter is not optional&#8217; in …</div></blockquote>
<p>This change adds an additional check with isOptional() to the relevant code
part.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40003">#40003</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=28c82ae23d90b17f6514b0cd93fae17dd7bc0dc7">28c82ae</a></li>
</ul>
</div>
<div class="section" id="task-update-package-xml-with-new-version-number">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1b1ed7d2b6c439af1d103847b739ad9833186ea1">1b1ed7d</a></li>
</ul>
</div>
<div class="section" id="bugfix-alphanumeric-validator-fails-on-umlauts">
<h3>[BUGFIX] Alphanumeric-Validator fails on umlauts</h3>
<p>This change adds support for umlauts in the AlphanumericValidator,
by changing the regex pattern to [:alnum:] and adding utf-8 mode flag.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35295">#35295</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2fbc3d4437439b640dad8aeceea406c62e4cfc17">2fbc3d4</a></li>
</ul>
</div>
<div class="section" id="cleanup-some-cgl-fixes">
<h3>[CLEANUP] Some CGL fixes</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=437c2a06ace0be3af30450a4313fb057b7f70c4a">437c2a0</a></li>
</ul>
</div>
<div class="section" id="task-fix-markup-errors-on-documentation">
<h3>[TASK] Fix markup errors on documentation</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6878b35dacb71a360472140d6386e91a5d68c352">6878b35</a></li>
</ul>
</div>
<div class="section" id="task-add-http-status-code-to-exceptions">
<h3>[TASK] Add HTTP status code to exceptions</h3>
<p>Currently if an exception is rendered with either Debug-
or ProductionExceptionHandler the HTTP status is set to
&#8220;500 Internal Server Error&#8221;.</p>
<p>This change adds a property &#8220;statusCode&#8221; to the FLOW3
base Exception allowing to set a custom HTTP status code.</p>
<p>This also sets status codes for some of the FLOW3 exceptions</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27798">#27798</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3a8c98e9cc88783d39d9478afdc4d2da319dba0c">3a8c98e</a></li>
</ul>
</div>
<div class="section" id="feature-cookie-management-support">
<h3>[FEATURE] Cookie management support</h3>
<p>This implements the cookie management feature
which previously only existed as a stub in the
HTTP foundation.</p>
<p>This patch also contains the corresponding tests
and documentation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39836">#39836</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ea2f7f2b489dfbb5240472750d83c851d5e6a2a7">ea2f7f2</a></li>
</ul>
</div>
<div class="section" id="wip-task-new-chapter-mvc">
<h3>[WIP][TASK] New chapter: MVC</h3>
<p>This adds a new chapter to The Definitive Guide.</p>
<p>Also adjust some mentions of &#8220;DocComment&#8221; in other chapters
and adds a stub for a section about HMAC to the security chapter.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/3881">#3881</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9fec020c332b1be058d5b615ad60adaf5cec4340">9fec020</a></li>
</ul>
</div>
<div class="section" id="task-add-section-about-uri-class-in-http-chapter">
<h3>[TASK] Add section about Uri class in HTTP chapter</h3>
<p>This adds some explanation for the use of the Uri class.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39424">#39424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9483632f0b08e924b83a7f703350d31ca5796f46">9483632</a></li>
</ul>
</div>
<div class="section" id="task-new-chapter-http">
<h3>[TASK] New chapter: HTTP</h3>
<p>This adds a new chapter to The Definitive Guide</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39424">#39424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=db3fdbedec9e16ffa15e31c10cc47a2f86a46f98">db3fdbe</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-some-outdated-code-examples-in-part-ii">
<h3>[BUGFIX] Fix some outdated code (examples) in Part II</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39374">#39374</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7324b7be52d02681f0c5b639adb0f07e51802e44">7324b7b</a></li>
</ul>
</div>
<div class="section" id="feature-configurable-cli-subrequest-environment-variables">
<h3>[FEATURE] Configurable CLI Subrequest environment variables</h3>
<p>When debugging with xdebug, a major difficulty is that in development
and functional tests, there are always two requests being executed:
The main request and a CLI request inside.</p>
<p>Now, most IDEs do not support the (optional) feature of multi-threaded
PHP debugging, effectively stopping the sub-request and also the main
request in this case.</p>
<p>With this change it&#8217;s possible to change xdebug configuration settings
for the CLI subrequests making it possible to debug them individually.
By default the remote port is now changed from 9000 to 9001 in
Development and Testing context. So you can debug the subrequest by
configuring your IDE to listen on port 9001.</p>
<p>Apart from that, this change allows you to set arbitrary environment
variables by adding entries to the
TYPO3.Flow.core.subRequestEnvironmentVariables setting.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39648">#39648</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b7b5dfdb36f37498e06173887b765cb4e1fb8d82">b7b5dfd</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-warning-about-property-injection-in-test">
<h3>[BUGFIX] Fix warning about property injection in test</h3>
<p>The DependencyInjectionTest testcase has a test called
injectionInParentClassIsDoneOnlyOnceOnCreationOfObject, leading to FLOW3
trying to use the inject method for the property
&#8220;ionInParentClassIsDoneOnlyOnceOnCreationOfObject&#8221;…</p>
<p>This change renames the test method to fix this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39681">#39681</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=637e604d1af9c9142e67c9934ba64b6f8b0adf89">637e604</a></li>
</ul>
</div>
<div class="section" id="task-new-chapter-command-line">
<h3>[TASK] New chapter: Command Line</h3>
<p>This is a new chapter for The Definitive Guide.
Also marked the executeCommand() method in the
Scripts class as an &#64;api function.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38944">#38944</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a444d4095f3b244c38b7c4555345770d1ef2f5e2">a444d40</a></li>
</ul>
</div>
<div class="section" id="bugfix-disable-proxy-building-for-http-classes">
<h3>[BUGFIX] Disable proxy building for Http classes</h3>
<p>This disables proxy building for (most of) the classes in
the Http part of FLOW3.</p>
<p>They are not needing it and some would circumvent the built
proxy because they are instantiated statically.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39005">#39005</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=aaa3027158ee86770f5c413812f20bf2afb28f47">aaa3027</a></li>
</ul>
</div>
<div class="section" id="bugfix-corrected-annotation-of-assign-method-in-viewinterface">
<h3>[BUGFIX] Corrected annotation of assign method in ViewInterface</h3>
<p>A view is basically intended to be able to get arbitrary values,
hence data types assigned, so the annotation gets corrected to
accomodate for this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39293">#39293</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4990b14673b6f661a0fecfbd635f4d33e6b12d50">4990b14</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-arguments-rendering-for-dumped-backtraces">
<h3>[BUGFIX] Fix arguments rendering for dumped backtraces</h3>
<p>When an exception was dumped to Data/Logs/Exceptions/…txt all
arguments were doubled, once with parenthesis around them, once
without. This change fixes this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38625">#38625</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=545a0b20adfd00920762f761e69c750434f4c279">545a0b2</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow3-s-var-dump-still-chokes-on-doctrine-collections">
<h3>[BUGFIX] FLOW3&#8217;s var_dump() still chokes on Doctrine collections</h3>
<p>Using Doctrine\Common\Util\Debug::export() to render doctrine
collections leads to an exception because our Debugger expects
a string and doctrine&#8217;s debugger returns an array.
This change fixes this by post processing the result.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39286">#39286</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37481">#37481</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0aa62e5227ed5d4d4daa410ee7677a7dd4ff7e28">0aa62e5</a></li>
</ul>
</div>
<div class="section" id="bugfix-rsawalletservice-save-keys-only-if-modified">
<h3>[BUGFIX] RsaWalletService: Save keys only if modified</h3>
<p>This patch adds a check to the shutdown() method of the
RsaWalletServicePhp to make sure that the keys are only
saved to disk if they were actually modified.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39267">#39267</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d8ada91c3b28422dc397448287d8ba46fbf078cd">d8ada91</a></li>
</ul>
</div>
<div class="section" id="bugfix-missing-setting-namespace-in-error-message">
<h3>[BUGFIX] Missing setting namespace in error message</h3>
<p>When an invalid PHP binary is found, the error message hint at setting
the path in settings misses the setting namespace TYPO3 in the beginning.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39142">#39142</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3402cd673d55288b388be4d74cb0c759934c4f84">3402cd6</a></li>
</ul>
</div>
<div class="section" id="task-fix-partial-validation-example">
<h3>[TASK] Fix partial validation example</h3>
<p>The partial validation example was flawed. This change updates the
example to an actual working usecase.</p>
<p>Credits to Ruud Alberts for finding.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=20da3954745e9d424381a12512ab09dceb5bce34">20da395</a></li>
</ul>
</div>
<div class="section" id="id77">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ea717f7d7f748d5860284486920ae0bdccf6e511">ea717f7</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-rc2">
<h3>[TASK] Add changelog for FLOW3 1.1.0-rc2</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0a092f071d02a8c23b658a0301848704af0556c9">0a092f0</a></li>
</ul>
</div>
<div class="section" id="id78">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=78b8a86f1467e0f0c36bcd16cbfe4d94a58d5b98">78b8a86</a></li>
</ul>
</div>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>This updates command, type converter and Fluid VH references.</p>
<p>Counterpart to If61f27e9f55a42fc7fd0d10eb87b644f946aef7c.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e9e377903a8698e78314029845e5aef9eaafc6bd">e9e3779</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-broken-links-standardview-template">
<h3>[BUGFIX] Fix broken links StandardView template</h3>
<p>The links pointed to URLs no longer working.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39062">#39062</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=167b85e487ab3619c9200c5c47599d4f8e3693c9">167b85e</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-repositoryinterface">
<h3>[!!!][BUGFIX] Correct RepositoryInterface</h3>
<p>Fixes a docblock and adds __call() to the interface (thus the breaking
change flag), because everyone probably would expect it to be there.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38840">#38840</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d2ea90ac1c02d5bb63cdc3f8d1ac38041e5bee22">d2ea90a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-return-values-of-doctrine-repository-magic-methods">
<h3>[!!!][BUGFIX] Fix return values of Doctrine\Repository magic methods</h3>
<p>Overrides __call from EntityRepository to make the methods return
the expected QueryResultInterface. Also adds support for countBy().</p>
<p>This is marked as a breaking change because if you relied on the
specific return values before, you need to adjust your code.</p>
<p>Along the way the code inside __call() is simplified.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38841">#38841</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=53049d6c5f12450292bd8b7ec6a4c8264c858066">53049d6</a></li>
</ul>
</div>
<div class="section" id="bugfix-have-doctrine-repository-findall-return-a-queryresult">
<h3>[BUGFIX] Have Doctrine\Repository::findAll() return a QueryResult</h3>
<p>This makes the behavior of Doctrine\Repository consistent and
allows the use of findAll() e.g. in combination with widgets.</p>
<p>With this change, findAll() also observes the default ordering
of a repository.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35035">#35035</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38381">#38381</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=936581210737b8f0dd05a7f4e94b283740194418">9365812</a></li>
</ul>
</div>
<div class="section" id="task-correct-typos-in-coding-guidelines">
<h3>[TASK] Correct typos in Coding Guidelines</h3>
<p>This corrects some typos in PartV/CodingGuidelines of the
documentation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=219d22c83b7c3ae2027468abdc597154d2ecc9b4">219d22c</a></li>
</ul>
</div>
<div class="section" id="bugfix-injections-only-on-last-level-of-class-hierarchy">
<h3>[BUGFIX] Injections only on last level of class hierarchy</h3>
<p>Property injections are no longer called for every level of your
class hierarchy, which means they are only executed once now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31179">#31179</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9ca9ac545a9a874075bc908a1b07365fb3420f5d">9ca9ac5</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-abstract-classes-in-ensureaggregaterootinheritancechainconsistency">
<h3>[BUGFIX] Skip abstract classes in ensureAggregateRootInheritanceChainConsistency</h3>
<p>When using an abstract base class for domain models, the checks done in
ensureAggregateRootInheritanceChainConsistency() would fail, even though
it is fine to have an abstract base class not being aggregate root.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31522">#31522</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c01cc4a20553c585b4afc926e5563143aaffc93b">c01cc4a</a></li>
</ul>
</div>
<div class="section" id="task-add-annotation-reference-to-documentation">
<h3>[TASK] Add annotation reference to documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38669">#38669</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ec458ee69fc5a6cde665027e32bb0f6121ed2055">ec458ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-order-of-monitoring-and-proxy-building">
<h3>[BUGFIX] Fix order of monitoring and proxy building</h3>
<p>During bootstrap file monitoring would be run too late,
so that while change detection worked fine, the results
were not used correctly: Reflection data was updated,
but that happened after DI proxy building, so that e.g.
added Inject annotations would not have the expected
effect.</p>
<p>This change moves file monitoring before reflection
initialization to fix this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37574">#37574</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2b09113f409dc67c756c60fd6cf19ca1032c252e">2b09113</a></li>
</ul>
</div>
<div class="section" id="task-document-configuration-validation">
<h3>[TASK] Document configuration validation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38680">#38680</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=736c7c4f5789c09d810a645bbba221e0b8f25415">736c7c4</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-publishingconfiguration-to-be-persisted">
<h3>[BUGFIX] Allow PublishingConfiguration to be persisted</h3>
<p>Any resource publishing configuration attached to a resource could
not be persisted, because the needed mapping information for
Doctrine was missing and the target type of the relation was an
interface.</p>
<p>This change adds an AbstractPublishingConfiguration and the needed
annotations, plus a schema migration.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32826">#32826</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=31f255997d8f9f2c0437a104ac430b3efc0597e2">31f2559</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-f-uri-resource-title-parameter-in-guide">
<h3>[BUGFIX] Remove f:uri.resource title parameter in Guide</h3>
<p>The resource management documentation described a title parameter
for the ResourceViewHelper that ceased to exist a long time ago.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38382">#38382</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f9f3a4fb66abb3aaf24ac6c737f264a7fb6ea776">f9f3a4f</a></li>
</ul>
</div>
<div class="section" id="task-add-typeconverter-reference">
<h3>[TASK] Add TypeConverter reference</h3>
<p>Tweaks the DateTimeConverter docblock to be proper reST.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38646">#38646</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=af7eb9e9d64a257d5865037592e24d7c717e9148">af7eb9e</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-timezone-override-side-effect-in-datetimeconverter">
<h3>[BUGFIX] Fix timezone override side effect in DateTimeConverter</h3>
<p>Specifying a timezone override in DateTimeConverter would lead to
wrong times due to the timezone being applied to the finished date
instance, not upon creation.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35369">#35369</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=195ec432616c2e790b8d6421c9551b89cdd2fa2b">195ec43</a></li>
</ul>
</div>
<div class="section" id="task-create-reflection-manual-page">
<h3>[TASK] Create Reflection manual page</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38561">#38561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7c368357656e7d02506f8204b3dda8fba8e0d0ae">7c36835</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-indentation-in-contributing-to-flow3">
<h3>[BUGFIX] Fix indentation in &#8220;Contributing to FLOW3&#8221;</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38884">#38884</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=227aaacf13299d025c0f542507a9b4e2f543b4bd">227aaac</a></li>
</ul>
</div>
<div class="section" id="task-add-documentation-to-annotation-classes">
<h3>[TASK] Add documentation to annotation classes</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38669">#38669</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=51a4e2c973e9e592fced81e526015217bf3ed1d6">51a4e2c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-use-of-target-in-annotation-classes">
<h3>[BUGFIX] Fix use of Target in annotation classes</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38667">#38667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=280003f29746167f771064008f6bfa0cb95fd97b">280003f</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-execute-bit-on-some-files">
<h3>[BUGFIX] Adjust execute bit on some files</h3>
<p>This fixes the execute bit (and setfilepermissions.sh) so that
no differences are created when setting permissions on a fresh
clone.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36049">#36049</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=272893adddf7bdd4ae979edac7652180f6c97fba">272893a</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-some-code">
<h3>[TASK] Clean up some code</h3>
<p>Fixes some comments, style issues and API usage.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37574">#37574</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8e393d38794c3da3201562dede34649215a99626">8e393d3</a></li>
</ul>
</div>
<div class="section" id="feature-support-teardown-for-functional-tests-in-generic-persistence">
<h3>[FEATURE] Support tearDown for functional tests in generic persistence</h3>
<p>Implement a tearDown method in the generic persistence according to the
Doctrine PersistenceManager. The call is delegated to the underlying
backend.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38785">#38785</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8996d94c01686d010749448351b274be945edbbf">8996d94</a></li>
</ul>
</div>
<div class="section" id="bugfix-memcachedbackendtest-fail">
<h3>[BUGFIX] MemcachedBackendTest fail</h3>
<p>MemcachedBackendTest doesn&#8217;t use TYPO3\FLOW3\Core\ApplicationContext
to initialize MemcacheBackend.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38713">#38713</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=00ff17ef1149bdfa6df5fed07d06d94bd51280bb">00ff17e</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-internalrequestengine-for-each-functional-test">
<h3>[BUGFIX] Reset InternalRequestEngine for each functional test</h3>
<p>Currently all functional tests share the same instance of
\TYPO3\FLOW3\Mvc\Routing\Router because the InternalRequestEngine
is of scope singleton.
This leads to unexpected results and failing tests if tests add
custom routes.</p>
<p>This change fixes this by making the ObjectManager forget the
singleton instance of the request engine after each testrun.
This also reverts the changes that were introduced with
I5a5bf17d00c5be05748a18122dae42989f429221 as they did not
have the expected effect.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38435">#38435</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=06e21083c4f806973bcb1176d6ae74bd473a6ffc">06e2108</a></li>
</ul>
</div>
<div class="section" id="bugfix-baseuri-contains-default-https-port">
<h3>[BUGFIX] BaseUri contains default HTTPS port</h3>
<p>By resolving #37770 now the BaseUri and thus the base tag when
using &lt;f:base /&gt; contains the HTTP port if it&#8217;s not equal to 80.</p>
<p>This adjusts Request and Uri to omit the port if it is equal to
443 and the request scheme is https.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38547">#38547</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37770">#37770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fc7b877445e9172639663f461d2410f157f5fc5d">fc7b877</a></li>
</ul>
</div>
<div class="section" id="task-add-introduction-to-the-guide">
<h3>[TASK] Add &#8220;Introduction&#8221; to the guide</h3>
<p>Added introduction section for the guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=efe74d516d0c82994f28adc1e0867b9be1a74027">efe74d5</a></li>
</ul>
</div>
<div class="section" id="task-functional-tests-for-routing-framework">
<h3>[TASK] Functional tests for Routing Framework</h3>
<p>Adds testing routes to the provided Testing/Routes.yaml
file and adds tests covering mathing and resolving of
arbitrary routes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37608">#37608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=593f84a214b8ac1f432681d2aa74872b86857ea4">593f84a</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-a-code-migration-s-class-name">
<h3>[BUGFIX] Correct a code migration&#8217;s class name</h3>
<p>A code migration class name didn&#8217;t match its file name,
this patch corrects this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38442">#38442</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e175c5223f352ed9a60cd3f6c91562736288459e">e175c52</a></li>
</ul>
</div>
<div class="section" id="id112">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=03bacc61e5de2a9f65698f17b7f137097eaede61">03bacc6</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-rc1">
<h3>[TASK] Add changelog for FLOW3 1.1.0-rc1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8bb3a97b763ff014fbe270a32b4a8d17a8149ff0">8bb3a97</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-the-router-for-each-functional-test">
<h3>[BUGFIX] Reset the router for each functional test</h3>
<p>Currently all functional tests share the same instance of
\TYPO3\FLOW3\Mvc\Routing\Router because the InternalRequestEngine
is of scope singleton.
This leads to unexpected results and failing tests if tests add
custom routes.</p>
<p>This change fixes this by reinitializing the request engine for
each test case that has testableHttpEnabled set to TRUE.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38435">#38435</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fe1e420c73c06d19d3ebef13872237db652ff3e7">fe1e420</a></li>
</ul>
</div>
<div class="section" id="id114">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2e7f224c3fb4c838b8b505ed8d0383c83061edc1">2e7f224</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-check-in-atomic-writes-code">
<h3>[BUGFIX] Fix wrong check in atomic writes code</h3>
<p>Fixes a wrong check in Cache\FileBackend and RsaWalletServicePhp
as well as a bunch of one-line if blocks.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/27989">#27989</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3664972e8be221277fd3443efb7c41cb4d9ed6dc">3664972</a></li>
</ul>
</div>
<div class="section" id="task-minor-typo-corrections-in-code">
<h3>[!!!][TASK] Minor typo corrections in code</h3>
<p>This trivially corrects some typos in code.</p>
<p>As a consequence, the DataNotSerializeableException was renamed
to DataNotSerializableException.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fec3f046d336725bcbdbe39212ef313ec90d4552">fec3f04</a></li>
</ul>
</div>
<div class="section" id="task-remove-trailing-colon-from-example-headlines">
<h3>[TASK] Remove trailing colon from example headlines</h3>
<p>It just looked weird this way…</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bfeeb2ad9584902081c8b1aa5d587001d6ca4c52">bfeeb2a</a></li>
</ul>
</div>
<div class="section" id="task-add-essential-design-patterns-to-the-guide">
<h3>[TASK] Add &#8220;Essential Design Patterns&#8221; to the guide</h3>
<p>Re-uses some AOP verbage from part III of the guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=94d73f3a914df16882f2a6e84917178a768cc8f1">94d73f3</a></li>
</ul>
</div>
<div class="section" id="task-document-routing-feature-appendexceedingarguments">
<h3>[TASK] Document Routing feature &#8220;appendExceedingArguments&#8221;</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35394">#35394</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=833f676ee146ce5a7b1626c83440cca47d06b058">833f676</a></li>
</ul>
</div>
<div class="section" id="bugfix-identityroutepart-should-accept-identity-array">
<h3>[BUGFIX] IdentityRoutePart should accept identity array</h3>
<p>IdentityRoutePart::matchValue() returns an identity array in
the format array(&#8216;__identity&#8217; =&gt; &#8216;&lt;Identifier&gt;&#8217;) (see #37403).</p>
<p>This change ajusts resolveValue() to accept arrays in that
format, too.
This is required for widgets that fetch arguments from the
current request and pass them to the UriBuilder.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38404">#38404</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bd08fb9999a31a8f76173f7b31d6660ce14e4905">bd08fb9</a></li>
</ul>
</div>
<div class="section" id="task-adjust-filename-spelling-to-match-rest-of-package">
<h3>[TASK] Adjust filename spelling to match rest of package</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35298">#35298</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f310050e8b51bb977413762cb7593256f38ba6b0">f310050</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-code-documentation-of-datetimeparser">
<h3>[BUGFIX] Fix code documentation of DatetimeParser</h3>
<p>The parser code documentation would state the parse methods
expect \DateTime instances, but in fact strings are expected.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34050">#34050</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b51a56b7e3be08d2667eb1db399f6fd91a28f73f">b51a56b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-objects-yaml-classname-example-in-guide">
<h3>[BUGFIX] Fix Objects.yaml className example in guide</h3>
<p>The guide still stated that setting className in Objects.yaml
was possible for classes, but it works only for interfaces.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37648">#37648</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3de0e728f9d91bc83ce03ff9051fd0f370cad27e">3de0e72</a></li>
</ul>
</div>
<div class="section" id="task-add-architectural-overview-to-the-guide">
<h3>[TASK] Add &#8220;Architectural Overview&#8221; to the guide</h3>
<p>Based on the introduction from the old DocBook manual,
tweaked and amended.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29266">#29266</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a56ac99b15a86aa1c9aedb57f78c32780368539a">a56ac99</a></li>
</ul>
</div>
<div class="section" id="task-provide-conventions-for-ids-in-xliff-files">
<h3>[TASK] Provide conventions for ids in XLIFF files</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32606">#32606</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=70f56623582d1a203a358c2785b0eaee04570058">70f5662</a></li>
</ul>
</div>
<div class="section" id="task-update-and-link-cgl-on-one-page">
<h3>[TASK] Update and link CGL on one page</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36651">#36651</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fc2d196907bc4d68221cc4b6d92d09480b68cacb">fc2d196</a></li>
</ul>
</div>
<div class="section" id="task-show-up-hints-for-nesting-inline-viewhelpers">
<h3>[TASK] Show up hints for nesting inline ViewHelpers</h3>
<p>This adds a section with some examples about how to nest
and use inline ViewHelpers.
Besides, it does some minor typo and formatting corrections.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34749">#34749</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=70457ec8d7d9aae57221d4c7dccbcddb2c3d156d">70457ec</a></li>
</ul>
</div>
<div class="section" id="bugfix-log-route-values-if-a-route-can-t-be-resolved">
<h3>[BUGFIX] Log route values if a route can&#8217;t be resolved</h3>
<p>This re-introduces logging if a route could not be resolved.
This behaviour was lost with I9605731f78cb1be9b0fb5c439d7149a676b6ccb7</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38172">#38172</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0d3440fc74be4f49628dd0c71aa8ba121e1083a1">0d3440f</a></li>
</ul>
</div>
<div class="section" id="task-update-cgl-on-one-page">
<h3>[TASK] Update &#8220;CGL on one page&#8221;</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36651">#36651</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2e85be9b40c89c5393f2ea77784fc2759c802bc9">2e85be9</a></li>
</ul>
</div>
<div class="section" id="task-add-context-information-to-cache-clearing-commands">
<h3>[TASK] Add context information to cache clearing commands</h3>
<p>When using the flow3:cache:flush commands only the current
cli context is cleared. This is not clear when using the
commands and this change add the context information
to the command output.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38221">#38221</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1ba1631bd5b21ac3fa62341bc90d8f6f9bd281c2">1ba1631</a></li>
</ul>
</div>
<div class="section" id="task-code-cleanup">
<h3>[TASK] Code cleanup</h3>
<p>Does code cleanup, mostly to documentation, but also tweaks
unused variables, missing return statements and similar things.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=02647e4dc260e2c993eab3d88d34f3b364042c8d">02647e4</a></li>
</ul>
</div>
<div class="section" id="id134">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=838fe96829086a485b243badf059dcbbf9327883">838fe96</a></li>
</ul>
</div>
<div class="section" id="task-some-tiny-tweaks-to-the-1-1-0b3-changelog">
<h3>[TASK] Some tiny tweaks to the 1.1.0b3 changelog</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fd417d6e91d92741db5c3fbfdc7a55a448b0e4a4">fd417d6</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-beta3">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta3</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8da82b23127b0e99907374fbcdb96ca904d0386f">8da82b2</a></li>
</ul>
</div>
<div class="section" id="id135">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e7812eef060c19dcc85d66caea43aed8d56022c6">e7812ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-map-file-uploads-to-arguments-if-not-empty">
<h3>[BUGFIX] Only map file uploads to arguments if not empty</h3>
<p>Currently the HTTP request converts the FILES superglobal
to request arguments even if no file has been uploaded.
This leads to an exception when submitting a form without
uploading a file because the property mapper receives a
corrupt source array in that case.</p>
<p>This adjust the HTTP request to only map values from the
FILES superglobal to arguments if a file has been uploaded.</p>
<p>This also tweaks the ResourceTypeConverter to accept
an empty source. Besides the converter now only outputs
filer errors (for too large or corrupt files) to the user.
Server errors (e.g. non-existing/read-only tmp directory)
are logged to the systemLogger.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38184">#38184</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4441c3cb94079e602bcfbebc3c7e10cb95d32b53">4441c3c</a></li>
</ul>
</div>
<div class="section" id="bugfix-inform-about-possible-cause-for-no-class-schema-found">
<h3>[BUGFIX] Inform about possible cause for &#8220;No class schema found&#8221;</h3>
<p>When mapping meta data for Doctrine an error about &#8220;No class schema
found for …&#8221; could occur. It would not tell in what model the mapping
was taking place, leaving the user to guesswork. This adds output
of the currently examined class to the exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37547">#37547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=82e8f439859418654723011431c4a3ed8f2a5a6c">82e8f43</a></li>
</ul>
</div>
<div class="section" id="task-fix-section-about-resources-in-flow3-manual">
<h3>[TASK] Fix section about Resources in FLOW3 manual</h3>
<p>This fixes the Fluid code snippet of the resource upload example
in the Resource Management section.
Besides this adds a sample domain model to make this easier to
understand.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=27951cf889df5b82e87ba01c05083c3c688ae1a3">27951cf</a></li>
</ul>
</div>
<div class="section" id="bugfix-routing-cache-only-works-for-one-request">
<h3>[BUGFIX] Routing cache only works for one request</h3>
<p>Currently the routing uses a TransientMemory cache backend by
default. Besides, objects in the routing values are converted
to hashes using spl_object_hash() - which generates a new hash
for every request.</p>
<p>This change configures the RouterCachingAspect to use a
SimpleFile cache backend and adjusts the aspect to use the
persistence manager in order to convert objects to their
identifiers before creating cache entries.</p>
<p>This also adds a signal to the FunctionalTestCase base
class that flushes the routing caches on teardown.</p>
<p>Furthermore this adds two convenience methods
getLastMatchedRoute() and getLastResolvedRoute() to the router
which should make debugging and testing easier.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38172">#38172</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=de4ea73dc015b18d7e2ed887e66d3d49a3ccc8bd">de4ea73</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-mapper-should-distinguish-between-error-and-null">
<h3>[BUGFIX] Property mapper should distinguish between error and NULL</h3>
<p>Currently, when a nested type converter returns NULL, this is silently
caught by the property mapper. Thus, it is not possible to reset e.g.
an integer value to NULL again.</p>
<p>This change fixes that behavior, and adds a functional test for it.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35136">#35136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ca4ef91cee2ecb84fa8d8abcd24418a1e83d3c16">ca4ef91</a></li>
</ul>
</div>
<div class="section" id="task-documentation-corrections-each-minor">
<h3>[TASK] Documentation corrections, each minor</h3>
<p>Some additional corrections, basically typo corrections,
for the manual.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=53227d03a0aaeb15820640a58f14dae2a7b39729">53227d0</a></li>
</ul>
</div>
<div class="section" id="task-update-fluid-viewhelper-reference">
<h3>[TASK] Update Fluid ViewHelper reference</h3>
<p>This adds format.identifier documentation and a depreciation
notice for identity.json to the Fluid VH reference.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ff2fc38d01fd04d1610d506eb96fd09032db447a">ff2fc38</a></li>
</ul>
</div>
<div class="section" id="bugfix-non-standard-ports-are-now-considered-by-httprequest">
<h3>[BUGFIX] Non-standard ports are now considered by HttpRequest</h3>
<p>Ports that are not 80 for HTTP or 443 for HTTPS were simply not
passed through to the Request when being created by the create()
method.</p>
<p>Also Uri will now set the port to 443 for HTTPS if no port is
given in the string handed to the constructor.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37770">#37770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=091a37f7ab8332fe69b79df5659bf1559235099a">091a37f</a></li>
</ul>
</div>
<div class="section" id="bugfix-uri-respects-query-and-fragment-even-without-path">
<h3>[BUGFIX] Uri respects query and fragment even without path</h3>
<p>Corresponding to the appropriate RFC 3986, section 3.3
the query and fragment indeed may be present also if no
path is given.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37903">#37903</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c0a7fc5ce2048cc44ca0915dafaf473c479a9ede">c0a7fc5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-recursion-detection-in-instantiateclass">
<h3>[BUGFIX] Fix recursion detection in instantiateClass</h3>
<p>When in ObjectManager-&gt;instantiateClass() the speedup case was
used, recursion detection would potentially fail, as it returns
early without removing the class name from the list of classes
currently being instantiated.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37997">#37997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b898eb9b2f91d8e7bf3572093ac761c6741c24ba">b898eb9</a></li>
</ul>
</div>
<div class="section" id="bugfix-corrected-uri-host-regular-expression">
<h3>[BUGFIX] Corrected &#8220;Uri host&#8221; regular expression</h3>
<p>The regular expression verifying the validity of
a host name in Uri&#8217;s setHost method was of an incorrect
syntax leading to a PHP error message.
Besides correcting that, this patch adds a Test to
proof the intended functionality.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37554">#37554</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4257faebb635394c9b0bff1d6139be147be5975f">4257fae</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-mapper-chokes-on-already-converted-objects">
<h3>[BUGFIX] Property Mapper chokes on already-converted objects</h3>
<p>This happens for example when using the TYPO3.Form Project with a DatePicker,
which already transforms the value to the correct data type.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36988">#36988</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c2caff2490ee39b6b5c032fe713c315f72e00e7a">c2caff2</a></li>
</ul>
</div>
<div class="section" id="feature-configuration-validation-through-adapted-json-schema">
<h3>[FEATURE] Configuration validation through (adapted) JSON Schema</h3>
<p>Implementation of a PHP array schema validator modeled using the
JSON Schema specification as guideline.</p>
<p>The following CLI commands which utilize the validator are provided:</p>
<ul class="simple">
<li>configuration:validate validates the configuration of a certain type
with respect to the provided schemata. The schema files are searched
for in Resources/Private/Schema of all active packages.</li>
<li>configuration:generateschema is a kickstarter which generates a basic
schema to be used as a starting point for further adjustments</li>
</ul>
<p>Furthermore, this change includes schemata for all FLOW3 settings and the other
configuration types (Caches, Objects, Policy and Routes).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31277">#31277</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=37145b1f83e3828095f2b584ecc02a0eed3cb551">37145b1</a></li>
</ul>
</div>
<div class="section" id="bugfix-correctly-implement-validator-resolver-short-notation">
<h3>[BUGFIX] Correctly implement validator resolver short notation</h3>
<p>Currently, the short notation for validators which has been introduced
with Id807dbfa78ae1388aa8cd53bfc578893eade427c does only support syntax
like TYPO3\FLOW3:EmailAddress; but we should rather support TYPO3.Flow:EmailAddress
as this is how we use package keys at all other places which are not PHP code.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38154">#38154</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33862">#33862</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ead273410f52ae50390c20116e0826e9186b60a4">ead2734</a></li>
</ul>
</div>
<div class="section" id="task-add-note-to-view-chapter-about-default-model-properties">
<h3>[TASK] Add note to View chapter about default model properties</h3>
<p>This note should be made seen the confusion around fixing #35894</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35894">#35894</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=70b26b8f633114611a93158ae81da13e09887c51">70b26b8</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-baseuri-setting-work-for-resource-publishing">
<h3>[BUGFIX] Make baseUri setting work for resource publishing</h3>
<p>The baseUri setting was not observed in the filesystem resource
publisher.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37550">#37550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f75c243edf5e1a0de222e8dc6f930bfc5d020b62">f75c243</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-exception-handling-framework-for-commandcontroller">
<h3>[BUGFIX] Use exception handling framework for CommandController</h3>
<p>The CommandRequestHandler brought its own tiny exception handling
with the main drawback exceptions not being logged anymore, unlike
the Error\AbstractExceptionHandler features.</p>
<p>When handling a CommandRequest, a dedicated CommandExceptionHandler
is involved, taking care of occuring exceptions.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37995">#37995</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a54ebdb9b8f70986aacb96248601596b41e1f152">a54ebdb</a></li>
</ul>
</div>
<div class="section" id="bugfix-internal-request-engine-needs-to-clear-security-context">
<h3>[BUGFIX] Internal Request Engine needs to clear security context</h3>
<p>In order to get the security tokens matching the new request created
in the internal request engine, the security context should be cleared
using the &#8220;clearContext&#8221; method. This means that the tokens will be
matched with the configuration from the routing based on the new request
and not the parent request.</p>
<p>This patch also contains a small enhancement which adds two additional
headers to the virtual browser&#8217;s response containing the code and message
of a possible exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37377">#37377</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ec5121249cf900fac1675014b3c5eaf445db5e39">ec51212</a></li>
</ul>
</div>
<div class="section" id="task-update-code-migration-to-do-two-more-fixes">
<h3>[TASK] Update code migration to do two more fixes</h3>
<p>This adds adjustments for getOriginalRequestMappingResults() and
getOriginalRequest()-&gt;getArguments().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37762">#37762</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8ee6404b73c77b8f25ab651d5617205fd7b559ad">8ee6404</a></li>
</ul>
</div>
<div class="section" id="task-refactor-constructor-argument-of-exceptionhandler-implementors">
<h3>[TASK] Refactor constructor argument of ExceptionHandler implementors</h3>
<p>Moves the redundant constructor method of each AbstractExceptionHandler
implementor to the AbstractExceptionHandler itself.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38002">#38002</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1f3cdea0960f6abd0f4fb6b1bee0e63b65e2c8b7">1f3cdea</a></li>
</ul>
</div>
<div class="section" id="task-fix-markup-errors-in-flow3-manual">
<h3>[TASK] Fix markup errors in FLOW3 manual</h3>
<p>This change fixes another markup issue resulting in rendering
glitches.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e3039f6849ef2e681582bb7c0d6987c2a1d08933">e3039f6</a></li>
</ul>
</div>
<div class="section" id="id158">
<h3>[TASK] Fix markup errors in FLOW3 manual</h3>
<p>This change fixes a number of markup issues resulting in rendering
glitches.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=174cf9c0228ee01f7d0f90b23af4b2961e4ef48a">174cf9c</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-unused-configuration-option-from-settings">
<h3>[BUGFIX] Remove unused configuration option from settings</h3>
<p>This change removes a no longer used/supported option from the
shipped Development configuration.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37966">#37966</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cb2e18d1859b26aa06e360e994b7124ae23df1cd">cb2e18d</a></li>
</ul>
</div>
<div class="section" id="bugfix-discourage-people-to-expose-anything-but-the-web-folder">
<h3>[BUGFIX] Discourage people to expose anything but the Web folder</h3>
<p>This updates the Quickstart to explicitly push people into using Web
as the document root for their web server.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38016">#38016</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b62de73c2eb7b1231a94ebd28e8e89892494877c">b62de73</a></li>
</ul>
</div>
<div class="section" id="task-update-templating-chapter">
<h3>[TASK] Update templating chapter</h3>
<p>Along with some style and markup tweaks this adds details
on XML namespace declaration and XSD generation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9300c1013f23100969bf45023d9e1bdff4f2f4c8">9300c10</a></li>
</ul>
</div>
<div class="section" id="task-update-validation-chapter">
<h3>[TASK] Update validation chapter</h3>
<p>Along with some style and markup tweaks this moves some sections
around and adds details on avoiding recursive/duplicate validation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4e9ebe29f3df59dc9e3a5c6f1c2fda3a256065d4">4e9ebe2</a></li>
</ul>
</div>
<div class="section" id="task-update-object-management-chapter">
<h3>[TASK] Update object management chapter</h3>
<p>This updates the section on custom factories.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=57a5d13c61f4a4ca1849e2692de64d8a314db76d">57a5d13</a></li>
</ul>
</div>
<div class="section" id="task-update-persistence-chapter">
<h3>[TASK] Update persistence chapter</h3>
<p>Some layout/markup tweaks and removed some outdated parts about
the generic PDO persistence we had earlier. Also explain identity
and value object handling in more detail.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f1bda0b8e6bf1bfade6a47ac52ec29366f88b1a4">f1bda0b</a></li>
</ul>
</div>
<div class="section" id="task-update-flow3-manual">
<h3>[TASK] Update FLOW3 manual</h3>
<p>This change removes the glossary and colophon from the guide
and applies mostly markup changes to various parts.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f66193005cb83dcc90151a4b806afba4ca893b14">f661930</a></li>
</ul>
</div>
<div class="section" id="task-session-handling-documentation">
<h3>[TASK] Session handling documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37668">#37668</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=63b7c09ce4964e7d09013a7ee4d3b95dba6693c2">63b7c09</a></li>
</ul>
</div>
<div class="section" id="task-update-security-framework-chapter">
<h3>[TASK] Update Security Framework chapter</h3>
<p>Quick update of the Security Framework chapter to reflect recent
changes in FLOW3. Also some minor spelling error fixes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37672">#37672</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3e918ee71059ea3b36885d599fe38d1fa6e2fde6">3e918ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-phpsession-read-settings-from-phpsession">
<h3>[BUGFIX] Make PhpSession read settings from &#8220;PhpSession&#8221;</h3>
<p>The settings for the PhpSession are read from the key &#8220;PhpSession&#8221; now,
to ensure consistency. Before that they were read from &#8220;PHPSession&#8221;.</p>
<p>You should adjust your settings, but for backwards compatibility
settings from &#8220;PHPSession&#8221; will still be used if present.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37993">#37993</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8a9619abb8404ce98a86d8d267043530d349c1ee">8a9619a</a></li>
</ul>
</div>
<div class="section" id="task-make-validator-resolver-public-api">
<h3>[TASK] Make validator resolver public API</h3>
<p>People should use it when validation is used in custom code instead of
creating validators using new; thus the ValidatorResolver must be marked
as public API.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37665">#37665</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b00d9cc046c2e5ea8f859e191a4dcc99ac4f59fc">b00d9cc</a></li>
</ul>
</div>
<div class="section" id="task-documentation-of-validation">
<h3>[TASK] Documentation of Validation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37666">#37666</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=394f1884d2c496eee6d94a7736205daf3d197b66">394f188</a></li>
</ul>
</div>
<div class="section" id="task-document-utility-functions">
<h3>[TASK] document utility functions</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37669">#37669</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ac4d62af08724fe21871676f83d06586cb0c4e9d">ac4d62a</a></li>
</ul>
</div>
<div class="section" id="task-improve-property-mapping-documentation">
<h3>[TASK] improve Property Mapping Documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37664">#37664</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=95a686c03dd57ca3f98a501ceca4fd310f71f241">95a686c</a></li>
</ul>
</div>
<div class="section" id="task-tiny-docblock-fix-in-doctrinecommandcontroller">
<h3>[TASK] Tiny docblock fix in DoctrineCommandController</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f6e85325ca88c65e5b20d52c0b34fdb6271f9a53">f6e8532</a></li>
</ul>
</div>
<div class="section" id="bugfix-purge-doctrine-proxies-that-are-no-longer-needed">
<h3>[BUGFIX] Purge Doctrine proxies that are no longer needed</h3>
<p>With this change the proxy target directory is emptied before
Doctrine proxies are (re)built, removing outdated proxy classes.</p>
<p>This solves fatal errors when (proxied) classes are removed, and
thus can no longer be found when referenced from their heirs.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/26903">#26903</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=13220e0e23602d7a70e2ffdf1ebd1928a300d040">13220e0</a></li>
</ul>
</div>
<div class="section" id="bugfix-packages-can-be-frozen-in-development-only">
<h3>[BUGFIX] Packages can be frozen in Development only</h3>
<p>Freezing packages was not possible in other contexts than Development
with the related commands. But if a package was frozen according to
PackageStates.php, it would advertise itself as frozen in all contexts.</p>
<p>While this did not seem to have any real effects, it caused confusing
output with the cache:flush command in Production context.</p>
<p>This change makes the Package class ignore the frozen state in any
context except Development and adds a check in the freezePackage()
method of the PackageManager.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37223">#37223</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3bfddf0331b9a7df4272d367f104975ea5a118e4">3bfddf0</a></li>
</ul>
</div>
<div class="section" id="task-no-longer-freeze-packages-by-default">
<h3>[TASK] No longer freeze packages by default</h3>
<p>Due to the possible pitfalls with frozen packages, no packages will be frozen
by default. This way a developer has to learn about frozen packages before he
can be confronted with them (and their pitfalls).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37726">#37726</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=977ba8e14cf080be32f5d51527f7f1dcec1917da">977ba8e</a></li>
</ul>
</div>
<div class="section" id="task-add-validator-reference-to-the-flow3-guide">
<h3>[TASK] Add validator reference to the FLOW3 guide</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bc3473461a6fc062962b00310368e90f66fb119b">bc34734</a></li>
</ul>
</div>
<div class="section" id="task-add-cli-command-reference-to-guide">
<h3>[TASK] Add CLI command reference to guide</h3>
<p>Adds a reference for the CLI commands in the FLOW3
base distribution.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=932d7135b2da8a4c1d2bcf5a5362ac46236d48ce">932d713</a></li>
</ul>
</div>
<div class="section" id="task-add-contributors-list">
<h3>[TASK] Add contributors list</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=74671a3c2d2ba512e8c10f73783dbb65a0423d19">74671a3</a></li>
</ul>
</div>
<div class="section" id="id177">
<h3>[TASK] Update Fluid ViewHelper reference</h3>
<p>This change updates the Fluid VH reference and does some tiny
tweaks along the way.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=42e16cff73fc5918fab2d9b1f195199154e19239">42e16cf</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-0-5">
<h3>[TASK] Add changelog for FLOW3 1.0.5</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d88b1df97d61ea21e9f58accf58c504d62ee3783">d88b1df</a></li>
</ul>
</div>
<div class="section" id="bugfix-integrity-constraint-violation-deleting-resources">
<h3>[BUGFIX] Integrity constraint violation deleting resources</h3>
<p>If you have two resources using the same resource pointer,
deleting a Resource will trigger deletion of the
connected ResourcePointer which then leads to an integrity
constraint violation.</p>
<p>This patch tells doctrine NOT to cascade delete operations.
This will lead to orphan resource-pointers which have to
be deleted manually or on a regular base.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34448">#34448</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8b383f621e0c3a91a39d13b5b677476d71c24d2d">8b383f6</a></li>
</ul>
</div>
<div class="section" id="bugfix-nested-arrays-in-annotation-options-are-no-longer-dropped">
<h3>[BUGFIX] Nested arrays in Annotation options are no longer dropped</h3>
<p>When giving a nested array of options to an annotation the rendered
form in proxy classes was cut off.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37193">#37193</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=62053eb7fce82f961bbdbbb2752e58c37223e71d">62053eb</a></li>
</ul>
</div>
<div class="section" id="task-some-tiny-tweaks-to-the-1-1-0b2-changelog">
<h3>[TASK] Some tiny tweaks to the 1.1.0b2 changelog</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=98b914afee089823869802669fb8c41f5c250299">98b914a</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-beta2">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta2</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fa870e26b7263e3b12f102ec18d826aa57178dad">fa870e2</a></li>
</ul>
</div>
<div class="section" id="id180">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=99815da9f4e7edc5d663945b4bb83e875d534b2e">99815da</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-inconsistent-validate-and-ignorevalidation-behavior">
<h3>[BUGFIX] Fix inconsistent Validate and IgnoreValidation behavior</h3>
<p>The Validate annotation does an ltrim of &#8220;$&#8221; on the argument which the
IgnoreValidation annotation did not do. This change makes the two behave
the same by adding that trim to IgnoreValidation as well.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37385">#37385</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4ae13b54054bfeee87f3f3c1afad561f74ccd303">4ae13b5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-error-message-about-command-controller-classes">
<h3>[BUGFIX] Fix error message about command controller classes</h3>
<p>If you create a CommandController which is not in the &#8220;Controller&#8221; directory
of a package or where the name does not end in &#8220;CommandController&#8221; you will
get an error saying &#8220;Invalid controller class name [...] 1305100019&#8221;.</p>
<p>This change makes the error message a little more helpful.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33139">#33139</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=42f4e5ec0d5a071431d93a7e696956b172a7db91">42f4e5e</a></li>
</ul>
</div>
<div class="section" id="task-identityroutepart-should-return-identity-array">
<h3>[TASK] IdentityRoutePart should return __identity array</h3>
<p>IdentityRoutePart::matchValue() currently returns the identifier
of the ObjectPathMapping record directly.
This makes it difficult to merge arguments with data from the
requestBody (e.g. for PUT requests).</p>
<p>This change adjusts the route part so that it sets $this-&gt;value
to an array in the format array(&#8216;__identity&#8217; =&gt; &#8216;&lt;Identifier&gt;&#8217;)</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37403">#37403</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c7da751a3cba3427acc14c6f5a3d568e05f7da49">c7da751</a></li>
</ul>
</div>
<div class="section" id="task-make-all-parameter-optional-in-package-refreeze">
<h3>[TASK] Make &#8220;all&#8221; parameter optional in package:refreeze</h3>
<p>For freeze, unfreeze and refreeze the default value for
the packageKey is now &#8220;all&#8221;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37358">#37358</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0caf926f31d31f8753eb9f2977f3db92b0280f28">0caf926</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-ip-address-validation">
<h3>[BUGFIX] Fix IP address validation</h3>
<p>The IP address validation done with filter_var() worked
on the development machine running PHP 5.3.12, however,
it failed on the integration server running PHP 5.3.5.
Apparently, the filter_var options for FILTER_VALIDATE_IP
behave differently in these versions.</p>
<p>This patch removes the validation for IPv4 / IPv6 addresses
because they didn&#8217;t make sense anyway.</p>
<p>In that regard: hooray for PHP behavior changes. They actually
exploit bad application code. Sometimes.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37584">#37584</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=aa1a0c5feb6a95691e3df2f40302b69b9c78dae0">aa1a0c5</a></li>
</ul>
</div>
<div class="section" id="feature-provide-way-to-determine-client-ip-address">
<h3>[FEATURE] Provide way to determine client IP address</h3>
<p>This adds a method getClientIpAddress() to the HTTP Request
class. It considers various kinds of environment variables
which are present when using proxies or certain server setups
for determining the actual client IP address.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37584">#37584</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=253a939213dc6aaa8f4f18f6b364972fc82c9d6b">253a939</a></li>
</ul>
</div>
<div class="section" id="feature-content-negotiation-for-media-types">
<h3>[!!!][FEATURE] Content Negotiation for Media Types</h3>
<p>This improves the support for detecting the Media
Type (that is, &#8220;format&#8221; in an ActionRequest context)
based on the request&#8217;s Accept header.</p>
<p>This implementation supports Quality Values and Media
Ranges as specified in RFC 2616.</p>
<p>The way to define the supported formats of a controller
has changed: Previously a class property $supportedFormats
contained a list of filename extensions which would be
supported. This property is not supported anymore.
Instead, controllers may now specify a list of IANA
Internet Media Types in a property $supportedMediaTypes.</p>
<p>The default setting for these supported media types
in ActionController is &#8220;text/html&#8221;. You&#8217;ll need to adjust
your controllers accordingly if you relied on the
$supportedFormats feature.</p>
<p>Also note that the format in ActionRequest is now NULL
by default. The ActionController makes sure to set the
correct format, but if you created your own ActionRequest
for a special purpose, you need to take care of setting
it yourself.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37561">#37561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=29618c52b31a51acb1ddc4fb7796dfdab909cafe">29618c5</a></li>
</ul>
</div>
<div class="section" id="task-create-configuration-directories-only-on-save">
<h3>[TASK] Create configuration directories only on save</h3>
<p>The configuration directories for cached configuration were created
inside the constructor of the ConfigurationManager. This caused the
unit test to create directories outside the VFS. Moving the creation
to the saveConfigurationCache method fixes that. Additionally cleans
up some unit tests related to ApplicationContext and
ConfigurationManager.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2a2284752dc73b432e05bdac6197fc646935e2e4">2a22847</a></li>
</ul>
</div>
<div class="section" id="task-make-extending-genericobjectvalidator-easier">
<h3>[TASK] Make extending GenericObjectValidator easier</h3>
<p>This change moves the check for already validated objects out
of the isValid() method and into validate() instead. Since in
custom validators isValid() is the method to implement, this
makes correct implementation less error-prone.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37363">#37363</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fdc462b04fe21bb35e08191d659f0ccf004849e7">fdc462b</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-validating-instances-more-often-than-needed">
<h3>[BUGFIX] Avoid validating instances more often than needed</h3>
<p>The GenericObjectValidator uses a static variable to store objects being
validated. Objects were still validated over and over because at the
end of isValid() they were detached again.</p>
<p>This change replaces that detach() call with another concept. Now
any validator implementing the new ObjectValidatorInterface can be
given an SplObjectStorage to keep track of instances already
validated.</p>
<p>If you reset that container when it makes sense (before you
actively validate objects) you can avoid validating single instances
more than once in one validation run but still validate at various
points on your logic flow.</p>
<p>If you have implemented your own object validator you should
implement the new ObjectValidatorInterface - the easiest way is
to extend the GenericObjectValidator, if you haven&#8217;t done that
so far.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37363">#37363</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34154">#34154</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=632685da16e266bb1cfdabf223a938d3cf3476f8">632685d</a></li>
</ul>
</div>
<div class="section" id="bugfix-router-overrides-request-arguments">
<h3>[BUGFIX] Router overrides request arguments</h3>
<p>With the reworked Request stack, the router kicks in after
the action request have been built, overriding all arguments
the respective route specifies.</p>
<p>This works for the most cases, but leads to issues when you
try to specify part of a complex target argument via the route
and part via request.</p>
<p>For example if you update a domain model via request body but
specify the model itself through the URI like
<a class="reference external" href="http://domain/products/product-1">http://domain/products/product-1</a> - now the Identity-RoutePart
detects &#8220;product-1&#8221; and turns it into the corresponding
<tt class="docutils literal"><span class="pre">__identity</span></tt>-array but then the Router kicks in and overrides
the &#8220;product&#8221; argument completely resulting in a new object
to be created by the property mapper.</p>
<p>This change adjusts the Router to recursively merge arguments
with the route values instead, with precedence to the route
values.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37445">#37445</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4ffcef32bca0ee9d05c743126ce9c4fd0904d726">4ffcef3</a></li>
</ul>
</div>
<div class="section" id="bugfix-keep-existing-packagestates-php">
<h3>[BUGFIX] Keep existing PackageStates.php</h3>
<p>A wrong check for the existence of the configured &#8220;packagePath&#8221; caused
the loss of custom package states configuration on every request in
development mode or initially in production.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37607">#37607</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d8bb6a461e15cfbd5f6b9b4b1349d1528432171a">d8bb6a4</a></li>
</ul>
</div>
<div class="section" id="task-switch-from-mime-to-media-types">
<h3>[!!!][TASK] Switch from MIME to Media Types</h3>
<p>The term MIME type is outdated, at least if used in a web context. The correct
term is &#8220;Internet Media Type&#8221;. Furthermore, our list of MIME types (or media
types) was not up to date.</p>
<p>This patch introduces a new utility class &#8220;MediaTypes&#8221; which replaces
&#8220;FileTypes&#8221;. Along with the new class comes a script which allows the core team
to conveniently update the list of Media Types and filename extensions.</p>
<p>This is a breaking change as the FileTypes class is deprecated with it. The old
methods are still available but should not be used anymore. A code migration to
use the new ones instead is shipped with the change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fc4c4ab510ddc1705f0c06a40e90335b5301ee4c">fc4c4ab</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-querytest-using-add-twice-for-the-same-object">
<h3>[BUGFIX] Fix QueryTest using add twice for the same object</h3>
<p>The new check for objects being added to persistence broke one
of the tests in the functional QueryTest. Turns out the test
was buggy, adding the same object twice (instead of a different
one).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34527">#34527</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=96b49cb6219d7cccd2bce479cec2f0bcc8c418bb">96b49cb</a></li>
</ul>
</div>
<div class="section" id="bugfix-float-and-integer-converters-do-not-correctly-handle-errors-and-empty-values">
<h3>[!!!][BUGFIX] Float and Integer converters do not correctly handle errors and empty values</h3>
<p>When an argument of a controller action is annotated with
&#64;param integer $var, the validation never fails if a string
is passed to the argument.
This is because the IntegerConverter implicitly casts the
string to an integer. The same problem exists with floats.</p>
<p>This change fixes this by checking the value and returning
an error object if it is not numeric. Besides this tweaks
the FloatConverter to accept float and integer values as
input and it adds a bunch of unit &amp; functional tests.</p>
<p>Furthermore, empty strings are now correctly converted as NULL values.
This is a breaking change if you relied upon the old behavior that
empty values are converted to the number 0.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35136">#35136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=996f20ce3a61fd4c9f4645d64df44235246b79bf">996f20c</a></li>
</ul>
</div>
<div class="section" id="task-tweak-wrong-docblock-in-persistencemanager-add">
<h3>[TASK] Tweak wrong docblock in PersistenceManager-&gt;add()</h3>
<p>The change to fix #34527 introduced a wrong &#64;throws clause in
the method docblock.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34527">#34527</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=102cee20fc823c59f82249109f1898c4f41307db">102cee2</a></li>
</ul>
</div>
<div class="section" id="bugfix-save-relative-package-path-in-packagestates-php">
<h3>[BUGFIX] Save relative package path in PackageStates.php</h3>
<p>Using absolute paths in the PackageStates.php causes problems in a
chroot environment where the absolute path is different in CLI then
in the HTTPD process.</p>
<p>Also relative paths allow to put PackageStates.php under version
control to maintain a specific state even when paths differ
on development and production systems.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37220">#37220</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33719">#33719</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1a688df60b1b57077cdc1fdedbae245eae088dba">1a688df</a></li>
</ul>
</div>
<div class="section" id="bugfix-persistencemanager-add-now-requires-objects-being-new">
<h3>[BUGFIX] PersistenceManager-&gt;add() now requires objects being new</h3>
<p>The add method in repositories did also update existing entities,
this can be dangerous, as it allows an attacker to misuse creation
forms (i.e. a register form) and change existing entities.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34527">#34527</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2290d9febc7b7fc9a5bb0d67d8f89e97c8a345f0">2290d9f</a></li>
</ul>
</div>
<div class="section" id="feature-add-gethttpresponse-to-httprequesthandler">
<h3>[FEATURE] Add getHttpResponse() to HttpRequestHandler</h3>
<p>This adds a getter method to the HTTP request handler
which allows for retrieving the response corresponding
to the currently handled request.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36696">#36696</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=34691272f6a2ea722d475762ada0a27c35eaa3d5">3469127</a></li>
</ul>
</div>
<div class="section" id="feature-make-http-responses-standards-compliant">
<h3>[FEATURE] Make HTTP responses standards compliant</h3>
<p>This adds a new API method to the HTTP response which
is called by a request handler to assure conformity
with RFC 2616 and other related specifications.</p>
<p>While there are a lot of rules to consider, this patch
only introduces a first set of important checks which
are all explained by a corresponding test.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=462fec11312d0ad520e0ced8a201bf7adde2e544">462fec1</a></li>
</ul>
</div>
<div class="section" id="feature-response-setexpires-getexpires">
<h3>[FEATURE] Response setExpires() / getExpires()</h3>
<p>This adds two new convenience methods to the Response
API which allow for setting and retrieving the Expires
HTTP header.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3e5836faa8fb8d70b301521ab6ccc0022d72ae55">3e5836f</a></li>
</ul>
</div>
<div class="section" id="feature-make-message-response-setters-chainable">
<h3>[FEATURE] Make Message / Response setters chainable</h3>
<p>This makes the setter methods of the Message and the
Response class chainable.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=11f8eb8e96ad0f103b384734e17062bd57777d6b">11f8eb8</a></li>
</ul>
</div>
<div class="section" id="feature-more-convenience-methods-in-response">
<h3>[FEATURE] More convenience methods in Response</h3>
<p>This adds a few more convenience methods for setting
headers and cache control directives in the Response
object:</p>
<ul class="simple">
<li>setDate() / getDate()</li>
<li>setLastmodified() / getLastModified()</li>
<li>setMaximumAge() / getMaximumAge()</li>
<li>setSharedMaximumAge() / getSharedMaximumAge()</li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c403439441bd05ab025d3547fca2bf07c25d7d83">c403439</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-cache-control-headers">
<h3>[FEATURE] Support for HTTP Cache-Control headers</h3>
<p>This adds support for the Cache-Control header.
The &#8220;Headers&#8221; object now handles the Cache-Control
header in a special way by keeping track of the
various cache directives separately. Those can
be set through the method setCacheControlDirective()
and get(&#8216;Cache-Control&#8217;) returns a rendered version
based on the previously set directives.</p>
<p>Alternatively, a whole Cache-Control header can also
be set through set() / setHeader(). The given field
value will then be parsed and the individual cache
directives are stored internally.</p>
<p>This patch also corrects the behavior of set() and
get() to convert date / time values always to GMT.
Also added a related note in the comments of the
respective API methods.</p>
<p>This patch also adds the new API methods setPrivate()
and setPublic() to the Response class.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=27f162261c23b560e4fe408a03b7237dede3454a">27f1622</a></li>
</ul>
</div>
<div class="section" id="task-remove-debug-output-in-log-on-configuration-changes">
<h3>[TASK] Remove debug output in log on configuration changes</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c6fa1ba536077670eee753ae67f9357819fa02d6">c6fa1ba</a></li>
</ul>
</div>
<div class="section" id="task-log-skipped-persistall-due-to-closed-entitymanager">
<h3>[TASK] Log skipped persistAll() due to closed EntityManager</h3>
<p>To avoid exceptions we only flush the EM if it is still open. To be
able to spot errors more easily, this adds a log entry if the EM
was closed and flushing was skipped.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/30934">#30934</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9a8bc9b1ae81ed85e5a86da3af377592367385df">9a8bc9b</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-our-var-dump-usable-with-doctrine-collections">
<h3>[BUGFIX] Make our var_dump() usable with Doctrine collections</h3>
<p>For Doctrine\Collection instances we use Doctrine&#8217;s export()
method now to render the dump.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37481">#37481</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=55b5a555ec747466bbe83b3dfa7eea13f3a5010e">55b5a55</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-exception-message-in-repository-remove">
<h3>[BUGFIX] Fix Wrong exception message in Repository-&gt;remove()</h3>
<p>The message would say add() was involved, which is wrong.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37448">#37448</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=91cb54f9ca1c09e0adc42b4e554fcdea115dfa69">91cb54f</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-hint-on-validator-empty-handling-to-migration">
<h3>[BUGFIX] Add hint on validator empty handling to migration</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37231">#37231</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ce852a134f31eed612780c76878feabfbc33ab87">ce852a1</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-put-delete-arguments">
<h3>[FEATURE] Support for HTTP PUT/DELETE arguments</h3>
<p>This adds transparent argument support for arguments
in PUT and DELETE requests which are passed through
the request body. Depending on the content type of
the request, the message body is parsed and then
mapped into arguments for further use in controllers.</p>
<p>The following content content types are currently
supported:</p>
<ul class="simple">
<li>application/x-www-form-urlencoded</li>
<li>application/json</li>
<li>xml</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36913">#36913</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8ce2f8da04576f850dc1bb02c22fdd582f02df86">8ce2f8d</a></li>
</ul>
</div>
<div class="section" id="task-common-base-class-message-for-request-response">
<h3>[TASK] Common base class Message for Request / Response</h3>
<p>This introduces a new class &#8220;Message&#8221; which acts as a
common parent class for the HTTP Request and Response.
It provides shared functionality such as setting and
getting headers, charset handling and more.</p>
<p>It is in line with the terminology in RFC 2616.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4f6850ffcf85c8984a2ba4236f0d8ad2b6ad7009">4f6850f</a></li>
</ul>
</div>
<div class="section" id="task-temporarily-remove-nested-response-code">
<h3>[TASK] Temporarily remove nested response code</h3>
<p>This temporarily removes the code in HTTP Response which
tackles support of nested responses. This feature needs
to be implemented only when most of the other features,
including Cache Control, are in place.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5151598fee6f1b4bd95aa6b750c04fa55e172a29">5151598</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-age-and-date-header">
<h3>[FEATURE] Support for HTTP Age and Date header</h3>
<p>This patch adds API methods and internal handling of
the HTTP &#8220;Date&#8221; and &#8220;Age&#8221; headers, according to
RFC 2616. It also introduces the use of the &#8220;Now&#8221;
singleton as a time reference for age calculations.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=86350b16355bfced486d2ee2af64180ee62efc26">86350b1</a></li>
</ul>
</div>
<div class="section" id="task-annotation-cleanup-for-http-response-tostring-method">
<h3>[TASK] Annotation cleanup for http response __toString method</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=93a8b37e6a8a690587ccdc0766f9a42be3ff6556">93a8b37</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-some-coding-style-issues">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add space to &#8220;foreach(&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3473e746c7806c74fb120aeb5cea952d42164f3f">3473e74</a></li>
</ul>
</div>
<div class="section" id="bugfix-http-response-can-be-cast-to-string-again">
<h3>[BUGFIX] Http Response can be cast to string again</h3>
<p>This reverts the removal of the __toString() method for the
Http Response. We currently rely on this behavior in the
ActionController which combines response content by simple
string concatenation.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=20c9c7e92362c18dbbbf8aacc728e96223edbb1b">20c9c7e</a></li>
</ul>
</div>
<div class="section" id="task-http-response-status-code-and-content-type">
<h3>[TASK] HTTP Response: Status Code and Content Type</h3>
<p>This adds a few new methods to the HTTP Response
class - including the related unit tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=03ccfedd23591b0ad8eba0cba6ac6032034e1802">03ccfed</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-now-as-unique-time-reference">
<h3>[FEATURE] Introduce &#8220;Now&#8221; as unique time reference</h3>
<p>This patch introduces a new class called &#8220;Now&#8221; which
inherits DateTime and has the scope Singleton. It can
be used in all cases where a reliably comparable value
of &#8220;now&#8221; is needed or where time needs to be mocked
in related tests.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37376">#37376</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=87120b37fa21b92c02fcce53279a03cc0b0c987a">87120b3</a></li>
</ul>
</div>
<div class="section" id="bugfix-correction-of-double-ed-ending-in-ismethodannotatededwith">
<h3>[BUGFIX] Correction of double-&#8220;ed&#8221; ending in isMethodAnnotatededWith</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37343">#37343</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bca3a383ed47237caf8a2e0de4a9c629a775cff1">bca3a38</a></li>
</ul>
</div>
<div class="section" id="id228">
<h3>[BUGFIX] Correction of double-&#8220;ed&#8221; ending in isMethodAnnotatededWith</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37343">#37343</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=992cc655b1088d379aea73fbb96b2630ed04653a">992cc65</a></li>
</ul>
</div>
<div class="section" id="bugfix-generatehmac-method-does-not-use-safe-getencryptionkey">
<h3>[BUGFIX] generateHmac method does not use safe getEncryptionKey</h3>
<p>The generateHmac function uses encryptionKey property directly
and not through the safe getEncryptionKey method, leading to
uninitialized access without having an encryptionKey set.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36767">#36767</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7c1cadb78710f05da01c9208ad39470edb8df310">7c1cadb</a></li>
</ul>
</div>
<div class="section" id="id231">
<h3>[BUGFIX] generateHmac method does not use safe getEncryptionKey</h3>
<p>The generateHmac function uses encryptionKey property directly
and not through the safe getEncryptionKey method, leading to
uninitialized access without having an encryptionKey set.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36767">#36767</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=66312551e0797cfe255dd0acb1b7d33ca86cc9b4">6631255</a></li>
</ul>
</div>
<div class="section" id="bugfix-package-refreeze-command-is-too-verbose">
<h3>[BUGFIX] Package refreeze command is too verbose</h3>
<p>flow3:package:refreeze currently displays the output of cache:flush
which contains hints about frozen packages.</p>
<p>This change adds a flag $outputResults to Scripts::executeCommand()
that only outputs errors if set to FALSE.
The package commands now set this flag in order to skip output from
cache:flush.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37186">#37186</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2810a6cc168300f5381953631a1b953ca2b3b3ac">2810a6c</a></li>
</ul>
</div>
<div class="section" id="bugfix-credentialssource-in-account-should-be-nullable">
<h3>[BUGFIX] credentialsSource in Account should be nullable</h3>
<p>Not all authentication mechanisms need a &#8220;credentials source&#8221; (e.g. the
typo3.org SSO provider), so the column for the property should be nullable.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37341">#37341</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=01f9e3d082fd7b72bc994dc5abd594b9a737f9b6">01f9e3d</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-hint-in-code-migration">
<h3>[BUGFIX] Fix wrong hint in code migration</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37224">#37224</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7592d2542c72b24e1469e60787f8d31de121e7d4">7592d25</a></li>
</ul>
</div>
<div class="section" id="id237">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add spaces to &#8221;){&#8220;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0cae2267b772bf4cc3678333d2edb081a5f01088">0cae226</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-beta1">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f746c9b30b7309d54fc27b182926bac5b0323660">f746c9b</a></li>
</ul>
</div>
<div class="section" id="id239">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d1cee8d66e04bf1bdb8b0a076ec50f4d4b0801be">d1cee8d</a></li>
</ul>
</div>
<div class="section" id="id240">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=379bc9697d30080c2530cb726c6ea9d1cc13ce4f">379bc96</a></li>
</ul>
</div>
<div class="section" id="bugfix-do-not-use-double-quotes-in-policy-yaml-files">
<h3>[BUGFIX] Do not use double quotes in Policy.yaml files</h3>
<p>To avoid potential treatment of backslashes as escape character
in YAML files, wrap strings in single quotes.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36056">#36056</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8e9332e7ec1e6a7cdc4c241d99be843c888f4711">8e9332e</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-classespath-to-packagestates-php-on-creating-a-package">
<h3>[BUGFIX] Add &#8220;classesPath&#8221; to PackageStates.php on creating a package</h3>
<p>When doing a ./flow3 package:create, the PackageStates.php is updated by
adding the new package, but the new entry lacks the &#8220;classesPath&#8221; field without
this change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36446">#36446</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=41d0dc266f4c764009777b6aaf4a0b1d870eebac">41d0dc2</a></li>
</ul>
</div>
<div class="section" id="bugfix-session-do-not-throw-an-exception-at-logging">
<h3>[BUGFIX] Session: Do not throw an exception at logging</h3>
<p>While logging the session destruction there was an exception thrown if
no reason was given, because getArgument() can not be called for non
existing arguments</p>
<p>Also added a testcase for the LoggingAspect.</p>
<p>Additionally removed the type hint for the proxy object in JoinPoint -
although that&#8217;s correct, it imposes unnecessary hassle for testing,
like in this case.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35200">#35200</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=724665186decd31dc56f30a9a63777a00a903432">7246651</a></li>
</ul>
</div>
<div class="section" id="bugfix-policyservice-could-drop-acls-for-overlapping-resources">
<h3>[BUGFIX] PolicyService could drop ACLs for overlapping resources</h3>
<p>The PolicyService has to properly reuse all data gathered from
parsing the method resources, the traces were dropped for
different roles and so something wrong would be reused.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37105">#37105</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a617bd03d06cd434151117e828b60f6ed25dbc38">a617bd0</a></li>
</ul>
</div>
<div class="section" id="task-added-dependency-on-domcrawler">
<h3>[TASK] Added dependency on DomCrawler</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36830">#36830</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=18e2542ba0a6881c6125848c2c07236f54d0ea03">18e2542</a></li>
</ul>
</div>
<div class="section" id="feature-mvc-whitelist-based-property-mapping-configuration">
<h3>[!!!][FEATURE] (MVC): Whitelist-based Property Mapping Configuration</h3>
<p>Up to now, property mapping always allowed to modify all properties of a given
object. Especially in the MVC stack, this functionality was relied upon for
all update and create actions. However, for nested objects, the user needed
to configure whether updates and creations should be allowed.</p>
<p>This was an inconsistent behavior, especially because for read-only actions the
object could be also modified.</p>
<p>The behavior is now changed to be more predictive:</p>
<ul class="simple">
<li>the default PropertyMappingConfiguration used in the MVC stack is changed
to be very restrictive: we do neither allow creation of any new objects nor
modification of existing ones; and all properties which should be modified
must be explicitly configured.</li>
<li>For each form, Fluid now generates a list of trusted properties, based upon
which the PropertyMappingConfiguration is set correctly. This means only
properties which have been rendered by fluid are allowed to be modified,
and creation / insertion is only permitted if needed.</li>
</ul>
</div>
<div class="section" id="breaking-changes">
<h3>BREAKING CHANGES</h3>
<ul class="simple">
<li>PropertyMappingConfiguration::doNotMapProperty (no public API) was removed.
Instead, use ::allowAllPropertiesExcept(…).</li>
<li>Furthermore, an exception is now thrown if a property is not allowed to be
mapped. Before, the property was just ignored silently. You should either
write your own TypeConverter to deal with that or filter the input data
correctly before property mapping.</li>
</ul>
<p>In a nutshell:</p>
<ul class="simple">
<li>If you used Fluid forms, everything will still work as expected.</li>
<li>If you used Fluid forms and needed to adjust the property mapping configuration
manually, you can remove these manual adjustments.</li>
<li>If you manually called the Property Mapper and passed a custom Property Mapping
Configuration, you probably need to call …-&gt;allowAllProperties() on the property
mapping configuration.</li>
<li>If you did not used Fluid forms but relied upon the old behavior of the Property
Mapper (e.g. in a web service), you need to configure the Property Mapper
inside your initializeAction correctly now.</li>
</ul>
<p>Note: You need the accompanying Fluid change for testing this feature as well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36776">#36776</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3f6576e47756a170d98232ff7f5a35d679052701">3f6576e</a></li>
</ul>
</div>
<div class="section" id="feature-inclusion-of-domcrawler-in-functional-test-browser">
<h3>[FEATURE] Inclusion of DomCrawler in Functional Test Browser</h3>
<p>In order to run meaningful end-to-end functional tests, we need a way
to navigate through HTML by clicking links and submitting forms.</p>
<p>We use DomCrawler to make this possible. This needs to be included
separately.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36776">#36776</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36830">#36830</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=18e7219fc970e498e98098e14c4df3ede7923a6a">18e7219</a></li>
</ul>
</div>
<div class="section" id="feature-order-package-loading-by-dependencies">
<h3>[FEATURE] Order package loading by dependencies</h3>
<p>This change simply reorders the internal packages arrays
of the PackageManager in a way that if PackageA depends
on PackageB, PackageA comes later then PackageB when
iterating over those arrays.</p>
<p>This change does not introduce a sophisticated dependency
management, however it makes sure to be be able to load
configuration settings in the correct order.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=df6b2a2113bd9d680985b7d12211935ff4a4952d">df6b2a2</a></li>
</ul>
</div>
<div class="section" id="task-some-cleanup-to-security-tests">
<h3>[TASK] Some cleanup to security (tests)</h3>
<p>No functional changes, just whitespace, spelling and some
PHPUnit warnings squashed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e9b691ff132ec3d49ff6518ca31cbbb3c933cff2">e9b691f</a></li>
</ul>
</div>
<div class="section" id="task-http-request-hasargument-and-getargument">
<h3>[TASK] HTTP Request: hasArgument() and getArgument()</h3>
<p>This change set provides two new getters for the unified
request arguments.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c00ef3bf007e4b99d82f4b64df29c7d8ec653422">c00ef3b</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-actionrequest-to-validate-passwordtoken">
<h3>[BUGFIX] Use ActionRequest to validate PasswordToken</h3>
<p>The (new) PasswordToken was not included in the fix for #36997.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36997">#36997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bbdafabc935210213b8f2fecf432568844025fcb">bbdafab</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-functional-test-if-doctrine-is-not-enabled">
<h3>[BUGFIX] Skip functional test if Doctrine is not enabled</h3>
<p>The Flow3AnnotationDriverTest should be skipped if Doctrine is not
enabled to prevent problems if no actual driver or connection
can be created.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e5cb7f0df9f9dc3f59606c0b1f5aab3955af8e20">e5cb7f0</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-core-migrate-work-on-windows">
<h3>[BUGFIX] Make core:migrate work on Windows</h3>
<p>On Windows redirection to /dev/null does not work. Also
some migrations would not be found due to useless type
casting.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c7038c4e0c4507c803531a06c59ef77bbe2b1f70">c7038c4</a></li>
</ul>
</div>
<div class="section" id="task-fix-packagemanager-unit-test">
<h3>[TASK] Fix PackageManager unit test</h3>
<p>One of the tests failed because the order of found packages
was not as expected. That order is not relevant, though…</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5a7a5a12bd35954bae13af2b841b3e724214c069">5a7a5a1</a></li>
</ul>
</div>
<div class="section" id="feature-implement-file-based-encrypted-key-authentication">
<h3>[FEATURE] Implement file based encrypted key authentication</h3>
<p>This commit introduce a new password token, which works like the username
password token but only requires a password.</p>
<p>The file based simple key provider authenticates a password token using the
file based simple key service to get the matching password in the key which
is configurable for every instance of the provider. Furthermore the service
is capable of storing, removing, getting, checking and generating keys.
Optional values for generation key length and password hashing strategy is
configurable for the service.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34648">#34648</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=af6de01a2a8760e17f31584076461c38eaa98a44">af6de01</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-actionrequest-to-validate-authentication-tokens">
<h3>[BUGFIX] Use ActionRequest to validate authentication tokens</h3>
<p>Currently the security context passes the HTTP Request to
TokenInterface::updateCredentials() in updateTokens().
This has the disadvantage that authentication tokens can
only access raw GET / POST parameters from the HTTP request.
Arguments that are only available through routing are not accessible.</p>
<p>This change adjusts Security/Context, TokenInterface and the provided
implementations accordingly.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36997">#36997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2aa6a02414916d7f7725b0aa83a3b6fb63dc9568">2aa6a02</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-use-of-removed-environment-methods-in-csrfprotectionaspect">
<h3>[BUGFIX] Fix use of removed Environment methods in CsrfProtectionAspect</h3>
<p>CsrfProtectionAspect now no longer uses methods from environment that
no longer exist since the environment cleanup. It tries to get the
arguments from the active RequestHandler instead.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37018">#37018</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=34f3725060cc4de6c386481708fbe695550c8b07">34f3725</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-reverse-ordering-of-packages-in-configuration-manager">
<h3>[BUGFIX] Avoid reverse ordering of packages in configuration manager</h3>
<p>This issue causes some problems when packages are overwriting YAML settings,
because in #27490 the package order is reversed in order to put TYPO3.Flow
at the top. This has some unnecessary consequences.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36965">#36965</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27490">#27490</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d100a281547da020c6bd628384fc4af7222b69c3">d100a28</a></li>
</ul>
</div>
<div class="section" id="task-add-doctrine-orm-to-the-dependencies">
<h3>[TASK] Add Doctrine.ORM to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2fba45eb4dd9e2e4dd16ae6ce0d676e5cc099fed">2fba45e</a></li>
</ul>
</div>
<div class="section" id="task-some-cleanup-to-packagemanager-and-it-s-unit-test">
<h3>[TASK] Some cleanup to PackageManager and it&#8217;s unit test</h3>
<p>Fixes some docblocks, adds a few type hints and fixes / simplifies some
unit tests.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=67c257c91fba12e9dc25888382415eaf5ebeca4e">67c257c</a></li>
</ul>
</div>
<div class="section" id="task-small-docblock-cleanup-to-bootstrap">
<h3>[TASK] Small docblock cleanup to Bootstrap</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4fe6851bb5959cca49e52c945a17f29673f01419">4fe6851</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-class-names-in-validators">
<h3>[TASK] Clean up class names in validators</h3>
<p>No functional changes.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=015cde674b8b9948f814f95ac4367c05b94fc476">015cde6</a></li>
</ul>
</div>
<div class="section" id="feature-add-tostring-and-make-resource-use-more-convenient">
<h3>[FEATURE] Add __toString() and make Resource use more convenient</h3>
<p>To use a Resource with file operations, one can use the
resource:// scheme and the __toString() method of any
ResourcePointer.</p>
<p>To make this a little easier, this change adds two new
methods to the Resource class:</p>
<p><tt class="docutils literal"><span class="pre">__toString()</span></tt> returns the SHA1 of the ResourcePointer the
Resource is holding (as is documented for ages).</p>
<p>getUri() returns a ready-to-use resource://&lt;sha1&gt; URI of
the ResourcePointer the Resource is holding.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29694">#29694</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34177">#34177</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8cdaae41c0af199402358e2171766af14f9379e9">8cdaae4</a></li>
</ul>
</div>
<div class="section" id="feature-destroy-all-sessions-on-cache-flush-command">
<h3>[FEATURE] Destroy all sessions on cache:flush command</h3>
<p>When the typo3.flow3:cache:flush command is called all session data
for the currently configured session implementation will be
destroyed too.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/25923">#25923</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dc804a6f9c42d60cf982a67fdca8f9812b77715b">dc804a6</a></li>
</ul>
</div>
<div class="section" id="feature-have-a-way-to-delete-all-sessions">
<h3>[FEATURE] Have a way to delete all sessions</h3>
<p>Introduces the static method destroyAll to the
SessionInterface and all implementations and so
makes it possible to destroy all session data for a
specific implementation.</p>
<p>Resolves #34817</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=57139411256f90e52f5954c5e12ec243ded37849">5713941</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-use-ansi-colors-for-var-dump-if-supported">
<h3>[BUGFIX] Only use ansi colors for var_dump() if supported</h3>
<p>\TYPO3\FLOW3\var_dump() currently uses ANSI codes to colorize
the output on the CLI.
On Windows that&#8217;s not supported by default. It renders all special
characters instead.</p>
<p>This change disables ansiColors on Windows.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36954">#36954</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=aeaa424b48d22c0e532c44fb223aa25be67beac3">aeaa424</a></li>
</ul>
</div>
<div class="section" id="feature-makes-it-possible-to-wire-signals-to-static-slots">
<h3>[FEATURE] Makes it possible to wire signals to static slots</h3>
<p>To use a static slot simply prefix the slot method name with <tt class="docutils literal"><span class="pre">::</span></tt></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34185">#34185</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=00ea79198668b30e3fefbd277f8070965ff83c18">00ea791</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-the-magic-role-anonymous">
<h3>[FEATURE] Introduce the magic role &#8220;Anonymous&#8221;</h3>
<p>This introduces a second magic role (besides the
role &#8220;Everybody&#8221;) which is active as long as nobody
is authenticated. This allows for designing policies
in a way that anonymous users still have access to
certain resources.</p>
<p>Also fixes a small bug in the PolicyService which
previously did not return the Everybody or Anonymous
role on getRoles().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34900">#34900</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b70090b742a764381053e9bd170d3197b39d5de0">b70090b</a></li>
</ul>
</div>
<div class="section" id="feature-improve-property-mapping-exception-message">
<h3>[FEATURE] Improve Property Mapping Exception message</h3>
<p>The exception message for when a Mapping fails now
contains a hint about the concerning target type.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36949">#36949</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fb0c15a2d8b2f9caa65e7758be5f26c308287212">fb0c15a</a></li>
</ul>
</div>
<div class="section" id="task-slightly-improve-documentation-of-properties">
<h3>[TASK] Slightly improve documentation of properties</h3>
<p>The properties used to enable testable HTTP and security influence
each other (like the good old image handling settings in v4).</p>
<p>This change adds comments that clarify the behavior.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a87b12d284a9093df9d85c8bcb434776b6c39790">a87b12d</a></li>
</ul>
</div>
<div class="section" id="task-getting-started-add-filenames-to-code-snippets">
<h3>[TASK] Getting Started: Add filenames to code snippets</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35263">#35263</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=160d0a430f77a5898c04a191155f43b66efb8360">160d0a4</a></li>
</ul>
</div>
<div class="section" id="task-handle-exceptions-in-virtual-http-browser">
<h3>[TASK] Handle exceptions in virtual HTTP browser</h3>
<p>The virtual HTTP browser now catches any exceptions
and returns the exception information in the response
rather than letting the actual exception slip through.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36943">#36943</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5b26f74b49ff96b565a0c18351c5f4e991aba9cc">5b26f74</a></li>
</ul>
</div>
<div class="section" id="bugfix-authentication-context-now-reliably-stores-the-intercepted-request">
<h3>[BUGFIX] Authentication: context now reliably stores the intercepted request</h3>
<p>On authentication the original intercepted request was not stored,
when there was no current session. The session now gets automatically
initialized via &#64;Flow\Session(autoStart=true).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31905">#31905</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4756966d29055e09150648fd85f78f87204c6026">4756966</a></li>
</ul>
</div>
<div class="section" id="task-improve-security-isolation-in-functional-tests">
<h3>[TASK] Improve security isolation in functional tests</h3>
<p>This change makes sure that also the intercepted request
(if any) is cleared on clearContext() and renames the
authentication provider configured for the Testing
context from &#8220;DefaultProvider&#8221; to &#8220;TestingProvider&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31905">#31905</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=900a207aac90539e08f9c65b1743335f3ac3849e">900a207</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-transientsession-unit-test-to-recent-change">
<h3>[BUGFIX] Adjust TransientSession unit test to recent change</h3>
<p>The change in TransientSession to close the session when destroy()
is called needed to be reflected in the unit test.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35965">#35965</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a2033af01b4f0c38a7f56b365ed4dd0a25d8dea1">a2033af</a></li>
</ul>
</div>
<div class="section" id="bugfix-assure-fresh-session-for-functional-tests">
<h3>[BUGFIX] Assure fresh session for functional tests</h3>
<p>The changes done to resolve #35965 came with a functional
test that worked fine when run in isolation but failed when
run with other tests that would start a session.</p>
<p>This patch moves the $session-&gt;destroy() call in the
base test case from the tearDown() to the setUp()
method and fixes the behavior of destroy() in the
TransientSession which did not reset the &#8220;started&#8221;
flag.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35965">#35965</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=69c5912c41eaa714f10c46294cb9a4db6eb5304d">69c5912</a></li>
</ul>
</div>
<div class="section" id="task-change-session-autostart-handling-for-authentication-providers">
<h3>[!!!][TASK] Change session autostart handling for authentication providers</h3>
<p>The session autostart annotation is set at the
providers, not at the authentication manager. By
this every provider can decide on its own, if a
session is needed or not.</p>
<p>Also adds a safeguard in the Session Logging Aspect
to prevent errors while trying to log renewId()
even though the session was not started yet.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35965">#35965</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ab61bd444fe1d2b1feb0e6e6a224575824fc7ce9">ab61bd4</a></li>
</ul>
</div>
<div class="section" id="task-add-section-on-xliff-plural-form-handling-to-guide">
<h3>[TASK] Add section on XLIFF plural form handling to guide</h3>
<p>Adds a short explanation of plural form handling in XLIFF files to
the FLOW3 guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36088">#36088</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3c0e30a0783314d932cf82e38522b409c58ca5db">3c0e30a</a></li>
</ul>
</div>
<div class="section" id="feature-improve-logging-for-translation-handling">
<h3>[FEATURE] Improve logging for translation handling</h3>
<p>When a translation is not found a warning is logged so that the
user gets a clue what is wrong.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36088">#36088</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9ee4f38a9caa0974e45d378e7fa35b1c1fb6ab75">9ee4f38</a></li>
</ul>
</div>
<div class="section" id="feature-make-migration-of-a-single-package-possible">
<h3>[FEATURE] Make migration of a single package possible</h3>
<p>Now the option &#8220;&#8211;package-key&#8221; can be given to &#8220;core:migrate&#8221; to
migrate a single package.</p>
<p>This allows for migration of single packages, including those in the
&#8220;Framework&#8221; category, which are now skipped by default.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b7d30145a427147738cc6928d6125481952340f2">b7d3014</a></li>
</ul>
</div>
<div class="section" id="task-add-provideroptions-example-to-settings-yaml">
<h3>[TASK] Add providerOptions example to Settings.yaml</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33495">#33495</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f433747137733801ebca2f9e7aa7c4d2c5bc7c3f">f433747</a></li>
</ul>
</div>
<div class="section" id="feature-core-nested-flow3-application-contexts">
<h3>[!!!][FEATURE] (Core): Nested FLOW3 Application Contexts</h3>
<p>With this change, it is possible to use nested FLOW3 contexts like
&#8220;Production/Live&#8221; or &#8220;Production/Staging/Server1&#8221;. The main context,
has to be one of &#8220;Production&#8221;, &#8220;Development&#8221; or &#8220;Testing&#8221;, whereas
arbitrary sub contexts are supported.</p>
<p>If you run in the context &#8220;Production/Staging/Server1&#8221;, the configuration
is inherited in the following way (from most specific to most general):</p>
<ul class="simple">
<li>Production/Staging/Server1</li>
<li>Production/Staging</li>
<li>Production</li>
<li>as a fallback, the, non-context-specific configuration is used</li>
</ul>
<p>This change is breaking in the following cases:</p>
<ul>
<li><p class="first">You called TYPO3\FLOW3\Core\Bootstrap::getContext() or
TYPO3\FLOW3\Object\ObjectManagerInterface::getContext()</p>
<p>In this case, not the context string is returned anymore, but instead
the TYPO3\FLOW3\Core\ApplicationContext object. It can be cast to a string to
get the old behavior back; but usually you instead want to call
$context-&gt;isDevelopment(), $context-&gt;isProduction() or $context-&gt;isTesting().</p>
</li>
<li><p class="first">You wrote your own cache backend</p>
<p>The cache backend constructor now expects the $context object to be of type
TYPO3\FLOW3\Core\ApplicationContext.</p>
</li>
</ul>
<p>Additionally, we removed some leftovers from the configuration manager,
especially Signals/Slots configuration as this is not used anymore.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9df5567135e42e1ab312f9a560c3eed382517c83">9df5567</a></li>
</ul>
</div>
<div class="section" id="task-fix-hints-about-frozen-packages-to-cache-flush-command">
<h3>[TASK] Fix hints about frozen packages to cache:flush command</h3>
<p>This enhances the hints about frozen packages introduced in
change I4db274dcf0376ada53a3a46ed5c6b945543698d1.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36807">#36807</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=692f73b74bd7c0b80191bc25acd70e90054b626f">692f73b</a></li>
</ul>
</div>
<div class="section" id="task-tweak-code-migration-tool-code-and-output">
<h3>[TASK] Tweak code migration tool code and output</h3>
<p>This makes the output of the code migration tool a little
more readable and shifts some parts of the code around to
clean it up.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=06930c3be589d35d80fe9f25eddbfd7f20b7a7f4">06930c3</a></li>
</ul>
</div>
<div class="section" id="task-fix-schema-migrations-adding-useless-unique-indexes">
<h3>[TASK] Fix schema migrations adding useless unique indexes</h3>
<p>This change removes the index creation commands on the Role table from
the migrations supplied with Ief9455e10c58f999cf46e0586e632ff3e2ef9ad5,
as the involved field is the primary key (and thus a unique index) anyway.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29547">#29547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a788b2920e366a817d913e600e4eccd21335f5b9">a788b29</a></li>
</ul>
</div>
<div class="section" id="task-adjust-the-code-migration-for-flow3-1-1">
<h3>[TASK] Adjust the code migration for FLOW3 1.1</h3>
<p>This tweaks the code migration a little to be more complete and
produce better readable output.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=05f80eb8cf434e9d447f1d4bf55a26dc5ced7509">05f80eb</a></li>
</ul>
</div>
<div class="section" id="feature-provide-outputformatted-function-for-cli">
<h3>[FEATURE] Provide outputFormatted() function for CLI</h3>
<p>This introduces a new method for outputting formatted
(that is, word wrapped and optionally padded) text to
the command line.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36813">#36813</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=95af0e5fb3d64f423160aaa94cee0f0c46a77062">95af0e5</a></li>
</ul>
</div>
<div class="section" id="task-add-hints-about-frozen-packages-to-cache-flush-command">
<h3>[TASK] Add hints about frozen packages to cache:flush command</h3>
<p>By default precompiled reflection data of frozen packages is not
recreated on flushing the cache.
This adds a hint to the response of the cache:flush command if
there are frozen packages.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36807">#36807</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9243aa1c61a28861edcf5f1bb21d2708086f818f">9243aa1</a></li>
</ul>
</div>
<div class="section" id="bugfix-persistence-fix-failing-repositorytest">
<h3>[BUGFIX] (Persistence): Fix failing RepositoryTest</h3>
<p>The test fails since Ic3782452e941574dd85068535092877efd7ca190 which
forgot to adjust the Unit Tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33883">#33883</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cfbc8fa0a56d1c35d02e8e438ca636f1854b41ee">cfbc8fa</a></li>
</ul>
</div>
<div class="section" id="feature-identity-annotation-should-make-properties-unique">
<h3>[FEATURE] Identity annotation should make properties unique</h3>
<p>With this change all properties annotated with the Identity
annotation will be added to an unique constraint in the database.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29547">#29547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b0fb449cc9dc7266fd027b2c3618041e6fad3ef7">b0fb449</a></li>
</ul>
</div>
<div class="section" id="task-remove-identity-annotation-from-resource">
<h3>[TASK] Remove Identity annotation from Resource</h3>
<p>As preparation to give the Identity annotation some meaning we
remove it here to still allow multiple resources with the same
pointer and filename / fileExtension.</p>
<p>This doesn&#8217;t change the behavior at all as Identity has no
technical meaning (yet).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36717">#36717</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b9fd14644de323164c5d096421e73484cefa7ba5">b9fd146</a></li>
</ul>
</div>
<div class="section" id="feature-datetimeconverter-should-support-datetime-subclasses">
<h3>[FEATURE] DateTimeConverter should support DateTime subclasses</h3>
<p>Currently DateTimeConverter only accepts target types of &#8216;DateTime&#8217;.
This change adjusts the converter so that it works for subclasses
of \DateTime too.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33531">#33531</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f12ba2d320d98bac6f3ac16e7fee026722e59eb6">f12ba2d</a></li>
</ul>
</div>
<div class="section" id="feature-use-lifecycle-annotations-without-haslifecyclecallbacks">
<h3>[FEATURE] Use lifecycle annotations without HasLifecycleCallbacks</h3>
<p>When using lifecycle annotations on methods, this change removes the need
to annotate the class itself with HasLifecycleCallbacks.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36714">#36714</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=955b786a937127f9c39cbb6506d9d7ad2119a7c1">955b786</a></li>
</ul>
</div>
<div class="section" id="feature-code-migration-tool">
<h3>[FEATURE] Code migration tool</h3>
<p>This adds support for &#8220;code&#8221; migrations. As with database migrations,
steps needed to adjust existing code to changes done in some package
can be delivered in a migration file with said package.</p>
<p>A new command flow3:core:migrate can be used to apply migrations to
all packages still in need of that migration. The tool requires git
to be available and will work only on code in clean git working copies.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ed8fdeafc57bad85358c960daf2e7751ef161796">ed8fdea</a></li>
</ul>
</div>
<div class="section" id="task-add-functional-content-security-tests">
<h3>[TASK] Add functional content security tests</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1bc99215f7d8da7c30767671d83a1be13c392854">1bc9921</a></li>
</ul>
</div>
<div class="section" id="task-a-few-more-content-security-examples">
<h3>[TASK] A few more content security examples</h3>
<p>This adds some very basic notes which could help a few
people started with content security.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e0e903b83da64cb796557e5b3a4b54bad02cc5c1">e0e903b</a></li>
</ul>
</div>
<div class="section" id="task-documentation-add-a-link-to-installation-hints">
<h3>[TASK] Documentation: Add a link to installation hints</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35262">#35262</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=012c6595533debe54bb4b20561e702cb3f06b779">012c659</a></li>
</ul>
</div>
<div class="section" id="task-update-to-support-orphanremoval-on-manytomany-associations">
<h3>[TASK] Update to support orphanRemoval on ManyToMany associations</h3>
<p>In Doctrine 2.2.1 support for orphanRemoval on ManyToMany associations was
added, thus it is added to our driver as well.</p>
<p>In addition unnamed indexes and unique constraints are now possible, also
a &#8220;port&#8221; from the upstream codebase.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34760">#34760</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8baab130e156725e3c041892418ed2588225a6ac">8baab13</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-filename-spelling-to-filename">
<h3>[BUGFIX] Adjust &#8220;fileName&#8221; spelling to &#8220;filename&#8221;</h3>
<p>The spelling for filename differs throughout the code. With this
change we use &#8220;filename&#8221; everywhere possible.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35298">#35298</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c55e4f69e0c866e1b1e6a04d5c1f035eee068a8b">c55e4f6</a></li>
</ul>
</div>
<div class="section" id="bugfix-prevent-route-class-from-appending-an-extra-question-mark">
<h3>[BUGFIX] Prevent Route class from appending an extra question mark</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33519">#33519</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33539">#33539</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dc3532f4a4bbb187c26129d1d4b78410ff8bee53">dc3532f</a></li>
</ul>
</div>
<div class="section" id="task-fixes-exception-message-building-causing-error">
<h3>[TASK] Fixes exception message building causing error</h3>
<p>When the providerClass for an authentication provider
is not configured, the building of an exception message
caused a notice (and that caused an error).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34399">#34399</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fc71de3f2f60e8de92e14596134490d015d2a3eb">fc71de3</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-documentation-to-correct-folder-structure-for-xlf-files">
<h3>[BUGFIX] Adjust documentation to correct folder structure for xlf-files</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4e17257dd25f314b851eec9a6c7b577ae593a10b">4e17257</a></li>
</ul>
</div>
<div class="section" id="task-move-xliff-files-so-that-pootle-copes-with-the-file-layout">
<h3>[TASK] Move XLIFF files so that Pootle copes with the file layout</h3>
<p>This changes the file layout for translations so that for every language
a directory named after the locale identifier is looked up below
Resources/Private/Translations. Inside that directory one XLIFF file
for each message catalog can be put:</p>
<blockquote>
<div><dl class="docutils">
<dt>Resources/Private/Translataions/</dt>
<dd><dl class="first last docutils">
<dt>en/</dt>
<dd><dl class="first last docutils">
<dt>Main.xlf</dt>
<dd>ValidationErrors.xlf</dd>
</dl>
</dd>
<dt>fr/</dt>
<dd><dl class="first last docutils">
<dt>Main.xlf</dt>
<dd>ValidationErrors.xlf</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</div></blockquote>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36284">#36284</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7275a130a1f552467b41d973f6533522c8dfb194">7275a13</a></li>
</ul>
</div>
<div class="section" id="task-fix-restcontroller-to-work-with-http-foundation">
<h3>[TASK] Fix RestController to work with HTTP foundation</h3>
<p>This fixes RestController to work again with HTTP foundation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9de4a2c9c6101b44ef5a00686f0f8ce296e6e44a">9de4a2c</a></li>
</ul>
</div>
<div class="section" id="bugfix-check-that-repositories-are-of-singleton-scope">
<h3>[BUGFIX] Check that repositories are of singleton scope</h3>
<p>Repositories must be singletons, otherwise strange things and
seemingly weird errors happen. This change adds a check for the
scope, so that developers at least know what is wrong.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33883">#33883</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5e342192819640b75bb54f86873622e537af810b">5e34219</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-lowercase-table-names-to-fix-functional-tests">
<h3>[BUGFIX] Use lowercase table names to fix functional tests</h3>
<p>There seems to be a problem with (certain versions of) MySQL and
lower / uppercase table names (maybe only on case insensitive
filesystems).</p>
<p>This change adjusts some Table annotations used in functional
test fixtures to use lowercase identifier.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35007">#35007</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=019507ae40359ac87558d79178caf1267de21480">019507a</a></li>
</ul>
</div>
<div class="section" id="task-adjust-some-leftover-uppercase-namespace-parts">
<h3>[TASK] Adjust some leftover uppercase namespace parts</h3>
<p>There were still some uses of AOP and MVC in the codebase.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33705">#33705</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e04da494a1995084c696c444d822cd24c769178c">e04da49</a></li>
</ul>
</div>
<div class="section" id="bugfix-query-rewriting-now-works-with-one-additional-constraint">
<h3>[BUGFIX] Query rewriting now works with one additional constraint</h3>
<p>PersistenceQueryRewritingAspect was broken if only one additional
constraint was added, leading to invalid queries that failed with
an invalid number of bound parameters.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36679">#36679</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7d13b3fbcbd2d82aaa1aa0e7f05c3406a79cf651">7d13b3f</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-methodsecurity-functional-test">
<h3>[BUGFIX] Fix MethodSecurity functional test</h3>
<p>After #36659 was fixed, the session handling works
as expected. That means, however, that if no account
is logged in, an AuthorizationRequiredException is
thrown on trying to access a restricted method.
The tests, however, anticipated an AccessDeniedException.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36626">#36626</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36659">#36659</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=09dba14bbc6c3dfd5409ff333ffa9d9cc4fac14d">09dba14</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-session-handling-in-functional-tests">
<h3>[!!!][BUGFIX] Fix session handling in functional tests</h3>
<p>Sessions were kept across test boundaries which had bad
side effects on, for example, authentication: previously
authenticated roles where still active during the following
Test under certain circumstances.</p>
<p>This patch makes sure that sessions are destroyed after
each functional test.</p>
<p>It also introduces a previously missing parameter into the
destroy() method signature of the SessionInterface. If you
implemented your own session handler, you need to adjust the
destroy() method accordingly.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36659">#36659</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=41a5fa000b9228ce43566fc92211b729dca775e3">41a5fa0</a></li>
</ul>
</div>
<div class="section" id="task-fix-debug-output-marking-entity-value-object">
<h3>[TASK] Fix debug output marking entity/value object</h3>
<p>This removes the FIXME from debug output and just
uses &#8220;persistable&#8221; as an umbrella term for an entity
or value object.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ad3c7d9aab25b94a6d3574d2de69e9d0381da424">ad3c7d9</a></li>
</ul>
</div>
<div class="section" id="bugfix-persistencequeryrewritingaspect-now-supports-count-0">
<h3>[BUGFIX] PersistenceQueryRewritingAspect now supports count(0)</h3>
<p>If the aspect intercepted a count() method and the result (because
of lacking access rights) would be &#8220;none&#8221;, the aspect returned an
EmptyQueryResult object which in turn could not be cast into an
integer by the client code.</p>
<p>This patch now correctly returns a 0 in that case.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36625">#36625</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=21cf88e55a2757ff928a784ec3aa867faf6cfa83">21cf88e</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-any-matcher-for-content-security">
<h3>[FEATURE] Introduce ANY matcher for content security</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36626">#36626</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ed4538b8ac9347fbf68463d3363becad28aa259c">ed4538b</a></li>
</ul>
</div>
<div class="section" id="task-log-exception-in-doctrine-query-getresult">
<h3>[TASK] Log exception in Doctrine\Query-&gt;getResult()</h3>
<p>When an exception occurs during getResult() it was silently
ignored. Now it will be logged to the system log.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f20526cc9e1e15f83cbc37a81d1a6a9c1a68a276">f20526c</a></li>
</ul>
</div>
<div class="section" id="task-adjust-testing-settings">
<h3>[TASK] Adjust Testing settings</h3>
<p>Fixes YAML style and makes use of SQL logger in Testing possible.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=be0c79758f39b598a553770bdefd6324389bd696">be0c797</a></li>
</ul>
</div>
<div class="section" id="bugfix-implement-fallback-for-password-hash-migration">
<h3>[BUGFIX] Implement fallback for password hash migration</h3>
<p>The new BCrypt default hashing strategy causes problems if a FLOW3
application is migrated from version 1.0 which didn&#8217;t use strategy
identifiers inside credentials. A new &#8220;fallback&#8221; configuration
option allows to specify the strategy that was used to generate
these legacy credentials. It defaults to &#8220;pbkdf2&#8221; and allows for a
seamless migration from 1.0 to 1.1. New passwords will be hashed with
the default strategy (&#8220;bcrypt&#8221; by default) and get the strategy
identifier prepended.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32991">#32991</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=78279ca9a0c1b6808db415b678722791c66f4d0f">78279ca</a></li>
</ul>
</div>
<div class="section" id="task-add-functional-tests-for-content-security">
<h3>[TASK] Add functional tests for content security</h3>
<p>This add some first basic functional tests for
content security.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36626">#36626</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3198e416672b1313b2a890f564c45eced401b9c8">3198e41</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-gethttprequest-work-in-functional-tests">
<h3>[BUGFIX] Make getHttpRequest() work in functional tests</h3>
<p>In some cases functional tests need to access getHttpRequest() on the
active RequestHandler. In functional tests this did not work, because
the FunctionalTestRequestHandler did not implement the new
HttpRequestHandlerInterface.</p>
<p>Now it does and the InternalRequestEngine sets the current request.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36617">#36617</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d38e25b36b17af2843fe9d11bbb5f5aa1ec7e647">d38e25b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-functional-testing-for-security-features">
<h3>[BUGFIX] Fix functional testing for security features</h3>
<p>The authenticated roles from one test have not been
cleared after the test.</p>
<p>Adds a safeguard for getAccount() to the security context
along the way.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34466">#34466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=771bc9b8a43b25be454e71b8acd61e18e79bbf87">771bc9b</a></li>
</ul>
</div>
<div class="section" id="feature-validation-context-specific-validation-through-validation-groups">
<h3>[FEATURE] (Validation): Context-specific validation through Validation Groups</h3>
<p>Sometimes, Validation should only be executed on Persist, or on the Controller
invocation. Especially when building multi-step forms, one needs to be able to
partially validate an object and store the invalid object in the database.</p>
<p>This change set implements &#8220;validation groups&#8221;, i.e. each validator annotation
can have a &#8220;validation group&#8221; assigned, and when validation happens, the validators
get only executed if at least one validation group matches.</p>
<p>Furthermore, it adds a documentation skeleton for partial validation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32832">#32832</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7aebd16f388f07424bb6a016be7312cc01d9feea">7aebd16</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-typo3orgssotoken-use-of-removed-method">
<h3>[BUGFIX] Fix Typo3OrgSsoToken use of removed method</h3>
<p>Environment does no longer have getRawGetArguments(), instead using
getArguments() on the HTTP request we have available.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36657">#36657</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4595e40c0d963e32b0d73d6bd94ec2427d1394ff">4595e40</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-isclassimplementationof-in-reflectionservice">
<h3>[BUGFIX] Fix isClassImplementationOf in ReflectionService</h3>
<p>In some cases (depending on filesystem load order probably) the
Production context would fail to return the correct result in the
isClassImplementationOf() method of the ReflectionService.</p>
<p>This change fixes it.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34672">#34672</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e40b22193fe0a52b24f090e1cb16b095cacea1d9">e40b221</a></li>
</ul>
</div>
<div class="section" id="task-use-correct-order-or-static-function-declaration">
<h3>[TASK] Use correct order or static function declaration</h3>
<p>This is the only occurence of this order for declaring a static method.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=319fa7e4a7b48f30bea52414d80149a7ad2d474d">319fa7e</a></li>
</ul>
</div>
<div class="section" id="task-add-example-of-request-pattern-to-provider-example">
<h3>[TASK] Add example of request pattern to provider example</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4c598ceb250683a1e5bcb866c05c7f8adba6980a">4c598ce</a></li>
</ul>
</div>
<div class="section" id="bugfix-advicechain-has-to-take-the-proxy-from-the-joinpoint">
<h3>[BUGFIX] AdviceChain has to take the proxy from the joinpoint</h3>
<p>The advice chain object got its proxy instance in the constructor,
which was possibly not the correct instance for a given joinpoint.
This change removes the constructor parameter and fetches the proxy
instance always from the current joinpoint.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36637">#36637</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7a79ea2c1b186d8d96278691a82c3f5ff913ed44">7a79ea2</a></li>
</ul>
</div>
<div class="section" id="bugfix-call-persistall-after-every-controller-invocation">
<h3>[BUGFIX] Call PersistAll after every controller invocation</h3>
<p>If0020fdedbaf4779ff24d0e4248e2137cdf5bc67 introduced a regression
which caused persistAll() to be uncalled.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28136">#28136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=72b91a1e581a59e60f7bc1a3bda318b10c66999e">72b91a1</a></li>
</ul>
</div>
<div class="section" id="task-add-clarifying-note-on-persistencemagicaspect-cloneobject">
<h3>[TASK] Add clarifying note on PersistenceMagicAspect.cloneObject</h3>
<p>Adds a note clarifying that this method is not unused.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9761517bef6be4a9b69ba35966342ffe2e69c64e">9761517</a></li>
</ul>
</div>
<div class="section" id="feature-turn-content-security-acl-logic-upside-down">
<h3>[!!!][FEATURE] Turn content security acl logic upside down</h3>
<p>This change realizes a whitelist approach for content
security acls. By this content security acls work with
the same logic as method security.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34464">#34464</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6cdc131bbc480fe6999aaf001a1143da504e5948">6cdc131</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-token-separation-without-request-in-security-context">
<h3>[BUGFIX] Skip token separation without request in Security\Context</h3>
<p>separateActiveAndInactiveTokens() in Security\Context fails if
$this-&gt;request is NULL.</p>
<p>With this change, token separation is skipped completely in that case.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36624">#36624</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1148aebf3342cc5891c333c514514c17e4b1b0e5">1148aeb</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-functional-tests-with-security-and-sendwebrequest">
<h3>[BUGFIX] Fix functional tests with security and sendWebRequest</h3>
<p>This change fixes some security related aspects of the functional
base testcase. Field visibility and method visibility is restored
to protected since custom tests need to be able to call some
of the dependencies (e.g. to initialize or reset additional test
providers). Also sendWebRequest is working again with the new
request implementation and without mocks.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36517">#36517</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b839259f6730c2a327a85803bf3388e573356915">b839259</a></li>
</ul>
</div>
<div class="section" id="bugfix-adds-detection-of-missing-id-attributes-in-xliff-files">
<h3>[BUGFIX] Adds detection of missing id attributes in XLIFF files</h3>
<p>XLIFF requires id attributes on trans-unit tags, but if they are missing,
FLOW3 does not complain. An exception is now thrown, instead of
some unspecified behavior.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33971">#33971</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3872d4354eb20ec50e06380e409dc1e564b888ae">3872d43</a></li>
</ul>
</div>
<div class="section" id="feature-persist-after-every-controller-invocation">
<h3>[FEATURE] Persist after every controller invocation</h3>
<p>Wire persistAll() from afterControllerInvocation instead of the
finishedRuntimeRun signal.</p>
<p>This is useful because it wraps all changes done in one dispatch in
a transaction, thus enabling better rollback in case of errors.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28136">#28136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9a0e128a6c4725f2a60c0426acacf9d313c1be57">9a0e128</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-bcrypt-the-default-hashing-strategy-again">
<h3>[BUGFIX] Make BCrypt the default hashing strategy (again)</h3>
<p>In <a class="reference external" href="https://review.typo3.org/5756">https://review.typo3.org/5756</a> the default hashing strategy was
changed to BCrypt. Later, in <a class="reference external" href="https://review.typo3.org/6598">https://review.typo3.org/6598</a>, support for
multiple strategies was added. But that change make PBKDF2 the default
again.</p>
<p>This change fixes that and makes the SaltedMd5 strategy available in
the YAML file as well (for completeness).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32991">#32991</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=28a049fc0d5ca17e5ee1ec8c92c020aa9a32864c">28a049f</a></li>
</ul>
</div>
<div class="section" id="bugfix-exceeding-roles-of-accounts-are-now-ignored">
<h3>[BUGFIX] Exceeding roles of accounts are now ignored</h3>
<p>If an account had one ore more roles which were not
defined in a policy, access was denied to this account
because the role could not be matched. It is, however,
more practical to simply ignore exceeding roles.</p>
<p>This patch makes sure that getRoles() only considers
roles of the active tokens which really exist in one
of the policies.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35422">#35422</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a513961f1b2b0a771c900e626ccc93d0d0c1e171">a513961</a></li>
</ul>
</div>
<div class="section" id="bugfix-guard-against-missing-server-global-variables">
<h3>[BUGFIX] Guard against missing server global variables</h3>
<p>Calling Http\Request::createFromEnvironment() gives a notice about an
undefined array index for HTTP_HOST and REMOTE_URI if used e.g. in
CLI based tests.</p>
<p>This change adds guards against this in the Request implementation.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36518">#36518</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=69e38209d2a4ff221d777fb0405d3a2906986281">69e3820</a></li>
</ul>
</div>
<div class="section" id="bugfix-action-arguments-of-type-datetime-throw-exception">
<h3>[BUGFIX] Action arguments of type DateTime throw Exception</h3>
<p>If an action argument is an object, the ValidatorResolver tries to
instantiate that object to use it as Validator without checks.</p>
<p>This change solves this by checking if the specified object implements
the ValidatorInterface.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35338">#35338</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5d1aa1b9aba4f1f80e0c82fd950b62aad4ee6b88">5d1aa1b</a></li>
</ul>
</div>
<div class="section" id="task-remove-leftover-session-dependency-from-http-request">
<h3>[TASK] Remove leftover session dependency from Http\Request</h3>
<p>This is actually not used and causes circular dependency problems
in some cases.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b2ee527c5c127205fbb31bbbec5abc901a83478c">b2ee527</a></li>
</ul>
</div>
<div class="section" id="feature-track-all-configuration-changes">
<h3>[FEATURE] Track all configuration changes</h3>
<p>This change set greatly improves the file monitoring of FLOW3&#8217;s
system relevant files, such as class files, settings, object
configuration, policies and translations.</p>
<p>In Development context, changes to any of the above will be
tracked and the related caches are flushed. For performance
reasons, the new mechanism does not rely on the tagging
feature of the cache framework, but uses the new Simple
File Backend and rather flushes a few caches too many than
missing an important change.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/5849">#5849</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33811">#33811</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35912">#35912</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fb277f305a7cbfb73d60ce2de218790f3093fdb8">fb277f3</a></li>
</ul>
</div>
<div class="section" id="feature-make-cache-backends-more-flexible">
<h3>[!!!][FEATURE] Make cache backends more flexible</h3>
<p>This change makes cache backends more flexible. It adds a new interface
&#8220;TaggableBackendInterface&#8221; and a new &#8220;SimpleFileBackend&#8221;. The latter
does not support tagging but is faster in certain cases (where with a
lot of tags/entries flushing everything is faster than flushing by tag).</p>
<p>If you have implemented a cache backend and support tagging, you must
add the &#8220;TaggableBackendInterface&#8221; to the list of interfaces implemented
by your backend.</p>
<p>In addition this change makes the PDO backend a little more robust and
resolves some code style issues.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36563">#36563</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Extbase Issue: <a class="reference external" href="http://forge.typo3.org/issues/36564">#36564</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=08924c0cf8ceec3c181b31f61d5ae6cf2c6b8467">08924c0</a></li>
</ul>
</div>
<div class="section" id="feature-filemonitor-now-uses-identifier-and-has-getidentifier">
<h3>[!!!][FEATURE] FileMonitor now uses identifier and has getIdentifier()</h3>
<p>This change makes the FileMonitor use the identifier internally and
provides a getIdentifier() method. With this, using multiple file
monitors becomes feasible.</p>
<p>The &#8220;ChangeDetectionStrategyInterface&#8221; contains the two new methods
&#8220;setFileMonitor&#8221; and &#8220;shutdownObject&#8221; now, so if you implemented your
own change detection strategy, you need to implement those.</p>
<p>The ModificationTimeStrategy provided with FLOW3 is no longer singleton
and thus usable with multiple file monitor instances in parallel.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36568">#36568</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cf6bb6911b4f609a59a8cf7986f364162a18abed">cf6bb69</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-environment-after-http-refactoring">
<h3>[!!!][TASK] Clean up Environment after HTTP refactoring</h3>
<p>With the HTTP foundation quite some things from Environment have become
obsolete. The class and it&#8217;s &#8220;users&#8221; are adjusted in this change.</p>
<p>The following methods are removed from Environment (check Http\Request
to see if a method you need is available there) with this change:</p>
<ul class="simple">
<li>setBaseUri</li>
<li>getHTTP*</li>
<li>getAcceptedFormats</li>
<li>getRemoteAddress</li>
<li>getRemoteHost</li>
<li>getRequestProtocol</li>
<li>getRequestUri</li>
<li>getBaseUri</li>
<li>getScriptPathAndFileName</li>
<li>getScriptRequestPathAndFileName</li>
<li>getScriptRequestPath</li>
<li>getRequestMethod</li>
<li>getCommandLineArgumentCount</li>
<li>getCommandLineArguments</li>
<li>getSAPIName</li>
<li>getRawGetArguments</li>
<li>getRawPostArguments</li>
<li>getUploadedFiles</li>
<li>getRawServerEnvironment</li>
</ul>
<p>Most of those were marked as public API, but we still decided to drop
them, as their use cases were only guesswork.</p>
<p>For some things that used to be available, access to the current request
is now needed. For this, getHttpRequest() was added to the new
HttpRequestHandlerInterface, which returns the current HttpRequest.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36340">#36340</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=817017e0051be25da3a675c666f811f88a62c802">817017e</a></li>
</ul>
</div>
<div class="section" id="task-move-baseuri-setting-from-environment-to-http-request">
<h3>[!!!][TASK] Move baseUri setting from Environment to Http\Request</h3>
<p>The Environment class optionally used a setting to specify a fixed
baseUri to be used. With the HTTP foundation this settings was no
longer used (consistently).</p>
<p>If in Settings.yaml the &#8220;utility:environment:baseUri&#8221; settings was used,
it must be changed to &#8220;http:baseUri&#8221;!</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36397">#36397</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e2d704e7895ee971a51ec3f37c78e7b3b50bdf69">e2d704e</a></li>
</ul>
</div>
<div class="section" id="bugfix-uploaded-files-are-not-untangled-anymore">
<h3>[BUGFIX] Uploaded files are not untangled anymore</h3>
<p>TYPO3\FLOW3\Http\Request is missing the functionality that is implemented
in TYPO3\FLOW3\Utility\Environment::untangleFilesArray().</p>
<p>This causes the $source array in
TYPO3\FLOW3\Property\PropertyMapper::convert() to have invalid keys from
the $_FILES array (name, type, tmp_name, error, size) which causes an
exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36114">#36114</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1256837a3d1ed1d9f7b54d5ccdc6c31dceecc73e">1256837</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-httprequesthandlerinterface">
<h3>[FEATURE] Introduce HttpRequestHandlerInterface</h3>
<p>This new interface identifies request handlers which are
supporting and working with HTTP requests as such and
allows other application parts to retrieve the current HTTP
request.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36565">#36565</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9dcd31d94865a984ce7b17e56fd8109028cf86da">9dcd31d</a></li>
</ul>
</div>
<div class="section" id="task-tweak-doc-comments-to-be-more-explanatory">
<h3>[TASK] Tweak doc comments to be more explanatory</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5ddf5140f6e3bd1e59478919c517ec14ea8f2d30">5ddf514</a></li>
</ul>
</div>
<div class="section" id="bugfix-base-precompiledreflectiondata-path-on-temporary-path">
<h3>[BUGFIX] Base PrecompiledReflectionData path on temporary path</h3>
<p>The path to the precompiled reflection data is no longer
configured separately but instead always derived from the FLOW3
temporary path.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36578">#36578</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36572">#36572</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36569">#36569</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=286a7d6d1a20a65c106b22ac41c57481074bff07">286a7d6</a></li>
</ul>
</div>
<div class="section" id="bugfix-do-not-use-fallback-temporary-directory">
<h3>[BUGFIX] Do not use fallback temporary directory</h3>
<p>With this change you will get an exception if you miss the
temporary path setting in your settings instead of falling
back to the system temporary path, because this could lead to
problems with multiple FLOW3 instances on the same system.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36577">#36577</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d1a05a20c8e6f024291752c63aa58b29d6add618">d1a05a2</a></li>
</ul>
</div>
<div class="section" id="task-improve-compilation-error-message">
<h3>[TASK] Improve &#8220;compilation error message&#8221;</h3>
<p>When the compile run failed, an exception was thrown until now. This
lead to confusing output. With this change it doesn&#8217;t output useless
PHP version info etc. anymore.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36562">#36562</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9539aca721deb3bfb54c6188612e9e3e0f923856">9539aca</a></li>
</ul>
</div>
<div class="section" id="bugfix-update-package-states-after-package-import">
<h3>[BUGFIX] Update package states after package:import</h3>
<p>This patch makes sure that the package states information
is updated after a new package has been imported.</p>
<p>As before, the new package is not active by default.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36519">#36519</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dc3a2842e1dd506d1aad0868c0c726c1b378d250">dc3a284</a></li>
</ul>
</div>
<div class="section" id="bugfix-don-t-rewrite-packagestates-php-if-not-necessary">
<h3>[BUGFIX] Don&#8217;t rewrite PackageStates.php if not necessary</h3>
<p>This fix adjusts a comparison so that the PackageStates.php
file is only written if truly necessary.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36516">#36516</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=75d4bea5179322ee2a8f0b634cb4b4ae42721d06">75d4bea</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-precompiled-reflection-data-on-force-flush">
<h3>[BUGFIX] Remove precompiled reflection data on force flush</h3>
<p>This patch makes sure that any precompiled reflection data
of frozen packages is removed on a cache:flush &#8211;force.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36502">#36502</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=77fa8af3e98d55d5e29829b4eb0515a46112da28">77fa8af</a></li>
</ul>
</div>
<div class="section" id="feature-adds-a-quiet-flag-to-doctrine-migrate">
<h3>[FEATURE] Adds a quiet flag to doctrine:migrate</h3>
<p>With the flag set only the version numbers of the executed
migrations are output, one per line.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36276">#36276</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=64420cac2474b254c4c69dcee3092784443d6f00">64420ca</a></li>
</ul>
</div>
<div class="section" id="feature-allow-configurable-classes-path-in-packages">
<h3>[FEATURE] Allow &#8220;configurable&#8221; classes path in packages</h3>
<p>Package instances can be asked for their classes path, which is now set
determined by the PackageManager and stored in PackageStates.php.</p>
<p>It can - in the future - thus be read from a Composer file and
does no longer have to be the hardcoded &#8220;Classes&#8221;.</p>
<p>This change removes the use of the .Shortcuts folder again and makes
&#8220;overlapping&#8221; package keys possible (e.g. TYPO3.JobQueue and
TYPO3.JobQueue.Beanstalk).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36337">#36337</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=83a56d56f81554b9f4d4810173afd7d3425da4db">83a56d5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-content-security-current-globalobject-expansion">
<h3>[BUGFIX] Fix content security current.globalObject expansion</h3>
<p>Using for example current.securityContext in Policy.yaml made
FLOW3 crash completely in &#8220;eval&#8217;d&#8221; code.</p>
<p>This fixes the crash and removes the eval code by using the
TYPO3\FLOW3\Object\ObjectManager.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31677">#31677</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a5a90def350b789e0758982b97bd9d27b20576a5">a5a90de</a></li>
</ul>
</div>
<div class="section" id="task-adjust-functional-test-fixture-to-new-maximum-table-length">
<h3>[TASK] Adjust functional test fixture to new maximum table length</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35517">#35517</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=58b7c5f027cf452b7b7aa198201a0c34d77ecaf1">58b7c5f</a></li>
</ul>
</div>
<div class="section" id="task-add-db-migration-for-postgresql">
<h3>[TASK] Add DB migration for PostgreSQL</h3>
<p>This adds an initial migration for PostgreSQL to create the needed
schema for the package.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36301">#36301</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a95ffeee29a9ab4c129b8db699efe806ab540af3">a95ffee</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-column-type-detection-when-using-column-annotation">
<h3>[BUGFIX] Fixes column type detection when using Column annotation</h3>
<p>If a Column annotation is used but no type argument is given, the default
&#8220;string&#8221; type was used and did override the detection. Now the detection
is used again in those cases.</p>
<p>The only drawback is that you cannot force a column to be &#8220;string&#8221; any
more.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35011">#35011</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=503891c2854b05359902ae1b7984b9c2fe2f9396">503891c</a></li>
</ul>
</div>
<div class="section" id="task-cleans-up-some-smaller-issues">
<h3>[TASK] Cleans up some smaller issues</h3>
<dl class="docutils">
<dt>This change collects a number of smaller issues:</dt>
<dd><ul class="first last simple">
<li>clarifies description of migrationGenerateCommand</li>
<li>an exception is thrown on invalid Package.php file</li>
</ul>
</dd>
</dl>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=aafecb5765aa78c4110c5be15f418a85085e34b2">aafecb5</a></li>
</ul>
</div>
<div class="section" id="fixes-code-style-issues">
<h3>Fixes code style issues</h3>
<p>This change adds a ton of &#64;throws to docblocks and fixes other
documentation issues. Some code cleanup, like removing unused
variables and tweaking use statements is done as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fafc62ef6e89add4d622077f4282841e1b02fc8d">fafc62e</a></li>
</ul>
</div>
<div class="section" id="task-derive-maximum-table-name-length-from-doctrine-dbal">
<h3>[TASK] Derive maximum table name length from Doctrine.DBAL</h3>
<p>Doctrine.DBAL drivers have informations about the maxmimum
allowed table length, so the annotation driver uses this
information now.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35517">#35517</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cc2477fa3ac2096c10834522d5f4beefdcff0b55">cc2477f</a></li>
</ul>
</div>
<div class="section" id="bugfix-changes-the-default-for-nullable-columns-to-false">
<h3>[!!!][BUGFIX] Changes the default for nullable columns to FALSE</h3>
<p>This change makes columns not nullable by default, as is the case with
vanilla Doctrine 2.</p>
<p>This is a breaking change if you rely on NULL values to be returned
to detect special cases, like for not using unset date properties.
In those cases you need to mark your property with the Doctrine
annotation: Column(nullable=true)</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35059">#35059</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=115bda50778c04619481554a94bf5b47ab98409b">115bda5</a></li>
</ul>
</div>
<div class="section" id="id367">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=28a090457ee4df8ec45c514c01072c73fd0867e8">28a0904</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow3-php-now-uses-return-code-from-setfilepermissions-sh">
<h3>[BUGFIX] flow3.php now uses return code from setfilepermissions.sh</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36279">#36279</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e6cd5cdb5aad759463fdd1c8e09c0e0d53589f59">e6cd5cd</a></li>
</ul>
</div>
<div class="section" id="task-fix-functional-test-for-http-requesthandler">
<h3>[TASK] Fix functional test for HTTP RequestHandler</h3>
<p>The HTTP RequestHandler test can only be executed if the
global routes configuration include the routes from the
FLOW3 package. That might not be the case in other than
the FLOW3 distribution and then this test fails.</p>
<p>Fixed this by skipping the test if it can&#8217;t succeed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dd014d2ee22861d41833378bbe9f4d17877f04c8">dd014d2</a></li>
</ul>
</div>
<div class="section" id="task-remove-a-rather-dubious-unit-test-for-redis-cache-backend">
<h3>[TASK] Remove a rather dubious unit test for Redis cache backend</h3>
<p>Fixes a catch statement around connect as well.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e06bd9bb0a3e602a6b067d91b94e88cd78d96135">e06bd9b</a></li>
</ul>
</div>
<div class="section" id="feature-improve-value-object-support">
<h3>[FEATURE] Improve value object support</h3>
<p>This allows to handle value objects as intended. Create a new
one and persistence will take care to check if the value object
exists already.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/3585">#3585</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0af0647d5295353f29b9f5fbdff678f33bdaa6d7">0af0647</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixed-empty-exception-for-cli-commands">
<h3>[BUGFIX] Fixed empty exception for CLI commands</h3>
<p>When issuing an invalid command line (missing or wrong arguments),
FLOW3 displayed an exception #0 without further explanation.
The reason was an uncaught StopActionException thrown in the
CommandController::forward() method.</p>
<p>This patch fixes that bug and additionally eliminates some
duplicate code in CommandRequestHandler.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36030">#36030</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f9847d2b25c7d700f715932ef18c1473e8b251fc">f9847d2</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-csrf-protection-if-not-authenticated">
<h3>[BUGFIX] Skip CSRF protection if not authenticated</h3>
<p>CSRF protection prevented the triggering of authentication entry
points in some cases. As CSRF protection is not needed,
if nobody is authenticated, we completely skip this feature
in those cases.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36035">#36035</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6ed045ce6283a6c359d2aef681a64f96bcec8958">6ed045c</a></li>
</ul>
</div>
<div class="section" id="task-stability-improvement-to-functional-persistence-test">
<h3>[TASK] Stability improvement to functional persistence test</h3>
<p>Adds ordering to TestEntityRepository to make results predictable.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=49d0b48aec80d7b6db3cf05cfb4e51115a2085ab">49d0b48</a></li>
</ul>
</div>
<div class="section" id="task-make-output-of-doctrine-migration-status-more-compact">
<h3>[TASK] Make output of doctrine:migration status more compact</h3>
<p>This change removes some superfluous newlines that made the
migration status output rather long…</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3ca5db88e46cd9ee47b48d2d9470938974c9ced3">3ca5db8</a></li>
</ul>
</div>
<div class="section" id="task-give-hint-with-exception-on-aggregate-roots-in-hierarchies">
<h3>[TASK] Give hint with exception on aggregate roots in hierarchies</h3>
<p>The message &#8220;In a class hierarchy either all or no classes must be
an aggregate root, &#8220;Foo&#8221; is one but the parent class &#8220;Bar&#8221; is not.&#8221;
is not really helpful for developers.</p>
<p>This change adds a hint on how to solve the problem.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35892">#35892</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5b10bd1c0037f163a92be6b34464725eb86a655c">5b10bd1</a></li>
</ul>
</div>
<div class="section" id="task-ignore-codecoverageignore-annotation">
<h3>[TASK] Ignore &#64;codeCoverageIgnore annotation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=59bec6a65d05d5523a85e7811c1f75c65c45b4eb">59bec6a</a></li>
</ul>
</div>
<div class="section" id="security-protect-arguments-of-form-referrer-with-hmac">
<h3>[SECURITY] Protect arguments of form __referrer with HMAC</h3>
<p>The request arguments of the referring request are
a serialized string written to one of the hidden
fields in a Fluid form. This string has to be protected
by a HMAC to protect FLOW3 from possible unserialize
attacks.</p>
<p>Note: For now there is no object known within the FLOW3
Distribution, that could be used for an unserialize
exploit!</p>
<ul class="simple">
<li>Security-Bulletin: <a class="reference external" href="http://typo3.org/teams/security/security-bulletins/flow3/FLOW3-SA-2012-001/">FLOW3-SA-2012-001</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35300">#35300</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dc46450431cf55667da03bfdd9c624291479d953">dc46450</a></li>
</ul>
</div>
<div class="section" id="task-add-group-tag-to-excluded-tags-as-phpunit-now-requires-to-tag-big-testcases">
<h3>[TASK] add &#8220;Group&#8221; tag to excluded tags, as PHPunit now requires to tag big testcases</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5d6c3eaa29d2d8f72636224541b15ab12f35565b">5d6c3ea</a></li>
</ul>
</div>
<div class="section" id="task-add-missing-getparentrequest-method-in-http-response">
<h3>[TASK] Add missing getParentRequest() method in HTTP Response</h3>
<p>Furthermore, some documentation cleanup.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=eb813f9640c3a22c14711a61187ef5320150784c">eb813f9</a></li>
</ul>
</div>
<div class="section" id="feature-http-client-for-functional-testing">
<h3>[FEATURE] HTTP Client for Functional Testing</h3>
<p>This adds a virtual HTTP client which supports pluggable request engines
for different purposes. The first scenario in which we&#8217;ll use this new
&#8220;Browser&#8221; is for seamless functional testing of controllers and other
features which should be tested through the whole request / response
chain.</p>
<p>The FunctionalTestCase now provides a new class property called
&#8220;testableHttpEnabled&#8221; which, if set to TRUE, initializes a new browser
for each test and provides it as $this-&gt;browser.</p>
<p>Also adds a bunch of functional tests for the MVC ActionController using
this new feature.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35706">#35706</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ecb44c545eb5bbb5b89718c9de1236414b9b770c">ecb44c5</a></li>
</ul>
</div>
<div class="section" id="feature-provide-method-getcontent-for-http-request">
<h3>[FEATURE] Provide method getContent() for HTTP request</h3>
<p>This implements a method for retrieving the HTTP request body.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bbc5e3349d8378329da28a052b683ec847d9abd6">bbc5e33</a></li>
</ul>
</div>
<div class="section" id="bugfix-alternative-entry-points-can-be-configured-again">
<h3>[!!!][BUGFIX] Alternative entry points can be configured again</h3>
<p>This fix allows for using other than the pre-defined WebRedirect
entry points (for example the HTTP Basic entry point).</p>
<p>In order to avoid confusion, this patch also streamlines the setting
names for authentication providers. It makes sure that only one entry
point can be defined at all and adjusts the naming of other settings
to be in line with other FLOW3 setting conventions.</p>
<p>The keys of settings for the authentication provider have changed as
follows:</p>
<dl class="docutils">
<dt>DefaultProvider:</dt>
<dd>provider:          &#8216;(a class name)&#8217;
providerOptions:   [ ... options ... ]
token:             &#8216;(a class name)&#8217;
entryPoint:        &#8216;(a class name)&#8217;
entryPointOptions: [ ... options ... ]</dd>
</dl>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33495">#33495</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ad0bcd5e3ce536658d0a7625ce5bbb1de098411a">ad0bcd5</a></li>
</ul>
</div>
<div class="section" id="feature-http-1-1-support-foundations">
<h3>[!!!][FEATURE] HTTP 1.1 Support – Foundations</h3>
<p>This commit contains the foundations for a better HTTP support in
FLOW3. It extracts request and response handling into a dedicated
sub package &#8220;Http&#8221; and clearly distinguishes between HTTP requests
and &#8220;action requests&#8221;.</p>
<p>While this change set does contain a few new features which are
related to HTTP support, it is by far not complete and rather serves
as a foundation for further features which are following.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0e05ccc570e5d0a46c860e23d38eec3566e6e36e">0e05ccc</a></li>
</ul>
</div>
<div class="section" id="task-sub-package-name-case-and-location-adjustments">
<h3>[!!!][TASK] Sub package name case and location adjustments</h3>
<p>This change set contains (mostly) renames and relocations of FLOW3 sub
namespaces. These changes are necessary to meet the FLOW3 coding
guidelines and naming conventions and to support the new CLI / HTTP
and MVC structure.</p>
<ul class="simple">
<li>\TYPO3\FLOW3\AOP -&gt; \TYPO3\FLOW3\Aop</li>
<li>\TYPO3\FLOW3\MVC -&gt; \TYPO3\FLOW3\Mvc</li>
<li>\TYPO3\FLOW3\MVC\CLI -&gt; \TYPO3\FLOW3\Cli</li>
<li>\TYPO3\FLOW3\MVC\Web\Routing -&gt; \TYPO3\FLOW3\Mvc\Routing</li>
<li>\TYPO3\FLOW3\MVC\Web\Request -&gt; \TYPO3\FLOW3\Mvc\ActionRequest</li>
<li>\TYPO3\FLOW3\MVC\Web\Response -&gt; \TYPO3\FLOW3\Http\Response</li>
<li>\TYPO3\FLOW3\MVC\Web\SubRequest -&gt; \TYPO3\FLOW3\Mvc\ActionRequest</li>
<li>\TYPO3\FLOW3\MVC\Web\SubResponse -&gt; TYPO3\FLOW3\Http\Response</li>
<li>\TYPO3\FLOW3\MVC\Controller\CommandController -&gt; \TYPO3\FLOW3\Cli\CommandController</li>
<li>\TYPO3\FLOW3\Property\DataType\Uri -&gt; \TYPO3\FLOW3\Http\Uri</li>
<li></li>
<li>\TYPO3\FLOW3\MVC\Web\RequestBuilder doesn&#8217;t exist anymore. If
you need to create requests, do &#8220;new ActionRequest($parentRequest)&#8221;</li>
<li>\TYPO3\FLOW3\MVC\Web\SubRequestBuilder doesn&#8217;t exist anymore.
If you need to create sub requests, do &#8220;new ActionRequest($parentRequest)&#8221;&#8220;</li>
</ul>
<p>Note that this change set contains most but not every single adjustment
to the new locations as it is part of a bigger change for the respective
feature.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33705">#33705</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=331a78e8ba19923951a83d50e5f30cc09068db61">331a78e</a></li>
</ul>
</div>
<div class="section" id="feature-force-option-for-flow3-cache-flush">
<h3>[FEATURE] &#8211;force option for flow3:cache:flush</h3>
<p>Packages containing invalid PHP code which cause fatal errors
can prevent FLOW3 from flushing code caches with
./flow3 typo3.flow3:cache:flush</p>
<p>This patch provides a new &#8211;force option which skips all non-
essential initialization and flushes caches directly, including
emptying the whole temporary directory.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35826">#35826</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3ceb727c29ee61e4bec43d23cee0912bbbc24d58">3ceb727</a></li>
</ul>
</div>
<div class="section" id="task-getting-started-correct-snippet-description">
<h3>[TASK] Getting started: Correct snippet description</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35264">#35264</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c7c095c10d682bc812fb9f1a7a74620e69f874a5">c7c095c</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-documentation-to-new-documentation-workflow">
<h3>[BUGFIX] Adjust documentation to new documentation workflow</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35666">#35666</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d12ce447263257851c8ddaeb68182edf96981d9a">d12ce44</a></li>
</ul>
</div>
<div class="section" id="task-remove-selenium-test-case">
<h3>[TASK] Remove Selenium Test Case</h3>
<p>This removes the unsupported, unnecessary and unfunctional
Selenium Test Case.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35682">#35682</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8cec12a92f83f59fa05a2012b2c2175a8c976c1d">8cec12a</a></li>
</ul>
</div>
<div class="section" id="bugfix-virtual-host-configuration-contains-production-context-definition">
<h3>[BUGFIX] Virtual host configuration contains Production context definition</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34902">#34902</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ff4eb7e3c5b18563f91299e898ffc5ba36a84c27">ff4eb7e</a></li>
</ul>
</div>
<div class="section" id="bugfix-proxy-methods-with-referenced-arguments-should-work">
<h3>[BUGFIX] Proxy methods with referenced arguments should work</h3>
<p>Arguments given by reference would result in an exception if
the method was proxied due to AOP.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30914">#30914</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/13333">#13333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fa0867857380f9d843a2d749d3dd4195f5a6535e">fa08678</a></li>
</ul>
</div>
<div class="section" id="task-improve-textvalidator-unit-tests">
<h3>[TASK] Improve TextValidator unit tests</h3>
<p>This introduces more test texts for the TextValidator tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/3977">#3977</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cfa4bd554d4fa6b462768b3e862ae6b2639598f7">cfa4bd5</a></li>
</ul>
</div>
<div class="section" id="task-add-flow3-documentation-to-typo3-flow">
<h3>[TASK] add FLOW3 documentation to TYPO3.Flow</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35524">#35524</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fdd5c99378b2a7491f29b1c141b0e8048b25eff0">fdd5c99</a></li>
</ul>
</div>
<div class="section" id="bugfix-datetimevalidator-throws-exception-when-validating-datetime-objects">
<h3>[BUGFIX] DateTimeValidator throws exception when validating DateTime objects</h3>
<p>The DateTimeValidator tries to parse DateTime objects
with the L18n DatesParser which throws an exception.</p>
<p>This change fixes this by checking if the specified value
is an instance of DateTime first.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34050">#34050</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3cafccf68f5d082c312946c79b29c23bf761a365">3cafccf</a></li>
</ul>
</div>
<div class="section" id="task-fix-doc-comments-for-authentication-providers">
<h3>[TASK] Fix doc comments for authentication providers</h3>
<p>Fixes the wrong return doc annotation for the getTokenClassnames method</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35317">#35317</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2dd67d26e151496771e8ef4c3c4e2016a904971d">2dd67d2</a></li>
</ul>
</div>
<div class="section" id="task-grammar-police-at-work">
<h3>[TASK] Grammar police at work</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8ec5166f43dd6aaef81d241b3834b6060b545875">8ec5166</a></li>
</ul>
</div>
<div class="section" id="task-cosmetic-changes-in-test-cases">
<h3>[TASK] Cosmetic changes in test cases</h3>
<p>This removes the &#64;category annotation from a bunch
of security related tests and replace an inject
method in the PackageCommandController by property
injection.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=30a007d1c2fe5aa033c7ba5df89114e052686bd8">30a007d</a></li>
</ul>
</div>
<div class="section" id="feature-inject-convenience-method-in-base-test-case">
<h3>[FEATURE] inject() convenience method in Base Test Case</h3>
<p>Testing code which uses dependency injection requires
some additional lines of code for manually injecting
the dependencies needed to run a unit test.</p>
<p>This patch provides a new convenience method – inject() –
which takes care of manual injection of dependencies
in unit test cases.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35135">#35135</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8152b8c97a292e79e24b514b161850ccdba85b03">8152b8c</a></li>
</ul>
</div>
<div class="section" id="bugfix-clear-shortcuts-on-cache-flush-command">
<h3>[BUGFIX] Clear .Shortcuts on cache flush command</h3>
<p>In case some directories were renamed you are able to get
back to a defined state with the cache:flush command.</p>
<p>It will also clean the .Shortcuts directory to prevent
mismatches.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34837">#34837</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6d13ef279506dddfa7230ed935347eadaf513e6b">6d13ef2</a></li>
</ul>
</div>
<div class="section" id="bugfix-streamwrapperadapter-stream-lock-does-not-return-result">
<h3>[BUGFIX] StreamWrapperAdapter::stream_lock does not return result</h3>
<p>StreamWrapperAdapter::stream_lock() does not return the results
of the actual stream wrapper. But according to the docs this
should return TRUE on success and FALSE on failure.</p>
<p>This change fixes this and adds unit tests for all public methods
of the adapter.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34555">#34555</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2fd21b11f5b72a668d3d408328a3f7bbd72dc646">2fd21b1</a></li>
</ul>
</div>
<div class="section" id="feature-configurable-hint-about-log-message-origin">
<h3>[FEATURE] Configurable hint about log message origin</h3>
<p>This feature allows for enabling the additional hint for the origin of
logged messages handled by the FileBackend. By default these hints are
now omitted.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35052">#35052</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=becbc65f77c30547c0a56a5a1e93b6b68be1365a">becbc65</a></li>
</ul>
</div>
<div class="section" id="feature-automatic-session-expiration-on-user-inactivity">
<h3>[FEATURE] Automatic session expiration on user inactivity</h3>
<p>This feature lets sessions expire automatically after a certain time
of user inactivity. The actual timeout can be specified through a
new setting called &#8220;inactivityTimeout&#8221;.</p>
<p>This patch also sets the default cookie lifetime to infinite, as
expiration can be better controlled through the new timeout feature.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31192">#31192</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35034">#35034</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cfe4af2e7423da6adbe881d1c97e14abc62ce189">cfe4af2</a></li>
</ul>
</div>
<div class="section" id="bugfix-context-hasrole-now-checks-roles-recursively">
<h3>[BUGFIX] Context::hasRole() now checks roles recursively</h3>
<p>Previously, hasRole() only considered the first level of roles of a
token. getRoles() instead always considered all roles, including those
on a lower level.</p>
<p>This patch fixes the behavior of hasRole() by checking for roles
recursively. As before, the &#8220;Everybody&#8221; role is a role even non-
authenticated and anonymous users have.</p>
<p>This also fixes &lt;f:security.ifHasRole&gt;, as this ViewHelper directly uses
Context::getRoles.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31997">#31997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=861231e1eff72b53d3dd415c496bed2b29752358">861231e</a></li>
</ul>
</div>
<div class="section" id="bugfix-yamlsource-creates-invalid-yaml-files">
<h3>[BUGFIX] YamlSource creates invalid YAML files</h3>
<p>YamlSource::save() currently creates Windows style EOLs
and indentation is lost in YAML files.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35016">#35016</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=36e46e7464a35dea2b7febe7b337817511fc8210">36e46e7</a></li>
</ul>
</div>
<div class="section" id="feature-precompiled-reflection-data-for-frozen-packages">
<h3>[FEATURE] Precompiled reflection data for frozen packages</h3>
<p>This feature introduces &#8220;frozen packages&#8221;. Through the command line
command &#8220;package:freeze&#8221; one ore more packages can be set into a
frozen state. A frozen package is excluded from file monitoring and
its reflection data is stored in a file separate from the regular
caches. After caches have been flushed, this precompiled reflection
data is loaded in order to speed up the compile run during that first
hit.</p>
<p>With &#8220;package:unfreeze&#8221; packages can be unfrozen and &#8220;package:refreeze&#8221;
will refresh the precompiled reflection data of an already frozen
package.</p>
<p>Package freezing is only supported for Development context.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34827">#34827</a></li>
<li>Resolves: PHX-71</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e1810549a590de455a609443a1f35e2e3d9baee3">e181054</a></li>
</ul>
</div>
<div class="section" id="feature-optimize-aop-proxy-building">
<h3>[FEATURE] Optimize AOP proxy building</h3>
<p>This simply makes AOP proxy building a lot faster.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/9568">#9568</a></li>
<li>Resolves: PHX-72</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=38c3c8e7edbb730699dbd993e180e8aee39b3e3d">38c3c8e</a></li>
</ul>
</div>
<div class="section" id="feature-allow-setting-datatype-from-outside">
<h3>[FEATURE] Allow setting dataType from outside</h3>
<p>This change introduces a public setter method for
the dataType property, making it possible to
influence the target type for propery mapper.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34867">#34867</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6475457dadf9f8d00da542e99567395dad796c51">6475457</a></li>
</ul>
</div>
<div class="section" id="feature-package-help-in-cli">
<h3>[FEATURE] Package help in CLI</h3>
<p>This extends the CLI to display a list of all commands of a
specified package including their short description.
Also if more commands match a given identifier, now the list
of all matching commands with short descriptions is displayed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30256">#30256</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e382d9fe499e9c0302fd97bb6046a16cf2f063d8">e382d9f</a></li>
</ul>
</div>
<div class="section" id="bugfix-removes-ghost-command-getflow3">
<h3>[BUGFIX] Removes &#8220;ghost command&#8221; getflow3</h3>
<p>The fix for #33048 in Ia8561a7878b7dd9ba8a6f3bb926c9da10b46bd0c caused a
ghost command to appear in all command controllers…</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34811">#34811</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33048">#33048</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d8ee47023607e65be59f30ea6c43bc37042f96dd">d8ee470</a></li>
</ul>
</div>
<div class="section" id="bugfix-html-should-be-escaped-in-debug-exception">
<h3>[BUGFIX] HTML should be escaped in Debug Exception</h3>
<p>HTML in the code that is output as part of the stack trace is
escaped now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/25961">#25961</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fa8fd72a7c1f6794561e0ce111484fcccd3cc867">fa8fd72</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-flow3-bat-output-usage-texts-matching-windows">
<h3>[BUGFIX] Make flow3.bat output usage texts matching Windows</h3>
<p>When using flow3.bat on Windows the usage information would tell the
user to call &#8221;./flow3&#8221;, which doesn&#8217;t fit the Windows world.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33048">#33048</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7e567e8d38e5a24f052a7da4fa7ae0fd657540e3">7e567e8</a></li>
</ul>
</div>
<div class="section" id="task-remove-deprecated-methods-and-unused-code">
<h3>[TASK] Remove deprecated methods and unused code</h3>
<p>Things which have been deprecated prior to the 1.0.0 release are
removed with this change:</p>
<ul class="simple">
<li>Cache\AbstractFrontend-&gt;getClassTag()</li>
<li>ObjectManager-&gt;create()</li>
<li>ObjectManager-&gt;recreate()</li>
<li>HashService-&gt;generateSaltedMd5()</li>
<li>HashService-&gt;validateSaltedMd5()</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27770">#27770</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33789">#33789</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a29012b669e90a7e39a4727514538ace5a77eb80">a29012b</a></li>
</ul>
</div>
<div class="section" id="bugfix-packagemanager-should-update-shortcuts-when-needed">
<h3>[BUGFIX] PackageManager should update .Shortcuts when needed</h3>
<p>The PackageManager needs to update the shortcuts when saving
package states. Besides that the PackageManager should ignore
inactive packages when creating shortcuts.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33417">#33417</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34322">#34322</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fec2ff945c3b1a73e0811637fe4bb2ecbce8e6df">fec2ff9</a></li>
</ul>
</div>
<div class="section" id="bugfix-package-php-template-should-have-correct-use-statements">
<h3>[BUGFIX] Package.php template should have correct use statements</h3>
<p>The Package.php template will generate clean use statements with
same usage of backslashes.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b6191e900e1546122e8f1147de96e050224ace82">b6191e9</a></li>
</ul>
</div>
<div class="section" id="bugfix-typo-in-return-statement-for-getaccessdecisionvoters">
<h3>[BUGFIX] typo in return statement for getAccessDecisionVoters()</h3>
<p>Fix return value to array.
Fix type hinting for var $securityContext and $authenticationManager</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34620">#34620</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=94a079947cfd9ca80ad4fd308aec32aa7f95dced">94a0799</a></li>
</ul>
</div>
<div class="section" id="task-fix-variable-annotations-missing-prepending-backslashes">
<h3>[TASK] Fix variable annotations (missing prepending backslashes)</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=62d0629d5ddd7e2106fae6ebe664a401a266b30b">62d0629</a></li>
</ul>
</div>
<div class="section" id="bugfix-resourcestreamwrapper-returns-wrong-value-for-fseek">
<h3>[BUGFIX] ResourceStreamWrapper returns wrong value for fseek</h3>
<p>Calling fseek will always return the wrong value, as fseek
return 0 on success otherwise -1.
The stream_wrapper expects a boolean value. So 0 will be
evaluated to false and -1 will be evaluated to true</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34608">#34608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dd761bb014e45eda471a24b209aaf56c0bf279dd">dd761bb</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-variable-name-inside-rename-function">
<h3>[BUGFIX] wrong variable name inside rename function</h3>
<p>Use the propper variable name to create the stream wrapper.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34547">#34547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fe76887f75aa80b82be3104ef1f51e065dd774f0">fe76887</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-getpasswordhashingstrategyandidentifier-return-value">
<h3>[BUGFIX] Fixes getPasswordHashingStrategyAndIdentifier() return value</h3>
<p>getPasswordHashingStrategyAndIdentifier() is supposed to return an
array, but in case a strategy identifier has been requested already,
an object will be returned and break the calling code.</p>
<p>This change fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33645">#33645</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=999b95082c1b5695f698a7f640e9eeaec51d9231">999b950</a></li>
</ul>
</div>
<div class="section" id="bugfix-notfoundview-sets-404-status">
<h3>[BUGFIX] NotFoundView sets 404 status</h3>
<p>The default NotFoundView, which renders a 404 template,
sets now also the HTTP status to 404.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34407">#34407</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ca5b3b9a535ff29a4e34c70bbeb68612d135b0f1">ca5b3b9</a></li>
</ul>
</div>
<div class="section" id="task-add-utility-function-to-retrieve-class-names-for-objects">
<h3>[TASK] Add utility function to retrieve class names for objects</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34426">#34426</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5938c224ec764b7d9d878077006d5fe84224994c">5938c22</a></li>
</ul>
</div>
<div class="section" id="task-remove-collection-validation-from-lazy-collections">
<h3>[TASK] Remove collection validation from Lazy collections</h3>
<p>The change to validate collections introduced unwanted behavior
by validating lazy annotated and not yet initialized collections.
This basically disables lazy loading and introduces a major memory
problem.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34154">#34154</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=91a9590f80b91d7067e006d77c0855863d829381">91a9590</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-missing-context-field-to-objectmanager">
<h3>[BUGFIX] Add missing $context field to ObjectManager</h3>
<p>The ObjectManager refers to $this-&gt;context which didn&#8217;t exist.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34423">#34423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=74838ac1f5e96f097aac0addaad89940c10b766f">74838ac</a></li>
</ul>
</div>
<div class="section" id="bugfix-isauthenticated-should-work-in-authentication-request">
<h3>[BUGFIX] isAuthenticated should work in authentication request</h3>
<p>AuthenticationManager::isAuthenticated now checks for resumable
and new sessions before returning FALSE, so it works also in the
request that triggers the authentication.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33311">#33311</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=08b70b827705d1c1001a2bf92ca6cb0d423f13d0">08b70b8</a></li>
</ul>
</div>
<div class="section" id="bugfix-security-remove-default-authentication-provider">
<h3>[!!!][BUGFIX] (Security): Remove default authentication provider</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34399">#34399</a></li>
<li>Related to: #34398</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3f288553a845c904596dd51454cbc90a3e89e06d">3f28855</a></li>
</ul>
</div>
<div class="section" id="task-add-abstract-classes-for-entrypoint-provider-token-in-security-authentication">
<h3>[TASK] Add abstract classes for entrypoint, provider &amp; token in security authentication</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34304">#34304</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2a7a67fca12db09aa970549f36b34a50446d4a26">2a7a67f</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-missing-function-visibility-declarations">
<h3>[BUGFIX] Fixes missing function visibility declarations</h3>
<p>Some methods were missing their visibility declarations, this
change adds them.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33460">#33460</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=95e0ca4941f447f898f84298e529a78c44976dc3">95e0ca4</a></li>
</ul>
</div>
<div class="section" id="task-fix-doc-comments">
<h3>[TASK] Fix doc comments</h3>
<p>Fixes doc comments issues, like missing or wrong &#64;param
annotations. Removes &#64;author annotations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9c9decda5d832d80ef1f4bbda319d6ae8fee32c9">9c9decd</a></li>
</ul>
</div>
<div class="section" id="bugfix-now-filters-correctly-for-destruct-in-pointcut-filter">
<h3>[BUGFIX] Now filters correctly for &#8216;__destruct&#8217; in pointcut filter</h3>
<p>The filter for proxyable methods in SessionObjectMethodsPointcutFilter skips
the method &#8216;__desctruct&#8217; instead of &#8216;__destruct&#8217;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34293">#34293</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5c5934c38c177d7c8ffb0235177c15001e79dec5">5c5934c</a></li>
</ul>
</div>
<div class="section" id="bugfix-keep-class-doc-comments-when-building-proxies">
<h3>[BUGFIX] Keep class doc comments when building proxies</h3>
<p>Currently the doc comment of a class is replaced with
&#8220;Autogenerated Proxy Class&#8221; when the proxy class is generated.
This change fixes this and keeps the original doc comment.</p>
<p>That is particulary useful if you rely on the original comment
when creating automatic class documentations.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34110">#34110</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=899eb3f37229244f2938f84d52c655b80c91d759">899eb3f</a></li>
</ul>
</div>
<div class="section" id="bugfix-makes-translatebyid-work-if-no-arguments-need-to-be-replaced">
<h3>[BUGFIX] Makes translateById() work if no arguments need to be replaced</h3>
<p>If translateById() is able to find a translation but is not given
any arguments to embed in the output, NULL is returned without this
change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34171">#34171</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2b0b5b96657f731bcdef8ecd7ccbcf3edd4cc5de">2b0b5b9</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-wrong-locale-in-xliff-models">
<h3>[BUGFIX] Fixes wrong locale in XLIFF models</h3>
<p>If a translation is requested but no (exact) match is found,
a different locale may take effect (e.g. en instead of en_UK).</p>
<p>The XLIFF model created will refer to the en XLIFF file, but
claim it&#8217;s locale is en_UK. This leads to further problems
with translations (like missing labels if no target elements
are present in XLIFF files).</p>
<p>This change fixes that…</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34170">#34170</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b24339c953375fc738fca7ad364af78c558186b2">b24339c</a></li>
</ul>
</div>
<div class="section" id="feature-adds-fallback-rules-for-locale-resolution">
<h3>[FEATURE] Adds fallback rules for locale resolution</h3>
<p>Allows to set a fallback order for locale resolving. If not set,
the implicit inheritance of locales will be used. That is, if a
locale of en_UK is requested, matches will be searched for in en_UK
and en before trying the default locale configured in FLOW3.</p>
<p>If FLOW3 is given an order of [dk, za, fr_CA] a request for en_UK will
be looked up in en_UK, en, dk, za, fr_CA, fr before trying the default
locale.</p>
<p>If strict rule adherence is requested, the above example would instead look
in en_UK, dk, za, fr_CA before trying the default locale. In other words,
the implicit fallback is not applied to the locales in the fallback rule.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34172">#34172</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9ccbdb00a87a21796f28212c480a35112d014196">9ccbdb0</a></li>
</ul>
</div>
<div class="section" id="feature-adds-i18n-configuration-holder">
<h3>[!!!][FEATURE] Adds i18n configuration holder</h3>
<p>To control the behavior of the i18n component a way to
configure the &#8220;current&#8221; locale, fallback rules for resolving
of translations and possible more is needed.</p>
<p>This change adds a Configuration object to the i18n code
which encapsulates the configurable parts.</p>
<p>For early adopters this change means the calls to
getDefaultLocale() and getCurrentLocale() on I18n\Service
need to be routed to Service-&gt;getConfiguration()-&gt;…
instead.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34169">#34169</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7323b900fb1c96e14f36e2cc7b67b064dc01d912">7323b90</a></li>
</ul>
</div>
<div class="section" id="feature-makes-quantity-optional-in-translation-methods">
<h3>[FEATURE] Makes quantity optional in translation methods</h3>
<p>When using plural forms, the quantity to be used for finding
the correct plural form had to be given explicitly. This was
cumbersome when using a single numeric argument, as it meant
to pass the same value twice.</p>
<p>With this change the quantity is determined automatically if
a single numeric argument is given to translateById() or
translateByOriginalLabel() in Translator.</p>
<p>Also fixes a few I18n unit tests along the way.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33959">#33959</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e7141cb693168c2785c0b7e075ead8c73b96194a">e7141cb</a></li>
</ul>
</div>
<div class="section" id="feature-shorthand-syntax-for-custom-validators">
<h3>[FEATURE] Shorthand syntax for custom validators</h3>
<p>This change allows the Validate annotation for properties to
be given a value like &#8220;Mypkg:My&#8221;. This is equivalent to using
&#8220;Mypkg\Validation\Validator\MyValidator&#8221; - just shorter.</p>
<p>Thanks to Martin Kutschker for reporting and inspiring patch.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33862">#33862</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8fca8ee3dad4669fca46f161ec11b4777f5700c2">8fca8ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-reflection-objectaccess-setproperty-must-work-with-numeric-indexes">
<h3>[BUGFIX] (Reflection): ObjectAccess::setProperty must work with numeric indexes</h3>
<p>When trying to set a value to an ArrayAccess object with a numeric index, the
ObjectAccess::setProperty() method throws an exception because $propertyName
must be a string.</p>
<p>However, we should allow integers there as well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33698">#33698</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d473ee2f0e9409959b594d1198bd4d225d8b367c">d473ee2</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-handling-of-numeric-annotation-parameters">
<h3>[BUGFIX] Fixes handling of numeric annotation parameters</h3>
<p>Annotations like &#64;FooBar(amount=2) lost their parameter value
in renderAnnotation(). This change fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33932">#33932</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=895d48b95b40e340d5b5f81aee2df72a47abd545">895d48b</a></li>
</ul>
</div>
<div class="section" id="task-implement-best-practices-in-xliff-files">
<h3>[TASK] Implement best practices in XLIFF files</h3>
<p>Adds some &#8220;required&#8221; attributes to the XLIFF files.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33975">#33975</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ca35b1a8e869a22b99414fe56dc49348747f20f8">ca35b1a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-duplicate-error-id-in-stringvalidator">
<h3>[BUGFIX] Fixes duplicate error id in StringValidator</h3>
<p>StringValidator uses the error id 1238108068, but that is
used in StringLengthValidator. This change makes the former
use 1238108070 instead.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33973">#33973</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=30d2c4cc816e7a3e27b639cbb5f8b6d9c8d128c9">30d2c4c</a></li>
</ul>
</div>
<div class="section" id="feature-add-translations-for-validation-error-messages">
<h3>[FEATURE] Add translations for validation error messages</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33970">#33970</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b484e6a4f3725091765cdf9c898b81c03245d3d9">b484e6a</a></li>
</ul>
</div>
<div class="section" id="task-add-better-handling-of-xml-parse-errors-to-i18n">
<h3>[TASK] Add better handling of XML parse errors to I18n</h3>
<p>When parsing XML files the exception thrown in case of errors did not
differentiate between filesystem and parsing errors, now it does.</p>
<p>In case of XML errors, a detailed list of errors reported by
libxml are added to the thrown exception.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33836">#33836</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=987a264f0322b1125ed41fcc26dd41b494b6b2ce">987a264</a></li>
</ul>
</div>
<div class="section" id="feature-make-tag-ignores-configurable">
<h3>[FEATURE] Make tag ignores configurable</h3>
<p>Makes the list of ignored tags configurable. This can be used to add
tags to the list if needed by your package by simply setting
TYPO3.Flow.reflection.ignoredTags to an array of tag names in your
Settings.yaml.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33142">#33142</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cebbf8e2851b28ffaf32abafbb675e47af6ae783">cebbf8e</a></li>
</ul>
</div>
<div class="section" id="bugfix-validators-should-allow-empty-values">
<h3>[!!!][BUGFIX] Validators should allow empty values</h3>
<p>Currently most of the provided validators do not accept empty
values.
This makes it impossible to have an optional email address
property for example (without using the disjunction validator).</p>
<p>This change adjusts all Validators to consider empty values
(NULL or an empty string) valid.</p>
<p>This is a breaking change if you expected the previous behavior.
In order to make a property required you now need to add the
NotEmptyValidator explicitly!</p>
<p>E.g. previously:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\\Validate(type=&quot;EmailAddress&quot;)</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$propertyToValidate</span><span class="p">;</span>
</pre></div>
</div>
<p>Now:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\\Validate(type=&quot;NotEmpty&quot;)</span>
<span class="sd"> * @Flow\\Validate(type=&quot;EmailAddress&quot;)</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$propertyToValidate</span><span class="p">;</span>
</pre></div>
</div>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33300">#33300</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9b627954f289d793b808db2ac19edc6a04c25426">9b62795</a></li>
</ul>
</div>
<div class="section" id="task-remove-cgl-docbook-xml-files-from-package">
<h3>[TASK] Remove CGL DocBook XML files from package</h3>
<p>They have been transformed to reST long ago…</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29318">#29318</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=81a8da3eea0a0084513396217a1c40010f63357a">81a8da3</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-default-lifetime-use-in-cache-backend">
<h3>[BUGFIX] Fix default lifetime use in cache backend</h3>
<p>This fixes the FileBackend so it actually uses the default lifetime
in cases it should do that.</p>
<p>ArrayAccess detection for configuration in AbstractBackend is fixed
along the way and the RedisBackend code cleaned up a little.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33562">#33562</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a0ee47d189f0a2141b6c8de2813d984c69a44eba">a0ee47d</a></li>
</ul>
</div>
<div class="section" id="bugfix-makes-account-expiry-work-as-expected">
<h3>[BUGFIX] Makes account expiry work as expected</h3>
<p>The expiry if an account was checked in a way that left an account
enabled until after it&#8217;s last day. Now it will expire exactly when
it should.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33707">#33707</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b1cbf2ba554993a6236099f706d352bf3f78fb87">b1cbf2b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-wrong-typo3-flow3-i18n-xml-namespace-use">
<h3>[BUGFIX] Fixes wrong \TYPO3\FLOW3\I18n\Xml\* namespace use</h3>
<p>The mentioned namespace doesn&#8217;t exist and the resulting error
e.g. breaks the Admin package.</p>
<p>Along the way some doc comments are fixed.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33720">#33720</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5572609a0e9a5087a1185e3c0b30227c4618345d">5572609</a></li>
</ul>
</div>
<div class="section" id="task-throw-exception-when-private-properties-have-inject">
<h3>[TASK] Throw exception when private properties have &#64;Inject</h3>
<p>Properties annotated for injection do obviously have to
be at least protected in order for the proxy class
having access to it.
This patch makes an exception thrown when such private
properties occur.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33589">#33589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=837fc9800a6530274df2b2d575afdc20c24280f0">837fc98</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixed-logging-of-incorrect-doc-comments-in-reflection">
<h3>[BUGFIX] Fixed logging of incorrect doc comments in reflection</h3>
<p>If one enables logIncorrectDocCommentHints nothing happens, as the
settings are not available in the ReflectionService. This change
fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33601">#33601</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9d06eed31b3980193470f87bb2a91c48f3750ffe">9d06eed</a></li>
</ul>
</div>
<div class="section" id="task-adjust-test-fixture-to-doctrine-orm-2-2-0">
<h3>[TASK] Adjust test fixture to Doctrine.ORM 2.2.0</h3>
<p>The proxy interface in Common is now used, the fixture needs to
be adjusted.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c2c171d440e60457cbefc8e11ec83bc41b4fc7f9">c2c171d</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-i18n-settings">
<h3>[TASK] Clean up i18n settings</h3>
<p>This renames the locale settings section to i18n and changes the
defaultLocaleIdentifier setting to be defaultLocale.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32736">#32736</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32733">#32733</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4542cd6ee47ba36892f098a94b070f570c974ba4">4542cd6</a></li>
</ul>
</div>
<div class="section" id="bugfix-cldr-locale-chaining-doesn-t-work-correctly">
<h3>[BUGFIX] CLDR locale chaining doesn&#8217;t work correctly</h3>
<p>When collecting CLDR resource files, the required chaining
is corrected (i.e. de_DE.xml also requires de.xml to be
included).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33148">#33148</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b2e4f3e94039135614bf8f3976da4f833cfaae42">b2e4f3e</a></li>
</ul>
</div>
<div class="section" id="feature-add-validators-for-objects-inside-of-collections">
<h3>[FEATURE] Add validators for objects inside of collections</h3>
<p>Model validation stops as soon as a property is of type collection. What one
would expect here is, that all objects inside this collection get validated as
well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32700">#32700</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dd6f600dca46366e3109a47488bc6c3b607105d9">dd6f600</a></li>
</ul>
</div>
<div class="section" id="feature-add-currentlocale-to-i18n-translation-service">
<h3>[FEATURE] Add currentLocale to I18n translation service</h3>
<p>Also add localeIdentifier validator.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33188">#33188</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=721f8e71c72dfe473a8c2611744db09fde6093d3">721f8e7</a></li>
</ul>
</div>
<div class="section" id="feature-add-getter-for-validator-options-and-child-validators">
<h3>[FEATURE] Add Getter for validator options and child validators</h3>
<p>Validation options are set through the constructor but there is
currently no way of accessing the options afterwards.
This change introduces the respective getters.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33226">#33226</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0acd9937f4cd9b638c436eeea144f05e6038dbdf">0acd993</a></li>
</ul>
</div>
<div class="section" id="task-replace-bool-by-boolean-in-docblocks">
<h3>[TASK] Replace bool by boolean in docblocks</h3>
<p>A CGL conformity fix. Just because I noticed. :)</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33398">#33398</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a655ebced9c650a3d3ce1f754187616ebd24c833">a655ebc</a></li>
</ul>
</div>
<div class="section" id="task-add-early-returns-to-security-context-hasrole">
<h3>[TASK] Add early returns to Security\Context::hasRole</h3>
<p>Change the behavior of hasRole so it has an early return
when the authenticationManager is not yet authenticated
(and thus no role can be assigned to the authenticated user).</p>
<p>Also an earlier return on the Everyone role.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32841">#32841</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=00d25062713bf4ae1d16e98a48b61a8e2f36568c">00d2506</a></li>
</ul>
</div>
<div class="section" id="bugfix-hint-at-possible-exception-cause">
<h3>[BUGFIX] Hint at possible exception cause</h3>
<p>When using &#64;MappedSuperclass without &#64;Entity an exception is thrown.
Since FLOW3 needs the &#64;Entity annotation even with a mapped superclass,
this change adds a hint to the exception message.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/27285">#27285</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ad89e84eecd5170b0ce87ac340c1c564acc67983">ad89e84</a></li>
</ul>
</div>
<div class="section" id="task-some-cleanup-around-authentication">
<h3>[TASK] Some cleanup around authentication</h3>
<p>Does some coding style cleanup, amends a docblock and makes the
authenticateAction() use $this-&gt;errorMethodName() instead of hardcoding
$this-&gt;errorAction()</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33177">#33177</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d7a9af6bfb77d1b9bd14b9b967600fbdab4e1460">d7a9af6</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-queryresult-offsetget-behavior-consistent">
<h3>[BUGFIX] Make QueryResult::offsetGet() behavior consistent</h3>
<p>offsetGet() on QueryResult for Doctrine persistence now checks if
the offset exists and returns NULL if not, instead of running into
an error.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33106">#33106</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9c421d6401df8d0e45ede739041507d38f9d2fe4">9c421d6</a></li>
</ul>
</div>
<div class="section" id="feature-create-shortcuts-directory-if-it-is-missing">
<h3>[FEATURE] Create .Shortcuts directory if it is missing</h3>
<p>The .Shortcuts directory will now be built if it is missing. That allows
developers to just trash a broken .Shortcuts directory if they messed
with package directories manually.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33112">#33112</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8dd2ea5352ca1fafb38fbe1d2b6b26b6f432e985">8dd2ea5</a></li>
</ul>
</div>
<div class="section" id="task-regard-return-type-of-preg-match">
<h3>[TASK] Regard return type of preg_match</h3>
<p>As of PHP-documentation, preg_match() may return int 0 or 1
or boolean FALSE. This patch takes care of this behaviour.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33097">#33097</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b03e9eaed2f8ba2a7f944dd09e4c54ee800bc07e">b03e9ea</a></li>
</ul>
</div>
<div class="section" id="feature-add-support-for-not-mapped-properties">
<h3>[FEATURE] Add support for not mapped properties</h3>
<p>The PropertyMappingConfiguration now has a doNotMapProperty() method that
tells the mapper to ignore the data / property</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31021">#31021</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=08414d613f58923de25a0befe1be10cc17c95aef">08414d6</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-updating-a-doctrine-lazy-loading-proxy-work">
<h3>[BUGFIX] Make updating a Doctrine Lazy Loading Proxy work</h3>
<p>When a Doctrine lazy loading proxy is persisted again, a fatal error is thrown
because the Reflection Service cannot handle Doctrine Proxies.</p>
<p>We work around this issue by asking the Doctrine Entity Manager to resolve the
class name.</p>
<p>A Functional Test reproducing the issue is included.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32830">#32830</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2fdc342d181d816f6a6ee41b7b30500f3a8741d7">2fdc342</a></li>
</ul>
</div>
<div class="section" id="task-adjust-yaml-handling-and-files-to-updated-parser">
<h3>[TASK] Adjust YAML handling and files to updated parser</h3>
<p>The fix for #31289 requires some adjustments to FLOW3 and the
existing YAML files.</p>
<p>Additionally adjust boolean and NULL values to all uppercase
according to CGLs.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31289">#31289</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=38ec74e1dcf595405a06d23e4e3965c4c5d501f8">38ec74e</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-updated-doctrine-libraries">
<h3>[TASK] Adjust to updated Doctrine libraries</h3>
<p>This adjusts the FLOW3 annotation driver and the ClassMetadata
implementation to the changes in Doctrine 2.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e83da5c28260fc5922f12b10de51d5a1748e007e">e83da5c</a></li>
</ul>
</div>
<div class="section" id="bugfix-utility-arraymergerecursiveoverrule-does-not-override-arrays-with-simple-types">
<h3>[BUGFIX] (Utility): ArrayMergeRecursiveOverrule does not override arrays with simple types</h3>
<p>If the first element contains an array, and the second element contains a simple
type at a certain position, the ORIGINAL array is used. That bug prevents to reset
array in configuration for example.</p>
<p>A full example is given in issue #32984.</p>
<p>I also added first unit tests for the ArrayMergeRecursiveOverrule function.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32984">#32984</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b7e76ffd7eed0fb6648d07ec0d5cf109f3ff8568">b7e76ff</a></li>
</ul>
</div>
<div class="section" id="feature-datetimerange-validator">
<h3>[FEATURE] DateTimeRange Validator</h3>
<p>This offers validation for Date/Time ranges, e.g. if a
given date is ahead or prior to a reference date or
between to boundaries.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32619">#32619</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8e6c2baa8ad8eb3be96ce8d19b9edd06c0a0b1c5">8e6c2ba</a></li>
</ul>
</div>
<div class="section" id="feature-cli-add-configuration-show-command-for-debugging">
<h3>[FEATURE] (CLI): Add configuration:show command for debugging</h3>
<p>Adds the cli command &#8220;configuration:show&#8221; with the options &#8211;type and &#8211;path.
The patch adds the method getAvailableConfigurationTypes to the configurationManager which is used by the cli-command.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32470">#32470</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ac7f4bd9decc5f2781eaf76f3ce86b9153cc5e23">ac7f4bd</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-tests-with-phpunit-3-6-5-in-strict-mode">
<h3>[BUGFIX] Fix unit tests with PHPUnit 3.6.5 in strict mode</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32738">#32738</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=38270b0d017279ee6d03441e00f740b18160a709">38270b0</a></li>
</ul>
</div>
<div class="section" id="task-move-translations-folder-up-one-level">
<h3>[TASK] Move Translations folder up one level</h3>
<p>This moves the folder for translations into Resources/Private and
renames the remaining Resources/Private/Locale folder to I18n along
the way.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32735">#32735</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6da0e03701a719b3830ef3702f511fe96284a26f">6da0e03</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-uribuilder-with-subrequests">
<h3>[BUGFIX] Fix UriBuilder with subrequests</h3>
<p>This change fixes the argument handling of the UriBuilder for nested
subrequests. The namespaces of all parent requests get added
recursively.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30536">#30536</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ef5441837625f4d85ada118b60b2448f8cfa4145">ef54418</a></li>
</ul>
</div>
<div class="section" id="task-enhance-help-texts-and-parameter-names-for-doctrine-commands">
<h3>[TASK] Enhance help texts and parameter names for Doctrine commands</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32729">#32729</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=68d7cf650364b32f17f0af7178147aa5ed1d4ac0">68d7cf6</a></li>
</ul>
</div>
<div class="section" id="feature-command-to-mark-all-migrations-as-executed">
<h3>[FEATURE] Command to mark all migrations as executed</h3>
<dl class="docutils">
<dt>It is now possible to mark all migrations as (not) executed with</dt>
<dd>./flow3 doctrine:migrationversion all &#8211;delete
./flow3 doctrine:migrationversion all &#8211;add</dd>
</dl>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32631">#32631</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f53be7acc8707652a6d76a8dc302601ffd35d15c">f53be7a</a></li>
</ul>
</div>
<div class="section" id="bugfix-unit-tests-remove-their-temporary-files">
<h3>[BUGFIX] Unit tests remove their temporary files</h3>
<p>Some unit tests create many temporary files outside vfs://
that are now removed after running the test.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32723">#32723</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=78a7482ac2927fc3898e25bf6edf011da4255240">78a7482</a></li>
</ul>
</div>
<div class="section" id="bugfix-doctrine-postload-calls-di-and-aop-initialization-explicitly">
<h3>[BUGFIX] <a class="reference external" href="flow/references/the-definitive-guide/partv/changelogs/mailto:doctrine&.html#37;&#52;&#48;PostLoad">Doctrine<span>&#64;</span>PostLoad</a> calls DI and AOP initialization explicitly.</h3>
<p>When a Doctrine lazy loading proxy for an object is
created for some specific purpose (e.g. when initializing
session objects relating to an entity) but filled afterwards
&#8220;on the fly&#8221; if this object is part of a wide range &#8220;findBy&#8221;
call through some query, Doctrine initializes the lazy
loading proxy but does not call __wakeup and therefore not initialize AOP and DI.
We work around this issue, by initializing those objects
with a Doctrine PostLoad hook explicitly.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30467">#30467</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3b704952dfd3b26967d93caa621a8d9687a71185">3b70495</a></li>
</ul>
</div>
<div class="section" id="feature-support-multiple-password-hashing-strategies">
<h3>[FEATURE] Support multiple password hashing strategies</h3>
<p>Add configurable password hashing strategies to the HashService.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31679">#31679</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c3c9dfcc317604077c5a7c313f8ca9f3dccf7681">c3c9dfc</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-emptydirectoryrecursively-ignore-and">
<h3>[BUGFIX] Make emptyDirectoryRecursively() ignore . and ..</h3>
<p>The check for this breaks when the iterator returns . and .., they are
then handled like files, which cannot work.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32725">#32725</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=71ee8671a3ae9857e450b91d625de0af1cb30214">71ee867</a></li>
</ul>
</div>
<div class="section" id="feature-add-createresourcefromcontent-to-resourcemanager">
<h3>[FEATURE] Add createResourceFromContent to ResourceManager</h3>
<p>This enables the ResourceManager to put files into the persistent
resource storage out of a given content string.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29572">#29572</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7f3cb076e07ba30b774a1b5e18dd59e9822b0401">7f3cb07</a></li>
</ul>
</div>
<div class="section" id="bugfix-functional-tests-die-with-fatal-error">
<h3>[BUGFIX] Functional tests die with fatal error</h3>
<p>The breaking tests lacked parent::setUp() in their own setup method.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32724">#32724</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5e46fbe5e10515f720327b550d6f0fca77d9be8d">5e46fbe</a></li>
</ul>
</div>
<div class="section" id="bugfix-wire-file-monitor-to-doctrine-proxy-invalidation">
<h3>[BUGFIX] Wire file monitor to doctrine proxy invalidation</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32719">#32719</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e64b8450224989d5515dfcba014e11ecf238e331">e64b845</a></li>
</ul>
</div>
<div class="section" id="bugfix-the-declaring-class-for-an-advice-is-the-interface-for-introductions">
<h3>[BUGFIX] The declaring class for an advice is the interface for introductions</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32691">#32691</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=40a68449476d258448a093a9ae087f3979b29194">40a6844</a></li>
</ul>
</div>
<div class="section" id="bugfix-files-is-link-returns-true-for-vfs-paths-on-windows">
<h3>[BUGFIX] Files::is_link() returns TRUE for vfs paths on Windows</h3>
<p>This adds a check to \TYPO3\FLOW3\Utility\Files::is_link() that
prevents the method from returning TRUE for virtual paths
(e.g. streamwrapper like &#8220;vfs://&#8221;).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32697">#32697</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fdd78845379a1e9b76a1519e4e363a01edbcba4a">fdd7884</a></li>
</ul>
</div>
<div class="section" id="bugfix-update-package-states-only-when-needed">
<h3>[BUGFIX] Update package states only when needed</h3>
<p>While scanning of available packages will still happen on every request
in non-production contexts, the package state will only be saved if
there has actually been a change.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32552">#32552</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8634aaec568b3e4f58d24b5c2f7137260b9e682f">8634aae</a></li>
</ul>
</div>
<div class="section" id="bugfix-change-code-in-emptydirectoryrecursively">
<h3>[BUGFIX] Change code in emptyDirectoryRecursively()</h3>
<p>This change reverts Iadcfe9b6d143e1fa856a3ce93f51888a18bb5e35 which
reintruduced the bug explained in #32550. It fixes the issue at hand
by simplifying the code a bit.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32550">#32550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f7cc65f5726f9eae5431a5bf452c2cf74c280527">f7cc65f</a></li>
</ul>
</div>
<div class="section" id="bugfix-logout-doesn-t-work-anymore">
<h3>[BUGFIX] Logout doesn&#8217;t work anymore</h3>
<p>Since eab9bf9 calling AuthenticationProviderManager::logout()
without initializing the Security Context first, returns without
actually destroying the authentication cookie.
This change fixes this by introducing a new convenience method
isAuthenticated() to the AuthentcationManagerInterface allowing the
AuthenticationProviderManager to check whether a user is
authenticated before trying to fetch the session.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32285">#32285</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9cab55e0fdf701fe0bdf857a58c7f9e79d9554d6">9cab55e</a></li>
</ul>
</div>
<div class="section" id="bugfix-command-improve-explanations-of-doctrine-migrationgenerate">
<h3>[BUGFIX] (Command): Improve explanations of doctrine:migrationgenerate</h3>
<p>Instead of:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Generated</span> <span class="k">new</span> <span class="nx">migration</span> <span class="k">class</span> <span class="nc">to</span> <span class="o">...</span>
</pre></div>
</div>
<p>the command output now reads like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Generated</span> <span class="k">new</span> <span class="nx">migration</span> <span class="nx">class</span><span class="o">!</span>

<span class="nx">Next</span> <span class="nx">Steps</span><span class="o">:</span>
<span class="o">-</span> <span class="nx">Move</span> <span class="o">...</span> <span class="nx">to</span> <span class="nx">YourPackage</span><span class="o">/</span><span class="nx">Migrations</span><span class="o">/</span><span class="nx">Mysql</span><span class="o">/</span>
<span class="o">-</span> <span class="nx">Review</span> <span class="k">and</span> <span class="nx">adjust</span> <span class="nx">the</span> <span class="nx">generated</span> <span class="nx">migration</span><span class="o">.</span>
<span class="o">-</span> <span class="p">(</span><span class="nx">optional</span><span class="p">)</span> <span class="nx">execute</span> <span class="nx">the</span> <span class="nx">migration</span> <span class="nx">using</span> <span class="o">./</span><span class="nx">flow3</span>
  <span class="nx">doctrine</span><span class="o">:</span><span class="nx">migrate</span>
</pre></div>
</div>
<p>This is much more understandable, and less error-prone, especially to new users.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32663">#32663</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f0d37738c2f0ddfbb709a54cae8633ba19a6ea0a">f0d3773</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-spelling-error-in-account-repository">
<h3>[BUGFIX] Correct spelling error in account repository</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=577e158025ec1d16f77809c50082a60b59f3af16">577e158</a></li>
</ul>
</div>
<div class="section" id="feature-add-doctrine-metadata-dumping-feature">
<h3>[FEATURE] Add doctrine metadata dumping feature</h3>
<p>This is purely a debugging aid, neither smart nor pretty: If you
give the &#8211;dump-mapping-data option to docrine:entitystatus the
collected mapping data will be dumped to the console.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2f83c8e18b34f2cf756b0c2be16952fe1a4f23d0">2f83c8e</a></li>
</ul>
</div>
<div class="section" id="feature-optimized-reflection-service">
<h3>[FEATURE] Optimized Reflection Service</h3>
<p>A new Reflection Service which specifically supports development and
production scenarios. While the development version is tailored to
flexibility and partial flushing, the production variant works with
frozen caches and loads per-class information only on demand.</p>
<p>Memory consumption in Production context will be notably lower and also
the overall performance is better.</p>
<p>This change set updates but also removes several unit tests. Those
removed should be replaced by a more meaningful and better maintainable
functional test.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32531">#32531</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32530">#32530</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=97af40ea290fd29a875f67bf641399d32b75d0b0">97af40e</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-flush-the-doctrine-orm-if-it-is-open">
<h3>[BUGFIX] Only flush() the Doctrine ORM if it is open</h3>
<p>In some cases it can happen, that the EntityManager is closed at the end
of a request This can be a valid situation (see #30933 for more).</p>
<p>This change makes persistAll() check if the EntityManager is open
before calling flush() on it.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30934">#30934</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f8dd931115eaa67d707171ed34d8f8fb5bc845ce">f8dd931</a></li>
</ul>
</div>
<div class="section" id="bugfix-reorder-code-in-emptydirectoryrecursively">
<h3>[BUGFIX] Reorder code in emptyDirectoryRecursively()</h3>
<p>The change in Iad2e358ec8a94fe91dd27eda5737f075f277f2dc did break one
test, after all. This fixes it for me, I hope it works on Windows.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32550">#32550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a58728dd33fc90d4afa79ebbbcabf85ec793f97b">a58728d</a></li>
</ul>
</div>
<div class="section" id="bugfix-files-emptydirectoryrecursively-affects-targets-of-symlinks">
<h3>[BUGFIX] Files::emptyDirectoryRecursively affects targets of symlinks</h3>
<p>\TYPO3\FLOW3\Utility\Files::removeDirectoryRecursively() fails to
properly unlink directory symlinks on Windows.</p>
<p>Thus \TYPO3\FLOW3\Utility\Files::emptyDirectoryRecursively()
iterates through the target files of a symlinked folder and
removes them!</p>
<p>This change fixes this by introducing a custom unlink() function
that can remove a symlink regardless of it&#8217;s type (file/directory).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32550">#32550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0a9a47bb85fb874be64728f3a47b91896a73ca4a">0a9a47b</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-eol-characters-break-parsing-of-doc-comments">
<h3>[BUGFIX] &#8220;Wrong&#8221; EOL characters break parsing of doc comments</h3>
<p>When \r\n was used as EOL instead of just \n the parsed doc comments
would retain the \r which would cause confusing exceptions in some
cases later on.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31363">#31363</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32466">#32466</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31087">#31087</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=40af60c9d7013757b4f980daf31b038c494e6f6a">40af60c</a></li>
</ul>
</div>
<div class="section" id="bugfix-getobjectbyidentifier-does-not-pass-objecttype-to-backend">
<h3>[BUGFIX] getObjectByIdentifier() does not pass $objectType to backend</h3>
<p>The parameter is optional and historically unused in Generic
persistence, but still it should be passed along.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32370">#32370</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ae72b5cb370889b894e99a9282e9d48aac6202eb">ae72b5c</a></li>
</ul>
</div>
<div class="section" id="task-removed-unused-configuration-types-package-packagestates">
<h3>[TASK] Removed unused configuration types &#8220;Package&#8221;, &#8220;PackageStates&#8221;</h3>
<p>The patch removes unused parts from the configurationManager:</p>
<ul class="simple">
<li>Removed unused configuration types &#8220;Package&#8221; and &#8220;PackageStates&#8221;</li>
<li>Removed methods &#8220;setConfiguration&#8221; and &#8220;saveConfiguration&#8221;. The
methods were only intended to work with packageStates which is unused.</li>
<li>Adjusted unit tests of configurationManager</li>
</ul>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32591">#32591</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d9f9b194b2e20318ffc8721ee9b228b9be48728b">d9f9b19</a></li>
</ul>
</div>
<div class="section" id="task-make-flow3-package-protected">
<h3>[TASK] Make FLOW3 package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=150b476a15df28a92b9d287ce414671350fbb167">150b476</a></li>
</ul>
</div>
<div class="section" id="feature-making-property-mapping-exception-more-verbose">
<h3>[FEATURE] Making property mapping exception more verbose</h3>
<p>When an exception occurs during property mapping it&#8217;s hard for the
developer to track what a specific type the intended value at
runtime is.</p>
<p>This change adds the object&#8217;s class name to the exception, if it is
an object; otherwise the scalar type name is added.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32587">#32587</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0073e184580db3b180ae60e12748179907fcf292">0073e18</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-tests-failures-with-new-class-loader">
<h3>[BUGFIX] Fix unit tests failures with new class loader</h3>
<p>Two unit tests failed with the new class loader[1]. One because there
was a check for ignored classes, but it came too late. The other because
for the shortcut link creation the package path is now needed right
after activation of a package.</p>
<p>[1] <a class="reference external" href="https://review.typo3.org/7164">https://review.typo3.org/7164</a></p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32519">#32519</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a90afba2352254259f0c861ea6934d01527113fa">a90afba</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-functional-tests-with-new-class-loader">
<h3>[BUGFIX]&nbsp;Fix functional tests with new class loader</h3>
<p>This change moves the FunctionalTestRequestHandler to the
Tests\Functional namespace and registers functional test classes
again.</p>
<p>Needs <a class="reference external" href="https://review.typo3.org/7258">https://review.typo3.org/7258</a></p>
<p>Related to <a class="reference external" href="https://review.typo3.org/7164">https://review.typo3.org/7164</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=77716167834488c638ce8a817c041676cb8b03d8">7771616</a></li>
</ul>
</div>
<div class="section" id="task-remove-execute-bit-on-some-source-files">
<h3>[TASK] Remove execute bit on some source files</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32507">#32507</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f7848bf6159911d4b17f672827ce5b1cb8898fe3">f7848bf</a></li>
</ul>
</div>
<div class="section" id="task-improved-class-loader">
<h3>[TASK] Improved Class Loader</h3>
<p>This patch introduces an improved loading strategy based on symbolic
links leading directly to the Classes directory of each package.
The symlinks reside in a &#8221;.Shortcuts&#8221; directory below the general
Packages folder and are created whenever the PackageStates.php file
is saved by the Package Manager.</p>
<p>This patch also contains minor speed improvements in the Proxy Compiler
and the Object Manager (getCaseSensitiveObjectName).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=70c98b680befcbbd5f493479cd4a5537324fcad0">70c98b6</a></li>
</ul>
</div>
<div class="section" id="bugfix-acl-file-permissions-do-not-work-correctly">
<h3>[BUGFIX] ACL file permissions do not work correctly</h3>
<p>When setting file permissions the setting of ACL would succeed but
the set permissions did not work as expected. This changes fixes that.</p>
<p>In addition it makes the calls in a chain so that the check for the
return value of the chmod commands is more robust. The directories
that are created are now always owned by the command line user.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32499">#32499</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0d40353066e08a231388cd6127a0d7859809dbbe">0d40353</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-emptydirectoryrecursively-and-hex2bin">
<h3>[TASK] Clean up emptyDirectoryRecursively() and hex2bin()</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32503">#32503</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c698d90e46525616db9739567d3bc5bb9d76ec39">c698d90</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-mockwebrequesthandler-use-functionaltestrequesthandler">
<h3>[BUGFIX] Remove MockWebRequestHandler, use FunctionalTestRequestHandler</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32424">#32424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=19f6c486fe88260fa78c27a75e5d4fddd95ca46a">19f6c48</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-check-for-stripped-comments">
<h3>[BUGFIX] Fix check for stripped comments</h3>
<p>The bootstrap checks for the presence of doc comments, to avoid
problems with some bytecode caches that strip comments.</p>
<p>That check did not work correctly (FALSE is returned but the check
expects an empty string). In case an error is seen, the exception
cannot be thrown as well (no classloader available at that point).
That exception issue has been been fixed for another check as well.</p>
<p>On top of this the check for magic_quotes_gpc has been adjusted a
tiny bit.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32049">#32049</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=acf8f34c16ff294ef2992fbecc0fa604c120b2e3">acf8f34</a></li>
</ul>
</div>
<div class="section" id="bugfix-trigger-allobjectspersisted-after-every-functional-test">
<h3>[BUGFIX] Trigger allObjectsPersisted after every functional test</h3>
<p>The tearDown() method of the base functional test case clears the
persistence manager&#8217;s state so it is ready for the next test, avoiding
side effects.</p>
<p>However, certain repositories (such as the TYPO3CR NodeRepository) rely
on the signal &#8220;allObjectsPersisted&#8221; which triggers their internal
cleanup function. If this signal is not, sent, the next test will still
see added objects stored directly in the repository.</p>
<p>The solution is to call persistAll() in the tearDown() method, even if
the just executed test doesn&#8217;t require it.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32346">#32346</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=46646d8153185d899626107c1b55e7db30f8fcf2">46646d8</a></li>
</ul>
</div>
<div class="section" id="task-remove-echo-statement-in-functional-test-request-handler">
<h3>[TASK] Remove echo statement in functional test request handler</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32421">#32421</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fc5e5819da1dd4f0b3ee7ed7de35db43a7c3be68">fc5e581</a></li>
</ul>
</div>
<div class="section" id="feature-freezable-cache-backend">
<h3>[FEATURE] Freezable Cache Backend</h3>
<p>This introduces a new type of cache backends which supports freezing.
In a frozen state no modifications are allowed and thus enables the
cache implementation to optimize its tasks for speed.</p>
<p>The FileBackend was extended to support freezing and is now used for
the class cache in Production context. Measured on the blog example,
this change improved number of transactions per second by 29 %.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32398">#32398</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c94e6f1747e607a3fc8e2da2cecbfc15ebf443b8">c94e6f1</a></li>
</ul>
</div>
<div class="section" id="feature-mvc-introduce-some-more-signals-for-performance-measurements">
<h3>[FEATURE] (MVC): Introduce some more Signals for performance measurements</h3>
<p>This change set introduces signals which can be used to measure the
controller and Request Builder runtime.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dc43c2609f2bced6d0cac4309b9a1393a0343774">dc43c26</a></li>
</ul>
</div>
<div class="section" id="feature-modular-and-configurable-bootstrap">
<h3>[FEATURE][!!!] Modular and configurable bootstrap</h3>
<p>This extracts all specific initialization methods from the bootstrap
into a &#8220;Scripts&#8221; class and instead of hard-wiring each initialization
step, introduces a loose, configurable coupling by means of a sequence
and steps. The responsibility for the actual boot sequence now lies at
the request handler taking care of the request.</p>
<p>Request handlers must now be explicitly registered in the package
class. The interface to be implemented was moved to the Core namespace.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32333">#32333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ae111dd0a0f15e548989d45c0186f4e4ec30bbf9">ae111dd</a></li>
</ul>
</div>
<div class="section" id="task-optimized-package-manager-and-configuration-manager-initialization">
<h3>[TASK] Optimized package manager and configuration manager initialization</h3>
<p>This patch introduces a somewhat lazier initialization for the
Configuration Manager&#8217;s cache and the scanning of available packages
and loading of package state information.</p>
<p>NOTE: On the first hit, the modified Package Manager will introduce
a new format for the PackageStates.php. From now on the configuration
in that file also contains a version number which allows for automatic
migration of that file in the future.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32333">#32333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a7844b0ddb9b301dd7ea5bed91aac417fe2015a4">a7844b0</a></li>
</ul>
</div>
<div class="section" id="task-configuration-manager-throws-exception-on-permission-problems">
<h3>[TASK] Configuration Manager throws exception on permission problems</h3>
<p>If the compiled configuration could not be written, the configuration
manager now throws an exception instead of silently ignoring it.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c27a965a789d5b77ce89d9cd02839da8ca17f65d">c27a965</a></li>
</ul>
</div>
<div class="section" id="feature-implement-base-uri-setting">
<h3>[FEATURE] Implement base URI setting</h3>
<p>This change adds a configurable base URI to FLOW3. The environment will
use the setting instead of trying to guess the base URI from the current
request if it is configured.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32084">#32084</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1cfb139a0dc840bfcfe78cb99966a45614fade67">1cfb139</a></li>
</ul>
</div>
<div class="section" id="feature-make-target-in-xliff-optional-if-source-equals-target-language">
<h3>[FEATURE] Make target in XLIFF optional if source equals target language</h3>
<p>This allows for less duplication when using XLIFF as a message catalog
when the target language is the file&#8217;s source language.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32329">#32329</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=957be681c0e9391dce131ccd001aa3998c2e583f">957be68</a></li>
</ul>
</div>
<div class="section" id="task-move-abstractxmlparser-class-up-one-level">
<h3>[TASK] Move AbstractXmlParser class up one level</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11034">#11034</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8de58fef175bd2a321e5ae4c64abe47c86b44d77">8de58fe</a></li>
</ul>
</div>
<div class="section" id="task-remove-abstractxmlmodel-from-i18n">
<h3>[TASK] Remove AbstractXmlModel from I18n</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/11034">#11034</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=acc2f9f5b88e74627bfc61ac03a4ea62d361f09c">acc2f9f</a></li>
</ul>
</div>
<div class="section" id="task-functional-tests-for-i18n-translator-and-formatresolver">
<h3>[TASK] Functional tests for i18n Translator and FormatResolver</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11955">#11955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c804bf2553993f527c422125dc9cf1dca2685c84">c804bf2</a></li>
</ul>
</div>
<div class="section" id="feature-add-xliff-files-with-common-labels-for-translation">
<h3>[FEATURE] Add XLIFF files with common labels for translation</h3>
<p>This adds XLIFF files with a few basic labels and a german translation.
This shows the principle and can be used as a base for a generic
label catalog to use in all FLOW3 applications.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11955">#11955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3ddaf8ee513249b8f6665e301373386762399f43">3ddaf8e</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-date-formatting-in-translations-work">
<h3>[BUGFIX] Make date formatting in translations work</h3>
<p>When using date formatting in translations the system would
break really bad.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31974">#31974</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ff62bbd1e2352e4e404596ea9e7f1c5bcd611860">ff62bbd</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-handling-of-plural-forms">
<h3>[BUGFIX] Fix handling of plural forms</h3>
<p>Internal handling of plurals forms was broken.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31975">#31975</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=30081c31062119ea301fefe3b0a5ba56cb355efe">30081c3</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-some-smaller-things-in-i18n">
<h3>[TASK] Clean up some smaller things in I18n</h3>
<p>Fixes a method name not renamed in an earlier refactoring, makes some
&#64;return annotations fully qualified, simplifies some unit tests, ...</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11955">#11955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c40c9d32db0543a2b49aa70c49393fa71ebd9670">c40c9d3</a></li>
</ul>
</div>
<div class="section" id="feature-allow-translation-files-xliff-on-a-per-package-basis">
<h3>[FEATURE] Allow translation files (XLIFF) on a per package basis</h3>
<p>Fixes issue in which XliffTranslationProvider prefaces a hardcoded
base path of resource://FLOW3/Private/Locale/Translations before
the sourceName argument passed to getTranslationByOriginalLabel and
getTranslationById methods.</p>
<p>This fix modifies the translateById and translateByOriginalLabel
methods in the TYPO3\FLOW3\I18n\Translator to use packageKey
as an argument. The XliffTranslationProvider will construct a
base path of &#8220;&lt;packageName&gt;/Private/Locale/Translations&#8221;. This base
path is prepended to the value of the sourceName argument to create
the translation file resource string.</p>
<p>Unit tests have been adjusted as well to accommodate these changes
to the XliffTranslationProvider and Translator classes. The
TranslationProviderInterface has been adjusted as well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/14037">#14037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f5afd4fc082c67072a734a0d3b1e7416050419cd">f5afd4f</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-boolean-default-values-in-yaml-config">
<h3>[BUGFIX] Fix boolean default values in YAML config</h3>
<p>The previously used YAML parser accepted &#8216;n&#8217; and &#8216;y&#8217; as legitimate
boolean values resulting in FALSE and TRUE respectively.</p>
<p>The Symfony parser does not recognize these values as boolean
but expects &#8216;no&#8217; and &#8216;yes&#8217; instead.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8784c2984f587e34d6d917ae37c261b1d2c137a1">8784c29</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-validation-upon-persistence-work-again">
<h3>[BUGFIX] Make validation upon persistence work again</h3>
<p>The validation upon persistence was dropped (more or less by accident)
when we switched to Doctrine. This change brings it back.</p>
<p>In addition it fixes the exception message produced in the generic
AbstractBackend when validation fails.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31502">#31502</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b809a3951f44558eb44989008ae8bab528ca5852">b809a39</a></li>
</ul>
</div>
<div class="section" id="task-move-objectvalidationfailedexception-out-of-generic">
<h3>[TASK] Move ObjectValidationFailedException out of Generic</h3>
<p>The exception is not specific to generic persistence, thus it should
not be inside the Generic namespace.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31502">#31502</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c87cc0079ce84e60f364e89ec33c34630b5f1643">c87cc00</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-tests-failing-with-phpunit-3-6">
<h3>[BUGFIX] Fix unit tests failing with PHPUnit 3.6</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32015">#32015</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c1b8ce9d222ccbfa6eed7c31f2342165714dfda1">c1b8ce9</a></li>
</ul>
</div>
<div class="section" id="feature-add-routing-show-routing-route-and-routing-resolve-commands">
<h3>[FEATURE] Add routing:show, routing:route and routing:resolve commands</h3>
<p>Adds 3 CLI commands:
- routing:show show informations for a single route
- routing:getPath show the generated route-path for a given package, controller and action
- routing:routePath take a route-path and show package, controller and action</p>
<p>The patch alters the routing:list command to show the index number for the routes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31909">#31909</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=270dced5220bd9922b45f3cbb9cff07b98eafcb7">270dced</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-authenticationcontroller-to-flashmessages">
<h3>[BUGFIX] Adjust AuthenticationController to FlashMessages</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31931">#31931</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4883a0956ae15ef7cc252009c2bad885c89dffda">4883a09</a></li>
</ul>
</div>
<div class="section" id="task-use-curly-braces-instead-of-hashes-in-notfoundview">
<h3>[TASK] Use curly braces instead of hashes in NotFoundView</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31957">#31957</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=56899fc7b26e65da2da7edf3b5e08dc0b2952add">56899fc</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-link-to-issue-tracker">
<h3>[BUGFIX] Fix link to issue tracker</h3>
<p>Adapts the project link after a renaming of the FLOW3 package in forge.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31781">#31781</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=96b9db36210428cca6930a8a855e591d0afac65b">96b9db3</a></li>
</ul>
</div>
<div class="section" id="task-escape-phpbinarypathandfilename-in-command-execution">
<h3>[TASK] Escape phpBinaryPathAndFilename in Command execution</h3>
<p>Currently the bootstrap fails to properly escape the php path
when dispatching sub requests in command execution.
This leads to exceptions when the path contains spaces or other
special characters.
This is fixed by putting the command in quotes and replacing
backslashes.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30040">#30040</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d87ef93a58d7160110620ed14fd567c91a658301">d87ef93</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-usage-of-query-parameter">
<h3>[BUGFIX] Allow usage of query parameter &#8220;_&#8221;</h3>
<p>Assert that the length of $argumentName is &gt;= 2 before accessing it at
position 1</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31773">#31773</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=69f35424dca9569054e5dff6c968e1e2c7546b69">69f3542</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-persistence-doctrine-query-serialization-cycle">
<h3>[BUGFIX] Fix Persistence\Doctrine\Query serialization cycle</h3>
<p>If you assign a QueryResult to a ViewHelper and later on use
$result-&gt;getQuery(), this query is not executable any more, if
you used complex &#8220;where&#8221;-clauses involving joins, as these
joins are not reapplied to the object during the __wakeup()
call.</p>
<p>This patch ensures the query being callable like the
original one after __wakeup() by saving all joins in array
and reapplies them after wakeup. A functional test is
included.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31696">#31696</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c131afab8cf210afc29e797b4029530e2034369e">c131afa</a></li>
</ul>
</div>
<div class="section" id="bugfix-cli-cli-arguments-should-be-usable-with-equals-sign">
<h3>[BUGFIX] (CLI): CLI arguments should be usable with equals sign (=)</h3>
<p>With this fix the last argument may use the equals sign (=)
again to separate between argument name and value.</p>
<p>Besides writing an additional test case which reproduces the issue,
the other test cases have been strengthened by replacing assertEquals()
by assertSame().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30493">#30493</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=578b580da127c3a907cd3dbc81e1e7b2063e2ce4">578b580</a></li>
</ul>
</div>
<div class="section" id="bugfix-symlink-related-unit-tests-fail-on-some-windows-systems">
<h3>[BUGFIX] Symlink related Unit Tests fail on some Windows systems</h3>
<p>This replaces sys_get_temp_dir() by tempnam() in unit tests that
use symlinks to avoid them from failing on some Windows
environments.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31070">#31070</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=60b45d7d1d9ea6e87dc4fc690183f281a50c286c">60b45d7</a></li>
</ul>
</div>
<div class="section" id="feature-security-hmac-convenience-methods-in-hashservice">
<h3>[FEATURE] (Security): HMAC Convenience methods in HashService</h3>
<p>This adds the methods appendHmac() and validateAndStripHmac()
to the Cryptography\HashService allowing users to deal with HMAC
validation more conveniently.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31698">#31698</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=061beb04f08b4ab8768b4a0500251ce013dbcab7">061beb0</a></li>
</ul>
</div>
<div class="section" id="feature-add-bcrypt-hashing-strategy">
<h3>[FEATURE] Add BCrypt hashing strategy</h3>
<p>This adds a wrapper for the BCrypt hashing algorithm and
makes it the default password hashing strategy.
Also provides a fallback when using hashes generated by PBKDF2.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31678">#31678</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=23fec41b62b15601eaa3053e0152238fb5f2f91a">23fec41</a></li>
</ul>
</div>
<div class="section" id="bugfix-also-remove-new-objects-on-clear-state-of-persistence-manager">
<h3>[BUGFIX] Also remove new objects on clear state of persistence manager</h3>
<p>See: #29578</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3a6f7940c289c92fdabeea9632cab03df055b72b">3a6f794</a></li>
</ul>
</div>
<div class="section" id="feature-support-mapping-to-specific-subtypes-by-property-type">
<h3>[FEATURE] Support mapping to specific subtypes by property (__type)</h3>
<p>When type hierarchies are used for modeling, it&#8217;s sometimes necessary
to use a special subclass when creating new entities (e.g. from user
selection). This change enables the use of a special (request)
property &#8220;__type&#8221; in the source array of a type converter. For security
reasons, this feature must be configured explicitly through a mapping
configuration.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30300">#30300</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=41c21ba3b019c4f6e31760235cff96950c750a01">41c21ba</a></li>
</ul>
</div>
<div class="section" id="task-fix-a-var-annotation-to-be-fully-qualified">
<h3>[TASK] Fix a &#64;var annotation to be fully qualified</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3b01bd2576ac85da6777458b75fef7358137347c">3b01bd2</a></li>
</ul>
</div>
<div class="section" id="feature-persistence-manager-knows-about-unmanaged-new-objects">
<h3>[FEATURE] Persistence Manager knows about unmanaged, new objects</h3>
<p>This patch enhances the persistence aspect and the related code in the
Persistence Manager so that getObjectByIdentifier() also returns those
objects which have been created but not yet added to any repository.</p>
<p>That allows, among other things, to render URIs pointing to not yet
persisted objects which have been carried around in a session container.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29578">#29578</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=10a0ad65e9e6697f9f14fd9823e2c44fa15e36ae">10a0ad6</a></li>
</ul>
</div>
<div class="section" id="task-add-clearstate-to-persistencemanagerinterface">
<h3>[TASK] Add clearState() to PersistenceManagerInterface</h3>
<p>Also implements it for both PersistenceManager implementations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d2d33bcd2254ceba4c809f222da8e881a4aae7ba">d2d33bc</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-of-the-abstract-persistence-manager">
<h3>[TASK] Clean up of the Abstract Persistence Manager</h3>
<p>Removed unused dependency to Reflection Service and move the dependency
to System Logger into the concrete Persistence Manager.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=53403be6df91922c9f6fe0ea1b72faf2febf2941">53403be</a></li>
</ul>
</div>
<div class="section" id="task-unify-usage-of-random-byte-generator">
<h3>[TASK] Unify usage of random byte generator</h3>
<p>We already use the randomizer library, now all calls to it are
wrapped in Utilities\Algorithms.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/25714">#25714</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=59b49197913a31a3dc917a96bc802259c99ec916">59b4919</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-argument-list-before-initializing-action-arguments">
<h3>[BUGFIX]&nbsp;Reset argument list before initializing action arguments</h3>
<p>This change fixes a problem with functional tests of controller
actions. It&#8217;s also needed to reset the state of the controller when
multiple requests are dispatched.</p>
<p>It also refactors a unit test to use the actual arguments class instead
of a mock which is more expressive.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31134">#31134</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a320135465d586b2e4cd50c890709f4d2e7e64bf">a320135</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-correct-method-to-get-cli-arguments-for-dql-command">
<h3>[BUGFIX] Use correct method to get CLI arguments for DQL command</h3>
<p>Call TYPO3\FLOW3\MVC\CLI\Request::getExceedingArguments() instead of the
removed TYPO3\FLOW3\MVC\CLI\Request::getCommandLineArguments()</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31474">#31474</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=47b8f4a8fd7769df592dd1515901670691b416e5">47b8f4a</a></li>
</ul>
</div>
<div class="section" id="feature-aop-make-joinpoint-methodarguments-settable">
<h3>[FEATURE] AOP: Make JoinPoint methodArguments settable</h3>
<p>As at least BeforeAdvices and AroundAdvices can be
used to manipulate the behavior of the original method,
the advice method should be able to change the
original method&#8217;s arguments.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29514">#29514</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=66b809564eab282ed6cf791bbdcd5ed81727816a">66b8095</a></li>
</ul>
</div>
<div class="section" id="bugfix-enhance-entity-classname-detection-in-repository-constructor">
<h3>[BUGFIX] Enhance entity classname detection in repository constructor</h3>
<p>Fix bug where all occurrences of the word &#8220;Repository&#8221; were stripped
out during the automatic retrieval of the entity classname. This changes
the behavior in the way, that only removes the last occurrence.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30312">#30312</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2f5d0cbd5a9f225ddd813eee30e5b091390d3170">2f5d0cb</a></li>
</ul>
</div>
<div class="section" id="task-display-line-number-of-exception-in-command-line-mode">
<h3>[TASK] Display line number of exception in command line mode</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31269">#31269</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6ed7ecd2771ed419939549953b418f176929b0b2">6ed7ecd</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-annotations-in-actioncontroller-for-ignorevalidation">
<h3>[BUGFIX] Use annotations in ActionController for IgnoreValidation</h3>
<p>Use annotations for the action method instead of method tags values
which return wrong results if an explicit argumentName is given
to the annotation. See the functional test that is added.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31452">#31452</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1c92bdd443bb90f881b566eee1ec5235f7d5f8c2">1c92bdd</a></li>
</ul>
</div>
<div class="section" id="task-optimized-aop-pointcut-filter-matching">
<h3>[TASK] Optimized AOP Pointcut Filter matching</h3>
<p>This change set greatly reduces compilation time for AOP proxies for
applications intensively using AOP and security policies. It is a quick
fix rather than the ultimate solution.</p>
<p>Class name and method name matching have been simplified, matching
against annotations does not support regular expressions any more
(wasn&#8217;t supported officially anyway) and the order of a few point cut
expressions has been optimized.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/9568">#9568</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9c3a9dca08939c76be49e487d81b284b399da9b5">9c3a9dc</a></li>
</ul>
</div>
<div class="section" id="bugfix-logout-must-not-rely-on-a-session">
<h3>[BUGFIX] Logout must not rely on a session</h3>
<p>AuthenticationProvider::logout() currently throws an Exception
if no session has been initialized yet.
This change fixes this by checking whether the Security Context
has been initialized.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31311">#31311</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=eab9bf953180dcff96f5ae33666cafa0bf587a7a">eab9bf9</a></li>
</ul>
</div>
<div class="section" id="bugfix-proxy-class-builder-should-retain-original-annotations">
<h3>[BUGFIX]&nbsp;Proxy class builder should retain original annotations</h3>
<p>Original metadata information on proxied methods should be retained
to allow for code inspection and usage of metadata for dynamic code
generation.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31270">#31270</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ecb650c82d6f10a715b2a27e562315ba80d6417e">ecb650c</a></li>
</ul>
</div>
<div class="section" id="feature-make-path-for-migrate-annotations-configurable">
<h3>[FEATURE] Make path for migrate-annotations configurable</h3>
<p>Optional parameter &#8211;packages-path to configure an individual absolute
path to the folder with the packages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31160">#31160</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1a24f58215f0fe8a0e2f29ee53d4963c4c491451">1a24f58</a></li>
</ul>
</div>
<div class="section" id="revert-feature-make-path-for-migrate-annotations-configurable">
<h3>Revert &#8220;[FEATURE] Make path for migrate-annotations configurable&#8221;</h3>
<p>This reverts commit 985ce27723bc8cb5b2b8b4f5269ffe4b4aac45ac</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=90bba5c1ad4b90d9d4335401e36b342f543155b5">90bba5c</a></li>
</ul>
</div>
<div class="section" id="id555">
<h3>[FEATURE] Make path for migrate-annotations configurable</h3>
<p>Optional parameter &#8211;packages-path to configure an individual absolute
path to the folder with the packages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31160">#31160</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=985ce27723bc8cb5b2b8b4f5269ffe4b4aac45ac">985ce27</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id557">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=24ce9d851e167de1475729006458fa686cb09de3">24ce9d8</a></li>
</ul>
</div>
<div class="section" id="bugfix-templateparser-unquotestring-does-not-trim-escaped-quotes-correctly">
<h3>[BUGFIX] TemplateParser unquoteString does not trim escaped quotes correctly</h3>
<p>This change fixes wrong trimming of trailing quotes in escaped sequences
by replacing trim() calls with a preg_replace() alternative.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39604">#39604</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=c852f275cf73da7fece821976e771dea823bea24">c852f27</a></li>
</ul>
</div>
<div class="section" id="bugfix-action-uri-of-the-form-viewhelper-is-not-reset">
<h3>[BUGFIX] Action URI of the form ViewHelper is not reset</h3>
<p>Form ViewHelpers store the action URI attribute for performance
reasons.
But because instances of ViewHelpers are reused, this value needs
to be reset.
Besides this removes an obsolete property &#8220;formActionUriArguments&#8221;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39456">#39456</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11636">#11636</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=299ad012139f6b96e69b61f2834f6be6b7a6b509">299ad01</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-textareaviewhelper-html5-aware">
<h3>[BUGFIX] Make TextareaViewHelper HTML5 aware</h3>
<p>This makes the arguments &#8220;rows&#8221; and &#8220;cols&#8221; of the form.textarea
ViewHelper optional.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31189">#31189</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a5752cfdfd9b16aa708a121cd8d07889c0efae49">a5752cf</a></li>
</ul>
</div>
<div class="section" id="id562">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=c845ccc86a0459ca12734f4f3108edf0b9ecd00e">c845ccc</a></li>
</ul>
</div>
<div class="section" id="id563">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=6613e1ed236ee6a8653bcfe84b2677ae37ae7a70">6613e1e</a></li>
</ul>
</div>
<div class="section" id="task-correct-striptags-test-because-of-unintended-incompletion-result">
<h3>[TASK] Correct StripTags test because of unintended incompletion result</h3>
<p>A test&#8217;s data provider&#8217;s method name began with the character sequence
&#8216;test&#8217;, was hence regarded as test to be executed.
This resulted into an &#8220;Incomplete&#8221; result when running the tests.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=492a8daa397c66d2b7f07082f7d583a1a969ad66">492a8da</a></li>
</ul>
</div>
<div class="section" id="bugfix-replace-placeholders-in-fallback-for-id-translation">
<h3>[BUGFIX] Replace placeholders in fallback for id translation</h3>
<p>When using id based translation and no translation is defined in XLIFF,
the tag value is used as a fallback in TranslateViewHelper.</p>
<p>With this change, the fallback is passed to label based translation,
making placeholder replacement work also if no translation does exist
yet.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37387">#37387</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a4a939cbecd9f15b2bdb3e864b84f81a41371450">a4a939c</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-use-of-dashes-in-attribute-names-possible">
<h3>[BUGFIX] Make use of dashes in attribute names possible</h3>
<p>When using e.g. data-foo in VH tags, the parser would choke. This
change fixes this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38592">#38592</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=049704f0f77cdae986c03d8ca435013425c15881">049704f</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-wrong-use-of-internal-annotation">
<h3>[BUGFIX] Remove (wrong) use of Internal annotation</h3>
<p>The internal annotation is used to declare command methods
as internal, not to mark things as not being public API.</p>
<p>Furthermore, it is not allowed to be used on properties
and with #38667 fixed Fluid would cause exceptions.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38667">#38667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=7e68ea46467ec978c0bd54c25632582690eca6c2">7e68ea4</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-eval-from-standaloneviewtest">
<h3>[BUGFIX] Remove eval from StandaloneViewTest</h3>
<p>Removes the use of eval from the StandaloneViewTest so that
now a Fixture class is used that extends the StandaloneView.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38873">#38873</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31179">#31179</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=73c686b0ff4710e2a89f30a526f9bdb132723f95">73c686b</a></li>
</ul>
</div>
<div class="section" id="id570">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a479713a1f737e8cdb2b0d94eb2bbe4840814808">a479713</a></li>
</ul>
</div>
<div class="section" id="id571">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=2a9e2f2fe2fe71b52860a33a6fa009fbe8cab0b7">2a9e2f2</a></li>
</ul>
</div>
<div class="section" id="task-add-query-parameters-for-form-action-as-hidden-fields">
<h3>[TASK] Add query parameters for form action as hidden fields</h3>
<p>This change makes the form viewhelper usable with method GET by adding
query parameters of the action as hidden fields to the form. Otherwise
the browser would replace them by the form values
(<a class="reference external" href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.4">http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.4</a>).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/11636">#11636</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=0c8ef04ce86582e4eea8a702b3f4a90c9d639227">0c8ef04</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-render-hidden-upload-fields-if-a-resource-is-available">
<h3>[BUGFIX] Only render hidden upload fields if a resource is available</h3>
<p>The UploadViewHelper always creates hidden fields for filename and
resource pointer so that previously uploaded files are not lost
if validation errors occur.</p>
<p>This change makes sure that those hidden fields are only rendered
if a file has been uploaded before because otherwise the property
mapper tries to create a Resource object and fails with an
exception (see #38184).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38184">#38184</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=ecc4f01ead99f3993bd3908d974485e2c65dd080">ecc4f01</a></li>
</ul>
</div>
<div class="section" id="id574">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=40a283fb44865efde9d36645130eae7c15b85f72">40a283f</a></li>
</ul>
</div>
<div class="section" id="id575">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a8b58323292ee09529a5cb2cd6fc55b7d7c91f21">a8b5832</a></li>
</ul>
</div>
<div class="section" id="id576">
<h3>[TASK] Code cleanup</h3>
<p>Does code cleanup, mostly to documentation, but also tweaks
unused variables, missing return statements and similar things.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=ad4ed8417fd8e3897c417e168898557e7989f6e6">ad4ed84</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unusable-checkbox-radio-if-formobject-is-null">
<h3>[BUGFIX] Fix unusable checkbox/radio if formObject is NULL</h3>
<p>When using a form object inside of a form view helper inside an index
action template and a checkbox is referring to a property $sth of
$someFormObject, the form object can be NULL with code like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">indexAction</span><span class="p">(</span><span class="nx">\\Some\\Type</span> <span class="nv">$someFormObject</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">)</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span> <span class="o">...</span> <span class="nx">object</span><span class="o">=</span><span class="s2">&quot;{someFormObject}&quot;</span><span class="o">&gt;</span>
 <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">checkbox</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;{sth}&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="s2">&quot;{sth.value} == yes&quot;</span><span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Initially calling the index action makes someFormObject NULL. If the submitted
form had validation errors someFormObject is NULL, too. This possibility
was ignored in a call for the formObject from within the CheckboxViewHelper as
well as from the RadioViewHelper.</p>
<p>So you would get an exception telling you:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">No</span> <span class="nx">value</span> <span class="nx">found</span> <span class="k">for</span> <span class="nb">key</span> <span class="s2">&quot;TYPO3</span><span class="se">\\</span><span class="s2">Fluid</span><span class="se">\\</span><span class="s2">ViewHelpers</span><span class="se">\\</span><span class="s2">FormViewHelper-&gt;formObject&quot;</span>
</pre></div>
</div>
<p>This change fixes that bug and thus also sets the checkbox and radio
&#8220;checked&#8221; attribute properly when a validation error occurred.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35894">#35894</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=dec3b187b6db773a5a84dec70918c22f428cb994">dec3b18</a></li>
</ul>
</div>
<div class="section" id="bugfix-hidden-fields-should-be-rendered-in-extra-section">
<h3>[BUGFIX] hidden fields should be rendered in extra section</h3>
<p>Currently form.select and form.checkbox ViewHelpers render
hidden fields before the actual input field in order to
force submission of a value.
This leads to the situation that labels wrapped around the
field do not correspond to the actual form field, but to
the hidden field.
This is fixed by letting the form ViewHelper taking care of
rendering the requried hidden fields in the already existing
section on top of the form.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/26481">#26481</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/13342">#13342</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=9f01a42dc97a85f22a08c4d7ca75405fe1e75557">9f01a42</a></li>
</ul>
</div>
<div class="section" id="feature-add-a-viewhelper-for-entity-identifier-retrieval">
<h3>[FEATURE] Add a ViewHelper for entity identifier retrieval</h3>
<p>This adds a ViewHelper &#8220;format.identifier&#8221; that returns
the plain identifier for a given entity.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33494">#33494</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=85bca3221ba3150baf59f8fd9ccd1f9e7732f02f">85bca32</a></li>
</ul>
</div>
<div class="section" id="bugfix-viewhelper-exceptions-should-not-be-caught-in-testing-context">
<h3>[BUGFIX] ViewHelper exceptions should not be caught in testing context</h3>
<p>While it is correct that ViewHelper exceptions are silently logged in
production context, they should be displayed in development and testing
context; and not only in development context.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37671">#37671</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=5a75ed885661b11d73715acc82922936b438f0b1">5a75ed8</a></li>
</ul>
</div>
<div class="section" id="id583">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=9ea875e87938df580e06207755859297737c90fe">9ea875e</a></li>
</ul>
</div>
<div class="section" id="task-standalone-view-enable-escaping-for-html">
<h3>[TASK] Standalone View: enable escaping for &#8220;html&#8221;</h3>
<p>Since the introduction of Content Negotiation to FLOW3
(I7d753155aa72f41e3df85b076e8067bcbfe7ac04), the default
Format of the ActionRequest is not &#8220;html&#8221; but undefined.
The Standalone View relied on the default &#8220;html&#8221; format.</p>
<p>This change enables the escape interceptor if the format
is either &#8220;html&#8221; or not set at all
* Related: <a class="reference external" href="http://forge.typo3.org/issues/37561">#37561</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=6f1b39d8c75a2ce37e3e5ef1a725790b4283c2ef">6f1b39d</a></li>
</ul>
</div>
<div class="section" id="feature-allow-access-to-attributes-in-tagbuilder">
<h3>[FEATURE] Allow access to attributes in TagBuilder</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37460">#37460</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=f5337883f083ff2ec7226a7f7fb4f0a5560701c8">f533788</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-empty-output-of-translateviewhelper">
<h3>[BUGFIX] Avoid empty output of TranslateViewHelper</h3>
<p>If translation by ID is used but no translation is found, the ID will now be
returned if the view helper tag has no content. Before this change it would
just return nothing (printable, at least).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35041">#35041</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=cd86a2dd032dc564e7a5eb10cbd75dfbcee478c5">cd86a2d</a></li>
</ul>
</div>
<div class="section" id="id587">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add spaces to &#8221;){&#8221; and to &#8220;foreach(&#8221;, fixes some docblocks and
indentation. Also avoids a possible uninitialised variable warning.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=bca7ade025701e7de6bcc9d3ad1328bd8633a312">bca7ade</a></li>
</ul>
</div>
<div class="section" id="id589">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=4ba7cda690f79a9e68987c22acd42dfee7f1e81b">4ba7cda</a></li>
</ul>
</div>
<div class="section" id="id590">
<h3>[!!!][FEATURE] (MVC): Whitelist-based Property Mapping Configuration</h3>
<p>See the corresponding FLOW3 change at <a class="reference external" href="https://review.typo3.org/#/c/10926/">https://review.typo3.org/#/c/10926/</a> for a
detailed explanation.</p>
<p>Furthermore, this change adds comprehensive end-to-end Functional Tests for the
Fluid and FLOW3 Form Handling</p>
<p>Note: You need the accompanying FLOW3 change for testing this feature as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36776">#36776</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=6da787569dfb5f279f16740f5305bf3a160e068c">6da7875</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-request-handling-for-ajax-widgets">
<h3>[BUGFIX] Fix request handling for Ajax widgets</h3>
<p>Requests to AJAX widgets were not handled properly
because the routing configuration was not available
to the request handler being in charge for handling
that request.</p>
<p>This patch removes the specialized WidgetRequestHandler
completely and implements the specialized handling of
AJAX widget requests through an aspect which advices
the original Router.</p>
<p>This change set also introduces functional tests which
cover the basic widget request handling executed through
the full request / response stack.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36500">#36500</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36236">#36236</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=380d683777152993c1e9b24256781653be961122">380d683</a></li>
</ul>
</div>
<div class="section" id="task-update-package-xml">
<h3>[TASK] Update Package.xml</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=d7b34b3ea49e8cb6b25b9f82f1513aa2d51850e1">d7b34b3</a></li>
</ul>
</div>
<div class="section" id="task-move-link-widget-uri-widget-widget-subfolder">
<h3>[!!!][TASK] Move link.widget &amp; uri.widget Widget subfolder</h3>
<p>This moves widget related ViewHelpers link.widget &amp; uri.widget
to the Widget subfolder (as in v4).</p>
<p>Instead of link.widget you should use widget.link, instead of
uri.widget widget.uri from now on.</p>
<p>This is not a breaking change right now as the old classes
are still there (with &#64;deprecated annotation). But if you
used one of the ViewHelpers you should adjust your code.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34231">#34231</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=b2ae19789639c72c88c5de11e9ecd5e5a939bcfb">b2ae197</a></li>
</ul>
</div>
<div class="section" id="feature-debugviewhelper-allows-output-of-type-only">
<h3>[FEATURE] DebugViewHelper allows output of type only</h3>
<p>Because sometimes var_dump is too verbose, this patch adds
a flag where only the type of the intended variable
can be output.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33493">#33493</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=fb14d2ad206d8cb94503cdf16f367e9e5aa14c0f">fb14d2a</a></li>
</ul>
</div>
<div class="section" id="feature-declare-namespaces-in-xml-tag">
<h3>[FEATURE] Declare namespaces in XML tag</h3>
<p>This makes it possible to declare Fluid namespace identifiers with
the common xmlns syntax &lt;html xmlns:foo=&#8221;http://some/unique/namespace&#8221;&gt;
That works as a replacement for xml/html based Fluid templates which
can be used instead of the {namespace foo=Bar} syntax.</p>
<p>This syntax triggers auto-completion in most IDEs if the xml
namespace is bound to a valid XSD schema!</p>
<p>Usage:</p>
<ul class="simple">
<li>Create a XSD file for your ViewHelpers by executing
./flow3 documenation:generatexsd Your\\Package\\ViewHelpers
&#8211;target-file some/directory/your.package.xsd</li>
<li>Import the XSD file in your favorite IDE and map it to the
namespace &#8220;<a class="reference external" href="http://typo3.org/ns/Your/Package/ViewHelpers">http://typo3.org/ns/Your/Package/ViewHelpers</a>&#8220;</li>
<li>Add the namespace to your Fluid template by adding the &#8220;xmlns:&#8221;
attribute to the root tag (usually &lt;xml ...&gt; or &lt;html ...&gt;).</li>
</ul>
<p>If you want to use this inside partials, you can use the &#8220;section&#8221;
argument of the render ViewHelper in order to only render the content
of the partial:</p>
<p>Partial:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">html</span> <span class="nx">xmlns</span><span class="o">:</span><span class="nx">x</span><span class="o">=</span><span class="s2">&quot;http://typo3.org/ns/Your/Package/ViewHelpers&quot;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;content&quot;</span><span class="o">&gt;</span>
       <span class="o">&lt;</span><span class="nx">x</span><span class="o">:</span><span class="nx">yourViewHelper</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Template:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">render</span> <span class="nx">partial</span><span class="o">=</span><span class="s2">&quot;PartialName&quot;</span> <span class="nx">section</span><span class="o">=</span><span class="s2">&quot;content&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Note:</p>
<p>You are able to use a different XML namespace pattern by specifying
the &#8211;xsd-namespace argument in the generatexsd command.</p>
<p>The default pattern &#8220;<a class="reference external" href="http://typo3.org/ns">http://typo3.org/ns</a>/&lt;php namespace&gt;&#8221; is resolved
automatically by the Fluid parser. If you use a custom XML namespace,
you need to configure the namespace mapping.</p>
<p>The (YAML) syntax for that is:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">:</span>
  <span class="nx">Fluid</span><span class="o">:</span>
    <span class="nx">namespaces</span><span class="o">:</span>
      <span class="s1">&#39;http://some/unique/namespace&#39;</span><span class="o">:</span> <span class="s1">&#39;My\\Php\\Namespace&#39;</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27119">#27119</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=432ebf65baab808251f8954a12f5678f87b37550">432ebf6</a></li>
</ul>
</div>
<div class="section" id="feature-command-for-xsd-schema-generation">
<h3>[FEATURE] Command for XSD Schema generation</h3>
<p>This adds a command controller for rendering XSD schemas
for ViewHelpers.</p>
<p>Usage: ./flow3 documentation:generatexsd &#8216;Some\Namespace&#8217;</p>
<p>This also removes the no longer needed and forever broken
Controllers from the package.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/13643">#13643</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=1cde8ca124027849ffe610e0a4db479e9ab619b4">1cde8ca</a></li>
</ul>
</div>
<div class="section" id="task-adjustments-to-refactored-flow3-context">
<h3>[TASK] adjustments to refactored FLOW3 Context</h3>
<p>As the Context is now an object and not a string anymore, we adjust
our context checks appropriately.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=5435a8bd6da5d32ee1dc95fdec7fad06019168d6">5435a8b</a></li>
</ul>
</div>
<div class="section" id="task-add-code-migration-to-adjust-templates-to-fluid-1-1">
<h3>[TASK] Add code migration to adjust templates to Fluid 1.1</h3>
<p>This changes form.textbox to form.textfield in HTML files.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=214c79a4470453ccfa6e0fb8dc979ad3cb85e109">214c79a</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-filename-spelling-to-changes-in-flow3">
<h3>[BUGFIX] Adjust filename spelling to changes in FLOW3</h3>
<p>Adapt the usage of fileName to filename to match FLOW3</p>
<ul class="simple">
<li>Relates: <a class="reference external" href="http://forge.typo3.org/issues/35298">#35298</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=e547570a504e745bab6490095144a01bff6e6b89">e547570</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-doc-comment-of-form-validationresultsviewhelper">
<h3>[BUGFIX] Fixes doc comment of Form.ValidationResultsViewHelper</h3>
<p>The example in the class doc comment was outdated and is fixed with
this change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31380">#31380</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=f18764473d62d0b39b10b19cf98f680b07ee133d">f187644</a></li>
</ul>
</div>
<div class="section" id="id602">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=554de6c03a407176e8683a38dd4bfc526cab75f3">554de6c</a></li>
</ul>
</div>
<div class="section" id="bugfix-render-childnodes-in-validation-results-vh">
<h3>[BUGFIX] Render childnodes in validation results VH</h3>
<p>The adjustments to the new HTTP implementation in FLOW3
introduced a regression that prevents the child nodes of the
ValidationResults ViewHelper from being rendered if no
validation errors occurred.
This change reverts this breaking behavior and adds unit
tests for the ViewHelper.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36297">#36297</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=b136cfb5b015307fa58f21c3d95c6eff5490549f">b136cfb</a></li>
</ul>
</div>
<div class="section" id="task-adjust-a-comment-to-http-foundation">
<h3>[TASK] Adjust a comment to HTTP foundation</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=0914e9da46c731746fc71a871c363cc00be16e62">0914e9d</a></li>
</ul>
</div>
<div class="section" id="id605">
<h3>[SECURITY] Protect arguments of form __referrer with HMAC</h3>
<p>The request arguments of the referring request are
a serialized string written to one of the hidden
fields in a Fluid form. This string has to be protected
by a HMAC to protect FLOW3 from possible unserialize
attacks.</p>
<p>Note: For now there is no object known within the FLOW3
Distribution, that could be used for an unserialize
exploit!</p>
<ul class="simple">
<li>Security-Bulletin: <a class="reference external" href="http://typo3.org/teams/security/security-bulletins/flow3/FLOW3-SA-2012-001/">FLOW3-SA-2012-001</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35300">#35300</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=73901980bb1c224f50cf7f790bba3379c2373ee5">7390198</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-flow3-s-new-http-framework">
<h3>[TASK] Adjust to FLOW3&#8217;s new HTTP framework</h3>
<p>This adjusts API usage within Fluid to the refactored MVC and new HTTP
support in FLOW3 1.1.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=be4e0ec060d231ec77b773ec7098e9c99c8baabe">be4e0ec</a></li>
</ul>
</div>
<div class="section" id="id610">
<h3>[TASK] Sub package name case and location adjustments</h3>
<p>This adjusts code to use the corrected namespaces and class names in
FLOW3.</p>
<p>Also contains a few cosmetic changes.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=e7c8c12caede03207575497fab4bc4ac793cb308">e7c8c12</a></li>
</ul>
</div>
<div class="section" id="feature-make-rendersection-callable-outside-of-template-context">
<h3>[FEATURE] Make renderSection callable outside of template context</h3>
<p>This makes it possible to call $this-&gt;renderSection(&#8216;sectionName&#8217;) to
render only only a single section out of a complex template.</p>
<p>This change is needed for the refactored TypoScript rendering.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31638">#31638</a></li>
<li>Related: PHX-57</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a3cb456a474f86288c40110f6dc80c81dab5df6e">a3cb456</a></li>
</ul>
</div>
<div class="section" id="task-remove-occurences-of-removed-form-textbox-viewhelper">
<h3>[TASK] Remove occurences of removed form.textbox ViewHelper</h3>
<p>There are still some places referring to the no longer existing
Textbox form ViewHelper.
This adjusts code accordingly by replacing textbox with textfield
where applicable.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27770">#27770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=039ef098bd7742594af47c96b6447484576cc1ab">039ef09</a></li>
</ul>
</div>
<div class="section" id="task-fixes-a-wrong-return-type-annotation">
<h3>[TASK] Fixes a wrong return type annotation</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=edc73d2f2a3363319b1d5415574d2ac133c299db">edc73d2</a></li>
</ul>
</div>
<div class="section" id="feature-add-translation-support-to-selectviewhelper">
<h3>[FEATURE] Add translation support to SelectViewHelper</h3>
<p>The change adds support for translation of the options labels
produced in SelectViewHelper.</p>
<p>The view helper can be given a &#8220;translate&#8221; argument with
configuration on how to translate option labels. The array
can have the following keys:</p>
<ul class="simple">
<li>&#8220;by&#8221; defines if translation by message id or original
label is to be used (&#8220;id&#8221; or &#8220;label&#8221;)</li>
<li>&#8220;using&#8221; defines if the option tag&#8217;s &#8220;value&#8221; or &#8220;label&#8221;
should be used as translation input, defaults to &#8220;value&#8221;</li>
<li>&#8220;locale&#8221; defines the locale identifier to use, optional,
defaults to current locale</li>
<li>&#8220;source&#8221; defines the translation source name, optional,
defaults to &#8220;Main&#8221;</li>
<li>&#8220;package&#8221; defines the package key of the translation source,
optional, defaults to current package</li>
<li>&#8220;prefix&#8221; optionally defines a prefix to use for the message id</li>
</ul>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34232">#34232</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=305a27906f98555133b6728ba5b4633c3499d5cd">305a279</a></li>
</ul>
</div>
<div class="section" id="id616">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=c523847f67b86ff5c49abe04371a46b724f976a9">c523847</a></li>
</ul>
</div>
<div class="section" id="task-fix-types-in-variable-annotations-missing-prepending-backslash">
<h3>[TASK] Fix types in variable annotations (missing prepending backslash)</h3>
<p>Minor changes due to automated scan for missing backslash.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34643">#34643</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=ba99bfede974f6d4e524cfd45a5c63d975b1d25e">ba99bfe</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-var-annotation-type-in-identity-json-vh">
<h3>[BUGFIX] Fix &#64;var annotation type in identity.json VH</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33043">#33043</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=7262314810a6c8de2b991deeb0ca3c3befb6969c">7262314</a></li>
</ul>
</div>
<div class="section" id="feature-hint-about-achieving-string-comparison-in-ifviewhelper">
<h3>[FEATURE] Hint about achieving string comparison in IfViewHelper</h3>
<p>IfViewHelper&#8217;s condition doesn&#8217;t support real string
comparison. There&#8217;s a known workaround which is now
mentioned in the VH&#8217;s code examples.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33814">#33814</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=05828520c2aa0a9b23535e20c9746470d8bf248c">0582852</a></li>
</ul>
</div>
<div class="section" id="id623">
<h3>[TASK] Fix doc comments</h3>
<p>Fixes doc comments issues, like missing or wrong &#64;param
annotations. Removes &#64;author annotations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=1049dbdaec969f724565db99219471ad30d4d83a">1049dbd</a></li>
</ul>
</div>
<div class="section" id="task-remove-utterly-useless-line-of-code">
<h3>[TASK] Remove utterly useless line of code</h3>
<p>In I24acacf9fe10ffd1f8daa640b86f1a6709cf2a8a a small fix was made.
Only to leave an utterly useless line of code behind. This change
remedies that.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33812">#33812</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a2928ff78460d8294f36b14aba482117606e0c87">a2928ff</a></li>
</ul>
</div>
<div class="section" id="task-rename-key-to-id-in-translateviewhelper">
<h3>[TASK] Rename key to id in TranslateViewHelper</h3>
<p>The key attribute refers to the trans-unit id in XLIFF and thus
should be named id.</p>
<p>Along the way a type cast of quantity to integer is removed, as
it doesn&#8217;t make sense (plural form handling can take care of
floats just fine).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33812">#33812</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=2fe6308fd2cec8927c0bc9b103287e6cb1f9c4b1">2fe6308</a></li>
</ul>
</div>
<div class="section" id="task-cleanup-fix-viewhelper-doc-comments">
<h3>[TASK] Cleanup/Fix ViewHelper doc comments</h3>
<p>This tweakes some ViewHelper doc comments so that they can be
rendered with the new Reference command introduced with #33675.
No functional changes.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33675">#33675</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=bf846ce58731b60fa904639f4440bbb1b33dff50">bf846ce</a></li>
</ul>
</div>
<div class="section" id="id627">
<h3>[TASK] Remove deprecated methods and unused code</h3>
<p>Things which have been deprecated prior to the 1.0.0 release are
removed with this change.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27770">#27770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=00b96438b98c37dae50d3f04f92183eb61372fa0">00b9643</a></li>
</ul>
</div>
<div class="section" id="bugfix-uploadviewhelper-must-not-convert-resources-if-errors-occurred">
<h3>[BUGFIX] UploadViewHelper must not convert resources if errors occurred</h3>
<p>If getMappingResultsForProperty() contains errors, uploaded
resources should not been converted to resource objects but
instead the hidden fields should be empty.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33570">#33570</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a1a61db96a08fdc5e901dc74bd0f940518226144">a1a61db</a></li>
</ul>
</div>
<div class="section" id="bugfix-abstractformfieldviewhelper-always-converts-entities">
<h3>[BUGFIX] AbstractFormFieldViewHelper always converts entities</h3>
<p>AbstractFormFieldViewHelper::getValue() currently always tries
to convert objects to identities by calling
PersistenceManager::getIdentifierByObject().
This makes it impossible for custom ViewHelpers to access the
unmodified value that was previously submitted (or bound to the
form field view helper).</p>
<p>This change introduces an argument $convertObjects that allows
experienced developers to disable this behavior in custom
view helpers.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33569">#33569</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=02f8a9235927c13f1aa80746312415cb315358ed">02f8a92</a></li>
</ul>
</div>
<div class="section" id="feature-groupedforviewhelper-accepts-property-path-as-groupby-argument">
<h3>[FEATURE] GroupedForViewHelper accepts property path as groupBy argument</h3>
<p>This change allows the GroupedForViewHelper to accept not only a property/array key as
argument but also a property path. This reduces memory consumption for more complex
object graphs. Also, It enables a developer to create a custom algorithm (getter) to provide
the value to compare. The change is backwards compatible.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/9244">#9244</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=f2f70329201489bd3ebe6f48907eaff9f91dd25b">f2f7032</a></li>
</ul>
</div>
<div class="section" id="feature-view-implement-standaloneview">
<h3>[FEATURE] (View): Implement StandaloneView</h3>
<p>This view can be used to render E-Mails or other things outside a controller
scope.</p>
<p>It is mostly forward-ported from TYPO3 v4, just with Functional Tests added.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32930">#32930</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=9897a1acfd5608afb0ef5f75db5a9d765d88df5c">9897a1a</a></li>
</ul>
</div>
<div class="section" id="bugfix-formfieldviewhelpers-do-not-resolve-property-path">
<h3>[BUGFIX] FormFieldViewHelpers do not resolve property path</h3>
<p>When binding a form to an object the form elements fail to
correctly resolve the property path if no &#8220;formObjectName&#8221; is
specified.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33421">#33421</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=483a866c564b8dadc97a05bed36433e2618f0704">483a866</a></li>
</ul>
</div>
<div class="section" id="bugfix-viewhelpers-fix-wrong-comment-in-validationresults-viewhelper">
<h3>[BUGFIX] (ViewHelpers): Fix wrong comment in ValidationResults ViewHelper</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=b9a8a5cf5d6aea03f815f4bed1fd37b5af800dac">b9a8a5c</a></li>
</ul>
</div>
<div class="section" id="bugfix-form-checkbox-viewhelper-throws-exception-in-newaction">
<h3>[BUGFIX] form.checkbox ViewHelper throws Exception in newAction</h3>
<p>This adds an argument &#8220;multiple&#8221; to the checkbox ViewHelper
which makes it possible to mark the property as multi value
even if the bound object is NULL.</p>
<p>Besides the ViewHelper can now be bound to all scalar properties,
arrays and Traversable objects.
This change is backwards-compatible.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/8854">#8854</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=97e44d5de9331e3b496fb0e1fbc8aaf11d10325f">97e44d5</a></li>
</ul>
</div>
<div class="section" id="feature-form-button-viewhelper">
<h3>[FEATURE] form.button ViewHelper</h3>
<p>Adds a ViewHelper that renders &lt;button /&gt; form elements</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33302">#33302</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=8447517f3fe029577d92ae86927ad8b0dabe1ddb">8447517</a></li>
</ul>
</div>
<div class="section" id="task-rename-default-attribute-to-value-in-translateviewhelper">
<h3>[TASK] Rename default attribute to value in TranslateViewHelper</h3>
<p>The default attribute for the TranslateViewHelper is renamed to
value, because it is more intuitive if not translating by key when
using inline notation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11955">#11955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=3f0b26b4a95880397c7eb8b64172be52dee41bde">3f0b26b</a></li>
</ul>
</div>
<div class="section" id="feature-translateviewhelper-accepts-package-argument">
<h3>[FEATURE] TranslateViewHelper accepts package argument</h3>
<p>This change allows the TranslateViewHelper to accept an optional
package argument, which is passed to the Translator class for lookups.
If the package argument is NULL, the view helper will default to the
current controller&#8217;s package key.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/12502">#12502</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/14037">#14037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=cf05b1fa6a5e7e4e3f870db6ed787aa204d33952">cf05b1f</a></li>
</ul>
</div>
<div class="section" id="task-adjust-tests-to-optimized-reflection-service">
<h3>[TASK] Adjust Tests to optimized Reflection Service</h3>
<p>This fixes unit tests that are broken with
Idbaa7906dcdad82131eaf74a8dbfa371b78fe94e applied.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32531">#32531</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=4540f9b8358ebd5aac1e974e8b43556a35bfc4a2">4540f9b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-widgetrequesthandler-unit-tests">
<h3>[BUGFIX] Fix WidgetRequestHandler unit tests</h3>
<p>This change fixes unit tests that were broken with eeadd2b</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32451">#32451</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a535ee72d344b670ab394fd58e615890cadd0a07">a535ee7</a></li>
</ul>
</div>
<div class="section" id="task-make-fluid-package-protected">
<h3>[TASK] Make Fluid package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=b781e085e3e44afeabac24ba8121853a679a2271">b781e08</a></li>
</ul>
</div>
<div class="section" id="bugfix-widget-adjust-ajax-widgets-to-rewritten-bootstrap">
<h3>[BUGFIX] (Widget): Adjust Ajax Widgets to rewritten Bootstrap</h3>
<p>As the concept of Request Handlers has been updated and extended,
we need to adjust the WidgetRequestHandler accordingly.</p>
<p>This bugfix is testable with the Viewhelpertest package, using the
manual test &#8220;Widgets: AJAX widget context is reset correctly&#8221;.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32451">#32451</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=eeadd2bbb8559b7434d95e41ddc5e998b7cf18b2">eeadd2b</a></li>
</ul>
</div>
<div class="section" id="id644">
<h3>[BUGFIX] Fix unit tests failing with PHPUnit 3.6</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32016">#32016</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=70647cf6f6d60c4ded3c75235f486066801ffd3a">70647cf</a></li>
</ul>
</div>
<div class="section" id="feature-core-stateless-ajax-widgets">
<h3>[FEATURE] (Core): Stateless AJAX Widgets</h3>
<p>Currently an AJAX Widget stores the WidgetContext in the
WidgetContextHolder which again puts it in the current user
session.
This change adds a property &#8220;stateless&#8221; to the
AbstractWidgetViewHelper. If that&#8217;s TRUE, the widget context
won&#8217;t be stored in the session anymore. Instead, the
WidgetRequestBuilder then expects the &#8220;internal argument&#8221;
<tt class="docutils literal"><span class="pre">__widgetContext</span></tt> to be specified (with a valid HMAC appended).</p>
<p>The Widget Link/Uri-Viewhelpers now add the serialized and
HMAC&#8217;ed WidgetContext to the generated URI if the new argument
&#8220;includeWidgetContext&#8221; is set.</p>
<p>Besides this change renames the widgetId argument from
&#8220;typo3-fluid-widget-id&#8221; to &#8220;__widgetId&#8221; as discussed.
Note: This would be a breaking change, if you relied on that
specific GET argument (which is however very unlikely)!</p>
<p>Lastly the WidgetRequestBuilder now interprets merged GET + POST
arguments instead of relying on GET only. This makes it possible
to pass the widgetId/Context via POST.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31167">#31167</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=2db358732b01c977b9c5709b772601ab483129e6">2db3587</a></li>
</ul>
</div>
<div class="section" id="feature-viewhelpers-render-flashmessage-title-and-severity">
<h3>[FEATURE] (ViewHelpers): Render FlashMessage title and severity</h3>
<p>Currently the FlashMessages ViewHelper only renders the body of
the respective Flash Messages.
This change modifies the ViewHelper in a backwards compatible
way so that it outputs the message title if specified.
Additionally the severity (notice, warning, error, ok) is
added to each list item.</p>
<p>Additionally free rendering foreach style is possible now.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31019">#31019</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=50db4d21b800a571c949fb5c62ddc02d7dc858a6">50db4d2</a></li>
</ul>
</div>
<div class="section" id="bugfix-viewhelper-exceptions-should-be-logged-in-production">
<h3>[BUGFIX] ViewHelper Exceptions should be logged in Production</h3>
<p>In Production context all Exceptions from ViewHelpers will be
silently logged. In Development they will be re-thrown so the global
exception handler will be triggered.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30935">#30935</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=5fa13298c467f56d5e5f3fe5a6a233817144526d">5fa1329</a></li>
</ul>
</div>
<div class="section" id="feature-widgets-reset-widgetviewhelpers-when-being-reused-from-viewhelpernode">
<h3>[FEATURE] Widgets: Reset WidgetViewHelpers when being reused from ViewHelperNode</h3>
<ul class="simple">
<li>Introduce an AbstractViewHelper::resetState method to handle any kind
of statefull interaction, empty by default.</li>
<li>Make ViewHelperNode call resetState when reusing a ViewHelper, and also
call it when reusing it in a compiled template.</li>
<li>AbstractWidgetViewHelper implements resetState for creating a new
WidgetContext object.</li>
</ul>
<p>As ViewHelpers are supposed to be stateless they were create once per
RenderingContext and reused whenever the RenderingContext fits.
Some ViewHelpers are not stateless, e.g. AJAX widgets.</p>
<p>AJAX widgets push their WidgetContext into an AjaxWidgetContextHolder
before they get rendered.</p>
<p>As soon as AJAX-WidgetViewHelpers were used multiple times within the
same RenderingContext (widgets in ForViewHelpers for example) differet
widgets share the same ViewHelper containing the same WidgetContext.
Because the WidgetContext contains all statefull information about a
widget, only the last rendered widget gets stored in the ContextHolder.
That makes equal AJAX widgets within a for-loop impossible because
each GUI representation interacts with only the last rendered PHP object.</p>
<p>A test case has been committed to Viewhelpertest with <a class="reference external" href="http://review.typo3.org/6594">http://review.typo3.org/6594</a></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31667">#31667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=e45079412d945aab812a48933ea5c3ff362e0b08">e450794</a></li>
</ul>
</div>
<div class="section" id="bugfix-pre-selecting-entities-does-not-work-with-multiple-flag-set">
<h3>[BUGFIX] pre-selecting entities does not work with multiple flag set</h3>
<p>The SelectViewHelper is not able to retrieve the selected uuid values for
a collection of objects</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29395">#29395</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=1d9943d2bd8d8087750ee422d24d791ae916b4df">1d9943d</a></li>
</ul>
</div>
<div class="section" id="task-change-argument-handling-of-widgetviewhelpers">
<h3>[!!!][TASK] Change argument handling of WidgetViewHelpers</h3>
<ul class="simple">
<li>Change action parameter from &#8220;action&#8221; to &#8220;&#64;action&#8221;</li>
<li>Add &#8220;&#64;format&#8221; parameter</li>
</ul>
<p>This is potentially a breaking change when you rely on the naming of &#8220;action&#8221;.
However, this is very improbable.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31658">#31658</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=02bbddbd036ecd8effd2068a6c868d43eb7b6d06">02bbddb</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id653">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=5de6410a39479374bbfe5dcc7470b7ff30f72428">5de6410</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstart-package-gives-wrong-hint-for-valid-package-key">
<h3>[BUGFIX] kickstart:package gives wrong hint for valid package key</h3>
<p>The kickstarter wrongly claims that a valid package key
may contain underscores. This patch corrects the respective
messages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38999">#38999</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=007c52cd45e78010c01e3a61badd8c6da23b19f2">007c52c</a></li>
</ul>
</div>
<div class="section" id="id655">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=a0cdc11d53681275782e509a0dc9fad53c38155a">a0cdc11</a></li>
</ul>
</div>
<div class="section" id="id656">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=45931af82d389dd29374f2ed322b2e73d0d43b79">45931af</a></li>
</ul>
</div>
<div class="section" id="id657">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=fb00dfcbcb1ea28782c524aff96ca82f32b1d6b0">fb00dfc</a></li>
</ul>
</div>
<div class="section" id="id658">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=7c65b111bf6b2d0b1501e26b9124cf3c4f832de3">7c65b11</a></li>
</ul>
</div>
<div class="section" id="id659">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=c96108a799dbac24d228a21a6e370d421d655ce7">c96108a</a></li>
</ul>
</div>
<div class="section" id="id660">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=6efcb5a4ee49d26c4691f4e44be9b2e3bd91bde3">6efcb5a</a></li>
</ul>
</div>
<div class="section" id="id661">
<h3>[TASK] Code cleanup</h3>
<p>Does cleanup to code documentation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=57f4099b65a8e269748cf44b1b4b0c45b3ba71e9">57f4099</a></li>
</ul>
</div>
<div class="section" id="id663">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=b88e140f4a42c2ce39f4d4b3917611b35d255c75">b88e140</a></li>
</ul>
</div>
<div class="section" id="id664">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=c23776acf3b6d79edbb3e1c8ceff489cd2e61d55">c23776a</a></li>
</ul>
</div>
<div class="section" id="task-add-typo3-flow-to-the-dependencies">
<h3>[TASK] Add TYPO3.Flow to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=15c2925d0c1410eac0a1247c6fc7074dcb2df472">15c2925</a></li>
</ul>
</div>
<div class="section" id="feature-generate-layout-on-kickstart-package">
<h3>[FEATURE] Generate layout on kickstart:package</h3>
<p>With this change the kickstart:package command generates a
layout from the same template as the kickstart:action command.
So resulting view has a base tag included which allows for
easier usage of the resulting StandardController.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34751">#34751</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=888a5cf3f9cae446ab1b3429d399aa3e0dcd77cc">888a5cf</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstarting-a-command-controller-produces-invalid-code">
<h3>[BUGFIX] Kickstarting a command controller produces invalid code</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35963">#35963</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=6c716444acdd5d049e44f88fb9001c9f64950faa">6c71644</a></li>
</ul>
</div>
<div class="section" id="id668">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=941a94b6d7bb132e0ea911a6453a5baab59c43e1">941a94b</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstart-kickstart-model-should-give-correct-example">
<h3>[BUGFIX] Kickstart kickstart:model should give correct example</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36155">#36155</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=c4f28daa13b0a8e8d8665536ff19557993f2d9ab">c4f28da</a></li>
</ul>
</div>
<div class="section" id="id670">
<h3>[TASK] Sub package name case and location adjustments</h3>
<p>This adjusts code to use the corrected namespaces and class names in
FLOW3.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=329c1828e47b40a8dc4a150c1fa1878978183f60">329c182</a></li>
</ul>
</div>
<div class="section" id="id672">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=1162fb4826874f16eefd30ba45c58146868e8af9">1162fb4</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-variable-annotations-missing-prepending-backslash">
<h3>[BUGFIX] Fix variable annotations (missing prepending backslash)</h3>
<p>Minor changes due to automated scan for missing backslash.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34660">#34660</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=00defba2c350e1d4b55d538a32956075369b0e4a">00defba</a></li>
</ul>
</div>
<div class="section" id="id675">
<h3>[TASK] Fix doc comments</h3>
<p>Fixes doc comments issues, like missing or wrong &#64;param
annotations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=617e8dd0411013e4b0e152f268f1c061fcab9878">617e8dd</a></li>
</ul>
</div>
<div class="section" id="feature-create-empty-test-case-when-creating-a-domain-model">
<h3>[FEATURE] Create empty test case when creating a domain model</h3>
<p>In order to encourage TDD, we create an empty base test case
when creating a domain model.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32660">#32660</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=ffec8e3df88af933ac6621b15b0bad7597306444">ffec8e3</a></li>
</ul>
</div>
<div class="section" id="bugfix-scope-prototype-annotation-should-not-be-generated">
<h3>[BUGFIX] scope prototype annotation should not be generated</h3>
<p>Kickstarter should not generate scope prototype in models,
as prototype is the default scope.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32657">#32657</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=ec983023ca452c257c336c1f079436a7a44bd87c">ec98302</a></li>
</ul>
</div>
<div class="section" id="bugfix-generated-entities-should-contain-doctrine-use-statement">
<h3>[BUGFIX] Generated Entities should contain Doctrine use statement</h3>
<p>Generated Entities should contain &#8220;use Doctrine\ORM\Mapping as ORM;&#8221;
statement, as the user most probably needs this later when adjusting
the kickstarter output.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32656">#32656</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=ce3ce816fbe045ada3834811d949f8028354a46f">ce3ce81</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-doc-comment-in-generated-crud-controller">
<h3>[BUGFIX] Wrong doc comment in generated CRUD controller</h3>
<p>In the create action of a CRUD controller, the parameter is
$newSomething, while the docblock says it&#8217;s $something. This leads to
e.g. a warning in some IDEs.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31494">#31494</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=79707703c963d02e2d49a307105dd52abc2dbd6e">7970770</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id681">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=d320c7445980a1125a6fa862edb91fe884c54161">d320c74</a></li>
</ul>
</div>
<div class="section" id="id682">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=c170b3f2ade9eef7ea97f2d2a3421f8014340116">c170b3f</a></li>
</ul>
</div>
<div class="section" id="id683">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=6b182c15903ee80ac6f01158929d75128cfe3261">6b182c1</a></li>
</ul>
</div>
<div class="section" id="id684">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=436c90f382bc1e857115d8a3cfeb7372629069f6">436c90f</a></li>
</ul>
</div>
<div class="section" id="id685">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=45afa0ba497770ed12fcfbc4c2c8477c34fb7b7d">45afa0b</a></li>
</ul>
</div>
<div class="section" id="id686">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=80b82d4e979cd7e787339572abb080260d7726d8">80b82d4</a></li>
</ul>
</div>
<div class="section" id="id687">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=feb68d11bcf380d33bcbf59bcb7b367609304d14">feb68d1</a></li>
</ul>
</div>
<div class="section" id="id688">
<h3>[TASK] Code cleanup</h3>
<p>Tweaks a single constructor docblock.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=8d04ec579623233576ad77c2b8316cfd106ee0cb">8d04ec5</a></li>
</ul>
</div>
<div class="section" id="id690">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=02a04f6e74de4e99009118e6e88a705214005bb3">02a04f6</a></li>
</ul>
</div>
<div class="section" id="task-make-usagetype-on-electronicaddress-nullable">
<h3>[TASK] Make usagetype on ElectronicAddress nullable</h3>
<p>The usage property has no default value and thus should be
nullable to make &#8220;any&#8221; usage possible.</p>
<p>Adds a functional test (thanks Adrian Föder) as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35059">#35059</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=735ccefcaf41c46f60cc2327a7ca259e22f34d6b">735ccef</a></li>
</ul>
</div>
<div class="section" id="task-adjust-validators-to-avoid-validating-more-than-needed">
<h3>[TASK] Adjust validators to avoid validating more than needed</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34154">#34154</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=864601991b49bed50303601b1859345dee86227e">8646019</a></li>
</ul>
</div>
<div class="section" id="bugfix-duplicate-email-address-throws-exception">
<h3>[BUGFIX] Duplicate email address throws exception</h3>
<p>Since #29547 is resolved, trying to store an email address that
already exists throws an exception.
This change drops the unique indexes for &#8220;identifier&#8221;, &#8220;type&#8221; and
&#8220;usagetype&#8221; from the ElectronicAddress domain model.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37266">#37266</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29547">#29547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=9d10e0135395325bdb6c6bf0d9bcc695b2f6e26e">9d10e01</a></li>
</ul>
</div>
<div class="section" id="id696">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add space to &#8220;foreach(&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=7ddab64756f87ac50f9bc096eab076f0ccfc7d4f">7ddab64</a></li>
</ul>
</div>
<div class="section" id="id698">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=4ec32e9c08bc0073b54b06c36c008d78c3c49d23">4ec32e9</a></li>
</ul>
</div>
<div class="section" id="id699">
<h3>[TASK] Add TYPO3.Flow to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=0e933f46796647dda56ff584a99efc13323ae61e">0e933f4</a></li>
</ul>
</div>
<div class="section" id="task-add-migrations-to-create-unique-indexes">
<h3>[TASK] Add migrations to create unique indexes</h3>
<p>Identity annotations now create an unique index, this change
adds a migration to adjust the database schema accordingly.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29547">#29547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=38af75b9609c690eedbff6b393cc815e18f79d04">38af75b</a></li>
</ul>
</div>
<div class="section" id="id702">
<h3>[TASK] Move XLIFF files so that Pootle copes with the file layout</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36284">#36284</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=6d5d0e08cbb289df6b16753da2d118ea8fe4fee7">6d5d0e0</a></li>
</ul>
</div>
<div class="section" id="id704">
<h3>[TASK] Add DB migration for PostgreSQL</h3>
<p>This adds an initial migration for PostgreSQL to create the needed
schema for the package.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36301">#36301</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=795dbd489ecd6da1bf3d19074db19dc905cb7d3d">795dbd4</a></li>
</ul>
</div>
<div class="section" id="task-adjust-columns-to-not-null-default">
<h3>[TASK] Adjust columns to NOT NULL default.</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35059">#35059</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=0814162745e15e5cb0ef6acf6c71e272da2c0e36">0814162</a></li>
</ul>
</div>
<div class="section" id="id708">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=8c287b9cd796f1b06146cfe4209f40125417ea98">8c287b9</a></li>
</ul>
</div>
<div class="section" id="bugfix-primaryelectronicaddress-should-check-before-adding">
<h3>[BUGFIX] PrimaryElectronicAddress should check before adding</h3>
<p>With setPrimaryElectronicAddress the electronic address is also
added to the electronicAddress collection but it should check
first if it is already in to avoid creating duplicate entries.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29484">#29484</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=5f751de47830ed6204e0ac539f5f0baa69d9c330">5f751de</a></li>
</ul>
</div>
<div class="section" id="id710">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=82bee4c7250c162387d3541bf08a2e0b77a1e1e5">82bee4c</a></li>
</ul>
</div>
<div class="section" id="id712">
<h3>[TASK] Implement best practices in XLIFF files</h3>
<p>Adds some &#8220;required&#8221; attributes to the XLIFF files.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33975">#33975</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=97023e77a1bb02945b437ea36c34ed1f7c4f0049">97023e7</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-partyrepository-a-singleton">
<h3>[BUGFIX] Make PartyRepository a singleton</h3>
<p>The PartyRepository lacked the Scope annotation it should have had.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33600">#33600</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=2515d253873904b73e70b95dc647df5b1cbf525b">2515d25</a></li>
</ul>
</div>
<div class="section" id="id717">
<h3>[TASK] Move Translations folder up one level</h3>
<p>This moves the folder for translations into Resources/Private.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32735">#32735</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=65ff6f8e7cbc6b5897a570e367559272b92554e7">65ff6f8</a></li>
</ul>
</div>
<div class="section" id="task-make-party-package-protected">
<h3>[TASK] Make Party package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=43e55bad39510b3550d4080e7d9abcf81ea8f5b6">43e55ba</a></li>
</ul>
</div>
<div class="section" id="task-add-xliff-files-with-common-labels">
<h3>[TASK] Add XLIFF files with common labels</h3>
<p>This adds XLIFF files with a few basic labels and a german translation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11955">#11955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=fc84d2d78ba64008ab7cf2fcdf38e840692816c3">fc84d2d</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id721">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=8f81aa36b3984f7ea203ba6cbe9a5ce737dc3b25">8f81aa3</a></li>
</ul>
</div>
<div class="section" id="id722">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=6ec83a745fe2dd4ad769e37919d53be48b3bfa53">6ec83a7</a></li>
</ul>
</div>
<div class="section" id="id723">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=97b935a91b05b40b88f18824c8a9d7dd2e95b52f">97b935a</a></li>
</ul>
</div>
<div class="section" id="id724">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=cb90a4ad9ca410102b929eca3ea895283ac3a5c1">cb90a4a</a></li>
</ul>
</div>
<div class="section" id="id725">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=4c4f158101c4d572344f4f1335bbd65e956e393d">4c4f158</a></li>
</ul>
</div>
<div class="section" id="id726">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=d3a82c0edc1f34e65b54b3edfbc08fc0dbc35a45">d3a82c0</a></li>
</ul>
</div>
<div class="section" id="id727">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=09229df2adb1897c248c50593d82b0abb5bfd7fe">09229df</a></li>
</ul>
</div>
<div class="section" id="id728">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=5ae0c323a4d8783e221a1e4ac8b9687b77642577">5ae0c32</a></li>
</ul>
</div>
<div class="section" id="id729">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=e8998d5f7eb012be2dc43c580ba34440cfbf23c9">e8998d5</a></li>
</ul>
</div>
<div class="section" id="id730">
<h3>[TASK] Add TYPO3.Flow to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=5951b5410662b837242880db2266437691a7f42e">5951b54</a></li>
</ul>
</div>
<div class="section" id="id732">
<h3>[TASK] adjustments to refactored FLOW3 Context</h3>
<p>As the Context is now an object and not a string anymore, we adjust
our context checks appropriately.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=baa1de25b1f49ecc56aea272c373f2512edbcbfb">baa1de2</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-links-and-update-about-content">
<h3>[BUGFIX] Fix links and update &#8220;About&#8221; content</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36580">#36580</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=38333960413637646b5cc59016d96a19e174bfd5">3833396</a></li>
</ul>
</div>
<div class="section" id="id736">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=49d0c9e58e88405fbe58d71996ac61de3fe00c34">49d0c9e</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-http-implementation">
<h3>[TASK] Adjust to HTTP implementation</h3>
<p>Adjusts a call to getBaseUri() to be done on the correct object.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=1eecf426a52c08cad1fa47deb213928f7b630523">1eecf42</a></li>
</ul>
</div>
<div class="section" id="id738">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=8cb33270af9d98a4c7aba6fc02cecaf5f34c7182">8cb3327</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-links-on-welcome-screen">
<h3>[BUGFIX] Fix links on Welcome screen</h3>
<p>The links to the FLOW3 website were mostly wrong.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32005">#32005</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=20b1c70179ba75f7f99cd22ee5850346bd9bb5a2">20b1c70</a></li>
</ul>
</div>
<div class="section" id="task-add-hint-to-remove-subroute-definition-after-deactivating-package">
<h3>[TASK] Add hint to remove SubRoute definition after deactivating package</h3>
<p>When a SubRoute definition refers to a non-existing or disabled
package an exception is thrown, which confused some followers of
the mini tutorial of the Welcome screen.</p>
<p>This change adds a notice to remove the SubRoute definition
after deactivating the Welcome package.</p>
<p>Besides this renames &#8220;Remove the Welcome package ...&#8221; to
&#8220;Disable the Welcome package ...&#8221;.</p>
<p>Note: Some infos have been added to the exception wiki page at
<a class="reference external" href="http://wiki.typo3.org/wiki/Exception1318414040">http://wiki.typo3.org/wiki/Exception1318414040</a></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31284">#31284</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=1a775b9deac2726a72d1217f3f88b242ed0e7934">1a775b9</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="442e167d-68c2-40ed-03c9-47769a16a292" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="c573e1bb-df89-9132-17ea-f4930ccfb1fc" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="110-beta1" locale="">
        <properties>
         <title>1.1.0-beta1</title>
        </properties>
        <node identifier="9b105422-e578-9b6a-6781-9d451f1d6ff6" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="98ed3620-f267-807b-0507-3529e63c885d" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="beta1">
<h1>1.1.0-beta1</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-update-upgrading-txt">
<h3>[TASK] Update Upgrading.txt</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=698c177691cb5c24b96cad5d30113827eac5bafd">698c177</a></li>
</ul>
</div>
<div class="section" id="task-change-comment-on-rewritebase-directive">
<h3>[TASK] Change comment on RewriteBase directive</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=36de07efc1bf0475c98263203a44b69b0ec7ff7b">36de07e</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-settings-yaml-example-a-working-example">
<h3>[BUGFIX] Make Settings.yaml.example a working example</h3>
<p>With this change the Settings.yaml.example can be used as is,
because the key &#8220;doctrine&#8221; is commented out now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33410">#33410</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=b7570a03555b9f7f362e9af32ada0a0982172eea">b7570a0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-wrong-url-to-tutorials-page-in-readme-txt">
<h3>[BUGFIX] Fixes wrong URL to tutorials page in Readme.txt</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33031">#33031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=0ceedb094ebae330ea3b90faf2c4f5002466981d">0ceedb0</a></li>
</ul>
</div>
<div class="section" id="task-document-yaml-syntax-changes-for-upgrade">
<h3>[TASK] Document YAML syntax changes for upgrade</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33268">#33268</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=6d97b48bf5642e20e677cc4aa4c9cfde4142f1ec">6d97b48</a></li>
</ul>
</div>
<div class="section" id="task-update-upgrading-txt-for-1-1">
<h3>[TASK] Update Upgrading.txt for 1.1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=0807179c909e87214dacf4b91ac53e2e1f7b6391">0807179</a></li>
</ul>
</div>
<div class="section" id="task-adjust-surf-deployment-descriptor-to-new-git-option">
<h3>[TASK] Adjust Surf deployment descriptor to new git option</h3>
<p>The branch option is now git-checkout-branch.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=d48af1a18c9e4352db2f74e8ce60d8b9a46ee8b9">d48af1a</a></li>
</ul>
</div>
<div class="section" id="task-add-shortcuts-folder-to-gitignore">
<h3>[TASK] Add .Shortcuts folder to .gitignore</h3>
<p>Related to <a class="reference external" href="https://review.typo3.org/7164">https://review.typo3.org/7164</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=0f55c7faa307976ef38746ac65df2ddffba589b8">0f55c7f</a></li>
</ul>
</div>
<div class="section" id="task-update-surf-configuration-for-release-job">
<h3>[TASK] Update Surf configuration for release job</h3>
<p>This updates the Surf configuration to interact with
the TYPO3.Release package on the FLOW3 website.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31896">#31896</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=757364cf219b84ba78890b749cf7f55223f0909f">757364c</a></li>
</ul>
</div>
<div class="section" id="task-split-doctrine-package-into-three-parts">
<h3>[TASK] Split Doctrine package into three parts</h3>
<p>Following our vendor name concept, the package Doctrine would need to
include all of the code from the Doctrine project. Obviously it doesn&#8217;t.
To solves this (and to make maintenance easier), the package has been
split into three separate packages.</p>
<p>This change adjusts the FLOW3 base distributions as needed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31219">#31219</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=b44e86ebde92616e6725ef07cfdb1b68325ddd15">b44e86e</a></li>
</ul>
</div>
<div class="section" id="bugfix-clean-up-configuration-readme">
<h3>[BUGFIX] Clean up configuration README</h3>
<p>Removes mentions of the non-used files FLOW3.yaml and Packages.yaml.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31215">#31215</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=41eb1f780c1bcb4323bfbb214c2361b3fd109a49">41eb1f7</a></li>
</ul>
</div>
</div>
<div class="section" id="common">
<h2>Common</h2>
<div class="section" id="task-adjust-to-relocated-functionaltestrequesthandler">
<h3>[TASK] Adjust to relocated FunctionalTestRequestHandler</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=ab6e4cbe067c14ec5b60430aa539a8098bfbef3a">ab6e4cb</a></li>
</ul>
</div>
<div class="section" id="task-make-typo3-flow3-var-dump-available-in-unit-tests">
<h3>[TASK] Make TYPO3\FLOW3\var_dump() available in unit tests</h3>
<p>FLOW3&#8217;s var_dump() function could not be used in unit tests
because the class loader has no way to derive the path and
filename from the function name. In a non-testing context
that&#8217;s no problem as the containing file is loaded anyway
but that was not the case in a unit testing context.</p>
<p>Now the Debugger class is loaded in the unit test bootstrap.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=faec8c5bde4259010eae5f676ec336af35b98dee">faec8c5</a></li>
</ul>
</div>
<div class="section" id="task-rename-functional-test-request-handler">
<h3>[TASK]&nbsp;Rename functional test request handler</h3>
<p>The functional test request handler was moved to the Tests\Functional
namespace after the recent class loader change.</p>
<p>Related to <a class="reference external" href="https://review.typo3.org/7252">https://review.typo3.org/7252</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=948a244ef527ecfb8aea64f20d69b5ddb483be0c">948a244</a></li>
</ul>
</div>
<div class="section" id="task-adjust-unit-test-bootstrap">
<h3>[TASK] Adjust Unit Test bootstrap</h3>
<p>The complete removal of the whitelist in change I7ec62f19 made the
generated HTML coverage report unusable and includes any code. But we
can ignore coverage for Doctrine and Symfony.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32333">#32333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=78587cbed4cb78e1c6f49a5a5b66c0bc36d10a4f">78587cb</a></li>
</ul>
</div>
<div class="section" id="task-adjust-functional-test-bootstrap">
<h3>[TASK] Adjust Functional Test bootstrap</h3>
<p>This adjusts the functional test bootstrap for PHP to fit the
new bootstrap and request handling mechanism. Also removes
a whitelist filter from the unit test bootstrap which prevented
using code coverage while executing single tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32333">#32333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=9ee94c7265b879525518fec8c284a6c51dbf9cff">9ee94c7</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-ping-task-files-remove-phpunit-tasks">
<h3>[TASK] Clean up ping task files; remove phpunit tasks</h3>
<p>The phpunit tasks can be done more efficient by using phpunit
directly, thus they are dropped. Some other legacy cruft has
been removed as well.</p>
<p>I re-enabled some commented out stuff in exchange. :)</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=17cf7a3f2206d7afcc1be15df845bd30bda8425a">17cf7a3</a></li>
</ul>
</div>
<div class="section" id="task-exclude-yaml-and-doctrine-sources-from-php-fileset">
<h3>[TASK] Exclude Yaml and Doctrine sources from PHP fileset</h3>
<p>This fileset (files-php) is used for code metrics, and  we do not really
want our CI server to compute those for 3rd party code.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=b8565ba9b237e02581b0ede62552c7da68202281">b8565ba</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine-common">
<h2>Doctrine.Common</h2>
<div class="section" id="task-fixes-code-style">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=df66b8f797842e6388f19da98f7fa3b6c50909b9">df66b8f</a></li>
</ul>
</div>
<div class="section" id="task-update-to-2-2-1">
<h3>[TASK] Update to 2.2.1</h3>
<p>DataFixtures is at ffee818a6e3af526b774de11b690a36512fa6235.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34760">#34760</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=bd3776c0c0b9ca9b1ce94fabc08d76c1d3a00a87">bd3776c</a></li>
</ul>
</div>
<div class="section" id="task-update-to-2-2-0">
<h3>[TASK] Update to 2.2.0</h3>
<p>DataFixtures is at bed8908ae929562317e5c59dc0bee24f3b63067e.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=81c7bb37b4ca7726a2ff6fa1c189311b31dd50bc">81c7bb3</a></li>
</ul>
</div>
<div class="section" id="task-update-to-current-2-2-0-dev">
<h3>[TASK] Update to current 2.2.0-DEV</h3>
<p>Equivalent to upstream commit 3107f295eb17ed40116ae4cd2499e5c5c3adde42.</p>
<p>DataFixtures is at f09c0840df9cb7968c89acb91a9fa262f158b1c5.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=aea87d6ad6c2ce3381f7ecae2178625dfac8ac74">aea87d6</a></li>
</ul>
</div>
<div class="section" id="task-make-doctrine-common-package-protected">
<h3>[TASK] Make Doctrine.Common package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=926f321366030da85cd97135e98a5ed918f3a104">926f321</a></li>
</ul>
</div>
<div class="section" id="task-isolate-doctrine-common-from-old-doctrine-package">
<h3>[TASK] Isolate Doctrine Common from old Doctrine package</h3>
<p>This change removes DBAL and ORM, moves Common into the classes folder
directly and adjusts metadata as needed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31219">#31219</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=d476728520ae729df49f176656b70334f92536bd">d476728</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine-dbal">
<h2>Doctrine.DBAL</h2>
<div class="section" id="task-add-doctrine-common-to-the-dependencies">
<h3>[TASK] Add Doctrine.Common to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=8ef15939e0b505eca65f5cb2d7701b8d4de584e7">8ef1593</a></li>
</ul>
</div>
<div class="section" id="id18">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=4db9ec9e4e8fdf50f63928d6d086b52fca577ed7">4db9ec9</a></li>
</ul>
</div>
<div class="section" id="id20">
<h3>[TASK] Update to 2.2.1</h3>
<p>Contains one of our own changes to fix connection charset with MySQL
for PHP &lt; 5.3.6 (<a class="reference external" href="https://review.typo3.org/4587">https://review.typo3.org/4587</a>).</p>
<p>Migrations is at 9e81984b0f126b0830d9ac6acc2d1da81aba2b94.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=8ecd70a98fddc074bb9be37470892e3d54a6a8b6">8ecd70a</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-mysql-connection-charset-work-on-php-5-3-6">
<h3>[BUGFIX] Make MySQL connection charset work on PHP &lt; 5.3.6</h3>
<p>The charset connection option is built into the DSN, but it is ignored
in PHP below 5.3.6.</p>
<p>This change adds the charset to a SET NAMES command used as value for
\PDO::MYSQL_ATTR_INIT_COMMAND for PHP &lt; 5.3.6 if no init command has been
set by the user.</p>
<p>This was once fixed with <a class="reference external" href="https://review.typo3.org/4587">https://review.typo3.org/4587</a> and the fix got
lost again with <a class="reference external" href="https://review.typo3.org/7672">https://review.typo3.org/7672</a>.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33125">#33125</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=b231de400af149a7e6a980939b067c6177707e3d">b231de4</a></li>
</ul>
</div>
<div class="section" id="id23">
<h3>[TASK] Update to current 2.2.0-DEV</h3>
<p>Equivalent to upstream commit 15bcd83a392df19de22cde6c9d5b28c1f7207751.</p>
<p>Migrations is at 9610f6bfe3bfb99c98da1f425e6c71bf02e52aaf.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=e5a49320058057c9078b514f6c7191f179dfe17a">e5a4932</a></li>
</ul>
</div>
<div class="section" id="task-make-doctrine-dbal-package-protected">
<h3>[TASK] Make Doctrine.DBAL package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=dbd853797b1df9baa66a7aac9bb72ff276188421">dbd8537</a></li>
</ul>
</div>
<div class="section" id="task-isolate-doctrine-dbal-from-old-doctrine-package">
<h3>[TASK] Isolate Doctrine DBAL from old Doctrine package</h3>
<p>This change removes Common and ORM, moves DBAL into the classes folder
directly and adjusts metadata as needed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31219">#31219</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=7ccdcd035924e3b3de53d6d00177c44a9d623c55">7ccdcd0</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine-orm">
<h2>Doctrine.ORM</h2>
<div class="section" id="task-add-doctrine-dbal-to-the-dependencies">
<h3>[TASK] Add Doctrine.DBAL to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=53d845c9246e127db42d01d9feff5f29ebad12ae">53d845c</a></li>
</ul>
</div>
<div class="section" id="id28">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=fc55d08be898e4039c4f2fb07be52c1ce8a3bc9a">fc55d08</a></li>
</ul>
</div>
<div class="section" id="id30">
<h3>[TASK] Update to 2.2.1</h3>
<p>Upstream release plus three of our own changes on top:</p>
<ul class="simple">
<li>9bfd46b Use temporary file and rename for proxy class creation</li>
<li>1582551 Throw exception if no identifier can be found in UnitOfWork</li>
<li>5fba342 In proxies add docblocks and move __wakeup() call around</li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34760">#34760</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=d2ce448456fe3d7b1ba2bd4b11c20433c27178bf">d2ce448</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-atomic-writes-in-proxy-factory">
<h3>[BUGFIX] Fix atomic writes in proxy factory</h3>
<p>This fixes the atomic writes check so it actually works.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/27989">#27989</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=07cd1a61c32538c2a4484e6e52faacc366f99292">07cd1a6</a></li>
</ul>
</div>
<div class="section" id="id33">
<h3>[TASK] Update to 2.2.0</h3>
<p>Upstream release plus three of our own changes on top:</p>
<ul class="simple">
<li>96f0bd1 Use temporary file and rename for proxy class creation</li>
<li>f846d64 Throw exception if no identifier can be found in UnitOfWork</li>
<li>fe0b562 In proxies add docblocks and move __wakeup() call around</li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=d6321bb480a30d9312e4308ae9b5b5fef14b12ad">d6321bb</a></li>
</ul>
</div>
<div class="section" id="id35">
<h3>[TASK] Update to current 2.2.0-DEV</h3>
<p>Upstream commit d34c39555d356e771452a6f397a4cb1146594304 plus four
of our own changes on top.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=fdbbdc51965a89b3ea8e9b1bbcb0cd2d89d9124c">fdbbdc5</a></li>
</ul>
</div>
<div class="section" id="task-make-doctrine-orm-package-protected">
<h3>[TASK] Make Doctrine.ORM package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=fa83423fe1c7e21451ffc386e72bee1b7a1f053e">fa83423</a></li>
</ul>
</div>
<div class="section" id="task-isolate-doctrine-orm-from-old-doctrine-package">
<h3>[TASK] Isolate Doctrine ORM from old Doctrine package</h3>
<p>This change removes Common and DBAL, moves ORM into the classes folder
directly and adjusts metadata as needed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31219">#31219</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=729f21b4586a2db0ae0ef76e81bc8a98f91a43b9">729f21b</a></li>
</ul>
</div>
</div>
<div class="section" id="symfony-component-domcrawler">
<h2>Symfony.Component.DomCrawler</h2>
<p>No changes</p>
</div>
<div class="section" id="symfony-component-yaml">
<h2>Symfony.Component.Yaml</h2>
<div class="section" id="task-clean-up-package-xml">
<h3>[TASK] Clean up Package.xml</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Symfony.Component.Yaml.git?a=commit;h=db6daedfba2286bfd501d715d5c72041203c2d04">db6daed</a></li>
</ul>
</div>
<div class="section" id="id39">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Symfony.Component.Yaml.git?a=commit;h=5d0bff830c3612ade80dc0d9221371fa67b0bf62">5d0bff8</a></li>
</ul>
</div>
<div class="section" id="bugfix-update-yaml-component">
<h3>[BUGFIX] Update YAML component</h3>
<p>This updates the Symfony YAML component from 1.0.6 to 2.1.0.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31289">#31289</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Symfony.Component.Yaml.git?a=commit;h=cb659bca12875e06f4f91f2055f8db24232bbda5">cb659bc</a></li>
</ul>
</div>
<div class="section" id="task-make-yaml-package-protected">
<h3>[TASK] Make Yaml package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Symfony.Component.Yaml.git?a=commit;h=b7947423346c10399e25a275acd3d6e2ec7bc123">b794742</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="bugfix-do-not-use-double-quotes-in-policy-yaml-files">
<h3>[BUGFIX] Do not use double quotes in Policy.yaml files</h3>
<p>To avoid potential treatment of backslashes as escape character
in YAML files, wrap strings in single quotes.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36056">#36056</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8e9332e7ec1e6a7cdc4c241d99be843c888f4711">8e9332e</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-classespath-to-packagestates-php-on-creating-a-package">
<h3>[BUGFIX] Add &#8220;classesPath&#8221; to PackageStates.php on creating a package</h3>
<p>When doing a ./flow3 package:create, the PackageStates.php is updated by
adding the new package, but the new entry lacks the &#8220;classesPath&#8221; field without
this change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36446">#36446</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=41d0dc266f4c764009777b6aaf4a0b1d870eebac">41d0dc2</a></li>
</ul>
</div>
<div class="section" id="bugfix-session-do-not-throw-an-exception-at-logging">
<h3>[BUGFIX] Session: Do not throw an exception at logging</h3>
<p>While logging the session destruction there was an exception thrown if
no reason was given, because getArgument() can not be called for non
existing arguments</p>
<p>Also added a testcase for the LoggingAspect.</p>
<p>Additionally removed the type hint for the proxy object in JoinPoint -
although that&#8217;s correct, it imposes unnecessary hassle for testing,
like in this case.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35200">#35200</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=724665186decd31dc56f30a9a63777a00a903432">7246651</a></li>
</ul>
</div>
<div class="section" id="bugfix-policyservice-could-drop-acls-for-overlapping-resources">
<h3>[BUGFIX] PolicyService could drop ACLs for overlapping resources</h3>
<p>The PolicyService has to properly reuse all data gathered from
parsing the method resources, the traces were dropped for
different roles and so something wrong would be reused.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37105">#37105</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a617bd03d06cd434151117e828b60f6ed25dbc38">a617bd0</a></li>
</ul>
</div>
<div class="section" id="task-added-dependency-on-domcrawler">
<h3>[TASK] Added dependency on DomCrawler</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36830">#36830</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=18e2542ba0a6881c6125848c2c07236f54d0ea03">18e2542</a></li>
</ul>
</div>
<div class="section" id="feature-mvc-whitelist-based-property-mapping-configuration">
<h3>[!!!][FEATURE] (MVC): Whitelist-based Property Mapping Configuration</h3>
<p>Up to now, property mapping always allowed to modify all properties of a given
object. Especially in the MVC stack, this functionality was relied upon for
all update and create actions. However, for nested objects, the user needed
to configure whether updates and creations should be allowed.</p>
<p>This was an inconsistent behavior, especially because for read-only actions the
object could be also modified.</p>
<p>The behavior is now changed to be more predictive:</p>
<ul class="simple">
<li>the default PropertyMappingConfiguration used in the MVC stack is changed
to be very restrictive: we do neither allow creation of any new objects nor
modification of existing ones; and all properties which should be modified
must be explicitly configured.</li>
<li>For each form, Fluid now generates a list of trusted properties, based upon
which the PropertyMappingConfiguration is set correctly. This means only
properties which have been rendered by fluid are allowed to be modified,
and creation / insertion is only permitted if needed.</li>
</ul>
</div>
<div class="section" id="breaking-changes">
<h3>BREAKING CHANGES</h3>
<ul class="simple">
<li>PropertyMappingConfiguration::doNotMapProperty (no public API) was removed.
Instead, use ::allowAllPropertiesExcept(…).</li>
<li>Furthermore, an exception is now thrown if a property is not allowed to be
mapped. Before, the property was just ignored silently. You should either
write your own TypeConverter to deal with that or filter the input data
correctly before property mapping.</li>
</ul>
<p>In a nutshell:</p>
<ul class="simple">
<li>If you used Fluid forms, everything will still work as expected.</li>
<li>If you used Fluid forms and needed to adjust the property mapping configuration
manually, you can remove these manual adjustments.</li>
<li>If you manually called the Property Mapper and passed a custom Property Mapping
Configuration, you probably need to call …-&gt;allowAllProperties() on the property
mapping configuration.</li>
<li>If you did not used Fluid forms but relied upon the old behavior of the Property
Mapper (e.g. in a web service), you need to configure the Property Mapper
inside your initializeAction correctly now.</li>
</ul>
<p>Note: You need the accompanying Fluid change for testing this feature as well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36776">#36776</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3f6576e47756a170d98232ff7f5a35d679052701">3f6576e</a></li>
</ul>
</div>
<div class="section" id="feature-inclusion-of-domcrawler-in-functional-test-browser">
<h3>[FEATURE] Inclusion of DomCrawler in Functional Test Browser</h3>
<p>In order to run meaningful end-to-end functional tests, we need a way
to navigate through HTML by clicking links and submitting forms.</p>
<p>We use DomCrawler to make this possible. This needs to be included
separately.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36776">#36776</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36830">#36830</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=18e7219fc970e498e98098e14c4df3ede7923a6a">18e7219</a></li>
</ul>
</div>
<div class="section" id="feature-order-package-loading-by-dependencies">
<h3>[FEATURE] Order package loading by dependencies</h3>
<p>This change simply reorders the internal packages arrays
of the PackageManager in a way that if PackageA depends
on PackageB, PackageA comes later then PackageB when
iterating over those arrays.</p>
<p>This change does not introduce a sophisticated dependency
management, however it makes sure to be be able to load
configuration settings in the correct order.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=df6b2a2113bd9d680985b7d12211935ff4a4952d">df6b2a2</a></li>
</ul>
</div>
<div class="section" id="task-some-cleanup-to-security-tests">
<h3>[TASK] Some cleanup to security (tests)</h3>
<p>No functional changes, just whitespace, spelling and some
PHPUnit warnings squashed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e9b691ff132ec3d49ff6518ca31cbbb3c933cff2">e9b691f</a></li>
</ul>
</div>
<div class="section" id="task-http-request-hasargument-and-getargument">
<h3>[TASK] HTTP Request: hasArgument() and getArgument()</h3>
<p>This change set provides two new getters for the unified
request arguments.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c00ef3bf007e4b99d82f4b64df29c7d8ec653422">c00ef3b</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-actionrequest-to-validate-passwordtoken">
<h3>[BUGFIX] Use ActionRequest to validate PasswordToken</h3>
<p>The (new) PasswordToken was not included in the fix for #36997.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36997">#36997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bbdafabc935210213b8f2fecf432568844025fcb">bbdafab</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-functional-test-if-doctrine-is-not-enabled">
<h3>[BUGFIX] Skip functional test if Doctrine is not enabled</h3>
<p>The Flow3AnnotationDriverTest should be skipped if Doctrine is not
enabled to prevent problems if no actual driver or connection
can be created.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e5cb7f0df9f9dc3f59606c0b1f5aab3955af8e20">e5cb7f0</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-core-migrate-work-on-windows">
<h3>[BUGFIX] Make core:migrate work on Windows</h3>
<p>On Windows redirection to /dev/null does not work. Also
some migrations would not be found due to useless type
casting.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c7038c4e0c4507c803531a06c59ef77bbe2b1f70">c7038c4</a></li>
</ul>
</div>
<div class="section" id="task-fix-packagemanager-unit-test">
<h3>[TASK] Fix PackageManager unit test</h3>
<p>One of the tests failed because the order of found packages
was not as expected. That order is not relevant, though…</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5a7a5a12bd35954bae13af2b841b3e724214c069">5a7a5a1</a></li>
</ul>
</div>
<div class="section" id="feature-implement-file-based-encrypted-key-authentication">
<h3>[FEATURE] Implement file based encrypted key authentication</h3>
<p>This commit introduce a new password token, which works like the username
password token but only requires a password.</p>
<p>The file based simple key provider authenticates a password token using the
file based simple key service to get the matching password in the key which
is configurable for every instance of the provider. Furthermore the service
is capable of storing, removing, getting, checking and generating keys.
Optional values for generation key length and password hashing strategy is
configurable for the service.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34648">#34648</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=af6de01a2a8760e17f31584076461c38eaa98a44">af6de01</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-actionrequest-to-validate-authentication-tokens">
<h3>[BUGFIX] Use ActionRequest to validate authentication tokens</h3>
<p>Currently the security context passes the HTTP Request to
TokenInterface::updateCredentials() in updateTokens().
This has the disadvantage that authentication tokens can
only access raw GET / POST parameters from the HTTP request.
Arguments that are only available through routing are not accessible.</p>
<p>This change adjusts Security/Context, TokenInterface and the provided
implementations accordingly.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36997">#36997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2aa6a02414916d7f7725b0aa83a3b6fb63dc9568">2aa6a02</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-use-of-removed-environment-methods-in-csrfprotectionaspect">
<h3>[BUGFIX] Fix use of removed Environment methods in CsrfProtectionAspect</h3>
<p>CsrfProtectionAspect now no longer uses methods from environment that
no longer exist since the environment cleanup. It tries to get the
arguments from the active RequestHandler instead.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37018">#37018</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=34f3725060cc4de6c386481708fbe695550c8b07">34f3725</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-reverse-ordering-of-packages-in-configuration-manager">
<h3>[BUGFIX] Avoid reverse ordering of packages in configuration manager</h3>
<p>This issue causes some problems when packages are overwriting YAML settings,
because in #27490 the package order is reversed in order to put TYPO3.Flow
at the top. This has some unnecessary consequences.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36965">#36965</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27490">#27490</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d100a281547da020c6bd628384fc4af7222b69c3">d100a28</a></li>
</ul>
</div>
<div class="section" id="task-add-doctrine-orm-to-the-dependencies">
<h3>[TASK] Add Doctrine.ORM to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2fba45eb4dd9e2e4dd16ae6ce0d676e5cc099fed">2fba45e</a></li>
</ul>
</div>
<div class="section" id="task-some-cleanup-to-packagemanager-and-it-s-unit-test">
<h3>[TASK] Some cleanup to PackageManager and it&#8217;s unit test</h3>
<p>Fixes some docblocks, adds a few type hints and fixes / simplifies some
unit tests.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=67c257c91fba12e9dc25888382415eaf5ebeca4e">67c257c</a></li>
</ul>
</div>
<div class="section" id="task-small-docblock-cleanup-to-bootstrap">
<h3>[TASK] Small docblock cleanup to Bootstrap</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4fe6851bb5959cca49e52c945a17f29673f01419">4fe6851</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-class-names-in-validators">
<h3>[TASK] Clean up class names in validators</h3>
<p>No functional changes.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=015cde674b8b9948f814f95ac4367c05b94fc476">015cde6</a></li>
</ul>
</div>
<div class="section" id="feature-add-tostring-and-make-resource-use-more-convenient">
<h3>[FEATURE] Add __toString() and make Resource use more convenient</h3>
<p>To use a Resource with file operations, one can use the
resource:// scheme and the __toString() method of any
ResourcePointer.</p>
<p>To make this a little easier, this change adds two new
methods to the Resource class:</p>
<p><tt class="docutils literal"><span class="pre">__toString()</span></tt> returns the SHA1 of the ResourcePointer the
Resource is holding (as is documented for ages).</p>
<p>getUri() returns a ready-to-use resource://&lt;sha1&gt; URI of
the ResourcePointer the Resource is holding.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29694">#29694</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34177">#34177</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8cdaae41c0af199402358e2171766af14f9379e9">8cdaae4</a></li>
</ul>
</div>
<div class="section" id="feature-destroy-all-sessions-on-cache-flush-command">
<h3>[FEATURE] Destroy all sessions on cache:flush command</h3>
<p>When the typo3.flow3:cache:flush command is called all session data
for the currently configured session implementation will be
destroyed too.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/25923">#25923</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dc804a6f9c42d60cf982a67fdca8f9812b77715b">dc804a6</a></li>
</ul>
</div>
<div class="section" id="feature-have-a-way-to-delete-all-sessions">
<h3>[FEATURE] Have a way to delete all sessions</h3>
<p>Introduces the static method destroyAll to the
SessionInterface and all implementations and so
makes it possible to destroy all session data for a
specific implementation.</p>
<p>Resolves #34817</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=57139411256f90e52f5954c5e12ec243ded37849">5713941</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-use-ansi-colors-for-var-dump-if-supported">
<h3>[BUGFIX] Only use ansi colors for var_dump() if supported</h3>
<p>\TYPO3\FLOW3\var_dump() currently uses ANSI codes to colorize
the output on the CLI.
On Windows that&#8217;s not supported by default. It renders all special
characters instead.</p>
<p>This change disables ansiColors on Windows.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36954">#36954</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=aeaa424b48d22c0e532c44fb223aa25be67beac3">aeaa424</a></li>
</ul>
</div>
<div class="section" id="feature-makes-it-possible-to-wire-signals-to-static-slots">
<h3>[FEATURE] Makes it possible to wire signals to static slots</h3>
<p>To use a static slot simply prefix the slot method name with <tt class="docutils literal"><span class="pre">::</span></tt></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34185">#34185</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=00ea79198668b30e3fefbd277f8070965ff83c18">00ea791</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-the-magic-role-anonymous">
<h3>[FEATURE] Introduce the magic role &#8220;Anonymous&#8221;</h3>
<p>This introduces a second magic role (besides the
role &#8220;Everybody&#8221;) which is active as long as nobody
is authenticated. This allows for designing policies
in a way that anonymous users still have access to
certain resources.</p>
<p>Also fixes a small bug in the PolicyService which
previously did not return the Everybody or Anonymous
role on getRoles().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34900">#34900</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b70090b742a764381053e9bd170d3197b39d5de0">b70090b</a></li>
</ul>
</div>
<div class="section" id="feature-improve-property-mapping-exception-message">
<h3>[FEATURE] Improve Property Mapping Exception message</h3>
<p>The exception message for when a Mapping fails now
contains a hint about the concerning target type.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36949">#36949</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fb0c15a2d8b2f9caa65e7758be5f26c308287212">fb0c15a</a></li>
</ul>
</div>
<div class="section" id="task-slightly-improve-documentation-of-properties">
<h3>[TASK] Slightly improve documentation of properties</h3>
<p>The properties used to enable testable HTTP and security influence
each other (like the good old image handling settings in v4).</p>
<p>This change adds comments that clarify the behavior.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a87b12d284a9093df9d85c8bcb434776b6c39790">a87b12d</a></li>
</ul>
</div>
<div class="section" id="task-getting-started-add-filenames-to-code-snippets">
<h3>[TASK] Getting Started: Add filenames to code snippets</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35263">#35263</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=160d0a430f77a5898c04a191155f43b66efb8360">160d0a4</a></li>
</ul>
</div>
<div class="section" id="task-handle-exceptions-in-virtual-http-browser">
<h3>[TASK] Handle exceptions in virtual HTTP browser</h3>
<p>The virtual HTTP browser now catches any exceptions
and returns the exception information in the response
rather than letting the actual exception slip through.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36943">#36943</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5b26f74b49ff96b565a0c18351c5f4e991aba9cc">5b26f74</a></li>
</ul>
</div>
<div class="section" id="bugfix-authentication-context-now-reliably-stores-the-intercepted-request">
<h3>[BUGFIX] Authentication: context now reliably stores the intercepted request</h3>
<p>On authentication the original intercepted request was not stored,
when there was no current session. The session now gets automatically
initialized via &#64;Flow\Session(autoStart=true).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31905">#31905</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4756966d29055e09150648fd85f78f87204c6026">4756966</a></li>
</ul>
</div>
<div class="section" id="task-improve-security-isolation-in-functional-tests">
<h3>[TASK] Improve security isolation in functional tests</h3>
<p>This change makes sure that also the intercepted request
(if any) is cleared on clearContext() and renames the
authentication provider configured for the Testing
context from &#8220;DefaultProvider&#8221; to &#8220;TestingProvider&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31905">#31905</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=900a207aac90539e08f9c65b1743335f3ac3849e">900a207</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-transientsession-unit-test-to-recent-change">
<h3>[BUGFIX] Adjust TransientSession unit test to recent change</h3>
<p>The change in TransientSession to close the session when destroy()
is called needed to be reflected in the unit test.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35965">#35965</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a2033af01b4f0c38a7f56b365ed4dd0a25d8dea1">a2033af</a></li>
</ul>
</div>
<div class="section" id="bugfix-assure-fresh-session-for-functional-tests">
<h3>[BUGFIX] Assure fresh session for functional tests</h3>
<p>The changes done to resolve #35965 came with a functional
test that worked fine when run in isolation but failed when
run with other tests that would start a session.</p>
<p>This patch moves the $session-&gt;destroy() call in the
base test case from the tearDown() to the setUp()
method and fixes the behavior of destroy() in the
TransientSession which did not reset the &#8220;started&#8221;
flag.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35965">#35965</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=69c5912c41eaa714f10c46294cb9a4db6eb5304d">69c5912</a></li>
</ul>
</div>
<div class="section" id="task-change-session-autostart-handling-for-authentication-providers">
<h3>[!!!][TASK] Change session autostart handling for authentication providers</h3>
<p>The session autostart annotation is set at the
providers, not at the authentication manager. By
this every provider can decide on its own, if a
session is needed or not.</p>
<p>Also adds a safeguard in the Session Logging Aspect
to prevent errors while trying to log renewId()
even though the session was not started yet.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35965">#35965</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ab61bd444fe1d2b1feb0e6e6a224575824fc7ce9">ab61bd4</a></li>
</ul>
</div>
<div class="section" id="task-add-section-on-xliff-plural-form-handling-to-guide">
<h3>[TASK] Add section on XLIFF plural form handling to guide</h3>
<p>Adds a short explanation of plural form handling in XLIFF files to
the FLOW3 guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36088">#36088</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3c0e30a0783314d932cf82e38522b409c58ca5db">3c0e30a</a></li>
</ul>
</div>
<div class="section" id="feature-improve-logging-for-translation-handling">
<h3>[FEATURE] Improve logging for translation handling</h3>
<p>When a translation is not found a warning is logged so that the
user gets a clue what is wrong.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36088">#36088</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9ee4f38a9caa0974e45d378e7fa35b1c1fb6ab75">9ee4f38</a></li>
</ul>
</div>
<div class="section" id="feature-make-migration-of-a-single-package-possible">
<h3>[FEATURE] Make migration of a single package possible</h3>
<p>Now the option &#8220;&#8211;package-key&#8221; can be given to &#8220;core:migrate&#8221; to
migrate a single package.</p>
<p>This allows for migration of single packages, including those in the
&#8220;Framework&#8221; category, which are now skipped by default.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b7d30145a427147738cc6928d6125481952340f2">b7d3014</a></li>
</ul>
</div>
<div class="section" id="task-add-provideroptions-example-to-settings-yaml">
<h3>[TASK] Add providerOptions example to Settings.yaml</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33495">#33495</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f433747137733801ebca2f9e7aa7c4d2c5bc7c3f">f433747</a></li>
</ul>
</div>
<div class="section" id="feature-core-nested-flow3-application-contexts">
<h3>[!!!][FEATURE] (Core): Nested FLOW3 Application Contexts</h3>
<p>With this change, it is possible to use nested FLOW3 contexts like
&#8220;Production/Live&#8221; or &#8220;Production/Staging/Server1&#8221;. The main context,
has to be one of &#8220;Production&#8221;, &#8220;Development&#8221; or &#8220;Testing&#8221;, whereas
arbitrary sub contexts are supported.</p>
<p>If you run in the context &#8220;Production/Staging/Server1&#8221;, the configuration
is inherited in the following way (from most specific to most general):</p>
<ul class="simple">
<li>Production/Staging/Server1</li>
<li>Production/Staging</li>
<li>Production</li>
<li>as a fallback, the, non-context-specific configuration is used</li>
</ul>
<p>This change is breaking in the following cases:</p>
<ul>
<li><p class="first">You called TYPO3\FLOW3\Core\Bootstrap::getContext() or
TYPO3\FLOW3\Object\ObjectManagerInterface::getContext()</p>
<p>In this case, not the context string is returned anymore, but instead
the TYPO3\FLOW3\Core\ApplicationContext object. It can be cast to a string to
get the old behavior back; but usually you instead want to call
$context-&gt;isDevelopment(), $context-&gt;isProduction() or $context-&gt;isTesting().</p>
</li>
<li><p class="first">You wrote your own cache backend</p>
<p>The cache backend constructor now expects the $context object to be of type
TYPO3\FLOW3\Core\ApplicationContext.</p>
</li>
</ul>
<p>Additionally, we removed some leftovers from the configuration manager,
especially Signals/Slots configuration as this is not used anymore.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9df5567135e42e1ab312f9a560c3eed382517c83">9df5567</a></li>
</ul>
</div>
<div class="section" id="task-fix-hints-about-frozen-packages-to-cache-flush-command">
<h3>[TASK] Fix hints about frozen packages to cache:flush command</h3>
<p>This enhances the hints about frozen packages introduced in
change I4db274dcf0376ada53a3a46ed5c6b945543698d1.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36807">#36807</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=692f73b74bd7c0b80191bc25acd70e90054b626f">692f73b</a></li>
</ul>
</div>
<div class="section" id="task-tweak-code-migration-tool-code-and-output">
<h3>[TASK] Tweak code migration tool code and output</h3>
<p>This makes the output of the code migration tool a little
more readable and shifts some parts of the code around to
clean it up.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=06930c3be589d35d80fe9f25eddbfd7f20b7a7f4">06930c3</a></li>
</ul>
</div>
<div class="section" id="task-fix-schema-migrations-adding-useless-unique-indexes">
<h3>[TASK] Fix schema migrations adding useless unique indexes</h3>
<p>This change removes the index creation commands on the Role table from
the migrations supplied with Ief9455e10c58f999cf46e0586e632ff3e2ef9ad5,
as the involved field is the primary key (and thus a unique index) anyway.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29547">#29547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a788b2920e366a817d913e600e4eccd21335f5b9">a788b29</a></li>
</ul>
</div>
<div class="section" id="task-adjust-the-code-migration-for-flow3-1-1">
<h3>[TASK] Adjust the code migration for FLOW3 1.1</h3>
<p>This tweaks the code migration a little to be more complete and
produce better readable output.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=05f80eb8cf434e9d447f1d4bf55a26dc5ced7509">05f80eb</a></li>
</ul>
</div>
<div class="section" id="feature-provide-outputformatted-function-for-cli">
<h3>[FEATURE] Provide outputFormatted() function for CLI</h3>
<p>This introduces a new method for outputting formatted
(that is, word wrapped and optionally padded) text to
the command line.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36813">#36813</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=95af0e5fb3d64f423160aaa94cee0f0c46a77062">95af0e5</a></li>
</ul>
</div>
<div class="section" id="task-add-hints-about-frozen-packages-to-cache-flush-command">
<h3>[TASK] Add hints about frozen packages to cache:flush command</h3>
<p>By default precompiled reflection data of frozen packages is not
recreated on flushing the cache.
This adds a hint to the response of the cache:flush command if
there are frozen packages.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36807">#36807</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9243aa1c61a28861edcf5f1bb21d2708086f818f">9243aa1</a></li>
</ul>
</div>
<div class="section" id="bugfix-persistence-fix-failing-repositorytest">
<h3>[BUGFIX] (Persistence): Fix failing RepositoryTest</h3>
<p>The test fails since Ic3782452e941574dd85068535092877efd7ca190 which
forgot to adjust the Unit Tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33883">#33883</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cfbc8fa0a56d1c35d02e8e438ca636f1854b41ee">cfbc8fa</a></li>
</ul>
</div>
<div class="section" id="feature-identity-annotation-should-make-properties-unique">
<h3>[FEATURE] Identity annotation should make properties unique</h3>
<p>With this change all properties annotated with the Identity
annotation will be added to an unique constraint in the database.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29547">#29547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b0fb449cc9dc7266fd027b2c3618041e6fad3ef7">b0fb449</a></li>
</ul>
</div>
<div class="section" id="task-remove-identity-annotation-from-resource">
<h3>[TASK] Remove Identity annotation from Resource</h3>
<p>As preparation to give the Identity annotation some meaning we
remove it here to still allow multiple resources with the same
pointer and filename / fileExtension.</p>
<p>This doesn&#8217;t change the behavior at all as Identity has no
technical meaning (yet).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36717">#36717</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b9fd14644de323164c5d096421e73484cefa7ba5">b9fd146</a></li>
</ul>
</div>
<div class="section" id="feature-datetimeconverter-should-support-datetime-subclasses">
<h3>[FEATURE] DateTimeConverter should support DateTime subclasses</h3>
<p>Currently DateTimeConverter only accepts target types of &#8216;DateTime&#8217;.
This change adjusts the converter so that it works for subclasses
of \DateTime too.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33531">#33531</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f12ba2d320d98bac6f3ac16e7fee026722e59eb6">f12ba2d</a></li>
</ul>
</div>
<div class="section" id="feature-use-lifecycle-annotations-without-haslifecyclecallbacks">
<h3>[FEATURE] Use lifecycle annotations without HasLifecycleCallbacks</h3>
<p>When using lifecycle annotations on methods, this change removes the need
to annotate the class itself with HasLifecycleCallbacks.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36714">#36714</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=955b786a937127f9c39cbb6506d9d7ad2119a7c1">955b786</a></li>
</ul>
</div>
<div class="section" id="feature-code-migration-tool">
<h3>[FEATURE] Code migration tool</h3>
<p>This adds support for &#8220;code&#8221; migrations. As with database migrations,
steps needed to adjust existing code to changes done in some package
can be delivered in a migration file with said package.</p>
<p>A new command flow3:core:migrate can be used to apply migrations to
all packages still in need of that migration. The tool requires git
to be available and will work only on code in clean git working copies.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ed8fdeafc57bad85358c960daf2e7751ef161796">ed8fdea</a></li>
</ul>
</div>
<div class="section" id="task-add-functional-content-security-tests">
<h3>[TASK] Add functional content security tests</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1bc99215f7d8da7c30767671d83a1be13c392854">1bc9921</a></li>
</ul>
</div>
<div class="section" id="task-a-few-more-content-security-examples">
<h3>[TASK] A few more content security examples</h3>
<p>This adds some very basic notes which could help a few
people started with content security.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e0e903b83da64cb796557e5b3a4b54bad02cc5c1">e0e903b</a></li>
</ul>
</div>
<div class="section" id="task-documentation-add-a-link-to-installation-hints">
<h3>[TASK] Documentation: Add a link to installation hints</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35262">#35262</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=012c6595533debe54bb4b20561e702cb3f06b779">012c659</a></li>
</ul>
</div>
<div class="section" id="task-update-to-support-orphanremoval-on-manytomany-associations">
<h3>[TASK] Update to support orphanRemoval on ManyToMany associations</h3>
<p>In Doctrine 2.2.1 support for orphanRemoval on ManyToMany associations was
added, thus it is added to our driver as well.</p>
<p>In addition unnamed indexes and unique constraints are now possible, also
a &#8220;port&#8221; from the upstream codebase.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34760">#34760</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8baab130e156725e3c041892418ed2588225a6ac">8baab13</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-filename-spelling-to-filename">
<h3>[BUGFIX] Adjust &#8220;fileName&#8221; spelling to &#8220;filename&#8221;</h3>
<p>The spelling for filename differs throughout the code. With this
change we use &#8220;filename&#8221; everywhere possible.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35298">#35298</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c55e4f69e0c866e1b1e6a04d5c1f035eee068a8b">c55e4f6</a></li>
</ul>
</div>
<div class="section" id="bugfix-prevent-route-class-from-appending-an-extra-question-mark">
<h3>[BUGFIX] Prevent Route class from appending an extra question mark</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33519">#33519</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33539">#33539</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dc3532f4a4bbb187c26129d1d4b78410ff8bee53">dc3532f</a></li>
</ul>
</div>
<div class="section" id="task-fixes-exception-message-building-causing-error">
<h3>[TASK] Fixes exception message building causing error</h3>
<p>When the providerClass for an authentication provider
is not configured, the building of an exception message
caused a notice (and that caused an error).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34399">#34399</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fc71de3f2f60e8de92e14596134490d015d2a3eb">fc71de3</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-documentation-to-correct-folder-structure-for-xlf-files">
<h3>[BUGFIX] Adjust documentation to correct folder structure for xlf-files</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4e17257dd25f314b851eec9a6c7b577ae593a10b">4e17257</a></li>
</ul>
</div>
<div class="section" id="task-move-xliff-files-so-that-pootle-copes-with-the-file-layout">
<h3>[TASK] Move XLIFF files so that Pootle copes with the file layout</h3>
<p>This changes the file layout for translations so that for every language
a directory named after the locale identifier is looked up below
Resources/Private/Translations. Inside that directory one XLIFF file
for each message catalog can be put:</p>
<blockquote>
<div><dl class="docutils">
<dt>Resources/Private/Translataions/</dt>
<dd><dl class="first last docutils">
<dt>en/</dt>
<dd><dl class="first last docutils">
<dt>Main.xlf</dt>
<dd>ValidationErrors.xlf</dd>
</dl>
</dd>
<dt>fr/</dt>
<dd><dl class="first last docutils">
<dt>Main.xlf</dt>
<dd>ValidationErrors.xlf</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</div></blockquote>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36284">#36284</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7275a130a1f552467b41d973f6533522c8dfb194">7275a13</a></li>
</ul>
</div>
<div class="section" id="task-fix-restcontroller-to-work-with-http-foundation">
<h3>[TASK] Fix RestController to work with HTTP foundation</h3>
<p>This fixes RestController to work again with HTTP foundation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9de4a2c9c6101b44ef5a00686f0f8ce296e6e44a">9de4a2c</a></li>
</ul>
</div>
<div class="section" id="bugfix-check-that-repositories-are-of-singleton-scope">
<h3>[BUGFIX] Check that repositories are of singleton scope</h3>
<p>Repositories must be singletons, otherwise strange things and
seemingly weird errors happen. This change adds a check for the
scope, so that developers at least know what is wrong.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33883">#33883</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5e342192819640b75bb54f86873622e537af810b">5e34219</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-lowercase-table-names-to-fix-functional-tests">
<h3>[BUGFIX] Use lowercase table names to fix functional tests</h3>
<p>There seems to be a problem with (certain versions of) MySQL and
lower / uppercase table names (maybe only on case insensitive
filesystems).</p>
<p>This change adjusts some Table annotations used in functional
test fixtures to use lowercase identifier.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35007">#35007</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=019507ae40359ac87558d79178caf1267de21480">019507a</a></li>
</ul>
</div>
<div class="section" id="task-adjust-some-leftover-uppercase-namespace-parts">
<h3>[TASK] Adjust some leftover uppercase namespace parts</h3>
<p>There were still some uses of AOP and MVC in the codebase.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33705">#33705</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e04da494a1995084c696c444d822cd24c769178c">e04da49</a></li>
</ul>
</div>
<div class="section" id="bugfix-query-rewriting-now-works-with-one-additional-constraint">
<h3>[BUGFIX] Query rewriting now works with one additional constraint</h3>
<p>PersistenceQueryRewritingAspect was broken if only one additional
constraint was added, leading to invalid queries that failed with
an invalid number of bound parameters.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36679">#36679</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7d13b3fbcbd2d82aaa1aa0e7f05c3406a79cf651">7d13b3f</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-methodsecurity-functional-test">
<h3>[BUGFIX] Fix MethodSecurity functional test</h3>
<p>After #36659 was fixed, the session handling works
as expected. That means, however, that if no account
is logged in, an AuthorizationRequiredException is
thrown on trying to access a restricted method.
The tests, however, anticipated an AccessDeniedException.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36626">#36626</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36659">#36659</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=09dba14bbc6c3dfd5409ff333ffa9d9cc4fac14d">09dba14</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-session-handling-in-functional-tests">
<h3>[!!!][BUGFIX] Fix session handling in functional tests</h3>
<p>Sessions were kept across test boundaries which had bad
side effects on, for example, authentication: previously
authenticated roles where still active during the following
Test under certain circumstances.</p>
<p>This patch makes sure that sessions are destroyed after
each functional test.</p>
<p>It also introduces a previously missing parameter into the
destroy() method signature of the SessionInterface. If you
implemented your own session handler, you need to adjust the
destroy() method accordingly.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36659">#36659</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=41a5fa000b9228ce43566fc92211b729dca775e3">41a5fa0</a></li>
</ul>
</div>
<div class="section" id="task-fix-debug-output-marking-entity-value-object">
<h3>[TASK] Fix debug output marking entity/value object</h3>
<p>This removes the FIXME from debug output and just
uses &#8220;persistable&#8221; as an umbrella term for an entity
or value object.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ad3c7d9aab25b94a6d3574d2de69e9d0381da424">ad3c7d9</a></li>
</ul>
</div>
<div class="section" id="bugfix-persistencequeryrewritingaspect-now-supports-count-0">
<h3>[BUGFIX] PersistenceQueryRewritingAspect now supports count(0)</h3>
<p>If the aspect intercepted a count() method and the result (because
of lacking access rights) would be &#8220;none&#8221;, the aspect returned an
EmptyQueryResult object which in turn could not be cast into an
integer by the client code.</p>
<p>This patch now correctly returns a 0 in that case.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36625">#36625</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=21cf88e55a2757ff928a784ec3aa867faf6cfa83">21cf88e</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-any-matcher-for-content-security">
<h3>[FEATURE] Introduce ANY matcher for content security</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36626">#36626</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ed4538b8ac9347fbf68463d3363becad28aa259c">ed4538b</a></li>
</ul>
</div>
<div class="section" id="task-log-exception-in-doctrine-query-getresult">
<h3>[TASK] Log exception in Doctrine\Query-&gt;getResult()</h3>
<p>When an exception occurs during getResult() it was silently
ignored. Now it will be logged to the system log.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f20526cc9e1e15f83cbc37a81d1a6a9c1a68a276">f20526c</a></li>
</ul>
</div>
<div class="section" id="task-adjust-testing-settings">
<h3>[TASK] Adjust Testing settings</h3>
<p>Fixes YAML style and makes use of SQL logger in Testing possible.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=be0c79758f39b598a553770bdefd6324389bd696">be0c797</a></li>
</ul>
</div>
<div class="section" id="bugfix-implement-fallback-for-password-hash-migration">
<h3>[BUGFIX] Implement fallback for password hash migration</h3>
<p>The new BCrypt default hashing strategy causes problems if a FLOW3
application is migrated from version 1.0 which didn&#8217;t use strategy
identifiers inside credentials. A new &#8220;fallback&#8221; configuration
option allows to specify the strategy that was used to generate
these legacy credentials. It defaults to &#8220;pbkdf2&#8221; and allows for a
seamless migration from 1.0 to 1.1. New passwords will be hashed with
the default strategy (&#8220;bcrypt&#8221; by default) and get the strategy
identifier prepended.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32991">#32991</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=78279ca9a0c1b6808db415b678722791c66f4d0f">78279ca</a></li>
</ul>
</div>
<div class="section" id="task-add-functional-tests-for-content-security">
<h3>[TASK] Add functional tests for content security</h3>
<p>This add some first basic functional tests for
content security.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36626">#36626</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3198e416672b1313b2a890f564c45eced401b9c8">3198e41</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-gethttprequest-work-in-functional-tests">
<h3>[BUGFIX] Make getHttpRequest() work in functional tests</h3>
<p>In some cases functional tests need to access getHttpRequest() on the
active RequestHandler. In functional tests this did not work, because
the FunctionalTestRequestHandler did not implement the new
HttpRequestHandlerInterface.</p>
<p>Now it does and the InternalRequestEngine sets the current request.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36617">#36617</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d38e25b36b17af2843fe9d11bbb5f5aa1ec7e647">d38e25b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-functional-testing-for-security-features">
<h3>[BUGFIX] Fix functional testing for security features</h3>
<p>The authenticated roles from one test have not been
cleared after the test.</p>
<p>Adds a safeguard for getAccount() to the security context
along the way.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34466">#34466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=771bc9b8a43b25be454e71b8acd61e18e79bbf87">771bc9b</a></li>
</ul>
</div>
<div class="section" id="feature-validation-context-specific-validation-through-validation-groups">
<h3>[FEATURE] (Validation): Context-specific validation through Validation Groups</h3>
<p>Sometimes, Validation should only be executed on Persist, or on the Controller
invocation. Especially when building multi-step forms, one needs to be able to
partially validate an object and store the invalid object in the database.</p>
<p>This change set implements &#8220;validation groups&#8221;, i.e. each validator annotation
can have a &#8220;validation group&#8221; assigned, and when validation happens, the validators
get only executed if at least one validation group matches.</p>
<p>Furthermore, it adds a documentation skeleton for partial validation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32832">#32832</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7aebd16f388f07424bb6a016be7312cc01d9feea">7aebd16</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-typo3orgssotoken-use-of-removed-method">
<h3>[BUGFIX] Fix Typo3OrgSsoToken use of removed method</h3>
<p>Environment does no longer have getRawGetArguments(), instead using
getArguments() on the HTTP request we have available.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36657">#36657</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4595e40c0d963e32b0d73d6bd94ec2427d1394ff">4595e40</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-isclassimplementationof-in-reflectionservice">
<h3>[BUGFIX] Fix isClassImplementationOf in ReflectionService</h3>
<p>In some cases (depending on filesystem load order probably) the
Production context would fail to return the correct result in the
isClassImplementationOf() method of the ReflectionService.</p>
<p>This change fixes it.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34672">#34672</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e40b22193fe0a52b24f090e1cb16b095cacea1d9">e40b221</a></li>
</ul>
</div>
<div class="section" id="task-use-correct-order-or-static-function-declaration">
<h3>[TASK] Use correct order or static function declaration</h3>
<p>This is the only occurence of this order for declaring a static method.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=319fa7e4a7b48f30bea52414d80149a7ad2d474d">319fa7e</a></li>
</ul>
</div>
<div class="section" id="task-add-example-of-request-pattern-to-provider-example">
<h3>[TASK] Add example of request pattern to provider example</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4c598ceb250683a1e5bcb866c05c7f8adba6980a">4c598ce</a></li>
</ul>
</div>
<div class="section" id="bugfix-advicechain-has-to-take-the-proxy-from-the-joinpoint">
<h3>[BUGFIX] AdviceChain has to take the proxy from the joinpoint</h3>
<p>The advice chain object got its proxy instance in the constructor,
which was possibly not the correct instance for a given joinpoint.
This change removes the constructor parameter and fetches the proxy
instance always from the current joinpoint.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36637">#36637</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7a79ea2c1b186d8d96278691a82c3f5ff913ed44">7a79ea2</a></li>
</ul>
</div>
<div class="section" id="bugfix-call-persistall-after-every-controller-invocation">
<h3>[BUGFIX] Call PersistAll after every controller invocation</h3>
<p>If0020fdedbaf4779ff24d0e4248e2137cdf5bc67 introduced a regression
which caused persistAll() to be uncalled.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28136">#28136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=72b91a1e581a59e60f7bc1a3bda318b10c66999e">72b91a1</a></li>
</ul>
</div>
<div class="section" id="task-add-clarifying-note-on-persistencemagicaspect-cloneobject">
<h3>[TASK] Add clarifying note on PersistenceMagicAspect.cloneObject</h3>
<p>Adds a note clarifying that this method is not unused.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9761517bef6be4a9b69ba35966342ffe2e69c64e">9761517</a></li>
</ul>
</div>
<div class="section" id="feature-turn-content-security-acl-logic-upside-down">
<h3>[!!!][FEATURE] Turn content security acl logic upside down</h3>
<p>This change realizes a whitelist approach for content
security acls. By this content security acls work with
the same logic as method security.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34464">#34464</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6cdc131bbc480fe6999aaf001a1143da504e5948">6cdc131</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-token-separation-without-request-in-security-context">
<h3>[BUGFIX] Skip token separation without request in Security\Context</h3>
<p>separateActiveAndInactiveTokens() in Security\Context fails if
$this-&gt;request is NULL.</p>
<p>With this change, token separation is skipped completely in that case.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36624">#36624</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1148aebf3342cc5891c333c514514c17e4b1b0e5">1148aeb</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-functional-tests-with-security-and-sendwebrequest">
<h3>[BUGFIX] Fix functional tests with security and sendWebRequest</h3>
<p>This change fixes some security related aspects of the functional
base testcase. Field visibility and method visibility is restored
to protected since custom tests need to be able to call some
of the dependencies (e.g. to initialize or reset additional test
providers). Also sendWebRequest is working again with the new
request implementation and without mocks.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36517">#36517</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b839259f6730c2a327a85803bf3388e573356915">b839259</a></li>
</ul>
</div>
<div class="section" id="bugfix-adds-detection-of-missing-id-attributes-in-xliff-files">
<h3>[BUGFIX] Adds detection of missing id attributes in XLIFF files</h3>
<p>XLIFF requires id attributes on trans-unit tags, but if they are missing,
FLOW3 does not complain. An exception is now thrown, instead of
some unspecified behavior.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33971">#33971</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3872d4354eb20ec50e06380e409dc1e564b888ae">3872d43</a></li>
</ul>
</div>
<div class="section" id="feature-persist-after-every-controller-invocation">
<h3>[FEATURE] Persist after every controller invocation</h3>
<p>Wire persistAll() from afterControllerInvocation instead of the
finishedRuntimeRun signal.</p>
<p>This is useful because it wraps all changes done in one dispatch in
a transaction, thus enabling better rollback in case of errors.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28136">#28136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9a0e128a6c4725f2a60c0426acacf9d313c1be57">9a0e128</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-bcrypt-the-default-hashing-strategy-again">
<h3>[BUGFIX] Make BCrypt the default hashing strategy (again)</h3>
<p>In <a class="reference external" href="https://review.typo3.org/5756">https://review.typo3.org/5756</a> the default hashing strategy was
changed to BCrypt. Later, in <a class="reference external" href="https://review.typo3.org/6598">https://review.typo3.org/6598</a>, support for
multiple strategies was added. But that change make PBKDF2 the default
again.</p>
<p>This change fixes that and makes the SaltedMd5 strategy available in
the YAML file as well (for completeness).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32991">#32991</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=28a049fc0d5ca17e5ee1ec8c92c020aa9a32864c">28a049f</a></li>
</ul>
</div>
<div class="section" id="bugfix-exceeding-roles-of-accounts-are-now-ignored">
<h3>[BUGFIX] Exceeding roles of accounts are now ignored</h3>
<p>If an account had one ore more roles which were not
defined in a policy, access was denied to this account
because the role could not be matched. It is, however,
more practical to simply ignore exceeding roles.</p>
<p>This patch makes sure that getRoles() only considers
roles of the active tokens which really exist in one
of the policies.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35422">#35422</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a513961f1b2b0a771c900e626ccc93d0d0c1e171">a513961</a></li>
</ul>
</div>
<div class="section" id="bugfix-guard-against-missing-server-global-variables">
<h3>[BUGFIX] Guard against missing server global variables</h3>
<p>Calling Http\Request::createFromEnvironment() gives a notice about an
undefined array index for HTTP_HOST and REMOTE_URI if used e.g. in
CLI based tests.</p>
<p>This change adds guards against this in the Request implementation.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36518">#36518</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=69e38209d2a4ff221d777fb0405d3a2906986281">69e3820</a></li>
</ul>
</div>
<div class="section" id="bugfix-action-arguments-of-type-datetime-throw-exception">
<h3>[BUGFIX] Action arguments of type DateTime throw Exception</h3>
<p>If an action argument is an object, the ValidatorResolver tries to
instantiate that object to use it as Validator without checks.</p>
<p>This change solves this by checking if the specified object implements
the ValidatorInterface.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35338">#35338</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5d1aa1b9aba4f1f80e0c82fd950b62aad4ee6b88">5d1aa1b</a></li>
</ul>
</div>
<div class="section" id="task-remove-leftover-session-dependency-from-http-request">
<h3>[TASK] Remove leftover session dependency from Http\Request</h3>
<p>This is actually not used and causes circular dependency problems
in some cases.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b2ee527c5c127205fbb31bbbec5abc901a83478c">b2ee527</a></li>
</ul>
</div>
<div class="section" id="feature-track-all-configuration-changes">
<h3>[FEATURE] Track all configuration changes</h3>
<p>This change set greatly improves the file monitoring of FLOW3&#8217;s
system relevant files, such as class files, settings, object
configuration, policies and translations.</p>
<p>In Development context, changes to any of the above will be
tracked and the related caches are flushed. For performance
reasons, the new mechanism does not rely on the tagging
feature of the cache framework, but uses the new Simple
File Backend and rather flushes a few caches too many than
missing an important change.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/5849">#5849</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33811">#33811</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35912">#35912</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fb277f305a7cbfb73d60ce2de218790f3093fdb8">fb277f3</a></li>
</ul>
</div>
<div class="section" id="feature-make-cache-backends-more-flexible">
<h3>[!!!][FEATURE] Make cache backends more flexible</h3>
<p>This change makes cache backends more flexible. It adds a new interface
&#8220;TaggableBackendInterface&#8221; and a new &#8220;SimpleFileBackend&#8221;. The latter
does not support tagging but is faster in certain cases (where with a
lot of tags/entries flushing everything is faster than flushing by tag).</p>
<p>If you have implemented a cache backend and support tagging, you must
add the &#8220;TaggableBackendInterface&#8221; to the list of interfaces implemented
by your backend.</p>
<p>In addition this change makes the PDO backend a little more robust and
resolves some code style issues.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36563">#36563</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Extbase Issue: <a class="reference external" href="http://forge.typo3.org/issues/36564">#36564</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=08924c0cf8ceec3c181b31f61d5ae6cf2c6b8467">08924c0</a></li>
</ul>
</div>
<div class="section" id="feature-filemonitor-now-uses-identifier-and-has-getidentifier">
<h3>[!!!][FEATURE] FileMonitor now uses identifier and has getIdentifier()</h3>
<p>This change makes the FileMonitor use the identifier internally and
provides a getIdentifier() method. With this, using multiple file
monitors becomes feasible.</p>
<p>The &#8220;ChangeDetectionStrategyInterface&#8221; contains the two new methods
&#8220;setFileMonitor&#8221; and &#8220;shutdownObject&#8221; now, so if you implemented your
own change detection strategy, you need to implement those.</p>
<p>The ModificationTimeStrategy provided with FLOW3 is no longer singleton
and thus usable with multiple file monitor instances in parallel.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36568">#36568</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cf6bb6911b4f609a59a8cf7986f364162a18abed">cf6bb69</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-environment-after-http-refactoring">
<h3>[!!!][TASK] Clean up Environment after HTTP refactoring</h3>
<p>With the HTTP foundation quite some things from Environment have become
obsolete. The class and it&#8217;s &#8220;users&#8221; are adjusted in this change.</p>
<p>The following methods are removed from Environment (check Http\Request
to see if a method you need is available there) with this change:</p>
<ul class="simple">
<li>setBaseUri</li>
<li>getHTTP*</li>
<li>getAcceptedFormats</li>
<li>getRemoteAddress</li>
<li>getRemoteHost</li>
<li>getRequestProtocol</li>
<li>getRequestUri</li>
<li>getBaseUri</li>
<li>getScriptPathAndFileName</li>
<li>getScriptRequestPathAndFileName</li>
<li>getScriptRequestPath</li>
<li>getRequestMethod</li>
<li>getCommandLineArgumentCount</li>
<li>getCommandLineArguments</li>
<li>getSAPIName</li>
<li>getRawGetArguments</li>
<li>getRawPostArguments</li>
<li>getUploadedFiles</li>
<li>getRawServerEnvironment</li>
</ul>
<p>Most of those were marked as public API, but we still decided to drop
them, as their use cases were only guesswork.</p>
<p>For some things that used to be available, access to the current request
is now needed. For this, getHttpRequest() was added to the new
HttpRequestHandlerInterface, which returns the current HttpRequest.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36340">#36340</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=817017e0051be25da3a675c666f811f88a62c802">817017e</a></li>
</ul>
</div>
<div class="section" id="task-move-baseuri-setting-from-environment-to-http-request">
<h3>[!!!][TASK] Move baseUri setting from Environment to Http\Request</h3>
<p>The Environment class optionally used a setting to specify a fixed
baseUri to be used. With the HTTP foundation this settings was no
longer used (consistently).</p>
<p>If in Settings.yaml the &#8220;utility:environment:baseUri&#8221; settings was used,
it must be changed to &#8220;http:baseUri&#8221;!</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36397">#36397</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e2d704e7895ee971a51ec3f37c78e7b3b50bdf69">e2d704e</a></li>
</ul>
</div>
<div class="section" id="bugfix-uploaded-files-are-not-untangled-anymore">
<h3>[BUGFIX] Uploaded files are not untangled anymore</h3>
<p>TYPO3\FLOW3\Http\Request is missing the functionality that is implemented
in TYPO3\FLOW3\Utility\Environment::untangleFilesArray().</p>
<p>This causes the $source array in
TYPO3\FLOW3\Property\PropertyMapper::convert() to have invalid keys from
the $_FILES array (name, type, tmp_name, error, size) which causes an
exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36114">#36114</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1256837a3d1ed1d9f7b54d5ccdc6c31dceecc73e">1256837</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-httprequesthandlerinterface">
<h3>[FEATURE] Introduce HttpRequestHandlerInterface</h3>
<p>This new interface identifies request handlers which are
supporting and working with HTTP requests as such and
allows other application parts to retrieve the current HTTP
request.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36565">#36565</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9dcd31d94865a984ce7b17e56fd8109028cf86da">9dcd31d</a></li>
</ul>
</div>
<div class="section" id="task-tweak-doc-comments-to-be-more-explanatory">
<h3>[TASK] Tweak doc comments to be more explanatory</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5ddf5140f6e3bd1e59478919c517ec14ea8f2d30">5ddf514</a></li>
</ul>
</div>
<div class="section" id="bugfix-base-precompiledreflectiondata-path-on-temporary-path">
<h3>[BUGFIX] Base PrecompiledReflectionData path on temporary path</h3>
<p>The path to the precompiled reflection data is no longer
configured separately but instead always derived from the FLOW3
temporary path.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36578">#36578</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36572">#36572</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36569">#36569</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=286a7d6d1a20a65c106b22ac41c57481074bff07">286a7d6</a></li>
</ul>
</div>
<div class="section" id="bugfix-do-not-use-fallback-temporary-directory">
<h3>[BUGFIX] Do not use fallback temporary directory</h3>
<p>With this change you will get an exception if you miss the
temporary path setting in your settings instead of falling
back to the system temporary path, because this could lead to
problems with multiple FLOW3 instances on the same system.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36577">#36577</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d1a05a20c8e6f024291752c63aa58b29d6add618">d1a05a2</a></li>
</ul>
</div>
<div class="section" id="task-improve-compilation-error-message">
<h3>[TASK] Improve &#8220;compilation error message&#8221;</h3>
<p>When the compile run failed, an exception was thrown until now. This
lead to confusing output. With this change it doesn&#8217;t output useless
PHP version info etc. anymore.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36562">#36562</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9539aca721deb3bfb54c6188612e9e3e0f923856">9539aca</a></li>
</ul>
</div>
<div class="section" id="bugfix-update-package-states-after-package-import">
<h3>[BUGFIX] Update package states after package:import</h3>
<p>This patch makes sure that the package states information
is updated after a new package has been imported.</p>
<p>As before, the new package is not active by default.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36519">#36519</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dc3a2842e1dd506d1aad0868c0c726c1b378d250">dc3a284</a></li>
</ul>
</div>
<div class="section" id="bugfix-don-t-rewrite-packagestates-php-if-not-necessary">
<h3>[BUGFIX] Don&#8217;t rewrite PackageStates.php if not necessary</h3>
<p>This fix adjusts a comparison so that the PackageStates.php
file is only written if truly necessary.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36516">#36516</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=75d4bea5179322ee2a8f0b634cb4b4ae42721d06">75d4bea</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-precompiled-reflection-data-on-force-flush">
<h3>[BUGFIX] Remove precompiled reflection data on force flush</h3>
<p>This patch makes sure that any precompiled reflection data
of frozen packages is removed on a cache:flush &#8211;force.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36502">#36502</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=77fa8af3e98d55d5e29829b4eb0515a46112da28">77fa8af</a></li>
</ul>
</div>
<div class="section" id="feature-adds-a-quiet-flag-to-doctrine-migrate">
<h3>[FEATURE] Adds a quiet flag to doctrine:migrate</h3>
<p>With the flag set only the version numbers of the executed
migrations are output, one per line.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36276">#36276</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=64420cac2474b254c4c69dcee3092784443d6f00">64420ca</a></li>
</ul>
</div>
<div class="section" id="feature-allow-configurable-classes-path-in-packages">
<h3>[FEATURE] Allow &#8220;configurable&#8221; classes path in packages</h3>
<p>Package instances can be asked for their classes path, which is now set
determined by the PackageManager and stored in PackageStates.php.</p>
<p>It can - in the future - thus be read from a Composer file and
does no longer have to be the hardcoded &#8220;Classes&#8221;.</p>
<p>This change removes the use of the .Shortcuts folder again and makes
&#8220;overlapping&#8221; package keys possible (e.g. TYPO3.JobQueue and
TYPO3.JobQueue.Beanstalk).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36337">#36337</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=83a56d56f81554b9f4d4810173afd7d3425da4db">83a56d5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-content-security-current-globalobject-expansion">
<h3>[BUGFIX] Fix content security current.globalObject expansion</h3>
<p>Using for example current.securityContext in Policy.yaml made
FLOW3 crash completely in &#8220;eval&#8217;d&#8221; code.</p>
<p>This fixes the crash and removes the eval code by using the
TYPO3\FLOW3\Object\ObjectManager.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31677">#31677</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a5a90def350b789e0758982b97bd9d27b20576a5">a5a90de</a></li>
</ul>
</div>
<div class="section" id="task-adjust-functional-test-fixture-to-new-maximum-table-length">
<h3>[TASK] Adjust functional test fixture to new maximum table length</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35517">#35517</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=58b7c5f027cf452b7b7aa198201a0c34d77ecaf1">58b7c5f</a></li>
</ul>
</div>
<div class="section" id="task-add-db-migration-for-postgresql">
<h3>[TASK] Add DB migration for PostgreSQL</h3>
<p>This adds an initial migration for PostgreSQL to create the needed
schema for the package.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36301">#36301</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a95ffeee29a9ab4c129b8db699efe806ab540af3">a95ffee</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-column-type-detection-when-using-column-annotation">
<h3>[BUGFIX] Fixes column type detection when using Column annotation</h3>
<p>If a Column annotation is used but no type argument is given, the default
&#8220;string&#8221; type was used and did override the detection. Now the detection
is used again in those cases.</p>
<p>The only drawback is that you cannot force a column to be &#8220;string&#8221; any
more.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35011">#35011</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=503891c2854b05359902ae1b7984b9c2fe2f9396">503891c</a></li>
</ul>
</div>
<div class="section" id="task-cleans-up-some-smaller-issues">
<h3>[TASK] Cleans up some smaller issues</h3>
<dl class="docutils">
<dt>This change collects a number of smaller issues:</dt>
<dd><ul class="first last simple">
<li>clarifies description of migrationGenerateCommand</li>
<li>an exception is thrown on invalid Package.php file</li>
</ul>
</dd>
</dl>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=aafecb5765aa78c4110c5be15f418a85085e34b2">aafecb5</a></li>
</ul>
</div>
<div class="section" id="fixes-code-style-issues">
<h3>Fixes code style issues</h3>
<p>This change adds a ton of &#64;throws to docblocks and fixes other
documentation issues. Some code cleanup, like removing unused
variables and tweaking use statements is done as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fafc62ef6e89add4d622077f4282841e1b02fc8d">fafc62e</a></li>
</ul>
</div>
<div class="section" id="task-derive-maximum-table-name-length-from-doctrine-dbal">
<h3>[TASK] Derive maximum table name length from Doctrine.DBAL</h3>
<p>Doctrine.DBAL drivers have informations about the maxmimum
allowed table length, so the annotation driver uses this
information now.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35517">#35517</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cc2477fa3ac2096c10834522d5f4beefdcff0b55">cc2477f</a></li>
</ul>
</div>
<div class="section" id="bugfix-changes-the-default-for-nullable-columns-to-false">
<h3>[!!!][BUGFIX] Changes the default for nullable columns to FALSE</h3>
<p>This change makes columns not nullable by default, as is the case with
vanilla Doctrine 2.</p>
<p>This is a breaking change if you rely on NULL values to be returned
to detect special cases, like for not using unset date properties.
In those cases you need to mark your property with the Doctrine
annotation: Column(nullable=true)</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35059">#35059</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=115bda50778c04619481554a94bf5b47ab98409b">115bda5</a></li>
</ul>
</div>
<div class="section" id="task-update-package-xml-with-new-version-number">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=28a090457ee4df8ec45c514c01072c73fd0867e8">28a0904</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow3-php-now-uses-return-code-from-setfilepermissions-sh">
<h3>[BUGFIX] flow3.php now uses return code from setfilepermissions.sh</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36279">#36279</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e6cd5cdb5aad759463fdd1c8e09c0e0d53589f59">e6cd5cd</a></li>
</ul>
</div>
<div class="section" id="task-fix-functional-test-for-http-requesthandler">
<h3>[TASK] Fix functional test for HTTP RequestHandler</h3>
<p>The HTTP RequestHandler test can only be executed if the
global routes configuration include the routes from the
FLOW3 package. That might not be the case in other than
the FLOW3 distribution and then this test fails.</p>
<p>Fixed this by skipping the test if it can&#8217;t succeed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dd014d2ee22861d41833378bbe9f4d17877f04c8">dd014d2</a></li>
</ul>
</div>
<div class="section" id="task-remove-a-rather-dubious-unit-test-for-redis-cache-backend">
<h3>[TASK] Remove a rather dubious unit test for Redis cache backend</h3>
<p>Fixes a catch statement around connect as well.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e06bd9bb0a3e602a6b067d91b94e88cd78d96135">e06bd9b</a></li>
</ul>
</div>
<div class="section" id="feature-improve-value-object-support">
<h3>[FEATURE] Improve value object support</h3>
<p>This allows to handle value objects as intended. Create a new
one and persistence will take care to check if the value object
exists already.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/3585">#3585</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0af0647d5295353f29b9f5fbdff678f33bdaa6d7">0af0647</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixed-empty-exception-for-cli-commands">
<h3>[BUGFIX] Fixed empty exception for CLI commands</h3>
<p>When issuing an invalid command line (missing or wrong arguments),
FLOW3 displayed an exception #0 without further explanation.
The reason was an uncaught StopActionException thrown in the
CommandController::forward() method.</p>
<p>This patch fixes that bug and additionally eliminates some
duplicate code in CommandRequestHandler.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36030">#36030</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f9847d2b25c7d700f715932ef18c1473e8b251fc">f9847d2</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-csrf-protection-if-not-authenticated">
<h3>[BUGFIX] Skip CSRF protection if not authenticated</h3>
<p>CSRF protection prevented the triggering of authentication entry
points in some cases. As CSRF protection is not needed,
if nobody is authenticated, we completely skip this feature
in those cases.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36035">#36035</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6ed045ce6283a6c359d2aef681a64f96bcec8958">6ed045c</a></li>
</ul>
</div>
<div class="section" id="task-stability-improvement-to-functional-persistence-test">
<h3>[TASK] Stability improvement to functional persistence test</h3>
<p>Adds ordering to TestEntityRepository to make results predictable.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=49d0b48aec80d7b6db3cf05cfb4e51115a2085ab">49d0b48</a></li>
</ul>
</div>
<div class="section" id="task-make-output-of-doctrine-migration-status-more-compact">
<h3>[TASK] Make output of doctrine:migration status more compact</h3>
<p>This change removes some superfluous newlines that made the
migration status output rather long…</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3ca5db88e46cd9ee47b48d2d9470938974c9ced3">3ca5db8</a></li>
</ul>
</div>
<div class="section" id="task-give-hint-with-exception-on-aggregate-roots-in-hierarchies">
<h3>[TASK] Give hint with exception on aggregate roots in hierarchies</h3>
<p>The message &#8220;In a class hierarchy either all or no classes must be
an aggregate root, &#8220;Foo&#8221; is one but the parent class &#8220;Bar&#8221; is not.&#8221;
is not really helpful for developers.</p>
<p>This change adds a hint on how to solve the problem.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35892">#35892</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5b10bd1c0037f163a92be6b34464725eb86a655c">5b10bd1</a></li>
</ul>
</div>
<div class="section" id="task-ignore-codecoverageignore-annotation">
<h3>[TASK] Ignore &#64;codeCoverageIgnore annotation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=59bec6a65d05d5523a85e7811c1f75c65c45b4eb">59bec6a</a></li>
</ul>
</div>
<div class="section" id="security-protect-arguments-of-form-referrer-with-hmac">
<h3>[SECURITY] Protect arguments of form __referrer with HMAC</h3>
<p>The request arguments of the referring request are
a serialized string written to one of the hidden
fields in a Fluid form. This string has to be protected
by a HMAC to protect FLOW3 from possible unserialize
attacks.</p>
<p>Note: For now there is no object known within the FLOW3
Distribution, that could be used for an unserialize
exploit!</p>
<ul class="simple">
<li>Security-Bulletin: <a class="reference external" href="http://typo3.org/teams/security/security-bulletins/flow3/FLOW3-SA-2012-001/">FLOW3-SA-2012-001</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35300">#35300</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dc46450431cf55667da03bfdd9c624291479d953">dc46450</a></li>
</ul>
</div>
<div class="section" id="task-add-group-tag-to-excluded-tags-as-phpunit-now-requires-to-tag-big-testcases">
<h3>[TASK] add &#8220;Group&#8221; tag to excluded tags, as PHPunit now requires to tag big testcases</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5d6c3eaa29d2d8f72636224541b15ab12f35565b">5d6c3ea</a></li>
</ul>
</div>
<div class="section" id="task-add-missing-getparentrequest-method-in-http-response">
<h3>[TASK] Add missing getParentRequest() method in HTTP Response</h3>
<p>Furthermore, some documentation cleanup.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=eb813f9640c3a22c14711a61187ef5320150784c">eb813f9</a></li>
</ul>
</div>
<div class="section" id="feature-http-client-for-functional-testing">
<h3>[FEATURE] HTTP Client for Functional Testing</h3>
<p>This adds a virtual HTTP client which supports pluggable request engines
for different purposes. The first scenario in which we&#8217;ll use this new
&#8220;Browser&#8221; is for seamless functional testing of controllers and other
features which should be tested through the whole request / response
chain.</p>
<p>The FunctionalTestCase now provides a new class property called
&#8220;testableHttpEnabled&#8221; which, if set to TRUE, initializes a new browser
for each test and provides it as $this-&gt;browser.</p>
<p>Also adds a bunch of functional tests for the MVC ActionController using
this new feature.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35706">#35706</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ecb44c545eb5bbb5b89718c9de1236414b9b770c">ecb44c5</a></li>
</ul>
</div>
<div class="section" id="feature-provide-method-getcontent-for-http-request">
<h3>[FEATURE] Provide method getContent() for HTTP request</h3>
<p>This implements a method for retrieving the HTTP request body.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bbc5e3349d8378329da28a052b683ec847d9abd6">bbc5e33</a></li>
</ul>
</div>
<div class="section" id="bugfix-alternative-entry-points-can-be-configured-again">
<h3>[!!!][BUGFIX] Alternative entry points can be configured again</h3>
<p>This fix allows for using other than the pre-defined WebRedirect
entry points (for example the HTTP Basic entry point).</p>
<p>In order to avoid confusion, this patch also streamlines the setting
names for authentication providers. It makes sure that only one entry
point can be defined at all and adjusts the naming of other settings
to be in line with other FLOW3 setting conventions.</p>
<p>The keys of settings for the authentication provider have changed as
follows:</p>
<dl class="docutils">
<dt>DefaultProvider:</dt>
<dd>provider:          &#8216;(a class name)&#8217;
providerOptions:   [ ... options ... ]
token:             &#8216;(a class name)&#8217;
entryPoint:        &#8216;(a class name)&#8217;
entryPointOptions: [ ... options ... ]</dd>
</dl>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33495">#33495</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ad0bcd5e3ce536658d0a7625ce5bbb1de098411a">ad0bcd5</a></li>
</ul>
</div>
<div class="section" id="feature-http-1-1-support-foundations">
<h3>[!!!][FEATURE] HTTP 1.1 Support – Foundations</h3>
<p>This commit contains the foundations for a better HTTP support in
FLOW3. It extracts request and response handling into a dedicated
sub package &#8220;Http&#8221; and clearly distinguishes between HTTP requests
and &#8220;action requests&#8221;.</p>
<p>While this change set does contain a few new features which are
related to HTTP support, it is by far not complete and rather serves
as a foundation for further features which are following.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0e05ccc570e5d0a46c860e23d38eec3566e6e36e">0e05ccc</a></li>
</ul>
</div>
<div class="section" id="task-sub-package-name-case-and-location-adjustments">
<h3>[!!!][TASK] Sub package name case and location adjustments</h3>
<p>This change set contains (mostly) renames and relocations of FLOW3 sub
namespaces. These changes are necessary to meet the FLOW3 coding
guidelines and naming conventions and to support the new CLI / HTTP
and MVC structure.</p>
<p>\TYPO3\FLOW3\AOP -&gt; \TYPO3\FLOW3\Aop
\TYPO3\FLOW3\MVC -&gt; \TYPO3\FLOW3\Mvc
\TYPO3\FLOW3\MVC\CLI -&gt; \TYPO3\FLOW3\Cli
\TYPO3\FLOW3\MVC\Web\Routing -&gt; \TYPO3\FLOW3\Mvc\Routing
\TYPO3\FLOW3\MVC\Web\Request -&gt; \TYPO3\FLOW3\Mvc\ActionRequest
\TYPO3\FLOW3\MVC\Web\Response -&gt; \TYPO3\FLOW3\Http\Response
\TYPO3\FLOW3\MVC\Web\SubRequest -&gt; \TYPO3\FLOW3\Mvc\ActionRequest
\TYPO3\FLOW3\MVC\Web\SubResponse -&gt; TYPO3\FLOW3\Http\Response
\TYPO3\FLOW3\MVC\Controller\CommandController -&gt; \TYPO3\FLOW3\Cli\CommandController
\TYPO3\FLOW3\Property\DataType\Uri -&gt; \TYPO3\FLOW3\Http\Uri</p>
<p>\TYPO3\FLOW3\MVC\Web\RequestBuilder doesn&#8217;t exist anymore. If
you need to create requests, do &#8220;new ActionRequest($parentRequest)&#8221;
\TYPO3\FLOW3\MVC\Web\SubRequestBuilder doesn&#8217;t exist anymore.
If you need to create sub requests, do &#8220;new ActionRequest($parentRequest)&#8221;&#8220;</p>
<p>Note that this change set contains most but not every single adjustment
to the new locations as it is part of a bigger change for the respective
feature.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33705">#33705</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=331a78e8ba19923951a83d50e5f30cc09068db61">331a78e</a></li>
</ul>
</div>
<div class="section" id="feature-force-option-for-flow3-cache-flush">
<h3>[FEATURE] &#8211;force option for flow3:cache:flush</h3>
<p>Packages containing invalid PHP code which cause fatal errors
can prevent FLOW3 from flushing code caches with
./flow3 typo3.flow3:cache:flush</p>
<p>This patch provides a new &#8211;force option which skips all non-
essential initialization and flushes caches directly, including
emptying the whole temporary directory.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35826">#35826</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3ceb727c29ee61e4bec43d23cee0912bbbc24d58">3ceb727</a></li>
</ul>
</div>
<div class="section" id="task-getting-started-correct-snippet-description">
<h3>[TASK] Getting started: Correct snippet description</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35264">#35264</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c7c095c10d682bc812fb9f1a7a74620e69f874a5">c7c095c</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-documentation-to-new-documentation-workflow">
<h3>[BUGFIX] Adjust documentation to new documentation workflow</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35666">#35666</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d12ce447263257851c8ddaeb68182edf96981d9a">d12ce44</a></li>
</ul>
</div>
<div class="section" id="task-remove-selenium-test-case">
<h3>[TASK] Remove Selenium Test Case</h3>
<p>This removes the unsupported, unnecessary and unfunctional
Selenium Test Case.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35682">#35682</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8cec12a92f83f59fa05a2012b2c2175a8c976c1d">8cec12a</a></li>
</ul>
</div>
<div class="section" id="bugfix-virtual-host-configuration-contains-production-context-definition">
<h3>[BUGFIX] Virtual host configuration contains Production context definition</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34902">#34902</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ff4eb7e3c5b18563f91299e898ffc5ba36a84c27">ff4eb7e</a></li>
</ul>
</div>
<div class="section" id="bugfix-proxy-methods-with-referenced-arguments-should-work">
<h3>[BUGFIX] Proxy methods with referenced arguments should work</h3>
<p>Arguments given by reference would result in an exception if
the method was proxied due to AOP.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30914">#30914</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/13333">#13333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fa0867857380f9d843a2d749d3dd4195f5a6535e">fa08678</a></li>
</ul>
</div>
<div class="section" id="task-improve-textvalidator-unit-tests">
<h3>[TASK] Improve TextValidator unit tests</h3>
<p>This introduces more test texts for the TextValidator tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/3977">#3977</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cfa4bd554d4fa6b462768b3e862ae6b2639598f7">cfa4bd5</a></li>
</ul>
</div>
<div class="section" id="task-add-flow3-documentation-to-typo3-flow">
<h3>[TASK] add FLOW3 documentation to TYPO3.Flow</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35524">#35524</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fdd5c99378b2a7491f29b1c141b0e8048b25eff0">fdd5c99</a></li>
</ul>
</div>
<div class="section" id="bugfix-datetimevalidator-throws-exception-when-validating-datetime-objects">
<h3>[BUGFIX] DateTimeValidator throws exception when validating DateTime objects</h3>
<p>The DateTimeValidator tries to parse DateTime objects
with the L18n DatesParser which throws an exception.</p>
<p>This change fixes this by checking if the specified value
is an instance of DateTime first.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34050">#34050</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3cafccf68f5d082c312946c79b29c23bf761a365">3cafccf</a></li>
</ul>
</div>
<div class="section" id="task-fix-doc-comments-for-authentication-providers">
<h3>[TASK] Fix doc comments for authentication providers</h3>
<p>Fixes the wrong return doc annotation for the getTokenClassnames method</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35317">#35317</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2dd67d26e151496771e8ef4c3c4e2016a904971d">2dd67d2</a></li>
</ul>
</div>
<div class="section" id="task-grammar-police-at-work">
<h3>[TASK] Grammar police at work</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8ec5166f43dd6aaef81d241b3834b6060b545875">8ec5166</a></li>
</ul>
</div>
<div class="section" id="task-cosmetic-changes-in-test-cases">
<h3>[TASK] Cosmetic changes in test cases</h3>
<p>This removes the &#64;category annotation from a bunch
of security related tests and replace an inject
method in the PackageCommandController by property
injection.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=30a007d1c2fe5aa033c7ba5df89114e052686bd8">30a007d</a></li>
</ul>
</div>
<div class="section" id="feature-inject-convenience-method-in-base-test-case">
<h3>[FEATURE] inject() convenience method in Base Test Case</h3>
<p>Testing code which uses dependency injection requires
some additional lines of code for manually injecting
the dependencies needed to run a unit test.</p>
<p>This patch provides a new convenience method – inject() –
which takes care of manual injection of dependencies
in unit test cases.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35135">#35135</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8152b8c97a292e79e24b514b161850ccdba85b03">8152b8c</a></li>
</ul>
</div>
<div class="section" id="bugfix-clear-shortcuts-on-cache-flush-command">
<h3>[BUGFIX] Clear .Shortcuts on cache flush command</h3>
<p>In case some directories were renamed you are able to get
back to a defined state with the cache:flush command.</p>
<p>It will also clean the .Shortcuts directory to prevent
mismatches.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34837">#34837</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6d13ef279506dddfa7230ed935347eadaf513e6b">6d13ef2</a></li>
</ul>
</div>
<div class="section" id="bugfix-streamwrapperadapter-stream-lock-does-not-return-result">
<h3>[BUGFIX] StreamWrapperAdapter::stream_lock does not return result</h3>
<p>StreamWrapperAdapter::stream_lock() does not return the results
of the actual stream wrapper. But according to the docs this
should return TRUE on success and FALSE on failure.</p>
<p>This change fixes this and adds unit tests for all public methods
of the adapter.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34555">#34555</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2fd21b11f5b72a668d3d408328a3f7bbd72dc646">2fd21b1</a></li>
</ul>
</div>
<div class="section" id="feature-configurable-hint-about-log-message-origin">
<h3>[FEATURE] Configurable hint about log message origin</h3>
<p>This feature allows for enabling the additional hint for the origin of
logged messages handled by the FileBackend. By default these hints are
now omitted.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35052">#35052</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=becbc65f77c30547c0a56a5a1e93b6b68be1365a">becbc65</a></li>
</ul>
</div>
<div class="section" id="feature-automatic-session-expiration-on-user-inactivity">
<h3>[FEATURE] Automatic session expiration on user inactivity</h3>
<p>This feature lets sessions expire automatically after a certain time
of user inactivity. The actual timeout can be specified through a
new setting called &#8220;inactivityTimeout&#8221;.</p>
<p>This patch also sets the default cookie lifetime to infinite, as
expiration can be better controlled through the new timeout feature.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31192">#31192</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35034">#35034</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cfe4af2e7423da6adbe881d1c97e14abc62ce189">cfe4af2</a></li>
</ul>
</div>
<div class="section" id="bugfix-context-hasrole-now-checks-roles-recursively">
<h3>[BUGFIX] Context::hasRole() now checks roles recursively</h3>
<p>Previously, hasRole() only considered the first level of roles of a
token. getRoles() instead always considered all roles, including those
on a lower level.</p>
<p>This patch fixes the behavior of hasRole() by checking for roles
recursively. As before, the &#8220;Everybody&#8221; role is a role even non-
authenticated and anonymous users have.</p>
<p>This also fixes &lt;f:security.ifHasRole&gt;, as this ViewHelper directly uses
Context::getRoles.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31997">#31997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=861231e1eff72b53d3dd415c496bed2b29752358">861231e</a></li>
</ul>
</div>
<div class="section" id="bugfix-yamlsource-creates-invalid-yaml-files">
<h3>[BUGFIX] YamlSource creates invalid YAML files</h3>
<p>YamlSource::save() currently creates Windows style EOLs
and indentation is lost in YAML files.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35016">#35016</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=36e46e7464a35dea2b7febe7b337817511fc8210">36e46e7</a></li>
</ul>
</div>
<div class="section" id="feature-precompiled-reflection-data-for-frozen-packages">
<h3>[FEATURE] Precompiled reflection data for frozen packages</h3>
<p>This feature introduces &#8220;frozen packages&#8221;. Through the command line
command &#8220;package:freeze&#8221; one ore more packages can be set into a
frozen state. A frozen package is excluded from file monitoring and
its reflection data is stored in a file separate from the regular
caches. After caches have been flushed, this precompiled reflection
data is loaded in order to speed up the compile run during that first
hit.</p>
<p>With &#8220;package:unfreeze&#8221; packages can be unfrozen and &#8220;package:refreeze&#8221;
will refresh the precompiled reflection data of an already frozen
package.</p>
<p>Package freezing is only supported for Development context.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34827">#34827</a></li>
<li>Resolves: PHX-71</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e1810549a590de455a609443a1f35e2e3d9baee3">e181054</a></li>
</ul>
</div>
<div class="section" id="feature-optimize-aop-proxy-building">
<h3>[FEATURE] Optimize AOP proxy building</h3>
<p>This simply makes AOP proxy building a lot faster.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/9568">#9568</a></li>
<li>Resolves: PHX-72</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=38c3c8e7edbb730699dbd993e180e8aee39b3e3d">38c3c8e</a></li>
</ul>
</div>
<div class="section" id="feature-allow-setting-datatype-from-outside">
<h3>[FEATURE] Allow setting dataType from outside</h3>
<p>This change introduces a public setter method for
the dataType property, making it possible to
influence the target type for property mapper.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34867">#34867</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6475457dadf9f8d00da542e99567395dad796c51">6475457</a></li>
</ul>
</div>
<div class="section" id="feature-package-help-in-cli">
<h3>[FEATURE] Package help in CLI</h3>
<p>This extends the CLI to display a list of all commands of a
specified package including their short description.
Also if more commands match a given identifier, now the list
of all matching commands with short descriptions is displayed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30256">#30256</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e382d9fe499e9c0302fd97bb6046a16cf2f063d8">e382d9f</a></li>
</ul>
</div>
<div class="section" id="bugfix-removes-ghost-command-getflow3">
<h3>[BUGFIX] Removes &#8220;ghost command&#8221; getflow3</h3>
<p>The fix for #33048 in Ia8561a7878b7dd9ba8a6f3bb926c9da10b46bd0c caused a
ghost command to appear in all command controllers…</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34811">#34811</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33048">#33048</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d8ee47023607e65be59f30ea6c43bc37042f96dd">d8ee470</a></li>
</ul>
</div>
<div class="section" id="bugfix-html-should-be-escaped-in-debug-exception">
<h3>[BUGFIX] HTML should be escaped in Debug Exception</h3>
<p>HTML in the code that is output as part of the stack trace is
escaped now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/25961">#25961</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fa8fd72a7c1f6794561e0ce111484fcccd3cc867">fa8fd72</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-flow3-bat-output-usage-texts-matching-windows">
<h3>[BUGFIX] Make flow3.bat output usage texts matching Windows</h3>
<p>When using flow3.bat on Windows the usage information would tell the
user to call &#8221;./flow3&#8221;, which doesn&#8217;t fit the Windows world.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33048">#33048</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7e567e8d38e5a24f052a7da4fa7ae0fd657540e3">7e567e8</a></li>
</ul>
</div>
<div class="section" id="task-remove-deprecated-methods-and-unused-code">
<h3>[TASK] Remove deprecated methods and unused code</h3>
<p>Things which have been deprecated prior to the 1.0.0 release are
removed with this change:</p>
<ul class="simple">
<li>Cache\AbstractFrontend-&gt;getClassTag()</li>
<li>ObjectManager-&gt;create()</li>
<li>ObjectManager-&gt;recreate()</li>
<li>HashService-&gt;generateSaltedMd5()</li>
<li>HashService-&gt;validateSaltedMd5()</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27770">#27770</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33789">#33789</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a29012b669e90a7e39a4727514538ace5a77eb80">a29012b</a></li>
</ul>
</div>
<div class="section" id="bugfix-packagemanager-should-update-shortcuts-when-needed">
<h3>[BUGFIX] PackageManager should update .Shortcuts when needed</h3>
<p>The PackageManager needs to update the shortcuts when saving
package states. Besides that the PackageManager should ignore
inactive packages when creating shortcuts.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33417">#33417</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34322">#34322</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fec2ff945c3b1a73e0811637fe4bb2ecbce8e6df">fec2ff9</a></li>
</ul>
</div>
<div class="section" id="bugfix-package-php-template-should-have-correct-use-statements">
<h3>[BUGFIX] Package.php template should have correct use statements</h3>
<p>The Package.php template will generate clean use statements with
same usage of backslashes.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b6191e900e1546122e8f1147de96e050224ace82">b6191e9</a></li>
</ul>
</div>
<div class="section" id="bugfix-typo-in-return-statement-for-getaccessdecisionvoters">
<h3>[BUGFIX] typo in return statement for getAccessDecisionVoters()</h3>
<p>Fix return value to array.
Fix type hinting for var $securityContext and $authenticationManager</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34620">#34620</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=94a079947cfd9ca80ad4fd308aec32aa7f95dced">94a0799</a></li>
</ul>
</div>
<div class="section" id="task-fix-variable-annotations-missing-prepending-backslashes">
<h3>[TASK] Fix variable annotations (missing prepending backslashes)</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=62d0629d5ddd7e2106fae6ebe664a401a266b30b">62d0629</a></li>
</ul>
</div>
<div class="section" id="bugfix-resourcestreamwrapper-returns-wrong-value-for-fseek">
<h3>[BUGFIX] ResourceStreamWrapper returns wrong value for fseek</h3>
<p>Calling fseek will always return the wrong value, as fseek
return 0 on success otherwise -1.
The stream_wrapper expects a boolean value. So 0 will be
evaluated to false and -1 will be evaluated to true</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34608">#34608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dd761bb014e45eda471a24b209aaf56c0bf279dd">dd761bb</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-variable-name-inside-rename-function">
<h3>[BUGFIX] wrong variable name inside rename function</h3>
<p>Use the propper variable name to create the stream wrapper.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34547">#34547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fe76887f75aa80b82be3104ef1f51e065dd774f0">fe76887</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-getpasswordhashingstrategyandidentifier-return-value">
<h3>[BUGFIX] Fixes getPasswordHashingStrategyAndIdentifier() return value</h3>
<p>getPasswordHashingStrategyAndIdentifier() is supposed to return an
array, but in case a strategy identifier has been requested already,
an object will be returned and break the calling code.</p>
<p>This change fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33645">#33645</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=999b95082c1b5695f698a7f640e9eeaec51d9231">999b950</a></li>
</ul>
</div>
<div class="section" id="bugfix-notfoundview-sets-404-status">
<h3>[BUGFIX] NotFoundView sets 404 status</h3>
<p>The default NotFoundView, which renders a 404 template,
sets now also the HTTP status to 404.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34407">#34407</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ca5b3b9a535ff29a4e34c70bbeb68612d135b0f1">ca5b3b9</a></li>
</ul>
</div>
<div class="section" id="task-add-utility-function-to-retrieve-class-names-for-objects">
<h3>[TASK] Add utility function to retrieve class names for objects</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34426">#34426</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5938c224ec764b7d9d878077006d5fe84224994c">5938c22</a></li>
</ul>
</div>
<div class="section" id="task-remove-collection-validation-from-lazy-collections">
<h3>[TASK] Remove collection validation from Lazy collections</h3>
<p>The change to validate collections introduced unwanted behavior
by validating lazy annotated and not yet initialized collections.
This basically disables lazy loading and introduces a major memory
problem.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34154">#34154</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=91a9590f80b91d7067e006d77c0855863d829381">91a9590</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-missing-context-field-to-objectmanager">
<h3>[BUGFIX] Add missing $context field to ObjectManager</h3>
<p>The ObjectManager refers to $this-&gt;context which didn&#8217;t exist.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34423">#34423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=74838ac1f5e96f097aac0addaad89940c10b766f">74838ac</a></li>
</ul>
</div>
<div class="section" id="bugfix-isauthenticated-should-work-in-authentication-request">
<h3>[BUGFIX] isAuthenticated should work in authentication request</h3>
<p>AuthenticationManager::isAuthenticated now checks for resumable
and new sessions before returning FALSE, so it works also in the
request that triggers the authentication.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33311">#33311</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=08b70b827705d1c1001a2bf92ca6cb0d423f13d0">08b70b8</a></li>
</ul>
</div>
<div class="section" id="bugfix-security-remove-default-authentication-provider">
<h3>[!!!][BUGFIX] (Security): Remove default authentication provider</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34399">#34399</a></li>
<li>Related to: #34398</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3f288553a845c904596dd51454cbc90a3e89e06d">3f28855</a></li>
</ul>
</div>
<div class="section" id="task-add-abstract-classes-for-entrypoint-provider-token-in-security-authentication">
<h3>[TASK] Add abstract classes for entrypoint, provider &amp; token in security authentication</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34304">#34304</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2a7a67fca12db09aa970549f36b34a50446d4a26">2a7a67f</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-missing-function-visibility-declarations">
<h3>[BUGFIX] Fixes missing function visibility declarations</h3>
<p>Some methods were missing their visibility declarations, this
change adds them.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33460">#33460</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=95e0ca4941f447f898f84298e529a78c44976dc3">95e0ca4</a></li>
</ul>
</div>
<div class="section" id="task-fix-doc-comments">
<h3>[TASK] Fix doc comments</h3>
<p>Fixes doc comments issues, like missing or wrong &#64;param
annotations. Removes &#64;author annotations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9c9decda5d832d80ef1f4bbda319d6ae8fee32c9">9c9decd</a></li>
</ul>
</div>
<div class="section" id="bugfix-now-filters-correctly-for-destruct-in-pointcut-filter">
<h3>[BUGFIX] Now filters correctly for &#8216;__destruct&#8217; in pointcut filter</h3>
<p>The filter for proxyable methods in SessionObjectMethodsPointcutFilter skips
the method &#8216;__desctruct&#8217; instead of &#8216;__destruct&#8217;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34293">#34293</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5c5934c38c177d7c8ffb0235177c15001e79dec5">5c5934c</a></li>
</ul>
</div>
<div class="section" id="bugfix-keep-class-doc-comments-when-building-proxies">
<h3>[BUGFIX] Keep class doc comments when building proxies</h3>
<p>Currently the doc comment of a class is replaced with
&#8220;Autogenerated Proxy Class&#8221; when the proxy class is generated.
This change fixes this and keeps the original doc comment.</p>
<p>That is particulary useful if you rely on the original comment
when creating automatic class documentations.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34110">#34110</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=899eb3f37229244f2938f84d52c655b80c91d759">899eb3f</a></li>
</ul>
</div>
<div class="section" id="bugfix-makes-translatebyid-work-if-no-arguments-need-to-be-replaced">
<h3>[BUGFIX] Makes translateById() work if no arguments need to be replaced</h3>
<p>If translateById() is able to find a translation but is not given
any arguments to embed in the output, NULL is returned without this
change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34171">#34171</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2b0b5b96657f731bcdef8ecd7ccbcf3edd4cc5de">2b0b5b9</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-wrong-locale-in-xliff-models">
<h3>[BUGFIX] Fixes wrong locale in XLIFF models</h3>
<p>If a translation is requested but no (exact) match is found,
a different locale may take effect (e.g. en instead of en_UK).</p>
<p>The XLIFF model created will refer to the en XLIFF file, but
claim it&#8217;s locale is en_UK. This leads to further problems
with translations (like missing labels if no target elements
are present in XLIFF files).</p>
<p>This change fixes that…</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34170">#34170</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b24339c953375fc738fca7ad364af78c558186b2">b24339c</a></li>
</ul>
</div>
<div class="section" id="feature-adds-fallback-rules-for-locale-resolution">
<h3>[FEATURE] Adds fallback rules for locale resolution</h3>
<p>Allows to set a fallback order for locale resolving. If not set,
the implicit inheritance of locales will be used. That is, if a
locale of en_UK is requested, matches will be searched for in en_UK
and en before trying the default locale configured in FLOW3.</p>
<p>If FLOW3 is given an order of [dk, za, fr_CA] a request for en_UK will
be looked up in en_UK, en, dk, za, fr_CA, fr before trying the default
locale.</p>
<p>If strict rule adherence is requested, the above example would instead look
in en_UK, dk, za, fr_CA before trying the default locale. In other words,
the implicit fallback is not applied to the locales in the fallback rule.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34172">#34172</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9ccbdb00a87a21796f28212c480a35112d014196">9ccbdb0</a></li>
</ul>
</div>
<div class="section" id="feature-adds-i18n-configuration-holder">
<h3>[!!!][FEATURE] Adds i18n configuration holder</h3>
<p>To control the behavior of the i18n component a way to
configure the &#8220;current&#8221; locale, fallback rules for resolving
of translations and possible more is needed.</p>
<p>This change adds a Configuration object to the i18n code
which encapsulates the configurable parts.</p>
<p>For early adopters this change means the calls to
getDefaultLocale() and getCurrentLocale() on I18n\Service
need to be routed to Service-&gt;getConfiguration()-&gt;…
instead.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34169">#34169</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7323b900fb1c96e14f36e2cc7b67b064dc01d912">7323b90</a></li>
</ul>
</div>
<div class="section" id="feature-makes-quantity-optional-in-translation-methods">
<h3>[FEATURE] Makes quantity optional in translation methods</h3>
<p>When using plural forms, the quantity to be used for finding
the correct plural form had to be given explicitly. This was
cumbersome when using a single numeric argument, as it meant
to pass the same value twice.</p>
<p>With this change the quantity is determined automatically if
a single numeric argument is given to translateById() or
translateByOriginalLabel() in Translator.</p>
<p>Also fixes a few I18n unit tests along the way.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33959">#33959</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e7141cb693168c2785c0b7e075ead8c73b96194a">e7141cb</a></li>
</ul>
</div>
<div class="section" id="feature-shorthand-syntax-for-custom-validators">
<h3>[FEATURE] Shorthand syntax for custom validators</h3>
<p>This change allows the Validate annotation for properties to
be given a value like &#8220;Mypkg:My&#8221;. This is equivalent to using
&#8220;Mypkg\Validation\Validator\MyValidator&#8221; - just shorter.</p>
<p>Thanks to Martin Kutschker for reporting and inspiring patch.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33862">#33862</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8fca8ee3dad4669fca46f161ec11b4777f5700c2">8fca8ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-reflection-objectaccess-setproperty-must-work-with-numeric-indexes">
<h3>[BUGFIX] (Reflection): ObjectAccess::setProperty must work with numeric indexes</h3>
<p>When trying to set a value to an ArrayAccess object with a numeric index, the
ObjectAccess::setProperty() method throws an exception because $propertyName
must be a string.</p>
<p>However, we should allow integers there as well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33698">#33698</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d473ee2f0e9409959b594d1198bd4d225d8b367c">d473ee2</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-handling-of-numeric-annotation-parameters">
<h3>[BUGFIX] Fixes handling of numeric annotation parameters</h3>
<p>Annotations like &#64;FooBar(amount=2) lost their parameter value
in renderAnnotation(). This change fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33932">#33932</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=895d48b95b40e340d5b5f81aee2df72a47abd545">895d48b</a></li>
</ul>
</div>
<div class="section" id="task-implement-best-practices-in-xliff-files">
<h3>[TASK] Implement best practices in XLIFF files</h3>
<p>Adds some &#8220;required&#8221; attributes to the XLIFF files.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33975">#33975</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ca35b1a8e869a22b99414fe56dc49348747f20f8">ca35b1a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-duplicate-error-id-in-stringvalidator">
<h3>[BUGFIX] Fixes duplicate error id in StringValidator</h3>
<p>StringValidator uses the error id 1238108068, but that is
used in StringLengthValidator. This change makes the former
use 1238108070 instead.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33973">#33973</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=30d2c4cc816e7a3e27b639cbb5f8b6d9c8d128c9">30d2c4c</a></li>
</ul>
</div>
<div class="section" id="feature-add-translations-for-validation-error-messages">
<h3>[FEATURE] Add translations for validation error messages</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33970">#33970</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b484e6a4f3725091765cdf9c898b81c03245d3d9">b484e6a</a></li>
</ul>
</div>
<div class="section" id="task-add-better-handling-of-xml-parse-errors-to-i18n">
<h3>[TASK] Add better handling of XML parse errors to I18n</h3>
<p>When parsing XML files the exception thrown in case of errors did not
differentiate between filesystem and parsing errors, now it does.</p>
<p>In case of XML errors, a detailed list of errors reported by
libxml are added to the thrown exception.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33836">#33836</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=987a264f0322b1125ed41fcc26dd41b494b6b2ce">987a264</a></li>
</ul>
</div>
<div class="section" id="feature-make-tag-ignores-configurable">
<h3>[FEATURE] Make tag ignores configurable</h3>
<p>Makes the list of ignored tags configurable. This can be used to add
tags to the list if needed by your package by simply setting
TYPO3.Flow.reflection.ignoredTags to an array of tag names in your
Settings.yaml.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33142">#33142</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cebbf8e2851b28ffaf32abafbb675e47af6ae783">cebbf8e</a></li>
</ul>
</div>
<div class="section" id="bugfix-validators-should-allow-empty-values">
<h3>[!!!][BUGFIX] Validators should allow empty values</h3>
<p>Currently most of the provided validators do not accept empty
values.</p>
<p>This makes it impossible to have an optional email address
property for example (without using the disjunction validator).</p>
<p>This change adjusts all Validators to consider empty values
(NULL or an empty string) valid.</p>
<p>This is a breaking change if you expected the previous behavior.
In order to make a property required you now need to add the
NotEmptyValidator explicitly!</p>
<p>E.g. previously:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\\Validate(type=&quot;EmailAddress&quot;)</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$propertyToValidate</span><span class="p">;</span>
</pre></div>
</div>
<p>Now:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @Flow\\Validate(type=&quot;NotEmpty&quot;)</span>
<span class="sd"> * @Flow\\Validate(type=&quot;EmailAddress&quot;)</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$propertyToValidate</span><span class="p">;</span>
</pre></div>
</div>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33300">#33300</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9b627954f289d793b808db2ac19edc6a04c25426">9b62795</a></li>
</ul>
</div>
<div class="section" id="task-remove-cgl-docbook-xml-files-from-package">
<h3>[TASK] Remove CGL DocBook XML files from package</h3>
<p>They have been transformed to reST long ago…</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29318">#29318</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=81a8da3eea0a0084513396217a1c40010f63357a">81a8da3</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-default-lifetime-use-in-cache-backend">
<h3>[BUGFIX] Fix default lifetime use in cache backend</h3>
<p>This fixes the FileBackend so it actually uses the default lifetime
in cases it should do that.</p>
<p>ArrayAccess detection for configuration in AbstractBackend is fixed
along the way and the RedisBackend code cleaned up a little.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33562">#33562</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a0ee47d189f0a2141b6c8de2813d984c69a44eba">a0ee47d</a></li>
</ul>
</div>
<div class="section" id="bugfix-makes-account-expiry-work-as-expected">
<h3>[BUGFIX] Makes account expiry work as expected</h3>
<p>The expiry if an account was checked in a way that left an account
enabled until after it&#8217;s last day. Now it will expire exactly when
it should.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33707">#33707</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b1cbf2ba554993a6236099f706d352bf3f78fb87">b1cbf2b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-wrong-typo3-flow3-i18n-xml-namespace-use">
<h3>[BUGFIX] Fixes wrong \TYPO3\FLOW3\I18n\Xml\* namespace use</h3>
<p>The mentioned namespace doesn&#8217;t exist and the resulting error
e.g. breaks the Admin package.</p>
<p>Along the way some doc comments are fixed.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33720">#33720</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5572609a0e9a5087a1185e3c0b30227c4618345d">5572609</a></li>
</ul>
</div>
<div class="section" id="task-throw-exception-when-private-properties-have-inject">
<h3>[TASK] Throw exception when private properties have &#64;Inject</h3>
<p>Properties annotated for injection do obviously have to
be at least protected in order for the proxy class
having access to it.
This patch makes an exception thrown when such private
properties occur.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33589">#33589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=837fc9800a6530274df2b2d575afdc20c24280f0">837fc98</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixed-logging-of-incorrect-doc-comments-in-reflection">
<h3>[BUGFIX] Fixed logging of incorrect doc comments in reflection</h3>
<p>If one enables logIncorrectDocCommentHints nothing happens, as the
settings are not available in the ReflectionService. This change
fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33601">#33601</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9d06eed31b3980193470f87bb2a91c48f3750ffe">9d06eed</a></li>
</ul>
</div>
<div class="section" id="task-adjust-test-fixture-to-doctrine-orm-2-2-0">
<h3>[TASK] Adjust test fixture to Doctrine.ORM 2.2.0</h3>
<p>The proxy interface in Common is now used, the fixture needs to
be adjusted.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c2c171d440e60457cbefc8e11ec83bc41b4fc7f9">c2c171d</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-i18n-settings">
<h3>[TASK] Clean up i18n settings</h3>
<p>This renames the locale settings section to i18n and changes the
defaultLocaleIdentifier setting to be defaultLocale.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32736">#32736</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32733">#32733</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4542cd6ee47ba36892f098a94b070f570c974ba4">4542cd6</a></li>
</ul>
</div>
<div class="section" id="bugfix-cldr-locale-chaining-doesn-t-work-correctly">
<h3>[BUGFIX] CLDR locale chaining doesn&#8217;t work correctly</h3>
<p>When collecting CLDR resource files, the required chaining
is corrected (i.e. de_DE.xml also requires de.xml to be
included).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33148">#33148</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b2e4f3e94039135614bf8f3976da4f833cfaae42">b2e4f3e</a></li>
</ul>
</div>
<div class="section" id="feature-add-validators-for-objects-inside-of-collections">
<h3>[FEATURE] Add validators for objects inside of collections</h3>
<p>Model validation stops as soon as a property is of type collection. What one
would expect here is, that all objects inside this collection get validated as
well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32700">#32700</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dd6f600dca46366e3109a47488bc6c3b607105d9">dd6f600</a></li>
</ul>
</div>
<div class="section" id="feature-add-currentlocale-to-i18n-translation-service">
<h3>[FEATURE] Add currentLocale to I18n translation service</h3>
<p>Also add localeIdentifier validator.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33188">#33188</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=721f8e71c72dfe473a8c2611744db09fde6093d3">721f8e7</a></li>
</ul>
</div>
<div class="section" id="feature-add-getter-for-validator-options-and-child-validators">
<h3>[FEATURE] Add Getter for validator options and child validators</h3>
<p>Validation options are set through the constructor but there is
currently no way of accessing the options afterwards.
This change introduces the respective getters.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33226">#33226</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0acd9937f4cd9b638c436eeea144f05e6038dbdf">0acd993</a></li>
</ul>
</div>
<div class="section" id="task-replace-bool-by-boolean-in-docblocks">
<h3>[TASK] Replace bool by boolean in docblocks</h3>
<p>A CGL conformity fix. Just because I noticed. :)</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33398">#33398</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a655ebced9c650a3d3ce1f754187616ebd24c833">a655ebc</a></li>
</ul>
</div>
<div class="section" id="task-add-early-returns-to-security-context-hasrole">
<h3>[TASK] Add early returns to Security\Context::hasRole</h3>
<p>Change the behavior of hasRole so it has an early return
when the authenticationManager is not yet authenticated
(and thus no role can be assigned to the authenticated user).</p>
<p>Also an earlier return on the Everyone role.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32841">#32841</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=00d25062713bf4ae1d16e98a48b61a8e2f36568c">00d2506</a></li>
</ul>
</div>
<div class="section" id="bugfix-hint-at-possible-exception-cause">
<h3>[BUGFIX] Hint at possible exception cause</h3>
<p>When using &#64;MappedSuperclass without &#64;Entity an exception is thrown.
Since FLOW3 needs the &#64;Entity annotation even with a mapped superclass,
this change adds a hint to the exception message.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/27285">#27285</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ad89e84eecd5170b0ce87ac340c1c564acc67983">ad89e84</a></li>
</ul>
</div>
<div class="section" id="task-some-cleanup-around-authentication">
<h3>[TASK] Some cleanup around authentication</h3>
<p>Does some coding style cleanup, amends a docblock and makes the
authenticateAction() use $this-&gt;errorMethodName() instead of hardcoding
$this-&gt;errorAction()</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33177">#33177</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d7a9af6bfb77d1b9bd14b9b967600fbdab4e1460">d7a9af6</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-queryresult-offsetget-behavior-consistent">
<h3>[BUGFIX] Make QueryResult::offsetGet() behavior consistent</h3>
<p>offsetGet() on QueryResult for Doctrine persistence now checks if
the offset exists and returns NULL if not, instead of running into
an error.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33106">#33106</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9c421d6401df8d0e45ede739041507d38f9d2fe4">9c421d6</a></li>
</ul>
</div>
<div class="section" id="feature-create-shortcuts-directory-if-it-is-missing">
<h3>[FEATURE] Create .Shortcuts directory if it is missing</h3>
<p>The .Shortcuts directory will now be built if it is missing. That allows
developers to just trash a broken .Shortcuts directory if they messed
with package directories manually.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33112">#33112</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8dd2ea5352ca1fafb38fbe1d2b6b26b6f432e985">8dd2ea5</a></li>
</ul>
</div>
<div class="section" id="task-regard-return-type-of-preg-match">
<h3>[TASK] Regard return type of preg_match</h3>
<p>As of PHP-documentation, preg_match() may return int 0 or 1
or boolean FALSE. This patch takes care of this behaviour.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33097">#33097</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b03e9eaed2f8ba2a7f944dd09e4c54ee800bc07e">b03e9ea</a></li>
</ul>
</div>
<div class="section" id="feature-add-support-for-not-mapped-properties">
<h3>[FEATURE] Add support for not mapped properties</h3>
<p>The PropertyMappingConfiguration now has a doNotMapProperty() method that
tells the mapper to ignore the data / property</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31021">#31021</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=08414d613f58923de25a0befe1be10cc17c95aef">08414d6</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-updating-a-doctrine-lazy-loading-proxy-work">
<h3>[BUGFIX] Make updating a Doctrine Lazy Loading Proxy work</h3>
<p>When a Doctrine lazy loading proxy is persisted again, a fatal error is thrown
because the Reflection Service cannot handle Doctrine Proxies.</p>
<p>We work around this issue by asking the Doctrine Entity Manager to resolve the
class name.</p>
<p>A Functional Test reproducing the issue is included.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32830">#32830</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2fdc342d181d816f6a6ee41b7b30500f3a8741d7">2fdc342</a></li>
</ul>
</div>
<div class="section" id="task-adjust-yaml-handling-and-files-to-updated-parser">
<h3>[TASK] Adjust YAML handling and files to updated parser</h3>
<p>The fix for #31289 requires some adjustments to FLOW3 and the
existing YAML files.</p>
<p>Additionally adjust boolean and NULL values to all uppercase
according to CGLs.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31289">#31289</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=38ec74e1dcf595405a06d23e4e3965c4c5d501f8">38ec74e</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-updated-doctrine-libraries">
<h3>[TASK] Adjust to updated Doctrine libraries</h3>
<p>This adjusts the FLOW3 annotation driver and the ClassMetadata
implementation to the changes in Doctrine 2.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32608">#32608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e83da5c28260fc5922f12b10de51d5a1748e007e">e83da5c</a></li>
</ul>
</div>
<div class="section" id="bugfix-utility-arraymergerecursiveoverrule-does-not-override-arrays-with-simple-types">
<h3>[BUGFIX] (Utility): ArrayMergeRecursiveOverrule does not override arrays with simple types</h3>
<p>If the first element contains an array, and the second element contains a simple
type at a certain position, the ORIGINAL array is used. That bug prevents to reset
array in configuration for example.</p>
<p>A full example is given in issue #32984.</p>
<p>I also added first unit tests for the ArrayMergeRecursiveOverrule function.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32984">#32984</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b7e76ffd7eed0fb6648d07ec0d5cf109f3ff8568">b7e76ff</a></li>
</ul>
</div>
<div class="section" id="feature-datetimerange-validator">
<h3>[FEATURE] DateTimeRange Validator</h3>
<p>This offers validation for Date/Time ranges, e.g. if a
given date is ahead or prior to a reference date or
between to boundaries.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32619">#32619</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8e6c2baa8ad8eb3be96ce8d19b9edd06c0a0b1c5">8e6c2ba</a></li>
</ul>
</div>
<div class="section" id="feature-cli-add-configuration-show-command-for-debugging">
<h3>[FEATURE] (CLI): Add configuration:show command for debugging</h3>
<p>Adds the cli command &#8220;configuration:show&#8221; with the options &#8211;type and &#8211;path.
The patch adds the method getAvailableConfigurationTypes to the configurationManager which is used by the cli-command.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32470">#32470</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ac7f4bd9decc5f2781eaf76f3ce86b9153cc5e23">ac7f4bd</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-tests-with-phpunit-3-6-5-in-strict-mode">
<h3>[BUGFIX] Fix unit tests with PHPUnit 3.6.5 in strict mode</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32738">#32738</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=38270b0d017279ee6d03441e00f740b18160a709">38270b0</a></li>
</ul>
</div>
<div class="section" id="task-move-translations-folder-up-one-level">
<h3>[TASK] Move Translations folder up one level</h3>
<p>This moves the folder for translations into Resources/Private and
renames the remaining Resources/Private/Locale folder to I18n along
the way.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32735">#32735</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6da0e03701a719b3830ef3702f511fe96284a26f">6da0e03</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-uribuilder-with-subrequests">
<h3>[BUGFIX] Fix UriBuilder with subrequests</h3>
<p>This change fixes the argument handling of the UriBuilder for nested
subrequests. The namespaces of all parent requests get added
recursively.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30536">#30536</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ef5441837625f4d85ada118b60b2448f8cfa4145">ef54418</a></li>
</ul>
</div>
<div class="section" id="task-enhance-help-texts-and-parameter-names-for-doctrine-commands">
<h3>[TASK] Enhance help texts and parameter names for Doctrine commands</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32729">#32729</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=68d7cf650364b32f17f0af7178147aa5ed1d4ac0">68d7cf6</a></li>
</ul>
</div>
<div class="section" id="feature-command-to-mark-all-migrations-as-executed">
<h3>[FEATURE] Command to mark all migrations as executed</h3>
<dl class="docutils">
<dt>It is now possible to mark all migrations as (not) executed with</dt>
<dd>./flow3 doctrine:migrationversion all &#8211;delete
./flow3 doctrine:migrationversion all &#8211;add</dd>
</dl>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32631">#32631</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f53be7acc8707652a6d76a8dc302601ffd35d15c">f53be7a</a></li>
</ul>
</div>
<div class="section" id="bugfix-unit-tests-remove-their-temporary-files">
<h3>[BUGFIX] Unit tests remove their temporary files</h3>
<p>Some unit tests create many temporary files outside vfs://
that are now removed after running the test.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32723">#32723</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=78a7482ac2927fc3898e25bf6edf011da4255240">78a7482</a></li>
</ul>
</div>
<div class="section" id="bugfix-doctrine-postload-calls-di-and-aop-initialization-explicitly">
<h3>[BUGFIX] <a class="reference external" href="flow/references/the-definitive-guide/partv/changelogs/mailto:doctrine&.html#37;&#52;&#48;PostLoad">Doctrine<span>&#64;</span>PostLoad</a> calls DI and AOP initialization explicitly.</h3>
<p>When a Doctrine lazy loading proxy for an object is
created for some specific purpose (e.g. when initializing
session objects relating to an entity) but filled afterwards
&#8220;on the fly&#8221; if this object is part of a wide range &#8220;findBy&#8221;
call through some query, Doctrine initializes the lazy
loading proxy but does not call __wakeup and therefore not initialize AOP and DI.
We work around this issue, by initializing those objects
with a Doctrine PostLoad hook explicitly.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30467">#30467</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3b704952dfd3b26967d93caa621a8d9687a71185">3b70495</a></li>
</ul>
</div>
<div class="section" id="feature-support-multiple-password-hashing-strategies">
<h3>[FEATURE] Support multiple password hashing strategies</h3>
<p>Add configurable password hashing strategies to the HashService.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31679">#31679</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c3c9dfcc317604077c5a7c313f8ca9f3dccf7681">c3c9dfc</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-emptydirectoryrecursively-ignore-and">
<h3>[BUGFIX] Make emptyDirectoryRecursively() ignore . and ..</h3>
<p>The check for this breaks when the iterator returns . and .., they are
then handled like files, which cannot work.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32725">#32725</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=71ee8671a3ae9857e450b91d625de0af1cb30214">71ee867</a></li>
</ul>
</div>
<div class="section" id="feature-add-createresourcefromcontent-to-resourcemanager">
<h3>[FEATURE] Add createResourceFromContent to ResourceManager</h3>
<p>This enables the ResourceManager to put files into the persistent
resource storage out of a given content string.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29572">#29572</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7f3cb076e07ba30b774a1b5e18dd59e9822b0401">7f3cb07</a></li>
</ul>
</div>
<div class="section" id="bugfix-functional-tests-die-with-fatal-error">
<h3>[BUGFIX] Functional tests die with fatal error</h3>
<p>The breaking tests lacked parent::setUp() in their own setup method.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32724">#32724</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5e46fbe5e10515f720327b550d6f0fca77d9be8d">5e46fbe</a></li>
</ul>
</div>
<div class="section" id="bugfix-wire-file-monitor-to-doctrine-proxy-invalidation">
<h3>[BUGFIX] Wire file monitor to doctrine proxy invalidation</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32719">#32719</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e64b8450224989d5515dfcba014e11ecf238e331">e64b845</a></li>
</ul>
</div>
<div class="section" id="bugfix-the-declaring-class-for-an-advice-is-the-interface-for-introductions">
<h3>[BUGFIX] The declaring class for an advice is the interface for introductions</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32691">#32691</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=40a68449476d258448a093a9ae087f3979b29194">40a6844</a></li>
</ul>
</div>
<div class="section" id="bugfix-files-is-link-returns-true-for-vfs-paths-on-windows">
<h3>[BUGFIX] Files::is_link() returns TRUE for vfs paths on Windows</h3>
<p>This adds a check to \TYPO3\FLOW3\Utility\Files::is_link() that
prevents the method from returning TRUE for virtual paths
(e.g. streamwrapper like &#8220;vfs://&#8221;).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32697">#32697</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fdd78845379a1e9b76a1519e4e363a01edbcba4a">fdd7884</a></li>
</ul>
</div>
<div class="section" id="bugfix-update-package-states-only-when-needed">
<h3>[BUGFIX] Update package states only when needed</h3>
<p>While scanning of available packages will still happen on every request
in non-production contexts, the package state will only be saved if
there has actually been a change.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32552">#32552</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8634aaec568b3e4f58d24b5c2f7137260b9e682f">8634aae</a></li>
</ul>
</div>
<div class="section" id="bugfix-change-code-in-emptydirectoryrecursively">
<h3>[BUGFIX] Change code in emptyDirectoryRecursively()</h3>
<p>This change reverts Iadcfe9b6d143e1fa856a3ce93f51888a18bb5e35 which
reintruduced the bug explained in #32550. It fixes the issue at hand
by simplifying the code a bit.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32550">#32550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f7cc65f5726f9eae5431a5bf452c2cf74c280527">f7cc65f</a></li>
</ul>
</div>
<div class="section" id="bugfix-logout-doesn-t-work-anymore">
<h3>[BUGFIX] Logout doesn&#8217;t work anymore</h3>
<p>Since eab9bf9 calling AuthenticationProviderManager::logout()
without initializing the Security Context first, returns without
actually destroying the authentication cookie.
This change fixes this by introducing a new convenience method
isAuthenticated() to the AuthentcationManagerInterface allowing the
AuthenticationProviderManager to check whether a user is
authenticated before trying to fetch the session.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32285">#32285</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9cab55e0fdf701fe0bdf857a58c7f9e79d9554d6">9cab55e</a></li>
</ul>
</div>
<div class="section" id="bugfix-command-improve-explanations-of-doctrine-migrationgenerate">
<h3>[BUGFIX] (Command): Improve explanations of doctrine:migrationgenerate</h3>
<p>Instead of:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Generated</span> <span class="k">new</span> <span class="nx">migration</span> <span class="k">class</span> <span class="nc">to</span> <span class="o">...</span>
</pre></div>
</div>
<p>the command output now reads like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Generated</span> <span class="k">new</span> <span class="nx">migration</span> <span class="nx">class</span><span class="o">!</span>

<span class="nx">Next</span> <span class="nx">Steps</span><span class="o">:</span>
<span class="o">-</span> <span class="nx">Move</span> <span class="o">...</span> <span class="nx">to</span> <span class="nx">YourPackage</span><span class="o">/</span><span class="nx">Migrations</span><span class="o">/</span><span class="nx">Mysql</span><span class="o">/</span>
<span class="o">-</span> <span class="nx">Review</span> <span class="k">and</span> <span class="nx">adjust</span> <span class="nx">the</span> <span class="nx">generated</span> <span class="nx">migration</span><span class="o">.</span>
<span class="o">-</span> <span class="p">(</span><span class="nx">optional</span><span class="p">)</span> <span class="nx">execute</span> <span class="nx">the</span> <span class="nx">migration</span> <span class="nx">using</span> <span class="o">./</span><span class="nx">flow3</span>
  <span class="nx">doctrine</span><span class="o">:</span><span class="nx">migrate</span>
</pre></div>
</div>
<p>This is much more understandable, and less error-prone, especially to new users.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32663">#32663</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f0d37738c2f0ddfbb709a54cae8633ba19a6ea0a">f0d3773</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-spelling-error-in-account-repository">
<h3>[BUGFIX] Correct spelling error in account repository</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=577e158025ec1d16f77809c50082a60b59f3af16">577e158</a></li>
</ul>
</div>
<div class="section" id="feature-add-doctrine-metadata-dumping-feature">
<h3>[FEATURE] Add doctrine metadata dumping feature</h3>
<p>This is purely a debugging aid, neither smart nor pretty: If you
give the &#8211;dump-mapping-data option to docrine:entitystatus the
collected mapping data will be dumped to the console.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2f83c8e18b34f2cf756b0c2be16952fe1a4f23d0">2f83c8e</a></li>
</ul>
</div>
<div class="section" id="feature-optimized-reflection-service">
<h3>[FEATURE] Optimized Reflection Service</h3>
<p>A new Reflection Service which specifically supports development and
production scenarios. While the development version is tailored to
flexibility and partial flushing, the production variant works with
frozen caches and loads per-class information only on demand.</p>
<p>Memory consumption in Production context will be notably lower and also
the overall performance is better.</p>
<p>This change set updates but also removes several unit tests. Those
removed should be replaced by a more meaningful and better maintainable
functional test.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32531">#32531</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32530">#32530</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=97af40ea290fd29a875f67bf641399d32b75d0b0">97af40e</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-flush-the-doctrine-orm-if-it-is-open">
<h3>[BUGFIX] Only flush() the Doctrine ORM if it is open</h3>
<p>In some cases it can happen, that the EntityManager is closed at the end
of a request This can be a valid situation (see #30933 for more).</p>
<p>This change makes persistAll() check if the EntityManager is open
before calling flush() on it.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30934">#30934</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f8dd931115eaa67d707171ed34d8f8fb5bc845ce">f8dd931</a></li>
</ul>
</div>
<div class="section" id="bugfix-reorder-code-in-emptydirectoryrecursively">
<h3>[BUGFIX] Reorder code in emptyDirectoryRecursively()</h3>
<p>The change in Iad2e358ec8a94fe91dd27eda5737f075f277f2dc did break one
test, after all. This fixes it for me, I hope it works on Windows.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32550">#32550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a58728dd33fc90d4afa79ebbbcabf85ec793f97b">a58728d</a></li>
</ul>
</div>
<div class="section" id="bugfix-files-emptydirectoryrecursively-affects-targets-of-symlinks">
<h3>[BUGFIX] Files::emptyDirectoryRecursively affects targets of symlinks</h3>
<p>\TYPO3\FLOW3\Utility\Files::removeDirectoryRecursively() fails to
properly unlink directory symlinks on Windows.</p>
<p>Thus \TYPO3\FLOW3\Utility\Files::emptyDirectoryRecursively()
iterates through the target files of a symlinked folder and
removes them!</p>
<p>This change fixes this by introducing a custom unlink() function
that can remove a symlink regardless of it&#8217;s type (file/directory).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32550">#32550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0a9a47bb85fb874be64728f3a47b91896a73ca4a">0a9a47b</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-eol-characters-break-parsing-of-doc-comments">
<h3>[BUGFIX] &#8220;Wrong&#8221; EOL characters break parsing of doc comments</h3>
<p>When \r\n was used as EOL instead of just \n the parsed doc comments
would retain the \r which would cause confusing exceptions in some
cases later on.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31363">#31363</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32466">#32466</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31087">#31087</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=40af60c9d7013757b4f980daf31b038c494e6f6a">40af60c</a></li>
</ul>
</div>
<div class="section" id="bugfix-getobjectbyidentifier-does-not-pass-objecttype-to-backend">
<h3>[BUGFIX] getObjectByIdentifier() does not pass $objectType to backend</h3>
<p>The parameter is optional and historically unused in Generic
persistence, but still it should be passed along.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32370">#32370</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ae72b5cb370889b894e99a9282e9d48aac6202eb">ae72b5c</a></li>
</ul>
</div>
<div class="section" id="task-removed-unused-configuration-types-package-packagestates">
<h3>[TASK] Removed unused configuration types &#8220;Package&#8221;, &#8220;PackageStates&#8221;</h3>
<p>The patch removes unused parts from the configurationManager:</p>
<ul class="simple">
<li>Removed unused configuration types &#8220;Package&#8221; and &#8220;PackageStates&#8221;</li>
<li>Removed methods &#8220;setConfiguration&#8221; and &#8220;saveConfiguration&#8221;. The
methods were only intended to work with packageStates which is unused.</li>
<li>Adjusted unit tests of configurationManager</li>
</ul>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32591">#32591</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d9f9b194b2e20318ffc8721ee9b228b9be48728b">d9f9b19</a></li>
</ul>
</div>
<div class="section" id="task-make-flow3-package-protected">
<h3>[TASK] Make FLOW3 package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=150b476a15df28a92b9d287ce414671350fbb167">150b476</a></li>
</ul>
</div>
<div class="section" id="feature-making-property-mapping-exception-more-verbose">
<h3>[FEATURE] Making property mapping exception more verbose</h3>
<p>When an exception occurs during property mapping it&#8217;s hard for the
developer to track what a specific type the intended value at
runtime is.</p>
<p>This change adds the object&#8217;s class name to the exception, if it is
an object; otherwise the scalar type name is added.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32587">#32587</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0073e184580db3b180ae60e12748179907fcf292">0073e18</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-tests-failures-with-new-class-loader">
<h3>[BUGFIX] Fix unit tests failures with new class loader</h3>
<p>Two unit tests failed with the new class loader[1]. One because there
was a check for ignored classes, but it came too late. The other because
for the shortcut link creation the package path is now needed right
after activation of a package.</p>
<p>[1] <a class="reference external" href="https://review.typo3.org/7164">https://review.typo3.org/7164</a></p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32519">#32519</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a90afba2352254259f0c861ea6934d01527113fa">a90afba</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-functional-tests-with-new-class-loader">
<h3>[BUGFIX]&nbsp;Fix functional tests with new class loader</h3>
<p>This change moves the FunctionalTestRequestHandler to the
Tests\Functional namespace and registers functional test classes
again.</p>
<p>Needs <a class="reference external" href="https://review.typo3.org/7258">https://review.typo3.org/7258</a></p>
<p>Related to <a class="reference external" href="https://review.typo3.org/7164">https://review.typo3.org/7164</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=77716167834488c638ce8a817c041676cb8b03d8">7771616</a></li>
</ul>
</div>
<div class="section" id="task-remove-execute-bit-on-some-source-files">
<h3>[TASK] Remove execute bit on some source files</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32507">#32507</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f7848bf6159911d4b17f672827ce5b1cb8898fe3">f7848bf</a></li>
</ul>
</div>
<div class="section" id="task-improved-class-loader">
<h3>[TASK] Improved Class Loader</h3>
<p>This patch introduces an improved loading strategy based on symbolic
links leading directly to the Classes directory of each package.
The symlinks reside in a &#8221;.Shortcuts&#8221; directory below the general
Packages folder and are created whenever the PackageStates.php file
is saved by the Package Manager.</p>
<p>This patch also contains minor speed improvements in the Proxy Compiler
and the Object Manager (getCaseSensitiveObjectName).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=70c98b680befcbbd5f493479cd4a5537324fcad0">70c98b6</a></li>
</ul>
</div>
<div class="section" id="bugfix-acl-file-permissions-do-not-work-correctly">
<h3>[BUGFIX] ACL file permissions do not work correctly</h3>
<p>When setting file permissions the setting of ACL would succeed but
the set permissions did not work as expected. This changes fixes that.</p>
<p>In addition it makes the calls in a chain so that the check for the
return value of the chmod commands is more robust. The directories
that are created are now always owned by the command line user.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32499">#32499</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0d40353066e08a231388cd6127a0d7859809dbbe">0d40353</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-emptydirectoryrecursively-and-hex2bin">
<h3>[TASK] Clean up emptyDirectoryRecursively() and hex2bin()</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32503">#32503</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c698d90e46525616db9739567d3bc5bb9d76ec39">c698d90</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-mockwebrequesthandler-use-functionaltestrequesthandler">
<h3>[BUGFIX] Remove MockWebRequestHandler, use FunctionalTestRequestHandler</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32424">#32424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=19f6c486fe88260fa78c27a75e5d4fddd95ca46a">19f6c48</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-check-for-stripped-comments">
<h3>[BUGFIX] Fix check for stripped comments</h3>
<p>The bootstrap checks for the presence of doc comments, to avoid
problems with some bytecode caches that strip comments.</p>
<p>That check did not work correctly (FALSE is returned but the check
expects an empty string). In case an error is seen, the exception
cannot be thrown as well (no classloader available at that point).
That exception issue has been been fixed for another check as well.</p>
<p>On top of this the check for magic_quotes_gpc has been adjusted a
tiny bit.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32049">#32049</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=acf8f34c16ff294ef2992fbecc0fa604c120b2e3">acf8f34</a></li>
</ul>
</div>
<div class="section" id="bugfix-trigger-allobjectspersisted-after-every-functional-test">
<h3>[BUGFIX] Trigger allObjectsPersisted after every functional test</h3>
<p>The tearDown() method of the base functional test case clears the
persistence manager&#8217;s state so it is ready for the next test, avoiding
side effects.</p>
<p>However, certain repositories (such as the TYPO3CR NodeRepository) rely
on the signal &#8220;allObjectsPersisted&#8221; which triggers their internal
cleanup function. If this signal is not, sent, the next test will still
see added objects stored directly in the repository.</p>
<p>The solution is to call persistAll() in the tearDown() method, even if
the just executed test doesn&#8217;t require it.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32346">#32346</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=46646d8153185d899626107c1b55e7db30f8fcf2">46646d8</a></li>
</ul>
</div>
<div class="section" id="task-remove-echo-statement-in-functional-test-request-handler">
<h3>[TASK] Remove echo statement in functional test request handler</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32421">#32421</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fc5e5819da1dd4f0b3ee7ed7de35db43a7c3be68">fc5e581</a></li>
</ul>
</div>
<div class="section" id="feature-freezable-cache-backend">
<h3>[FEATURE] Freezable Cache Backend</h3>
<p>This introduces a new type of cache backends which supports freezing.
In a frozen state no modifications are allowed and thus enables the
cache implementation to optimize its tasks for speed.</p>
<p>The FileBackend was extended to support freezing and is now used for
the class cache in Production context. Measured on the blog example,
this change improved number of transactions per second by 29 %.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32398">#32398</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c94e6f1747e607a3fc8e2da2cecbfc15ebf443b8">c94e6f1</a></li>
</ul>
</div>
<div class="section" id="feature-mvc-introduce-some-more-signals-for-performance-measurements">
<h3>[FEATURE] (MVC): Introduce some more Signals for performance measurements</h3>
<p>This change set introduces signals which can be used to measure the
controller and Request Builder runtime.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=dc43c2609f2bced6d0cac4309b9a1393a0343774">dc43c26</a></li>
</ul>
</div>
<div class="section" id="feature-modular-and-configurable-bootstrap">
<h3>[FEATURE][!!!] Modular and configurable bootstrap</h3>
<p>This extracts all specific initialization methods from the bootstrap
into a &#8220;Scripts&#8221; class and instead of hard-wiring each initialization
step, introduces a loose, configurable coupling by means of a sequence
and steps. The responsibility for the actual boot sequence now lies at
the request handler taking care of the request.</p>
<p>Request handlers must now be explicitly registered in the package
class. The interface to be implemented was moved to the Core namespace.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32333">#32333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ae111dd0a0f15e548989d45c0186f4e4ec30bbf9">ae111dd</a></li>
</ul>
</div>
<div class="section" id="task-optimized-package-manager-and-configuration-manager-initialization">
<h3>[TASK] Optimized package manager and configuration manager initialization</h3>
<p>This patch introduces a somewhat lazier initialization for the
Configuration Manager&#8217;s cache and the scanning of available packages
and loading of package state information.</p>
<p>NOTE: On the first hit, the modified Package Manager will introduce
a new format for the PackageStates.php. From now on the configuration
in that file also contains a version number which allows for automatic
migration of that file in the future.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32333">#32333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a7844b0ddb9b301dd7ea5bed91aac417fe2015a4">a7844b0</a></li>
</ul>
</div>
<div class="section" id="task-configuration-manager-throws-exception-on-permission-problems">
<h3>[TASK] Configuration Manager throws exception on permission problems</h3>
<p>If the compiled configuration could not be written, the configuration
manager now throws an exception instead of silently ignoring it.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c27a965a789d5b77ce89d9cd02839da8ca17f65d">c27a965</a></li>
</ul>
</div>
<div class="section" id="feature-implement-base-uri-setting">
<h3>[FEATURE] Implement base URI setting</h3>
<p>This change adds a configurable base URI to FLOW3. The environment will
use the setting instead of trying to guess the base URI from the current
request if it is configured.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32084">#32084</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1cfb139a0dc840bfcfe78cb99966a45614fade67">1cfb139</a></li>
</ul>
</div>
<div class="section" id="feature-make-target-in-xliff-optional-if-source-equals-target-language">
<h3>[FEATURE] Make target in XLIFF optional if source equals target language</h3>
<p>This allows for less duplication when using XLIFF as a message catalog
when the target language is the file&#8217;s source language.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32329">#32329</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=957be681c0e9391dce131ccd001aa3998c2e583f">957be68</a></li>
</ul>
</div>
<div class="section" id="task-move-abstractxmlparser-class-up-one-level">
<h3>[TASK] Move AbstractXmlParser class up one level</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11034">#11034</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8de58fef175bd2a321e5ae4c64abe47c86b44d77">8de58fe</a></li>
</ul>
</div>
<div class="section" id="task-remove-abstractxmlmodel-from-i18n">
<h3>[TASK] Remove AbstractXmlModel from I18n</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/11034">#11034</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=acc2f9f5b88e74627bfc61ac03a4ea62d361f09c">acc2f9f</a></li>
</ul>
</div>
<div class="section" id="task-functional-tests-for-i18n-translator-and-formatresolver">
<h3>[TASK] Functional tests for i18n Translator and FormatResolver</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11955">#11955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c804bf2553993f527c422125dc9cf1dca2685c84">c804bf2</a></li>
</ul>
</div>
<div class="section" id="feature-add-xliff-files-with-common-labels-for-translation">
<h3>[FEATURE] Add XLIFF files with common labels for translation</h3>
<p>This adds XLIFF files with a few basic labels and a german translation.
This shows the principle and can be used as a base for a generic
label catalog to use in all FLOW3 applications.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11955">#11955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3ddaf8ee513249b8f6665e301373386762399f43">3ddaf8e</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-date-formatting-in-translations-work">
<h3>[BUGFIX] Make date formatting in translations work</h3>
<p>When using date formatting in translations the system would
break really bad.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31974">#31974</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ff62bbd1e2352e4e404596ea9e7f1c5bcd611860">ff62bbd</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-handling-of-plural-forms">
<h3>[BUGFIX] Fix handling of plural forms</h3>
<p>Internal handling of plurals forms was broken.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31975">#31975</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=30081c31062119ea301fefe3b0a5ba56cb355efe">30081c3</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-some-smaller-things-in-i18n">
<h3>[TASK] Clean up some smaller things in I18n</h3>
<p>Fixes a method name not renamed in an earlier refactoring, makes some
&#64;return annotations fully qualified, simplifies some unit tests, ...</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11955">#11955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c40c9d32db0543a2b49aa70c49393fa71ebd9670">c40c9d3</a></li>
</ul>
</div>
<div class="section" id="feature-allow-translation-files-xliff-on-a-per-package-basis">
<h3>[FEATURE] Allow translation files (XLIFF) on a per package basis</h3>
<p>Fixes issue in which XliffTranslationProvider prefaces a hardcoded
base path of resource://FLOW3/Private/Locale/Translations before
the sourceName argument passed to getTranslationByOriginalLabel and
getTranslationById methods.</p>
<p>This fix modifies the translateById and translateByOriginalLabel
methods in the TYPO3\FLOW3\I18n\Translator to use packageKey
as an argument. The XliffTranslationProvider will construct a
base path of &#8220;&lt;packageName&gt;/Private/Locale/Translations&#8221;. This base
path is prepended to the value of the sourceName argument to create
the translation file resource string.</p>
<p>Unit tests have been adjusted as well to accommodate these changes
to the XliffTranslationProvider and Translator classes. The
TranslationProviderInterface has been adjusted as well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/14037">#14037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f5afd4fc082c67072a734a0d3b1e7416050419cd">f5afd4f</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-boolean-default-values-in-yaml-config">
<h3>[BUGFIX] Fix boolean default values in YAML config</h3>
<p>The previously used YAML parser accepted &#8216;n&#8217; and &#8216;y&#8217; as legitimate
boolean values resulting in FALSE and TRUE respectively.</p>
<p>The Symfony parser does not recognize these values as boolean
but expects &#8216;no&#8217; and &#8216;yes&#8217; instead.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8784c2984f587e34d6d917ae37c261b1d2c137a1">8784c29</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-validation-upon-persistence-work-again">
<h3>[BUGFIX] Make validation upon persistence work again</h3>
<p>The validation upon persistence was dropped (more or less by accident)
when we switched to Doctrine. This change brings it back.</p>
<p>In addition it fixes the exception message produced in the generic
AbstractBackend when validation fails.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31502">#31502</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b809a3951f44558eb44989008ae8bab528ca5852">b809a39</a></li>
</ul>
</div>
<div class="section" id="task-move-objectvalidationfailedexception-out-of-generic">
<h3>[TASK] Move ObjectValidationFailedException out of Generic</h3>
<p>The exception is not specific to generic persistence, thus it should
not be inside the Generic namespace.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31502">#31502</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c87cc0079ce84e60f364e89ec33c34630b5f1643">c87cc00</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-tests-failing-with-phpunit-3-6">
<h3>[BUGFIX] Fix unit tests failing with PHPUnit 3.6</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32015">#32015</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c1b8ce9d222ccbfa6eed7c31f2342165714dfda1">c1b8ce9</a></li>
</ul>
</div>
<div class="section" id="feature-add-routing-show-routing-route-and-routing-resolve-commands">
<h3>[FEATURE] Add routing:show, routing:route and routing:resolve commands</h3>
<p>Adds 3 CLI commands:
- routing:show show informations for a single route
- routing:getPath show the generated route-path for a given package, controller and action
- routing:routePath take a route-path and show package, controller and action</p>
<p>The patch alters the routing:list command to show the index number for the routes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31909">#31909</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=270dced5220bd9922b45f3cbb9cff07b98eafcb7">270dced</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-authenticationcontroller-to-flashmessages">
<h3>[BUGFIX] Adjust AuthenticationController to FlashMessages</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31931">#31931</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4883a0956ae15ef7cc252009c2bad885c89dffda">4883a09</a></li>
</ul>
</div>
<div class="section" id="task-use-curly-braces-instead-of-hashes-in-notfoundview">
<h3>[TASK] Use curly braces instead of hashes in NotFoundView</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31957">#31957</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=56899fc7b26e65da2da7edf3b5e08dc0b2952add">56899fc</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-link-to-issue-tracker">
<h3>[BUGFIX] Fix link to issue tracker</h3>
<p>Adapts the project link after a renaming of the FLOW3 package in forge.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31781">#31781</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=96b9db36210428cca6930a8a855e591d0afac65b">96b9db3</a></li>
</ul>
</div>
<div class="section" id="task-escape-phpbinarypathandfilename-in-command-execution">
<h3>[TASK] Escape phpBinaryPathAndFilename in Command execution</h3>
<p>Currently the bootstrap fails to properly escape the php path
when dispatching sub requests in command execution.
This leads to exceptions when the path contains spaces or other
special characters.
This is fixed by putting the command in quotes and replacing
backslashes.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30040">#30040</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d87ef93a58d7160110620ed14fd567c91a658301">d87ef93</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-usage-of-query-parameter">
<h3>[BUGFIX] Allow usage of query parameter &#8220;_&#8221;</h3>
<p>Assert that the length of $argumentName is &gt;= 2 before accessing it at
position 1</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31773">#31773</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=69f35424dca9569054e5dff6c968e1e2c7546b69">69f3542</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-persistence-doctrine-query-serialization-cycle">
<h3>[BUGFIX] Fix Persistence\Doctrine\Query serialization cycle</h3>
<p>If you assign a QueryResult to a ViewHelper and later on use
$result-&gt;getQuery(), this query is not executable any more, if
you used complex &#8220;where&#8221;-clauses involving joins, as these
joins are not reapplied to the object during the __wakeup()
call.</p>
<p>This patch ensures the query being callable like the
original one after __wakeup() by saving all joins in array
and reapplies them after wakeup. A functional test is
included.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31696">#31696</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c131afab8cf210afc29e797b4029530e2034369e">c131afa</a></li>
</ul>
</div>
<div class="section" id="bugfix-cli-cli-arguments-should-be-usable-with-equals-sign">
<h3>[BUGFIX] (CLI): CLI arguments should be usable with equals sign (=)</h3>
<p>With this fix the last argument may use the equals sign (=)
again to separate between argument name and value.</p>
<p>Besides writing an additional test case which reproduces the issue,
the other test cases have been strengthened by replacing assertEquals()
by assertSame().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30493">#30493</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=578b580da127c3a907cd3dbc81e1e7b2063e2ce4">578b580</a></li>
</ul>
</div>
<div class="section" id="bugfix-symlink-related-unit-tests-fail-on-some-windows-systems">
<h3>[BUGFIX] Symlink related Unit Tests fail on some Windows systems</h3>
<p>This replaces sys_get_temp_dir() by tempnam() in unit tests that
use symlinks to avoid them from failing on some Windows
environments.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31070">#31070</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=60b45d7d1d9ea6e87dc4fc690183f281a50c286c">60b45d7</a></li>
</ul>
</div>
<div class="section" id="feature-security-hmac-convenience-methods-in-hashservice">
<h3>[FEATURE] (Security): HMAC Convenience methods in HashService</h3>
<p>This adds the methods appendHmac() and validateAndStripHmac()
to the Cryptography\HashService allowing users to deal with HMAC
validation more conveniently.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31698">#31698</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=061beb04f08b4ab8768b4a0500251ce013dbcab7">061beb0</a></li>
</ul>
</div>
<div class="section" id="feature-add-bcrypt-hashing-strategy">
<h3>[FEATURE] Add BCrypt hashing strategy</h3>
<p>This adds a wrapper for the BCrypt hashing algorithm and
makes it the default password hashing strategy.
Also provides a fallback when using hashes generated by PBKDF2.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31678">#31678</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=23fec41b62b15601eaa3053e0152238fb5f2f91a">23fec41</a></li>
</ul>
</div>
<div class="section" id="bugfix-also-remove-new-objects-on-clear-state-of-persistence-manager">
<h3>[BUGFIX] Also remove new objects on clear state of persistence manager</h3>
<p>See: #29578</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3a6f7940c289c92fdabeea9632cab03df055b72b">3a6f794</a></li>
</ul>
</div>
<div class="section" id="feature-support-mapping-to-specific-subtypes-by-property-type">
<h3>[FEATURE] Support mapping to specific subtypes by property (__type)</h3>
<p>When type hierarchies are used for modeling, it&#8217;s sometimes necessary
to use a special subclass when creating new entities (e.g. from user
selection). This change enables the use of a special (request)
property &#8220;__type&#8221; in the source array of a type converter. For security
reasons, this feature must be configured explicitly through a mapping
configuration.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30300">#30300</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=41c21ba3b019c4f6e31760235cff96950c750a01">41c21ba</a></li>
</ul>
</div>
<div class="section" id="task-fix-a-var-annotation-to-be-fully-qualified">
<h3>[TASK] Fix a &#64;var annotation to be fully qualified</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3b01bd2576ac85da6777458b75fef7358137347c">3b01bd2</a></li>
</ul>
</div>
<div class="section" id="feature-persistence-manager-knows-about-unmanaged-new-objects">
<h3>[FEATURE] Persistence Manager knows about unmanaged, new objects</h3>
<p>This patch enhances the persistence aspect and the related code in the
Persistence Manager so that getObjectByIdentifier() also returns those
objects which have been created but not yet added to any repository.</p>
<p>That allows, among other things, to render URIs pointing to not yet
persisted objects which have been carried around in a session container.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29578">#29578</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=10a0ad65e9e6697f9f14fd9823e2c44fa15e36ae">10a0ad6</a></li>
</ul>
</div>
<div class="section" id="task-add-clearstate-to-persistencemanagerinterface">
<h3>[TASK] Add clearState() to PersistenceManagerInterface</h3>
<p>Also implements it for both PersistenceManager implementations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d2d33bcd2254ceba4c809f222da8e881a4aae7ba">d2d33bc</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-of-the-abstract-persistence-manager">
<h3>[TASK] Clean up of the Abstract Persistence Manager</h3>
<p>Removed unused dependency to Reflection Service and move the dependency
to System Logger into the concrete Persistence Manager.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=53403be6df91922c9f6fe0ea1b72faf2febf2941">53403be</a></li>
</ul>
</div>
<div class="section" id="task-unify-usage-of-random-byte-generator">
<h3>[TASK] Unify usage of random byte generator</h3>
<p>We already use the randomizer library, now all calls to it are
wrapped in Utilities\Algorithms.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/25714">#25714</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=59b49197913a31a3dc917a96bc802259c99ec916">59b4919</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-argument-list-before-initializing-action-arguments">
<h3>[BUGFIX]&nbsp;Reset argument list before initializing action arguments</h3>
<p>This change fixes a problem with functional tests of controller
actions. It&#8217;s also needed to reset the state of the controller when
multiple requests are dispatched.</p>
<p>It also refactors a unit test to use the actual arguments class instead
of a mock which is more expressive.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31134">#31134</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a320135465d586b2e4cd50c890709f4d2e7e64bf">a320135</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-correct-method-to-get-cli-arguments-for-dql-command">
<h3>[BUGFIX] Use correct method to get CLI arguments for DQL command</h3>
<p>Call TYPO3\FLOW3\MVC\CLI\Request::getExceedingArguments() instead of the
removed TYPO3\FLOW3\MVC\CLI\Request::getCommandLineArguments()</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31474">#31474</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=47b8f4a8fd7769df592dd1515901670691b416e5">47b8f4a</a></li>
</ul>
</div>
<div class="section" id="feature-aop-make-joinpoint-methodarguments-settable">
<h3>[FEATURE] AOP: Make JoinPoint methodArguments settable</h3>
<p>As at least BeforeAdvices and AroundAdvices can be
used to manipulate the behavior of the original method,
the advice method should be able to change the
original method&#8217;s arguments.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29514">#29514</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=66b809564eab282ed6cf791bbdcd5ed81727816a">66b8095</a></li>
</ul>
</div>
<div class="section" id="bugfix-enhance-entity-classname-detection-in-repository-constructor">
<h3>[BUGFIX] Enhance entity classname detection in repository constructor</h3>
<p>Fix bug where all occurrences of the word &#8220;Repository&#8221; were stripped
out during the automatic retrieval of the entity classname. This changes
the behavior in the way, that only removes the last occurrence.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/30312">#30312</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2f5d0cbd5a9f225ddd813eee30e5b091390d3170">2f5d0cb</a></li>
</ul>
</div>
<div class="section" id="task-display-line-number-of-exception-in-command-line-mode">
<h3>[TASK] Display line number of exception in command line mode</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31269">#31269</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=6ed7ecd2771ed419939549953b418f176929b0b2">6ed7ecd</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-annotations-in-actioncontroller-for-ignorevalidation">
<h3>[BUGFIX] Use annotations in ActionController for IgnoreValidation</h3>
<p>Use annotations for the action method instead of method tags values
which return wrong results if an explicit argumentName is given
to the annotation. See the functional test that is added.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31452">#31452</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1c92bdd443bb90f881b566eee1ec5235f7d5f8c2">1c92bdd</a></li>
</ul>
</div>
<div class="section" id="task-optimized-aop-pointcut-filter-matching">
<h3>[TASK] Optimized AOP Pointcut Filter matching</h3>
<p>This change set greatly reduces compilation time for AOP proxies for
applications intensively using AOP and security policies. It is a quick
fix rather than the ultimate solution.</p>
<p>Class name and method name matching have been simplified, matching
against annotations does not support regular expressions any more
(wasn&#8217;t supported officially anyway) and the order of a few point cut
expressions has been optimized.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/9568">#9568</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9c3a9dca08939c76be49e487d81b284b399da9b5">9c3a9dc</a></li>
</ul>
</div>
<div class="section" id="bugfix-logout-must-not-rely-on-a-session">
<h3>[BUGFIX] Logout must not rely on a session</h3>
<p>AuthenticationProvider::logout() currently throws an Exception
if no session has been initialized yet.
This change fixes this by checking whether the Security Context
has been initialized.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31311">#31311</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=eab9bf953180dcff96f5ae33666cafa0bf587a7a">eab9bf9</a></li>
</ul>
</div>
<div class="section" id="bugfix-proxy-class-builder-should-retain-original-annotations">
<h3>[BUGFIX]&nbsp;Proxy class builder should retain original annotations</h3>
<p>Original metadata information on proxied methods should be retained
to allow for code inspection and usage of metadata for dynamic code
generation.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31270">#31270</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ecb650c82d6f10a715b2a27e562315ba80d6417e">ecb650c</a></li>
</ul>
</div>
<div class="section" id="feature-make-path-for-migrate-annotations-configurable">
<h3>[FEATURE] Make path for migrate-annotations configurable</h3>
<p>Optional parameter &#8211;packages-path to configure an individual absolute
path to the folder with the packages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31160">#31160</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1a24f58215f0fe8a0e2f29ee53d4963c4c491451">1a24f58</a></li>
</ul>
</div>
<div class="section" id="revert-feature-make-path-for-migrate-annotations-configurable">
<h3>Revert &#8220;[FEATURE] Make path for migrate-annotations configurable&#8221;</h3>
<p>This reverts commit 985ce27723bc8cb5b2b8b4f5269ffe4b4aac45ac</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=90bba5c1ad4b90d9d4335401e36b342f543155b5">90bba5c</a></li>
</ul>
</div>
<div class="section" id="id353">
<h3>[FEATURE] Make path for migrate-annotations configurable</h3>
<p>Optional parameter &#8211;packages-path to configure an individual absolute
path to the folder with the packages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31160">#31160</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=985ce27723bc8cb5b2b8b4f5269ffe4b4aac45ac">985ce27</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id355">
<h3>[!!!][FEATURE] (MVC): Whitelist-based Property Mapping Configuration</h3>
<p>See the corresponding FLOW3 change at <a class="reference external" href="https://review.typo3.org/#/c/10926/">https://review.typo3.org/#/c/10926/</a> for a
detailed explanation.</p>
<p>Furthermore, this change adds comprehensive end-to-end Functional Tests for the
Fluid and FLOW3 Form Handling</p>
<p>Note: You need the accompanying FLOW3 change for testing this feature as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36776">#36776</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=6da787569dfb5f279f16740f5305bf3a160e068c">6da7875</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-request-handling-for-ajax-widgets">
<h3>[BUGFIX] Fix request handling for Ajax widgets</h3>
<p>Requests to AJAX widgets were not handled properly
because the routing configuration was not available
to the request handler being in charge for handling
that request.</p>
<p>This patch removes the specialized WidgetRequestHandler
completely and implements the specialized handling of
AJAX widget requests through an aspect which advices
the original Router.</p>
<p>This change set also introduces functional tests which
cover the basic widget request handling executed through
the full request / response stack.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36500">#36500</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36236">#36236</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=380d683777152993c1e9b24256781653be961122">380d683</a></li>
</ul>
</div>
<div class="section" id="task-update-package-xml">
<h3>[TASK] Update Package.xml</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=d7b34b3ea49e8cb6b25b9f82f1513aa2d51850e1">d7b34b3</a></li>
</ul>
</div>
<div class="section" id="task-move-link-widget-uri-widget-widget-subfolder">
<h3>[!!!][TASK] Move link.widget &amp; uri.widget Widget subfolder</h3>
<p>This moves widget related ViewHelpers link.widget &amp; uri.widget
to the Widget subfolder (as in v4).</p>
<p>Instead of link.widget you should use widget.link, instead of
uri.widget widget.uri from now on.</p>
<p>This is not a breaking change right now as the old classes
are still there (with &#64;deprecated annotation). But if you
used one of the ViewHelpers you should adjust your code.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34231">#34231</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=b2ae19789639c72c88c5de11e9ecd5e5a939bcfb">b2ae197</a></li>
</ul>
</div>
<div class="section" id="feature-debugviewhelper-allows-output-of-type-only">
<h3>[FEATURE] DebugViewHelper allows output of type only</h3>
<p>Because sometimes var_dump is too verbose, this patch adds
a flag where only the type of the intended variable
can be output.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33493">#33493</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=fb14d2ad206d8cb94503cdf16f367e9e5aa14c0f">fb14d2a</a></li>
</ul>
</div>
<div class="section" id="feature-declare-namespaces-in-xml-tag">
<h3>[FEATURE] Declare namespaces in XML tag</h3>
<p>This makes it possible to declare Fluid namespace identifiers with
the common xmlns syntax &lt;html xmlns:foo=&#8221;http://some/unique/namespace&#8221;&gt;
That works as a replacement for xml/html based Fluid templates which
can be used instead of the {namespace foo=Bar} syntax.</p>
<p>This syntax triggers auto-completion in most IDEs if the xml
namespace is bound to a valid XSD schema!</p>
<p>Usage:</p>
<ul class="simple">
<li>Create a XSD file for your ViewHelpers by executing
./flow3 documenation:generatexsd Your\\Package\\ViewHelpers
&#8211;target-file some/directory/your.package.xsd</li>
<li>Import the XSD file in your favorite IDE and map it to the
namespace &#8220;<a class="reference external" href="http://typo3.org/ns/Your/Package/ViewHelpers">http://typo3.org/ns/Your/Package/ViewHelpers</a>&#8220;</li>
<li>Add the namespace to your Fluid template by adding the &#8220;xmlns:&#8221;
attribute to the root tag (usually &lt;xml ...&gt; or &lt;html ...&gt;).</li>
</ul>
<p>If you want to use this inside partials, you can use the &#8220;section&#8221;
argument of the render ViewHelper in order to only render the content
of the partial:</p>
<p>Partial:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">html</span> <span class="nx">xmlns</span><span class="o">:</span><span class="nx">x</span><span class="o">=</span><span class="s2">&quot;http://typo3.org/ns/Your/Package/ViewHelpers&quot;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;content&quot;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">x</span><span class="o">:</span><span class="nx">yourViewHelper</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">section</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Template:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">render</span> <span class="nx">partial</span><span class="o">=</span><span class="s2">&quot;PartialName&quot;</span> <span class="nx">section</span><span class="o">=</span><span class="s2">&quot;content&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27119">#27119</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=432ebf65baab808251f8954a12f5678f87b37550">432ebf6</a></li>
</ul>
</div>
<div class="section" id="feature-command-for-xsd-schema-generation">
<h3>[FEATURE] Command for XSD Schema generation</h3>
<p>This adds a command controller for rendering XSD schemas
for ViewHelpers.</p>
<p>Usage: ./flow3 documentation:generatexsd &#8216;Some\Namespace&#8217;</p>
<p>This also removes the no longer needed and forever broken
Controllers from the package.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/13643">#13643</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=1cde8ca124027849ffe610e0a4db479e9ab619b4">1cde8ca</a></li>
</ul>
</div>
<div class="section" id="task-adjustments-to-refactored-flow3-context">
<h3>[TASK] adjustments to refactored FLOW3 Context</h3>
<p>As the Context is now an object and not a string anymore, we adjust
our context checks appropriately.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=5435a8bd6da5d32ee1dc95fdec7fad06019168d6">5435a8b</a></li>
</ul>
</div>
<div class="section" id="task-add-code-migration-to-adjust-templates-to-fluid-1-1">
<h3>[TASK] Add code migration to adjust templates to Fluid 1.1</h3>
<p>This changes form.textbox to form.textfield in HTML files.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29389">#29389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=214c79a4470453ccfa6e0fb8dc979ad3cb85e109">214c79a</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-filename-spelling-to-changes-in-flow3">
<h3>[BUGFIX] Adjust filename spelling to changes in FLOW3</h3>
<p>Adapt the usage of fileName to filename to match FLOW3</p>
<ul class="simple">
<li>Relates: <a class="reference external" href="http://forge.typo3.org/issues/35298">#35298</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=e547570a504e745bab6490095144a01bff6e6b89">e547570</a></li>
</ul>
</div>
<div class="section" id="bugfix-fixes-doc-comment-of-form-validationresultsviewhelper">
<h3>[BUGFIX] Fixes doc comment of Form.ValidationResultsViewHelper</h3>
<p>The example in the class doc comment was outdated and is fixed with
this change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31380">#31380</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=f18764473d62d0b39b10b19cf98f680b07ee133d">f187644</a></li>
</ul>
</div>
<div class="section" id="id367">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=554de6c03a407176e8683a38dd4bfc526cab75f3">554de6c</a></li>
</ul>
</div>
<div class="section" id="bugfix-render-childnodes-in-validation-results-vh">
<h3>[BUGFIX] Render childnodes in validation results VH</h3>
<p>The adjustments to the new HTTP implementation in FLOW3
introduced a regression that prevents the child nodes of the
ValidationResults ViewHelper from being rendered if no
validation errors occurred.
This change reverts this breaking behavior and adds unit
tests for the ViewHelper.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36297">#36297</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=b136cfb5b015307fa58f21c3d95c6eff5490549f">b136cfb</a></li>
</ul>
</div>
<div class="section" id="task-adjust-a-comment-to-http-foundation">
<h3>[TASK] Adjust a comment to HTTP foundation</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=0914e9da46c731746fc71a871c363cc00be16e62">0914e9d</a></li>
</ul>
</div>
<div class="section" id="id370">
<h3>[SECURITY] Protect arguments of form __referrer with HMAC</h3>
<p>The request arguments of the referring request are
a serialized string written to one of the hidden
fields in a Fluid form. This string has to be protected
by a HMAC to protect FLOW3 from possible unserialize
attacks.</p>
<p>Note: For now there is no object known within the FLOW3
Distribution, that could be used for an unserialize
exploit!</p>
<ul class="simple">
<li>Security-Bulletin: <a class="reference external" href="http://typo3.org/teams/security/security-bulletins/flow3/FLOW3-SA-2012-001/">FLOW3-SA-2012-001</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35300">#35300</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=73901980bb1c224f50cf7f790bba3379c2373ee5">7390198</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-flow3-s-new-http-framework">
<h3>[TASK] Adjust to FLOW3&#8217;s new HTTP framework</h3>
<p>This adjusts API usage within Fluid to the refactored MVC and new HTTP
support in FLOW3 1.1.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=be4e0ec060d231ec77b773ec7098e9c99c8baabe">be4e0ec</a></li>
</ul>
</div>
<div class="section" id="id375">
<h3>[TASK] Sub package name case and location adjustments</h3>
<p>This adjusts code to use the corrected namespaces and class names in
FLOW3.</p>
<p>Also contains a few cosmetic changes.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=e7c8c12caede03207575497fab4bc4ac793cb308">e7c8c12</a></li>
</ul>
</div>
<div class="section" id="feature-make-rendersection-callable-outside-of-template-context">
<h3>[FEATURE] Make renderSection callable outside of template context</h3>
<p>This makes it possible to call $this-&gt;renderSection(&#8216;sectionName&#8217;) to
render only only a single section out of a complex template.</p>
<p>This change is needed for the refactored TypoScript rendering.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31638">#31638</a></li>
<li>Related: PHX-57</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a3cb456a474f86288c40110f6dc80c81dab5df6e">a3cb456</a></li>
</ul>
</div>
<div class="section" id="task-remove-occurences-of-removed-form-textbox-viewhelper">
<h3>[TASK] Remove occurences of removed form.textbox ViewHelper</h3>
<p>There are still some places referring to the no longer existing
Textbox form ViewHelper.
This adjusts code accordingly by replacing textbox with textfield
where applicable.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27770">#27770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=039ef098bd7742594af47c96b6447484576cc1ab">039ef09</a></li>
</ul>
</div>
<div class="section" id="task-fixes-a-wrong-return-type-annotation">
<h3>[TASK] Fixes a wrong return type annotation</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=edc73d2f2a3363319b1d5415574d2ac133c299db">edc73d2</a></li>
</ul>
</div>
<div class="section" id="feature-add-translation-support-to-selectviewhelper">
<h3>[FEATURE] Add translation support to SelectViewHelper</h3>
<p>The change adds support for translation of the options labels
produced in SelectViewHelper.</p>
<p>The view helper can be given a &#8220;translate&#8221; argument with
configuration on how to translate option labels. The array
can have the following keys:</p>
<ul class="simple">
<li>&#8220;by&#8221; defines if translation by message id or original
label is to be used (&#8220;id&#8221; or &#8220;label&#8221;)</li>
<li>&#8220;using&#8221; defines if the option tag&#8217;s &#8220;value&#8221; or &#8220;label&#8221;
should be used as translation input, defaults to &#8220;value&#8221;</li>
<li>&#8220;locale&#8221; defines the locale identifier to use, optional,
defaults to current locale</li>
<li>&#8220;source&#8221; defines the translation source name, optional,
defaults to &#8220;Main&#8221;</li>
<li>&#8220;package&#8221; defines the package key of the translation source,
optional, defaults to current package</li>
<li>&#8220;prefix&#8221; optionally defines a prefix to use for the message id</li>
</ul>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34232">#34232</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=305a27906f98555133b6728ba5b4633c3499d5cd">305a279</a></li>
</ul>
</div>
<div class="section" id="id381">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=c523847f67b86ff5c49abe04371a46b724f976a9">c523847</a></li>
</ul>
</div>
<div class="section" id="task-fix-types-in-variable-annotations-missing-prepending-backslash">
<h3>[TASK] Fix types in variable annotations (missing prepending backslash)</h3>
<p>Minor changes due to automated scan for missing backslash.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34643">#34643</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=ba99bfede974f6d4e524cfd45a5c63d975b1d25e">ba99bfe</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-var-annotation-type-in-identity-json-vh">
<h3>[BUGFIX] Fix &#64;var annotation type in identity.json VH</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33043">#33043</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=7262314810a6c8de2b991deeb0ca3c3befb6969c">7262314</a></li>
</ul>
</div>
<div class="section" id="feature-hint-about-achieving-string-comparison-in-ifviewhelper">
<h3>[FEATURE] Hint about achieving string comparison in IfViewHelper</h3>
<p>IfViewHelper&#8217;s condition doesn&#8217;t support real string
comparison. There&#8217;s a known workaround which is now
mentioned in the VH&#8217;s code examples.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33814">#33814</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=05828520c2aa0a9b23535e20c9746470d8bf248c">0582852</a></li>
</ul>
</div>
<div class="section" id="id388">
<h3>[TASK] Fix doc comments</h3>
<p>Fixes doc comments issues, like missing or wrong &#64;param
annotations. Removes &#64;author annotations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=1049dbdaec969f724565db99219471ad30d4d83a">1049dbd</a></li>
</ul>
</div>
<div class="section" id="task-remove-utterly-useless-line-of-code">
<h3>[TASK] Remove utterly useless line of code</h3>
<p>In I24acacf9fe10ffd1f8daa640b86f1a6709cf2a8a a small fix was made.
Only to leave an utterly useless line of code behind. This change
remedies that.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33812">#33812</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a2928ff78460d8294f36b14aba482117606e0c87">a2928ff</a></li>
</ul>
</div>
<div class="section" id="task-rename-key-to-id-in-translateviewhelper">
<h3>[TASK] Rename key to id in TranslateViewHelper</h3>
<p>The key attribute refers to the trans-unit id in XLIFF and thus
should be named id.</p>
<p>Along the way a type cast of quantity to integer is removed, as
it doesn&#8217;t make sense (plural form handling can take care of
floats just fine).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33812">#33812</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=2fe6308fd2cec8927c0bc9b103287e6cb1f9c4b1">2fe6308</a></li>
</ul>
</div>
<div class="section" id="task-cleanup-fix-viewhelper-doc-comments">
<h3>[TASK] Cleanup/Fix ViewHelper doc comments</h3>
<p>This tweakes some ViewHelper doc comments so that they can be
rendered with the new Reference command introduced with #33675.
No functional changes.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33675">#33675</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=bf846ce58731b60fa904639f4440bbb1b33dff50">bf846ce</a></li>
</ul>
</div>
<div class="section" id="id392">
<h3>[TASK] Remove deprecated methods and unused code</h3>
<p>Things which have been deprecated prior to the 1.0.0 release are
removed with this change.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27770">#27770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=00b96438b98c37dae50d3f04f92183eb61372fa0">00b9643</a></li>
</ul>
</div>
<div class="section" id="bugfix-uploadviewhelper-must-not-convert-resources-if-errors-occurred">
<h3>[BUGFIX] UploadViewHelper must not convert resources if errors occurred</h3>
<p>If getMappingResultsForProperty() contains errors, uploaded
resources should not been converted to resource objects but
instead the hidden fields should be empty.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33570">#33570</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a1a61db96a08fdc5e901dc74bd0f940518226144">a1a61db</a></li>
</ul>
</div>
<div class="section" id="bugfix-abstractformfieldviewhelper-always-converts-entities">
<h3>[BUGFIX] AbstractFormFieldViewHelper always converts entities</h3>
<p>AbstractFormFieldViewHelper::getValue() currently always tries
to convert objects to identities by calling
PersistenceManager::getIdentifierByObject().
This makes it impossible for custom ViewHelpers to access the
unmodified value that was previously submitted (or bound to the
form field view helper).</p>
<p>This change introduces an argument $convertObjects that allows
experienced developers to disable this behavior in custom
view helpers.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33569">#33569</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=02f8a9235927c13f1aa80746312415cb315358ed">02f8a92</a></li>
</ul>
</div>
<div class="section" id="feature-groupedforviewhelper-accepts-property-path-as-groupby-argument">
<h3>[FEATURE] GroupedForViewHelper accepts property path as groupBy argument</h3>
<p>This change allows the GroupedForViewHelper to accept not only a property/array key as
argument but also a property path. This reduces memory consumption for more complex
object graphs. Also, It enables a developer to create a custom algorithm (getter) to provide
the value to compare. The change is backwards compatible.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/9244">#9244</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=f2f70329201489bd3ebe6f48907eaff9f91dd25b">f2f7032</a></li>
</ul>
</div>
<div class="section" id="feature-view-implement-standaloneview">
<h3>[FEATURE] (View): Implement StandaloneView</h3>
<p>This view can be used to render E-Mails or other things outside a controller
scope.</p>
<p>It is mostly forward-ported from TYPO3 v4, just with Functional Tests added.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32930">#32930</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=9897a1acfd5608afb0ef5f75db5a9d765d88df5c">9897a1a</a></li>
</ul>
</div>
<div class="section" id="bugfix-formfieldviewhelpers-do-not-resolve-property-path">
<h3>[BUGFIX] FormFieldViewHelpers do not resolve property path</h3>
<p>When binding a form to an object the form elements fail to
correctly resolve the property path if no &#8220;formObjectName&#8221; is
specified.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33421">#33421</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=483a866c564b8dadc97a05bed36433e2618f0704">483a866</a></li>
</ul>
</div>
<div class="section" id="bugfix-viewhelpers-fix-wrong-comment-in-validationresults-viewhelper">
<h3>[BUGFIX] (ViewHelpers): Fix wrong comment in ValidationResults ViewHelper</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=b9a8a5cf5d6aea03f815f4bed1fd37b5af800dac">b9a8a5c</a></li>
</ul>
</div>
<div class="section" id="bugfix-form-checkbox-viewhelper-throws-exception-in-newaction">
<h3>[BUGFIX] form.checkbox ViewHelper throws Exception in newAction</h3>
<p>This adds an argument &#8220;multiple&#8221; to the checkbox ViewHelper
which makes it possible to mark the property as multi value
even if the bound object is NULL.</p>
<p>Besides the ViewHelper can now be bound to all scalar properties,
arrays and Traversable objects.
This change is backwards-compatible.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/8854">#8854</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=97e44d5de9331e3b496fb0e1fbc8aaf11d10325f">97e44d5</a></li>
</ul>
</div>
<div class="section" id="feature-form-button-viewhelper">
<h3>[FEATURE] form.button ViewHelper</h3>
<p>Adds a ViewHelper that renders &lt;button /&gt; form elements</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33302">#33302</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=8447517f3fe029577d92ae86927ad8b0dabe1ddb">8447517</a></li>
</ul>
</div>
<div class="section" id="task-rename-default-attribute-to-value-in-translateviewhelper">
<h3>[TASK] Rename default attribute to value in TranslateViewHelper</h3>
<p>The default attribute for the TranslateViewHelper is renamed to
value, because it is more intuitive if not translating by key when
using inline notation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11955">#11955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=3f0b26b4a95880397c7eb8b64172be52dee41bde">3f0b26b</a></li>
</ul>
</div>
<div class="section" id="feature-translateviewhelper-accepts-package-argument">
<h3>[FEATURE] TranslateViewHelper accepts package argument</h3>
<p>This change allows the TranslateViewHelper to accept an optional
package argument, which is passed to the Translator class for lookups.
If the package argument is NULL, the view helper will default to the
current controller&#8217;s package key.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/12502">#12502</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/14037">#14037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=cf05b1fa6a5e7e4e3f870db6ed787aa204d33952">cf05b1f</a></li>
</ul>
</div>
<div class="section" id="task-adjust-tests-to-optimized-reflection-service">
<h3>[TASK] Adjust Tests to optimized Reflection Service</h3>
<p>This fixes unit tests that are broken with
Idbaa7906dcdad82131eaf74a8dbfa371b78fe94e applied.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32531">#32531</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=4540f9b8358ebd5aac1e974e8b43556a35bfc4a2">4540f9b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-widgetrequesthandler-unit-tests">
<h3>[BUGFIX] Fix WidgetRequestHandler unit tests</h3>
<p>This change fixes unit tests that were broken with eeadd2b</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32451">#32451</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a535ee72d344b670ab394fd58e615890cadd0a07">a535ee7</a></li>
</ul>
</div>
<div class="section" id="task-make-fluid-package-protected">
<h3>[TASK] Make Fluid package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=b781e085e3e44afeabac24ba8121853a679a2271">b781e08</a></li>
</ul>
</div>
<div class="section" id="bugfix-widget-adjust-ajax-widgets-to-rewritten-bootstrap">
<h3>[BUGFIX] (Widget): Adjust Ajax Widgets to rewritten Bootstrap</h3>
<p>As the concept of Request Handlers has been updated and extended,
we need to adjust the WidgetRequestHandler accordingly.</p>
<p>This bugfix is testable with the Viewhelpertest package, using the
manual test &#8220;Widgets: AJAX widget context is reset correctly&#8221;.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32451">#32451</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=eeadd2bbb8559b7434d95e41ddc5e998b7cf18b2">eeadd2b</a></li>
</ul>
</div>
<div class="section" id="id409">
<h3>[BUGFIX] Fix unit tests failing with PHPUnit 3.6</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32016">#32016</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=70647cf6f6d60c4ded3c75235f486066801ffd3a">70647cf</a></li>
</ul>
</div>
<div class="section" id="feature-core-stateless-ajax-widgets">
<h3>[FEATURE] (Core): Stateless AJAX Widgets</h3>
<p>Currently an AJAX Widget stores the WidgetContext in the
WidgetContextHolder which again puts it in the current user
session.
This change adds a property &#8220;stateless&#8221; to the
AbstractWidgetViewHelper. If that&#8217;s TRUE, the widget context
won&#8217;t be stored in the session anymore. Instead, the
WidgetRequestBuilder then expects the &#8220;internal argument&#8221;
<tt class="docutils literal"><span class="pre">__widgetContext</span></tt> to be specified (with a valid HMAC appended).</p>
<p>The Widget Link/Uri-Viewhelpers now add the serialized and
HMAC&#8217;ed WidgetContext to the generated URI if the new argument
&#8220;includeWidgetContext&#8221; is set.</p>
<p>Besides this change renames the widgetId argument from
&#8220;typo3-fluid-widget-id&#8221; to &#8220;__widgetId&#8221; as discussed.
Note: This would be a breaking change, if you relied on that
specific GET argument (which is however very unlikely)!</p>
<p>Lastly the WidgetRequestBuilder now interprets merged GET + POST
arguments instead of relying on GET only. This makes it possible
to pass the widgetId/Context via POST.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31167">#31167</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=2db358732b01c977b9c5709b772601ab483129e6">2db3587</a></li>
</ul>
</div>
<div class="section" id="feature-viewhelpers-render-flashmessage-title-and-severity">
<h3>[FEATURE] (ViewHelpers): Render FlashMessage title and severity</h3>
<p>Currently the FlashMessages ViewHelper only renders the body of
the respective Flash Messages.
This change modifies the ViewHelper in a backwards compatible
way so that it outputs the message title if specified.
Additionally the severity (notice, warning, error, ok) is
added to each list item.</p>
<p>Additionally free rendering foreach style is possible now.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31019">#31019</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=50db4d21b800a571c949fb5c62ddc02d7dc858a6">50db4d2</a></li>
</ul>
</div>
<div class="section" id="bugfix-viewhelper-exceptions-should-be-logged-in-production">
<h3>[BUGFIX] ViewHelper Exceptions should be logged in Production</h3>
<p>In Production context all Exceptions from ViewHelpers will be
silently logged. In Development they will be re-thrown so the global
exception handler will be triggered.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/30935">#30935</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=5fa13298c467f56d5e5f3fe5a6a233817144526d">5fa1329</a></li>
</ul>
</div>
<div class="section" id="feature-widgets-reset-widgetviewhelpers-when-being-reused-from-viewhelpernode">
<h3>[FEATURE] Widgets: Reset WidgetViewHelpers when being reused from ViewHelperNode</h3>
<ul class="simple">
<li>Introduce an AbstractViewHelper::resetState method to handle any kind
of statefull interaction, empty by default.</li>
<li>Make ViewHelperNode call resetState when reusing a ViewHelper, and also
call it when reusing it in a compiled template.</li>
<li>AbstractWidgetViewHelper implements resetState for creating a new
WidgetContext object.</li>
</ul>
<p>As ViewHelpers are supposed to be stateless they were create once per
RenderingContext and reused whenever the RenderingContext fits.
Some ViewHelpers are not stateless, e.g. AJAX widgets.</p>
<p>AJAX widgets push their WidgetContext into an AjaxWidgetContextHolder
before they get rendered.</p>
<p>As soon as AJAX-WidgetViewHelpers were used multiple times within the
same RenderingContext (widgets in ForViewHelpers for example) differet
widgets share the same ViewHelper containing the same WidgetContext.
Because the WidgetContext contains all statefull information about a
widget, only the last rendered widget gets stored in the ContextHolder.
That makes equal AJAX widgets within a for-loop impossible because
each GUI representation interacts with only the last rendered PHP object.</p>
<p>A test case has been committed to Viewhelpertest with <a class="reference external" href="http://review.typo3.org/6594">http://review.typo3.org/6594</a></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31667">#31667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=e45079412d945aab812a48933ea5c3ff362e0b08">e450794</a></li>
</ul>
</div>
<div class="section" id="bugfix-pre-selecting-entities-does-not-work-with-multiple-flag-set">
<h3>[BUGFIX] pre-selecting entities does not work with multiple flag set</h3>
<p>The SelectViewHelper is not able to retrieve the selected uuid values for
a collection of objects</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29395">#29395</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=1d9943d2bd8d8087750ee422d24d791ae916b4df">1d9943d</a></li>
</ul>
</div>
<div class="section" id="task-change-argument-handling-of-widgetviewhelpers">
<h3>[!!!][TASK] Change argument handling of WidgetViewHelpers</h3>
<ul class="simple">
<li>Change action parameter from &#8220;action&#8221; to &#8220;&#64;action&#8221;</li>
<li>Add &#8220;&#64;format&#8221; parameter</li>
</ul>
<p>This is potentially a breaking change when you rely on the naming of &#8220;action&#8221;.
However, this is very improbable.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31658">#31658</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=02bbddbd036ecd8effd2068a6c868d43eb7b6d06">02bbddb</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="task-add-typo3-flow-to-the-dependencies">
<h3>[TASK] Add TYPO3.Flow to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=15c2925d0c1410eac0a1247c6fc7074dcb2df472">15c2925</a></li>
</ul>
</div>
<div class="section" id="feature-generate-layout-on-kickstart-package">
<h3>[FEATURE] Generate layout on kickstart:package</h3>
<p>With this change the kickstart:package command generates a
layout from the same template as the kickstart:action command.
So resulting view has a base tag included which allows for
easier usage of the resulting StandardController.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34751">#34751</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=888a5cf3f9cae446ab1b3429d399aa3e0dcd77cc">888a5cf</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstarting-a-command-controller-produces-invalid-code">
<h3>[BUGFIX] Kickstarting a command controller produces invalid code</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35963">#35963</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=6c716444acdd5d049e44f88fb9001c9f64950faa">6c71644</a></li>
</ul>
</div>
<div class="section" id="id420">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=941a94b6d7bb132e0ea911a6453a5baab59c43e1">941a94b</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstart-kickstart-model-should-give-correct-example">
<h3>[BUGFIX] Kickstart kickstart:model should give correct example</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36155">#36155</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=c4f28daa13b0a8e8d8665536ff19557993f2d9ab">c4f28da</a></li>
</ul>
</div>
<div class="section" id="id422">
<h3>[TASK] Sub package name case and location adjustments</h3>
<p>This adjusts code to use the corrected namespaces and class names in
FLOW3.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=329c1828e47b40a8dc4a150c1fa1878978183f60">329c182</a></li>
</ul>
</div>
<div class="section" id="id424">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=1162fb4826874f16eefd30ba45c58146868e8af9">1162fb4</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-variable-annotations-missing-prepending-backslash">
<h3>[BUGFIX] Fix variable annotations (missing prepending backslash)</h3>
<p>Minor changes due to automated scan for missing backslash.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34660">#34660</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=00defba2c350e1d4b55d538a32956075369b0e4a">00defba</a></li>
</ul>
</div>
<div class="section" id="id427">
<h3>[TASK] Fix doc comments</h3>
<p>Fixes doc comments issues, like missing or wrong &#64;param
annotations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=617e8dd0411013e4b0e152f268f1c061fcab9878">617e8dd</a></li>
</ul>
</div>
<div class="section" id="feature-create-empty-test-case-when-creating-a-domain-model">
<h3>[FEATURE] Create empty test case when creating a domain model</h3>
<p>In order to encourage TDD, we create an empty base test case
when creating a domain model.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32660">#32660</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=ffec8e3df88af933ac6621b15b0bad7597306444">ffec8e3</a></li>
</ul>
</div>
<div class="section" id="bugfix-scope-prototype-annotation-should-not-be-generated">
<h3>[BUGFIX] scope prototype annotation should not be generated</h3>
<p>Kickstarter should not generate scope prototype in models,
as prototype is the default scope.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32657">#32657</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=ec983023ca452c257c336c1f079436a7a44bd87c">ec98302</a></li>
</ul>
</div>
<div class="section" id="bugfix-generated-entities-should-contain-doctrine-use-statement">
<h3>[BUGFIX] Generated Entities should contain Doctrine use statement</h3>
<p>Generated Entities should contain &#8220;use Doctrine\ORM\Mapping as ORM;&#8221;
statement, as the user most probably needs this later when adjusting
the kickstarter output.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32656">#32656</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=ce3ce816fbe045ada3834811d949f8028354a46f">ce3ce81</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-doc-comment-in-generated-crud-controller">
<h3>[BUGFIX] Wrong doc comment in generated CRUD controller</h3>
<p>In the create action of a CRUD controller, the parameter is
$newSomething, while the docblock says it&#8217;s $something. This leads to
e.g. a warning in some IDEs.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31494">#31494</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=79707703c963d02e2d49a307105dd52abc2dbd6e">7970770</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id433">
<h3>[TASK] Add TYPO3.Flow to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=0e933f46796647dda56ff584a99efc13323ae61e">0e933f4</a></li>
</ul>
</div>
<div class="section" id="task-add-migrations-to-create-unique-indexes">
<h3>[TASK] Add migrations to create unique indexes</h3>
<p>Identity annotations now create an unique index, this change
adds a migration to adjust the database schema accordingly.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29547">#29547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=38af75b9609c690eedbff6b393cc815e18f79d04">38af75b</a></li>
</ul>
</div>
<div class="section" id="id436">
<h3>[TASK] Move XLIFF files so that Pootle copes with the file layout</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36284">#36284</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=6d5d0e08cbb289df6b16753da2d118ea8fe4fee7">6d5d0e0</a></li>
</ul>
</div>
<div class="section" id="id438">
<h3>[TASK] Add DB migration for PostgreSQL</h3>
<p>This adds an initial migration for PostgreSQL to create the needed
schema for the package.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36301">#36301</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=795dbd489ecd6da1bf3d19074db19dc905cb7d3d">795dbd4</a></li>
</ul>
</div>
<div class="section" id="task-adjust-columns-to-not-null-default">
<h3>[TASK] Adjust columns to NOT NULL default.</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35059">#35059</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=0814162745e15e5cb0ef6acf6c71e272da2c0e36">0814162</a></li>
</ul>
</div>
<div class="section" id="id442">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=8c287b9cd796f1b06146cfe4209f40125417ea98">8c287b9</a></li>
</ul>
</div>
<div class="section" id="bugfix-primaryelectronicaddress-should-check-before-adding">
<h3>[BUGFIX] PrimaryElectronicAddress should check before adding</h3>
<p>With setPrimaryElectronicAddress the electronic address is also
added to the electronicAddress collection but it should check
first if it is already in to avoid creating duplicate entries.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29484">#29484</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=5f751de47830ed6204e0ac539f5f0baa69d9c330">5f751de</a></li>
</ul>
</div>
<div class="section" id="id444">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=82bee4c7250c162387d3541bf08a2e0b77a1e1e5">82bee4c</a></li>
</ul>
</div>
<div class="section" id="id446">
<h3>[TASK] Implement best practices in XLIFF files</h3>
<p>Adds some &#8220;required&#8221; attributes to the XLIFF files.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33975">#33975</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=97023e77a1bb02945b437ea36c34ed1f7c4f0049">97023e7</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-partyrepository-a-singleton">
<h3>[BUGFIX] Make PartyRepository a singleton</h3>
<p>The PartyRepository lacked the Scope annotation it should have had.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33600">#33600</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=2515d253873904b73e70b95dc647df5b1cbf525b">2515d25</a></li>
</ul>
</div>
<div class="section" id="id449">
<h3>[TASK] Move Translations folder up one level</h3>
<p>This moves the folder for translations into Resources/Private.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32735">#32735</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=65ff6f8e7cbc6b5897a570e367559272b92554e7">65ff6f8</a></li>
</ul>
</div>
<div class="section" id="task-make-party-package-protected">
<h3>[TASK] Make Party package protected</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32599">#32599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=43e55bad39510b3550d4080e7d9abcf81ea8f5b6">43e55ba</a></li>
</ul>
</div>
<div class="section" id="task-add-xliff-files-with-common-labels">
<h3>[TASK] Add XLIFF files with common labels</h3>
<p>This adds XLIFF files with a few basic labels and a german translation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11955">#11955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=fc84d2d78ba64008ab7cf2fcdf38e840692816c3">fc84d2d</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id453">
<h3>[TASK] Add TYPO3.Flow to the dependencies</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28213">#28213</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=5951b5410662b837242880db2266437691a7f42e">5951b54</a></li>
</ul>
</div>
<div class="section" id="id455">
<h3>[TASK] adjustments to refactored FLOW3 Context</h3>
<p>As the Context is now an object and not a string anymore, we adjust
our context checks appropriately.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=baa1de25b1f49ecc56aea272c373f2512edbcbfb">baa1de2</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-links-and-update-about-content">
<h3>[BUGFIX] Fix links and update &#8220;About&#8221; content</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36580">#36580</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=38333960413637646b5cc59016d96a19e174bfd5">3833396</a></li>
</ul>
</div>
<div class="section" id="id459">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=49d0c9e58e88405fbe58d71996ac61de3fe00c34">49d0c9e</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-http-implementation">
<h3>[TASK] Adjust to HTTP implementation</h3>
<p>Adjusts a call to getBaseUri() to be done on the correct object.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35243">#35243</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=1eecf426a52c08cad1fa47deb213928f7b630523">1eecf42</a></li>
</ul>
</div>
<div class="section" id="id461">
<h3>[TASK] Fixes code style</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=8cb33270af9d98a4c7aba6fc02cecaf5f34c7182">8cb3327</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-links-on-welcome-screen">
<h3>[BUGFIX] Fix links on Welcome screen</h3>
<p>The links to the FLOW3 website were mostly wrong.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32005">#32005</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=20b1c70179ba75f7f99cd22ee5850346bd9bb5a2">20b1c70</a></li>
</ul>
</div>
<div class="section" id="task-add-hint-to-remove-subroute-definition-after-deactivating-package">
<h3>[TASK] Add hint to remove SubRoute definition after deactivating package</h3>
<p>When a SubRoute definition refers to a non-existing or disabled
package an exception is thrown, which confused some followers of
the mini tutorial of the Welcome screen.</p>
<p>This change adds a notice to remove the SubRoute definition
after deactivating the Welcome package.</p>
<p>Besides this renames &#8220;Remove the Welcome package ...&#8221; to
&#8220;Disable the Welcome package ...&#8221;.</p>
<p>Note: Some infos have been added to the exception wiki page at
<a class="reference external" href="http://wiki.typo3.org/wiki/Exception1318414040">http://wiki.typo3.org/wiki/Exception1318414040</a></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31284">#31284</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=1a775b9deac2726a72d1217f3f88b242ed0e7934">1a775b9</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="9f94634e-6aaa-0f3a-dcdb-731f3d07c58c" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="4c7507f3-51fb-cc36-74b4-2c3e1de7c330" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="110-beta2" locale="">
        <properties>
         <title>1.1.0-beta2</title>
        </properties>
        <node identifier="b1148923-1ec3-2a9e-f5d2-41daf2828472" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="96ebd694-7d8b-3799-3e51-7390e49508ca" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="beta2">
<h1>1.1.0-beta2</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="bugfix-remove-dead-symlinks-from-release-archives">
<h3>[BUGFIX] Remove dead symlinks from release archives</h3>
<p>The default Surf configuration symlinks Data and Configuration
to a shared folder. For release archives that leads to dead
symlinks being in the archives.</p>
<p>This changes disables both symlink tasks in the release
deployment descriptor.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37569">#37569</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=70608e77eeb7ec75ad0e57e5c6fd9f034cefee96">70608e7</a></li>
</ul>
</div>
<div class="section" id="task-adjust-surf-deployment-descriptor">
<h3>[TASK] Adjust Surf deployment descriptor</h3>
<p>The deployment descriptor used to release archives of FLOW3
needed a little adjustment.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=abb312c262cebcbec429262b8384ebbeb4c4602d">abb312c</a></li>
</ul>
</div>
<div class="section" id="task-amend-upgrade-instructions">
<h3>[TASK] Amend upgrade instructions</h3>
<p>This brings the update instructions in sync with the
amended version from the wiki.</p>
<p>Some edits have been applied and also synced back to
the wiki.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=7bd58320bd058ff7e2bbdcae1fa5ac471b3eb840">7bd5832</a></li>
</ul>
</div>
<div class="section" id="task-update-to-2-2-2">
<h3>[TASK] Update to 2.2.2</h3>
<p>DataFixtures is at f201391349f3dc6bd9c9c698927ea7c78104c461.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37468">#37468</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.Common.git?a=commit;h=63f85c63a6f8d992b36c71a617213836d3b7ba77">63f85c6</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine-dbal">
<h2>Doctrine.DBAL</h2>
<div class="section" id="id3">
<h3>[TASK] Update to 2.2.2</h3>
<p>Contains one of our own changes to fix connection charset with MySQL
for PHP &lt; 5.3.6 (<a class="reference external" href="https://review.typo3.org/4587">https://review.typo3.org/4587</a>).</p>
<p>Migrations is at fe98141b1e460baf5ab52f9139e1ae238101b28b.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37468">#37468</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.DBAL.git?a=commit;h=dc5292c774dd8befcd77790baaa7b3259f9365e5">dc5292c</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine-orm">
<h2>Doctrine.ORM</h2>
<div class="section" id="bugfix-fix-clone-side-effects-in-persistentcollection">
<h3>[BUGFIX] Fix clone side effects in PersistentCollection</h3>
<p>When a PersistentCollection (PC) is loaded and is cloned before it is
initialized, anything that is already in that collection will be duplicated
if the collection is initialized after it has been marked dirty. The cause is
a too late clone operation on the internal (Array)Collection (AC) in the PC.</p>
<ul class="simple">
<li>PC is loaded, but not initialized. The internal AC is empty.</li>
<li>PC is cloned. PC&#8217; calls initialize() in __clone()</li>
<li>PC&#8217; fills AC (as that has not been cloned yet)</li>
<li>PC&#8217; clones AC</li>
</ul>
<p>As a result the AC in PC now contains elements, but PC still is
uninitialized. If PC is afterwards initialized and dirty, the elements
already in AC will be considered new and added again to the AC.</p>
<p>The effect will be constraint violations in join tables due to duplicate
entries.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37476">#37476</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=bb917bf601df2baf220e0a9612c9f609d5ed16a4">bb917bf</a></li>
</ul>
</div>
<div class="section" id="id6">
<h3>[TASK] Update to 2.2.2</h3>
<p>Upstream release plus two of our own changes on top:</p>
<ul class="simple">
<li>12c6917 Throw exception if no identifier can be found in UnitOfWork</li>
<li>f2b493f In proxies add docblocks and move __wakeup() call around</li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37468">#37468</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Doctrine.ORM.git?a=commit;h=43d79933ae2536ba9f07cc86fee7502af7c35ac5">43d7993</a></li>
</ul>
</div>
</div>
<div class="section" id="symfony-component-domcrawler">
<h2>Symfony.Component.DomCrawler</h2>
<p>No changes</p>
</div>
<div class="section" id="symfony-component-yaml">
<h2>Symfony.Component.Yaml</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-package-xml-with-new-version-number">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=99815da9f4e7edc5d663945b4bb83e875d534b2e">99815da</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-inconsistent-validate-and-ignorevalidation-behavior">
<h3>[BUGFIX] Fix inconsistent Validate and IgnoreValidation behavior</h3>
<p>The Validate annotation does an ltrim of &#8220;$&#8221; on the argument which the
IgnoreValidation annotation did not do. This change makes the two behave
the same by adding that trim to IgnoreValidation as well.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37385">#37385</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4ae13b54054bfeee87f3f3c1afad561f74ccd303">4ae13b5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-error-message-about-command-controller-classes">
<h3>[BUGFIX] Fix error message about command controller classes</h3>
<p>If you create a CommandController which is not in the &#8220;Controller&#8221; directory
of a package or where the name does not end in &#8220;CommandController&#8221; you will
get an error saying &#8220;Invalid controller class name [...] 1305100019&#8221;.</p>
<p>This change makes the error message a little more helpful.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33139">#33139</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=42f4e5ec0d5a071431d93a7e696956b172a7db91">42f4e5e</a></li>
</ul>
</div>
<div class="section" id="task-identityroutepart-should-return-identity-array">
<h3>[TASK] IdentityRoutePart should return __identity array</h3>
<p>IdentityRoutePart::matchValue() currently returns the identifier
of the ObjectPathMapping record directly.
This makes it difficult to merge arguments with data from the
requestBody (e.g. for PUT requests).</p>
<p>This change adjusts the route part so that it sets $this-&gt;value
to an array in the format array(&#8216;__identity&#8217; =&gt; &#8216;&lt;Identifier&gt;&#8217;)</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37403">#37403</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c7da751a3cba3427acc14c6f5a3d568e05f7da49">c7da751</a></li>
</ul>
</div>
<div class="section" id="task-make-all-parameter-optional-in-package-refreeze">
<h3>[TASK] Make &#8220;all&#8221; parameter optional in package:refreeze</h3>
<p>For freeze, unfreeze and refreeze the default value for
the packageKey is now &#8220;all&#8221;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37358">#37358</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0caf926f31d31f8753eb9f2977f3db92b0280f28">0caf926</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-ip-address-validation">
<h3>[BUGFIX] Fix IP address validation</h3>
<p>The IP address validation done with filter_var() worked
on the development machine running PHP 5.3.12, however,
it failed on the integration server running PHP 5.3.5.
Apparently, the filter_var options for FILTER_VALIDATE_IP
behave differently in these versions.</p>
<p>This patch removes the validation for IPv4 / IPv6 addresses
because they didn&#8217;t make sense anyway.</p>
<p>In that regard: hooray for PHP behavior changes. They actually
exploit bad application code. Sometimes.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37584">#37584</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=aa1a0c5feb6a95691e3df2f40302b69b9c78dae0">aa1a0c5</a></li>
</ul>
</div>
<div class="section" id="feature-provide-way-to-determine-client-ip-address">
<h3>[FEATURE] Provide way to determine client IP address</h3>
<p>This adds a method getClientIpAddress() to the HTTP Request
class. It considers various kinds of environment variables
which are present when using proxies or certain server setups
for determining the actual client IP address.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37584">#37584</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=253a939213dc6aaa8f4f18f6b364972fc82c9d6b">253a939</a></li>
</ul>
</div>
<div class="section" id="feature-content-negotiation-for-media-types">
<h3>[!!!][FEATURE] Content Negotiation for Media Types</h3>
<p>This improves the support for detecting the Media
Type (that is, &#8220;format&#8221; in an ActionRequest context)
based on the request&#8217;s Accept header.</p>
<p>This implementation supports Quality Values and Media
Ranges as specified in RFC 2616.</p>
<p>The way to define the supported formats of a controller
has changed: Previously a class property $supportedFormats
contained a list of filename extensions which would be
supported. This property is not supported anymore.
Instead, controllers may now specify a list of IANA
Internet Media Types in a property $supportedMediaTypes.</p>
<p>The default setting for these supported media types
in ActionController is &#8220;text/html&#8221;. You&#8217;ll need to adjust
your controllers accordingly if you relied on the
$supportedFormats feature.</p>
<p>Also note that the format in ActionRequest is now NULL
by default. The ActionController makes sure to set the
correct format, but if you created your own ActionRequest
for a special purpose, you need to take care of setting
it yourself.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37561">#37561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=29618c52b31a51acb1ddc4fb7796dfdab909cafe">29618c5</a></li>
</ul>
</div>
<div class="section" id="task-create-configuration-directories-only-on-save">
<h3>[TASK] Create configuration directories only on save</h3>
<p>The configuration directories for cached configuration were created
inside the constructor of the ConfigurationManager. This caused the
unit test to create directories outside the VFS. Moving the creation
to the saveConfigurationCache method fixes that. Additionally cleans
up some unit tests related to ApplicationContext and
ConfigurationManager.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2a2284752dc73b432e05bdac6197fc646935e2e4">2a22847</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-validating-instances-more-often-than-needed">
<h3>[BUGFIX] Avoid validating instances more often than needed</h3>
<p>The GenericObjectValidator uses a static variable to store objects being
validated. Objects were still validated over and over because at the
end of isValid() they were detached again.</p>
<p>This change replaces that detach() call with another concept. Now
any validator implementing the new ObjectValidatorInterface can be
given an SplObjectStorage to keep track of instances already
validated.</p>
<p>If you reset that container when it makes sense (before you
actively validate objects) you can avoid validating single instances
more than once in one validation run but still validate at various
points on your logic flow.</p>
<p>If you have implemented your own object validator you should
implement the new ObjectValidatorInterface - the easiest way is
to extend the GenericObjectValidator, if you haven&#8217;t done that
so far.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37363">#37363</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34154">#34154</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=632685da16e266bb1cfdabf223a938d3cf3476f8">632685d</a></li>
</ul>
</div>
<div class="section" id="bugfix-router-overrides-request-arguments">
<h3>[BUGFIX] Router overrides request arguments</h3>
<p>With the reworked Request stack, the router kicks in after
the action request have been built, overriding all arguments
the respective route specifies.</p>
<p>This works for the most cases, but leads to issues when you
try to specify part of a complex target argument via the route
and part via request.</p>
<p>For example if you update a domain model via request body but
specify the model itself through the URI like
<a class="reference external" href="http://domain/products/product-1">http://domain/products/product-1</a> - now the Identity-RoutePart
detects &#8220;product-1&#8221; and turns it into the corresponding
__identity-array but then the Router kicks in and overrides
the &#8220;product&#8221; argument completely resulting in a new object
to be created by the property mapper.</p>
<p>This change adjusts the Router to recursively merge arguments
with the route values instead, with precedence to the route
values.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37445">#37445</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4ffcef32bca0ee9d05c743126ce9c4fd0904d726">4ffcef3</a></li>
</ul>
</div>
<div class="section" id="bugfix-keep-existing-packagestates-php">
<h3>[BUGFIX] Keep existing PackageStates.php</h3>
<p>A wrong check for the existence of the configured &#8220;packagePath&#8221; caused
the loss of custom package states configuration on every request in
development mode or initially in production.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37607">#37607</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d8bb6a461e15cfbd5f6b9b4b1349d1528432171a">d8bb6a4</a></li>
</ul>
</div>
<div class="section" id="task-switch-from-mime-to-media-types">
<h3>[!!!][TASK] Switch from MIME to Media Types</h3>
<p>The term MIME type is outdated, at least if used in a web context. The correct
term is &#8220;Internet Media Type&#8221;. Furthermore, our list of MIME types (or media
types) was not up to date.</p>
<p>This patch introduces a new utility class &#8220;MediaTypes&#8221; which replaces
&#8220;FileTypes&#8221;. Along with the new class comes a script which allows the core team
to conveniently update the list of Media Types and filename extensions.</p>
<p>This is a breaking change as the FileTypes class is deprecated with it. The old
methods are still available but should not be used anymore. A code migration to
use the new ones instead is shipped with the change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fc4c4ab510ddc1705f0c06a40e90335b5301ee4c">fc4c4ab</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-querytest-using-add-twice-for-the-same-object">
<h3>[BUGFIX] Fix QueryTest using add twice for the same object</h3>
<p>The new check for objects being added to persistence broke one
of the tests in the functional QueryTest. Turns out the test
was buggy, adding the same object twice (instead of a different
one).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34527">#34527</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=96b49cb6219d7cccd2bce479cec2f0bcc8c418bb">96b49cb</a></li>
</ul>
</div>
<div class="section" id="bugfix-float-and-integer-converters-do-not-correctly-handle-errors-and-empty-values">
<h3>[!!!][BUGFIX] Float and Integer converters do not correctly handle errors and empty values</h3>
<p>When an argument of a controller action is annotated with
&#64;param integer $var, the validation never fails if a string
is passed to the argument.
This is because the IntegerConverter implicitly casts the
string to an integer. The same problem exists with floats.</p>
<p>This change fixes this by checking the value and returning
an error object if it is not numeric. Besides this tweaks
the FloatConverter to accept float and integer values as
input and it adds a bunch of unit &amp; functional tests.</p>
<p>Furthermore, empty strings are now correctly converted as NULL values.
This is a breaking change if you relied upon the old behavior that
empty values are converted to the number 0.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35136">#35136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=996f20ce3a61fd4c9f4645d64df44235246b79bf">996f20c</a></li>
</ul>
</div>
<div class="section" id="task-tweak-wrong-docblock-in-persistencemanager-add">
<h3>[TASK] Tweak wrong docblock in PersistenceManager-&gt;add()</h3>
<p>The change to fix #34527 introduced a wrong &#64;throws clause in
the method docblock.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34527">#34527</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=102cee20fc823c59f82249109f1898c4f41307db">102cee2</a></li>
</ul>
</div>
<div class="section" id="bugfix-save-relative-package-path-in-packagestates-php">
<h3>[BUGFIX] Save relative package path in PackageStates.php</h3>
<p>Using absolute paths in the PackageStates.php causes problems in a
chroot environment where the absolute path is different in CLI then
in the HTTPD process.</p>
<p>Also relative paths allow to put PackageStates.php under version
control to maintain a specific state even when paths differ
on development and production systems.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37220">#37220</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33719">#33719</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1a688df60b1b57077cdc1fdedbae245eae088dba">1a688df</a></li>
</ul>
</div>
<div class="section" id="bugfix-persistencemanager-add-now-requires-objects-being-new">
<h3>[BUGFIX] PersistenceManager-&gt;add() now requires objects being new</h3>
<p>The add method in repositories did also update existing entities,
this can be dangerous, as it allows an attacker to misuse creation
forms (i.e. a register form) and change existing entities.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34527">#34527</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2290d9febc7b7fc9a5bb0d67d8f89e97c8a345f0">2290d9f</a></li>
</ul>
</div>
<div class="section" id="feature-add-gethttpresponse-to-httprequesthandler">
<h3>[FEATURE] Add getHttpResponse() to HttpRequestHandler</h3>
<p>This adds a getter method to the HTTP request handler
which allows for retrieving the response corresponding
to the currently handled request.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36696">#36696</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=34691272f6a2ea722d475762ada0a27c35eaa3d5">3469127</a></li>
</ul>
</div>
<div class="section" id="feature-make-http-responses-standards-compliant">
<h3>[FEATURE] Make HTTP responses standards compliant</h3>
<p>This adds a new API method to the HTTP response which
is called by a request handler to assure conformity
with RFC 2616 and other related specifications.</p>
<p>While there are a lot of rules to consider, this patch
only introduces a first set of important checks which
are all explained by a corresponding test.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=462fec11312d0ad520e0ced8a201bf7adde2e544">462fec1</a></li>
</ul>
</div>
<div class="section" id="feature-response-setexpires-getexpires">
<h3>[FEATURE] Response setExpires() / getExpires()</h3>
<p>This adds two new convenience methods to the Response
API which allow for setting and retrieving the Expires
HTTP header.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3e5836faa8fb8d70b301521ab6ccc0022d72ae55">3e5836f</a></li>
</ul>
</div>
<div class="section" id="feature-make-message-response-setters-chainable">
<h3>[FEATURE] Make Message / Response setters chainable</h3>
<p>This makes the setter methods of the Message and the
Response class chainable.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=11f8eb8e96ad0f103b384734e17062bd57777d6b">11f8eb8</a></li>
</ul>
</div>
<div class="section" id="feature-more-convenience-methods-in-response">
<h3>[FEATURE] More convenience methods in Response</h3>
<p>This adds a few more convenience methods for setting
headers and cache control directives in the Response
object:</p>
<ul class="simple">
<li>setDate() / getDate()</li>
<li>setLastmodified() / getLastModified()</li>
<li>setMaximumAge() / getMaximumAge()</li>
<li>setSharedMaximumAge() / getSharedMaximumAge()</li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c403439441bd05ab025d3547fca2bf07c25d7d83">c403439</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-cache-control-headers">
<h3>[FEATURE] Support for HTTP Cache-Control headers</h3>
<p>This adds support for the Cache-Control header.
The &#8220;Headers&#8221; object now handles the Cache-Control
header in a special way by keeping track of the
various cache directives separately. Those can
be set through the method setCacheControlDirective()
and get(&#8216;Cache-Control&#8217;) returns a rendered version
based on the previously set directives.</p>
<p>Alternatively, a whole Cache-Control header can also
be set through set() / setHeader(). The given field
value will then be parsed and the individual cache
directives are stored internally.</p>
<p>This patch also corrects the behavior of set() and
get() to convert date / time values always to GMT.
Also added a related note in the comments of the
respective API methods.</p>
<p>This patch also adds the new API methods setPrivate()
and setPublic() to the Response class.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=27f162261c23b560e4fe408a03b7237dede3454a">27f1622</a></li>
</ul>
</div>
<div class="section" id="task-remove-debug-output-in-log-on-configuration-changes">
<h3>[TASK] Remove debug output in log on configuration changes</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c6fa1ba536077670eee753ae67f9357819fa02d6">c6fa1ba</a></li>
</ul>
</div>
<div class="section" id="task-log-skipped-persistall-due-to-closed-entitymanager">
<h3>[TASK] Log skipped persistAll() due to closed EntityManager</h3>
<p>To avoid exceptions we only flush the EM if it is still open. To be
able to spot errors more easily, this adds a log entry if the EM
was closed and flushing was skipped.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/30934">#30934</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9a8bc9b1ae81ed85e5a86da3af377592367385df">9a8bc9b</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-our-var-dump-usable-with-doctrine-collections">
<h3>[BUGFIX] Make our var_dump() usable with Doctrine collections</h3>
<p>For Doctrine\Collection instances we use Doctrine&#8217;s export()
method now to render the dump.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37481">#37481</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=55b5a555ec747466bbe83b3dfa7eea13f3a5010e">55b5a55</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-exception-message-in-repository-remove">
<h3>[BUGFIX] Fix Wrong exception message in Repository-&gt;remove()</h3>
<p>The message would say add() was involved, which is wrong.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37448">#37448</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=91cb54f9ca1c09e0adc42b4e554fcdea115dfa69">91cb54f</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-hint-on-validator-empty-handling-to-migration">
<h3>[BUGFIX] Add hint on validator empty handling to migration</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37231">#37231</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ce852a134f31eed612780c76878feabfbc33ab87">ce852a1</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-put-delete-arguments">
<h3>[FEATURE] Support for HTTP PUT/DELETE arguments</h3>
<p>This adds transparent argument support for arguments
in PUT and DELETE requests which are passed through
the request body. Depending on the content type of
the request, the message body is parsed and then
mapped into arguments for further use in controllers.</p>
<p>The following content content types are currently
supported:</p>
<ul class="simple">
<li>application/x-www-form-urlencoded</li>
<li>application/json</li>
<li>xml</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36913">#36913</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8ce2f8da04576f850dc1bb02c22fdd582f02df86">8ce2f8d</a></li>
</ul>
</div>
<div class="section" id="task-common-base-class-message-for-request-response">
<h3>[TASK] Common base class Message for Request / Response</h3>
<p>This introduces a new class &#8220;Message&#8221; which acts as a
common parent class for the HTTP Request and Response.
It provides shared functionality such as setting and
getting headers, charset handling and more.</p>
<p>It is in line with the terminology in RFC 2616.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4f6850ffcf85c8984a2ba4236f0d8ad2b6ad7009">4f6850f</a></li>
</ul>
</div>
<div class="section" id="task-temporarily-remove-nested-response-code">
<h3>[TASK] Temporarily remove nested response code</h3>
<p>This temporarily removes the code in HTTP Response which
tackles support of nested responses. This feature needs
to be implemented only when most of the other features,
including Cache Control, are in place.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=5151598fee6f1b4bd95aa6b750c04fa55e172a29">5151598</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-age-and-date-header">
<h3>[FEATURE] Support for HTTP Age and Date header</h3>
<p>This patch adds API methods and internal handling of
the HTTP &#8220;Date&#8221; and &#8220;Age&#8221; headers, according to
RFC 2616. It also introduces the use of the &#8220;Now&#8221;
singleton as a time reference for age calculations.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=86350b16355bfced486d2ee2af64180ee62efc26">86350b1</a></li>
</ul>
</div>
<div class="section" id="task-annotation-cleanup-for-http-response-tostring-method">
<h3>[TASK] Annotation cleanup for http response __toString method</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=93a8b37e6a8a690587ccdc0766f9a42be3ff6556">93a8b37</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-some-coding-style-issues">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add space to &#8220;foreach(&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3473e746c7806c74fb120aeb5cea952d42164f3f">3473e74</a></li>
</ul>
</div>
<div class="section" id="bugfix-http-response-can-be-cast-to-string-again">
<h3>[BUGFIX] Http Response can be cast to string again</h3>
<p>This reverts the removal of the __toString() method for the
Http Response. We currently rely on this behavior in the
ActionController which combines response content by simple
string concatenation.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=20c9c7e92362c18dbbbf8aacc728e96223edbb1b">20c9c7e</a></li>
</ul>
</div>
<div class="section" id="task-http-response-status-code-and-content-type">
<h3>[TASK] HTTP Response: Status Code and Content Type</h3>
<p>This adds a few new methods to the HTTP Response
class - including the related unit tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=03ccfedd23591b0ad8eba0cba6ac6032034e1802">03ccfed</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-now-as-unique-time-reference">
<h3>[FEATURE] Introduce &#8220;Now&#8221; as unique time reference</h3>
<p>This patch introduces a new class called &#8220;Now&#8221; which
inherits DateTime and has the scope Singleton. It can
be used in all cases where a reliably comparable value
of &#8220;now&#8221; is needed or where time needs to be mocked
in related tests.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37376">#37376</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=87120b37fa21b92c02fcce53279a03cc0b0c987a">87120b3</a></li>
</ul>
</div>
<div class="section" id="bugfix-correction-of-double-ed-ending-in-ismethodannotatededwith">
<h3>[BUGFIX] Correction of double-&#8220;ed&#8221; ending in isMethodAnnotatededWith</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37343">#37343</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bca3a383ed47237caf8a2e0de4a9c629a775cff1">bca3a38</a></li>
</ul>
</div>
<div class="section" id="id53">
<h3>[BUGFIX] Correction of double-&#8220;ed&#8221; ending in isMethodAnnotatededWith</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37343">#37343</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=992cc655b1088d379aea73fbb96b2630ed04653a">992cc65</a></li>
</ul>
</div>
<div class="section" id="bugfix-generatehmac-method-does-not-use-safe-getencryptionkey">
<h3>[BUGFIX] generateHmac method does not use safe getEncryptionKey</h3>
<p>The generateHmac function uses encryptionKey property directly
and not through the safe getEncryptionKey method, leading to
uninitialized access without having an encryptionKey set.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36767">#36767</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7c1cadb78710f05da01c9208ad39470edb8df310">7c1cadb</a></li>
</ul>
</div>
<div class="section" id="id56">
<h3>[BUGFIX] generateHmac method does not use safe getEncryptionKey</h3>
<p>The generateHmac function uses encryptionKey property directly
and not through the safe getEncryptionKey method, leading to
uninitialized access without having an encryptionKey set.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36767">#36767</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=66312551e0797cfe255dd0acb1b7d33ca86cc9b4">6631255</a></li>
</ul>
</div>
<div class="section" id="bugfix-package-refreeze-command-is-too-verbose">
<h3>[BUGFIX] Package refreeze command is too verbose</h3>
<p>flow3:package:refreeze currently displays the output of cache:flush
which contains hints about frozen packages.</p>
<p>This change adds a flag $outputResults to Scripts::executeCommand()
that only outputs errors if set to FALSE.
The package commands now set this flag in order to skip output from
cache:flush.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37186">#37186</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2810a6cc168300f5381953631a1b953ca2b3b3ac">2810a6c</a></li>
</ul>
</div>
<div class="section" id="bugfix-credentialssource-in-account-should-be-nullable">
<h3>[BUGFIX] credentialsSource in Account should be nullable</h3>
<p>Not all authentication mechanisms need a &#8220;credentials source&#8221; (e.g. the
typo3.org SSO provider), so the column for the property should be nullable.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37341">#37341</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=01f9e3d082fd7b72bc994dc5abd594b9a737f9b6">01f9e3d</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-hint-in-code-migration">
<h3>[BUGFIX] Fix wrong hint in code migration</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37224">#37224</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7592d2542c72b24e1469e60787f8d31de121e7d4">7592d25</a></li>
</ul>
</div>
<div class="section" id="id62">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add spaces to &#8221;){&#8220;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0cae2267b772bf4cc3678333d2edb081a5f01088">0cae226</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-beta1">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f746c9b30b7309d54fc27b182926bac5b0323660">f746c9b</a></li>
</ul>
</div>
<div class="section" id="id64">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d1cee8d66e04bf1bdb8b0a076ec50f4d4b0801be">d1cee8d</a></li>
</ul>
</div>
<div class="section" id="id65">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=379bc9697d30080c2530cb726c6ea9d1cc13ce4f">379bc96</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id66">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=9ea875e87938df580e06207755859297737c90fe">9ea875e</a></li>
</ul>
</div>
<div class="section" id="task-standalone-view-enable-escaping-for-html">
<h3>[TASK] Standalone View: enable escaping for &#8220;html&#8221;</h3>
<p>Since the introduction of Content Negotiation to FLOW3
(I7d753155aa72f41e3df85b076e8067bcbfe7ac04), the default
Format of the ActionRequest is not &#8220;html&#8221; but undefined.
The Standalone View relied on the default &#8220;html&#8221; format.</p>
<p>This change enables the escape interceptor if the format
is either &#8220;html&#8221; or not set at all
* Related: <a class="reference external" href="http://forge.typo3.org/issues/37561">#37561</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=6f1b39d8c75a2ce37e3e5ef1a725790b4283c2ef">6f1b39d</a></li>
</ul>
</div>
<div class="section" id="feature-allow-access-to-attributes-in-tagbuilder">
<h3>[FEATURE] Allow access to attributes in TagBuilder</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37460">#37460</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=f5337883f083ff2ec7226a7f7fb4f0a5560701c8">f533788</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-empty-output-of-translateviewhelper">
<h3>[BUGFIX] Avoid empty output of TranslateViewHelper</h3>
<p>If translation by ID is used but no translation is found, the ID will now be
returned if the view helper tag has no content. Before this change it would
just return nothing (printable, at least).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35041">#35041</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=cd86a2dd032dc564e7a5eb10cbd75dfbcee478c5">cd86a2d</a></li>
</ul>
</div>
<div class="section" id="id70">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add spaces to &#8221;){&#8221; and to &#8220;foreach(&#8221;, fixes some docblocks and
indentation. Also avoids a possible uninitialised variable warning.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=bca7ade025701e7de6bcc9d3ad1328bd8633a312">bca7ade</a></li>
</ul>
</div>
<div class="section" id="id72">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=4ba7cda690f79a9e68987c22acd42dfee7f1e81b">4ba7cda</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id73">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=b88e140f4a42c2ce39f4d4b3917611b35d255c75">b88e140</a></li>
</ul>
</div>
<div class="section" id="id74">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=c23776acf3b6d79edbb3e1c8ceff489cd2e61d55">c23776a</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id75">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=02a04f6e74de4e99009118e6e88a705214005bb3">02a04f6</a></li>
</ul>
</div>
<div class="section" id="task-make-usagetype-on-electronicaddress-nullable">
<h3>[TASK] Make usagetype on ElectronicAddress nullable</h3>
<p>The usage property has no default value and thus should be
nullable to make &#8220;any&#8221; usage possible.</p>
<p>Adds a functional test (thanks Adrian Föder) as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35059">#35059</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=735ccefcaf41c46f60cc2327a7ca259e22f34d6b">735ccef</a></li>
</ul>
</div>
<div class="section" id="bugfix-duplicate-email-address-throws-exception">
<h3>[BUGFIX] Duplicate email address throws exception</h3>
<p>Since #29547 is resolved, trying to store an email address that
already exists throws an exception.
This change drops the unique indexes for &#8220;identifier&#8221;, &#8220;type&#8221; and
&#8220;usagetype&#8221; from the ElectronicAddress domain model.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37266">#37266</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29547">#29547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=9d10e0135395325bdb6c6bf0d9bcc695b2f6e26e">9d10e01</a></li>
</ul>
</div>
<div class="section" id="id79">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add space to &#8220;foreach(&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=7ddab64756f87ac50f9bc096eab076f0ccfc7d4f">7ddab64</a></li>
</ul>
</div>
<div class="section" id="id81">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=4ec32e9c08bc0073b54b06c36c008d78c3c49d23">4ec32e9</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id82">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=5ae0c323a4d8783e221a1e4ac8b9687b77642577">5ae0c32</a></li>
</ul>
</div>
<div class="section" id="id83">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=e8998d5f7eb012be2dc43c580ba34440cfbf23c9">e8998d5</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="23d978df-2ba0-3b98-79df-979760306a50" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="53ba35d9-ae20-d8e4-5e14-7f743ed3d9d8" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="110-beta3" locale="">
        <properties>
         <title>1.1.0-beta3</title>
        </properties>
        <node identifier="4b7aae45-d11a-8d1f-973a-d52810dd6801" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="aa91da77-a2b7-0e4f-7e71-68887aa8358a" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="beta3">
<h1>1.1.0-beta3</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-adjust-release-deployment-descriptor">
<h3>[TASK] Adjust release deployment descriptor</h3>
<p>This adds the configuration needed to push tags based on
the PUSH_TAGS environment variable and tweaks some tiny
(style) issues.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=138dfc36418977b4c019db2fb38c1323a569a64a">138dfc3</a></li>
</ul>
</div>
<div class="section" id="task-mention-phpsession-configuration-change-in-upgrading-txt">
<h3>[TASK] Mention PhpSession configuration change in Upgrading.txt</h3>
<p>This informs about the PhpSession settings key change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37993">#37993</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=052524c7bd296814da0af023ba77fafd35c11a89">052524c</a></li>
</ul>
</div>
<div class="section" id="task-correct-information-about-frozen-packages">
<h3>[TASK] Correct information about frozen packages</h3>
<p>The upgrading instructions explained that packages were frozen by
default, which is no longer true.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=c5b25bfe8c62cf0e935c9531b2ec4f8faebdec41">c5b25bf</a></li>
</ul>
</div>
<div class="section" id="task-update-upgrading-txt-with-two-more-adjustments">
<h3>[TASK] Update Upgrading.txt with two more adjustments</h3>
<p>Add the needed changes for getOriginalRequestMappingResults() and
getOriginalRequest()-&gt;getArguments() to the upgrading instructions.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37762">#37762</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=8cad35ab295fe0a75f32cbdca3465a01c5769f41">8cad35a</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-package-xml-with-new-version-number">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e7812eef060c19dcc85d66caea43aed8d56022c6">e7812ee</a></li>
</ul>
</div>
<div class="section" id="task-fix-section-about-resources-in-flow3-manual">
<h3>[TASK] Fix section about Resources in FLOW3 manual</h3>
<p>This fixes the Fluid code snippet of the resource upload example
in the Resource Management section.
Besides this adds a sample domain model to make this easier to
understand.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=27951cf889df5b82e87ba01c05083c3c688ae1a3">27951cf</a></li>
</ul>
</div>
<div class="section" id="task-documentation-corrections-each-minor">
<h3>[TASK] Documentation corrections, each minor</h3>
<p>Some additional corrections, basically typo corrections,
for the manual.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=53227d03a0aaeb15820640a58f14dae2a7b39729">53227d0</a></li>
</ul>
</div>
<div class="section" id="task-update-fluid-viewhelper-reference">
<h3>[TASK] Update Fluid ViewHelper reference</h3>
<p>This adds format.identifier documentation and a depreciation
notice for identity.json to the Fluid VH reference.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ff2fc38d01fd04d1610d506eb96fd09032db447a">ff2fc38</a></li>
</ul>
</div>
<div class="section" id="bugfix-non-standard-ports-are-now-considered-by-httprequest">
<h3>[BUGFIX] Non-standard ports are now considered by HttpRequest</h3>
<p>Ports that are not 80 for HTTP or 443 for HTTPS were simply not
passed through to the Request when being created by the create()
method.</p>
<p>Also Uri will now set the port to 443 for HTTPS if no port is
given in the string handed to the constructor.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37770">#37770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=091a37f7ab8332fe69b79df5659bf1559235099a">091a37f</a></li>
</ul>
</div>
<div class="section" id="bugfix-uri-respects-query-and-fragment-even-without-path">
<h3>[BUGFIX] Uri respects query and fragment even without path</h3>
<p>Corresponding to the appropriate RFC 3986, section 3.3
the query and fragment indeed may be present also if no
path is given.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37903">#37903</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c0a7fc5ce2048cc44ca0915dafaf473c479a9ede">c0a7fc5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-recursion-detection-in-instantiateclass">
<h3>[BUGFIX] Fix recursion detection in instantiateClass</h3>
<p>When in ObjectManager-&gt;instantiateClass() the speedup case was
used, recursion detection would potentially fail, as it returns
early without removing the class name from the list of classes
currently being instantiated.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37997">#37997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b898eb9b2f91d8e7bf3572093ac761c6741c24ba">b898eb9</a></li>
</ul>
</div>
<div class="section" id="bugfix-corrected-uri-host-regular-expression">
<h3>[BUGFIX] Corrected &#8220;Uri host&#8221; regular expression</h3>
<p>The regular expression verifying the validity of
a host name in Uri&#8217;s setHost method was of an incorrect
syntax leading to a PHP error message.
Besides correcting that, this patch adds a Test to
proof the intended functionality.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37554">#37554</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4257faebb635394c9b0bff1d6139be147be5975f">4257fae</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-mapper-chokes-on-already-converted-objects">
<h3>[BUGFIX] Property Mapper chokes on already-converted objects</h3>
<p>This happens for example when using the TYPO3.Form Project with a DatePicker,
which already transforms the value to the correct data type.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36988">#36988</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c2caff2490ee39b6b5c032fe713c315f72e00e7a">c2caff2</a></li>
</ul>
</div>
<div class="section" id="feature-configuration-validation-through-adapted-json-schema">
<h3>[FEATURE] Configuration validation through (adapted) JSON Schema</h3>
<p>Implementation of a PHP array schema validator modeled using the
JSON Schema specification as guideline.</p>
<p>The following CLI commands which utilize the validator are provided:</p>
<ul class="simple">
<li>configuration:validate validates the configuration of a certain type
with respect to the provided schemata. The schema files are searched
for in Resources/Private/Schema of all active packages.</li>
<li>configuration:generateschema is a kickstarter which generates a basic
schema to be used as a starting point for further adjustments</li>
</ul>
<p>Furthermore, this change includes schemata for all FLOW3 settings and the other
configuration types (Caches, Objects, Policy and Routes).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31277">#31277</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=37145b1f83e3828095f2b584ecc02a0eed3cb551">37145b1</a></li>
</ul>
</div>
<div class="section" id="bugfix-correctly-implement-validator-resolver-short-notation">
<h3>[BUGFIX] Correctly implement validator resolver short notation</h3>
<p>Currently, the short notation for validators which has been introduced
with Id807dbfa78ae1388aa8cd53bfc578893eade427c does only support syntax
like TYPO3\FLOW3:EmailAddress; but we should rather support TYPO3.Flow:EmailAddress
as this is how we use package keys at all other places which are not PHP code.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38154">#38154</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33862">#33862</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ead273410f52ae50390c20116e0826e9186b60a4">ead2734</a></li>
</ul>
</div>
<div class="section" id="task-add-note-to-view-chapter-about-default-model-properties">
<h3>[TASK] Add note to View chapter about default model properties</h3>
<p>This note should be made seen the confusion around fixing #35894</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35894">#35894</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=70b26b8f633114611a93158ae81da13e09887c51">70b26b8</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-baseuri-setting-work-for-resource-publishing">
<h3>[BUGFIX] Make baseUri setting work for resource publishing</h3>
<p>The baseUri setting was not observed in the filesystem resource
publisher.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37550">#37550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f75c243edf5e1a0de222e8dc6f930bfc5d020b62">f75c243</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-exception-handling-framework-for-commandcontroller">
<h3>[BUGFIX] Use exception handling framework for CommandController</h3>
<p>The CommandRequestHandler brought its own tiny exception handling
with the main drawback exceptions not being logged anymore, unlike
the Error\AbstractExceptionHandler features.</p>
<p>When handling a CommandRequest, a dedicated CommandExceptionHandler
is involved, taking care of occuring exceptions.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37995">#37995</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a54ebdb9b8f70986aacb96248601596b41e1f152">a54ebdb</a></li>
</ul>
</div>
<div class="section" id="bugfix-internal-request-engine-needs-to-clear-security-context">
<h3>[BUGFIX] Internal Request Engine needs to clear security context</h3>
<p>In order to get the security tokens matching the new request created
in the internal request engine, the security context should be cleared
using the &#8220;clearContext&#8221; method. This means that the tokens will be
matched with the configuration from the routing based on the new request
and not the parent request.</p>
<p>This patch also contains a small enhancement which adds two additional
headers to the virtual browser&#8217;s response containing the code and message
of a possible exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37377">#37377</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ec5121249cf900fac1675014b3c5eaf445db5e39">ec51212</a></li>
</ul>
</div>
<div class="section" id="task-update-code-migration-to-do-two-more-fixes">
<h3>[TASK] Update code migration to do two more fixes</h3>
<p>This adds adjustments for getOriginalRequestMappingResults() and
getOriginalRequest()-&gt;getArguments().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37762">#37762</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8ee6404b73c77b8f25ab651d5617205fd7b559ad">8ee6404</a></li>
</ul>
</div>
<div class="section" id="task-refactor-constructor-argument-of-exceptionhandler-implementors">
<h3>[TASK] Refactor constructor argument of ExceptionHandler implementors</h3>
<p>Moves the redundant constructor method of each AbstractExceptionHandler
implementor to the AbstractExceptionHandler itself.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38002">#38002</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1f3cdea0960f6abd0f4fb6b1bee0e63b65e2c8b7">1f3cdea</a></li>
</ul>
</div>
<div class="section" id="task-fix-markup-errors-in-flow3-manual">
<h3>[TASK] Fix markup errors in FLOW3 manual</h3>
<p>This change fixes another markup issue resulting in rendering
glitches.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e3039f6849ef2e681582bb7c0d6987c2a1d08933">e3039f6</a></li>
</ul>
</div>
<div class="section" id="id21">
<h3>[TASK] Fix markup errors in FLOW3 manual</h3>
<p>This change fixes a number of markup issues resulting in rendering
glitches.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=174cf9c0228ee01f7d0f90b23af4b2961e4ef48a">174cf9c</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-unused-configuration-option-from-settings">
<h3>[BUGFIX] Remove unused configuration option from settings</h3>
<p>This change removes a no longer used/supported option from the
shipped Development configuration.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37966">#37966</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=cb2e18d1859b26aa06e360e994b7124ae23df1cd">cb2e18d</a></li>
</ul>
</div>
<div class="section" id="bugfix-discourage-people-to-expose-anything-but-the-web-folder">
<h3>[BUGFIX] Discourage people to expose anything but the Web folder</h3>
<p>This updates the Quickstart to explicitly push people into using Web
as the document root for their web server.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38016">#38016</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b62de73c2eb7b1231a94ebd28e8e89892494877c">b62de73</a></li>
</ul>
</div>
<div class="section" id="task-update-templating-chapter">
<h3>[TASK] Update templating chapter</h3>
<p>Along with some style and markup tweaks this adds details
on XML namespace declaration and XSD generation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9300c1013f23100969bf45023d9e1bdff4f2f4c8">9300c10</a></li>
</ul>
</div>
<div class="section" id="task-update-validation-chapter">
<h3>[TASK] Update validation chapter</h3>
<p>Along with some style and markup tweaks this moves some sections
around and adds details on avoiding recursive/duplicate validation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4e9ebe29f3df59dc9e3a5c6f1c2fda3a256065d4">4e9ebe2</a></li>
</ul>
</div>
<div class="section" id="task-update-object-management-chapter">
<h3>[TASK] Update object management chapter</h3>
<p>This updates the section on custom factories.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=57a5d13c61f4a4ca1849e2692de64d8a314db76d">57a5d13</a></li>
</ul>
</div>
<div class="section" id="task-update-persistence-chapter">
<h3>[TASK] Update persistence chapter</h3>
<p>Some layout/markup tweaks and removed some outdated parts about
the generic PDO persistence we had earlier. Also explain identity
and value object handling in more detail.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f1bda0b8e6bf1bfade6a47ac52ec29366f88b1a4">f1bda0b</a></li>
</ul>
</div>
<div class="section" id="task-update-flow3-manual">
<h3>[TASK] Update FLOW3 manual</h3>
<p>This change removes the glossary and colophon from the guide
and applies mostly markup changes to various parts.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f66193005cb83dcc90151a4b806afba4ca893b14">f661930</a></li>
</ul>
</div>
<div class="section" id="task-session-handling-documentation">
<h3>[TASK] Session handling documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37668">#37668</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=63b7c09ce4964e7d09013a7ee4d3b95dba6693c2">63b7c09</a></li>
</ul>
</div>
<div class="section" id="task-update-security-framework-chapter">
<h3>[TASK] Update Security Framework chapter</h3>
<p>Quick update of the Security Framework chapter to reflect recent
changes in FLOW3. Also some minor spelling error fixes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37672">#37672</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3e918ee71059ea3b36885d599fe38d1fa6e2fde6">3e918ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-phpsession-read-settings-from-phpsession">
<h3>[BUGFIX] Make PhpSession read settings from &#8220;PhpSession&#8221;</h3>
<p>The settings for the PhpSession are read from the key &#8220;PhpSession&#8221; now,
to ensure consistency. Before that they were read from &#8220;PHPSession&#8221;.</p>
<p>You should adjust your settings, but for backwards compatibility
settings from &#8220;PHPSession&#8221; will still be used if present.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37993">#37993</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8a9619abb8404ce98a86d8d267043530d349c1ee">8a9619a</a></li>
</ul>
</div>
<div class="section" id="task-make-validator-resolver-public-api">
<h3>[TASK] Make validator resolver public API</h3>
<p>People should use it when validation is used in custom code instead of
creating validators using new; thus the ValidatorResolver must be marked
as public API.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37665">#37665</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b00d9cc046c2e5ea8f859e191a4dcc99ac4f59fc">b00d9cc</a></li>
</ul>
</div>
<div class="section" id="task-documentation-of-validation">
<h3>[TASK] Documentation of Validation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37666">#37666</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=394f1884d2c496eee6d94a7736205daf3d197b66">394f188</a></li>
</ul>
</div>
<div class="section" id="task-document-utility-functions">
<h3>[TASK] document utility functions</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37669">#37669</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ac4d62af08724fe21871676f83d06586cb0c4e9d">ac4d62a</a></li>
</ul>
</div>
<div class="section" id="task-improve-property-mapping-documentation">
<h3>[TASK] improve Property Mapping Documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37664">#37664</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=95a686c03dd57ca3f98a501ceca4fd310f71f241">95a686c</a></li>
</ul>
</div>
<div class="section" id="task-tiny-docblock-fix-in-doctrinecommandcontroller">
<h3>[TASK] Tiny docblock fix in DoctrineCommandController</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f6e85325ca88c65e5b20d52c0b34fdb6271f9a53">f6e8532</a></li>
</ul>
</div>
<div class="section" id="bugfix-purge-doctrine-proxies-that-are-no-longer-needed">
<h3>[BUGFIX] Purge Doctrine proxies that are no longer needed</h3>
<p>With this change the proxy target directory is emptied before
Doctrine proxies are (re)built, removing outdated proxy classes.</p>
<p>This solves fatal errors when (proxied) classes are removed, and
thus can no longer be found when referenced from their heirs.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/26903">#26903</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=13220e0e23602d7a70e2ffdf1ebd1928a300d040">13220e0</a></li>
</ul>
</div>
<div class="section" id="bugfix-packages-can-be-frozen-in-development-only">
<h3>[BUGFIX] Packages can be frozen in Development only</h3>
<p>Freezing packages was not possible in other contexts than Development
with the related commands. But if a package was frozen according to
PackageStates.php, it would advertise itself as frozen in all contexts.</p>
<p>While this did not seem to have any real effects, it caused confusing
output with the cache:flush command in Production context.</p>
<p>This change makes the Package class ignore the frozen state in any
context except Development and adds a check in the freezePackage()
method of the PackageManager.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37223">#37223</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3bfddf0331b9a7df4272d367f104975ea5a118e4">3bfddf0</a></li>
</ul>
</div>
<div class="section" id="task-no-longer-freeze-packages-by-default">
<h3>[TASK] No longer freeze packages by default</h3>
<p>Due to the possible pitfalls with frozen packages, no packages will be frozen
by default. This way a developer has to learn about frozen packages before he
can be confronted with them (and their pitfalls).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37726">#37726</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=977ba8e14cf080be32f5d51527f7f1dcec1917da">977ba8e</a></li>
</ul>
</div>
<div class="section" id="task-add-validator-reference-to-the-flow3-guide">
<h3>[TASK] Add validator reference to the FLOW3 guide</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bc3473461a6fc062962b00310368e90f66fb119b">bc34734</a></li>
</ul>
</div>
<div class="section" id="task-add-cli-command-reference-to-guide">
<h3>[TASK] Add CLI command reference to guide</h3>
<p>Adds a reference for the CLI commands in the FLOW3
base distribution.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=932d7135b2da8a4c1d2bcf5a5362ac46236d48ce">932d713</a></li>
</ul>
</div>
<div class="section" id="task-add-contributors-list">
<h3>[TASK] Add contributors list</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=74671a3c2d2ba512e8c10f73783dbb65a0423d19">74671a3</a></li>
</ul>
</div>
<div class="section" id="id40">
<h3>[TASK] Update Fluid ViewHelper reference</h3>
<p>This change updates the Fluid VH reference and does some tiny
tweaks along the way.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=42e16cff73fc5918fab2d9b1f195199154e19239">42e16cf</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-0-5">
<h3>[TASK] Add changelog for FLOW3 1.0.5</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d88b1df97d61ea21e9f58accf58c504d62ee3783">d88b1df</a></li>
</ul>
</div>
<div class="section" id="bugfix-integrity-constraint-violation-deleting-resources">
<h3>[BUGFIX] Integrity constraint violation deleting resources</h3>
<p>If you have two resources using the same resource pointer,
deleting a Resource will trigger deletion of the
connected ResourcePointer which then leads to an integrity
constraint violation.</p>
<p>This patch tells doctrine NOT to cascade delete operations.
This will lead to orphan resource-pointers which have to
be deleted manually or on a regular base.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34448">#34448</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8b383f621e0c3a91a39d13b5b677476d71c24d2d">8b383f6</a></li>
</ul>
</div>
<div class="section" id="bugfix-nested-arrays-in-annotation-options-are-no-longer-dropped">
<h3>[BUGFIX] Nested arrays in Annotation options are no longer dropped</h3>
<p>When giving a nested array of options to an annotation the rendered
form in proxy classes was cut off.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37193">#37193</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=62053eb7fce82f961bbdbbb2752e58c37223e71d">62053eb</a></li>
</ul>
</div>
<div class="section" id="task-some-tiny-tweaks-to-the-1-1-0b2-changelog">
<h3>[TASK] Some tiny tweaks to the 1.1.0b2 changelog</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=98b914afee089823869802669fb8c41f5c250299">98b914a</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-beta2">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta2</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fa870e26b7263e3b12f102ec18d826aa57178dad">fa870e2</a></li>
</ul>
</div>
<div class="section" id="task-make-extending-genericobjectvalidator-easier">
<h3>[TASK] Make extending GenericObjectValidator easier</h3>
<p>This change moves the check for already validated objects out
of the isValid() method and into validate() instead. Since in
custom validators isValid() is the method to implement, this
makes correct implementation less error-prone.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37363">#37363</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fdc462b04fe21bb35e08191d659f0ccf004849e7">fdc462b</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id44">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a8b58323292ee09529a5cb2cd6fc55b7d7c91f21">a8b5832</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unusable-checkbox-radio-if-formobject-is-null">
<h3>[BUGFIX] Fix unusable checkbox/radio if formObject is NULL</h3>
<p>When using a form object inside of a form view helper inside an index
action template and a checkbox is referring to a property $sth of
$someFormObject, the form object can be NULL with code like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">indexAction</span><span class="p">(</span><span class="nx">\\Some\\Type</span> <span class="nv">$someFormObject</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">){</span> <span class="o">...</span> <span class="p">}</span>

<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span> <span class="o">...</span> <span class="nx">object</span><span class="o">=</span><span class="s2">&quot;{someFormObject}&quot;</span><span class="o">&gt;</span>
 <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">checkbox</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;{sth}&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="s2">&quot;{sth.value} == yes&quot;</span><span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Initially calling the index action makes someFormObject NULL. If the submitted
form had validation errors someFormObject is NULL, too. This possibility
was ignored in a call for the formObject from within the CheckboxViewHelper as
well as from the RadioViewHelper.</p>
<p>So you would get an exception telling you:</p>
<blockquote>
<div>No value found for key &#8220;TYPO3\Fluid\ViewHelpers\FormViewHelper-&gt;formObject&#8221;</div></blockquote>
<p>This change fixes that bug and thus also sets the checkbox and radio
&#8220;checked&#8221; attribute properly when a validation error occurred.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35894">#35894</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=dec3b187b6db773a5a84dec70918c22f428cb994">dec3b18</a></li>
</ul>
</div>
<div class="section" id="bugfix-hidden-fields-should-be-rendered-in-extra-section">
<h3>[BUGFIX] hidden fields should be rendered in extra section</h3>
<p>Currently form.select and form.checkbox ViewHelpers render
hidden fields before the actual input field in order to
force submission of a value.
This leads to the situation that labels wrapped around the
field do not correspond to the actual form field, but to
the hidden field.
This is fixed by letting the form ViewHelper taking care of
rendering the requried hidden fields in the already existing
section on top of the form.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/26481">#26481</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/13342">#13342</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=9f01a42dc97a85f22a08c4d7ca75405fe1e75557">9f01a42</a></li>
</ul>
</div>
<div class="section" id="feature-add-a-viewhelper-for-entity-identifier-retrieval">
<h3>[FEATURE] Add a ViewHelper for entity identifier retrieval</h3>
<p>This adds a ViewHelper &#8220;format.identifier&#8221; that returns
the plain identifier for a given entity.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33494">#33494</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=85bca3221ba3150baf59f8fd9ccd1f9e7732f02f">85bca32</a></li>
</ul>
</div>
<div class="section" id="bugfix-viewhelper-exceptions-should-not-be-caught-in-testing-context">
<h3>[BUGFIX] ViewHelper exceptions should not be caught in testing context</h3>
<p>While it is correct that ViewHelper exceptions are silently logged in
production context, they should be displayed in development and testing
context; and not only in development context.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37671">#37671</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=5a75ed885661b11d73715acc82922936b438f0b1">5a75ed8</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id50">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=6efcb5a4ee49d26c4691f4e44be9b2e3bd91bde3">6efcb5a</a></li>
</ul>
</div>
<div class="section" id="task-code-cleanup">
<h3>[TASK] Code cleanup</h3>
<p>Does cleanup to code documentation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=57f4099b65a8e269748cf44b1b4b0c45b3ba71e9">57f4099</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id52">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=feb68d11bcf380d33bcbf59bcb7b367609304d14">feb68d1</a></li>
</ul>
</div>
<div class="section" id="id53">
<h3>[TASK] Code cleanup</h3>
<p>Tweaks a single constructor docblock.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=8d04ec579623233576ad77c2b8316cfd106ee0cb">8d04ec5</a></li>
</ul>
</div>
<div class="section" id="task-adjust-validators-to-avoid-validating-more-than-needed">
<h3>[TASK] Adjust validators to avoid validating more than needed</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34154">#34154</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=864601991b49bed50303601b1859345dee86227e">8646019</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id57">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=09229df2adb1897c248c50593d82b0abb5bfd7fe">09229df</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="8bb14d44-7cbc-b695-652d-b2ca551e5425" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="b3da7726-65a0-2625-dd05-7204b8c04dec" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="110-rc1" locale="">
        <properties>
         <title>1.1.0-rc1</title>
        </properties>
        <node identifier="c7b51eb3-fbb8-a2f4-e647-74635beb7edc" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="cd2d8a99-06e4-82fd-93e5-4d221f3d3af1" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="rc1">
<h1>1.1.0-rc1</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-update-upgrading-instructions">
<h3>[TASK] Update upgrading instructions</h3>
<p>Adds instructions to replace DataNotSerializeableException with
DataNotSerializableException.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Distributions/Base.git?a=commit;h=0bfbf2e6f74133225ea530fec477dc336760d4bb">0bfbf2e</a></li>
</ul>
</div>
<div class="section" id="task-disable-test-timeout-when-using-php-invoker">
<h3>[TASK] Disable test timeout when using PHP_Invoker</h3>
<p>when PHP_Invoker is installed, PHPUnit will by default only let a test
run for one second. This kills most of our functional tests when being
run in this setup.</p>
<p>Setting this default value to 0 (undefined) fixes the problem.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/Common.git?a=commit;h=ce42ca6fd9b372f4009c8778edd49ae5ce72efbb">ce42ca6</a></li>
</ul>
</div>
</div>
<div class="section" id="doctrine-common">
<h2>Doctrine.Common</h2>
<p>No changes</p>
</div>
<div class="section" id="doctrine-dbal">
<h2>Doctrine.DBAL</h2>
<p>No changes</p>
</div>
<div class="section" id="doctrine-orm">
<h2>Doctrine.ORM</h2>
<p>No changes</p>
</div>
<div class="section" id="symfony-component-domcrawler">
<h2>Symfony.Component.DomCrawler</h2>
<p>No changes</p>
</div>
<div class="section" id="symfony-component-yaml">
<h2>Symfony.Component.Yaml</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-package-xml-with-new-version-number">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2e7f224c3fb4c838b8b505ed8d0383c83061edc1">2e7f224</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-check-in-atomic-writes-code">
<h3>[BUGFIX] Fix wrong check in atomic writes code</h3>
<p>Fixes a wrong check in Cache\FileBackend and RsaWalletServicePhp
as well as a bunch of one-line if blocks.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/27989">#27989</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3664972e8be221277fd3443efb7c41cb4d9ed6dc">3664972</a></li>
</ul>
</div>
<div class="section" id="task-minor-typo-corrections-in-code">
<h3>[!!!][TASK] Minor typo corrections in code</h3>
<p>This trivially corrects some typos in code.</p>
<p>As a consequence, the DataNotSerializeableException was renamed
to DataNotSerializableException.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fec3f046d336725bcbdbe39212ef313ec90d4552">fec3f04</a></li>
</ul>
</div>
<div class="section" id="task-remove-trailing-colon-from-example-headlines">
<h3>[TASK] Remove trailing colon from example headlines</h3>
<p>It just looked weird this way…</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bfeeb2ad9584902081c8b1aa5d587001d6ca4c52">bfeeb2a</a></li>
</ul>
</div>
<div class="section" id="task-add-essential-design-patterns-to-the-guide">
<h3>[TASK] Add &#8220;Essential Design Patterns&#8221; to the guide</h3>
<p>Re-uses some AOP verbage from part III of the guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=94d73f3a914df16882f2a6e84917178a768cc8f1">94d73f3</a></li>
</ul>
</div>
<div class="section" id="task-document-routing-feature-appendexceedingarguments">
<h3>[TASK] Document Routing feature &#8220;appendExceedingArguments&#8221;</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35394">#35394</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=833f676ee146ce5a7b1626c83440cca47d06b058">833f676</a></li>
</ul>
</div>
<div class="section" id="bugfix-identityroutepart-should-accept-identity-array">
<h3>[BUGFIX] IdentityRoutePart should accept identity array</h3>
<p>IdentityRoutePart::matchValue() returns an identity array in
the format array(&#8216;__identity&#8217; =&gt; &#8216;&lt;Identifier&gt;&#8217;) (see #37403).</p>
<p>This change ajusts resolveValue() to accept arrays in that
format, too.
This is required for widgets that fetch arguments from the
current request and pass them to the UriBuilder.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38404">#38404</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=bd08fb9999a31a8f76173f7b31d6660ce14e4905">bd08fb9</a></li>
</ul>
</div>
<div class="section" id="task-adjust-filename-spelling-to-match-rest-of-package">
<h3>[TASK] Adjust filename spelling to match rest of package</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35298">#35298</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f310050e8b51bb977413762cb7593256f38ba6b0">f310050</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-code-documentation-of-datetimeparser">
<h3>[BUGFIX] Fix code documentation of DatetimeParser</h3>
<p>The parser code documentation would state the parse methods
expect \DateTime instances, but in fact strings are expected.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34050">#34050</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=b51a56b7e3be08d2667eb1db399f6fd91a28f73f">b51a56b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-objects-yaml-classname-example-in-guide">
<h3>[BUGFIX] Fix Objects.yaml className example in guide</h3>
<p>The guide still stated that setting className in Objects.yaml
was possible for classes, but it works only for interfaces.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37648">#37648</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=3de0e728f9d91bc83ce03ff9051fd0f370cad27e">3de0e72</a></li>
</ul>
</div>
<div class="section" id="task-add-architectural-overview-to-the-guide">
<h3>[TASK] Add &#8220;Architectural Overview&#8221; to the guide</h3>
<p>Based on the introduction from the old DocBook manual,
tweaked and amended.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29266">#29266</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=a56ac99b15a86aa1c9aedb57f78c32780368539a">a56ac99</a></li>
</ul>
</div>
<div class="section" id="task-provide-conventions-for-ids-in-xliff-files">
<h3>[TASK] Provide conventions for ids in XLIFF files</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32606">#32606</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=70f56623582d1a203a358c2785b0eaee04570058">70f5662</a></li>
</ul>
</div>
<div class="section" id="task-update-and-link-cgl-on-one-page">
<h3>[TASK] Update and link CGL on one page</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36651">#36651</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fc2d196907bc4d68221cc4b6d92d09480b68cacb">fc2d196</a></li>
</ul>
</div>
<div class="section" id="task-show-up-hints-for-nesting-inline-viewhelpers">
<h3>[TASK] Show up hints for nesting inline ViewHelpers</h3>
<p>This adds a section with some examples about how to nest
and use inline ViewHelpers.
Besides, it does some minor typo and formatting corrections.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34749">#34749</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=70457ec8d7d9aae57221d4c7dccbcddb2c3d156d">70457ec</a></li>
</ul>
</div>
<div class="section" id="bugfix-log-route-values-if-a-route-can-t-be-resolved">
<h3>[BUGFIX] Log route values if a route can&#8217;t be resolved</h3>
<p>This re-introduces logging if a route could not be resolved.
This behaviour was lost with I9605731f78cb1be9b0fb5c439d7149a676b6ccb7</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38172">#38172</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=0d3440fc74be4f49628dd0c71aa8ba121e1083a1">0d3440f</a></li>
</ul>
</div>
<div class="section" id="task-update-cgl-on-one-page">
<h3>[TASK] Update &#8220;CGL on one page&#8221;</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36651">#36651</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2e85be9b40c89c5393f2ea77784fc2759c802bc9">2e85be9</a></li>
</ul>
</div>
<div class="section" id="task-add-context-information-to-cache-clearing-commands">
<h3>[TASK] Add context information to cache clearing commands</h3>
<p>When using the flow3:cache:flush commands only the current
cli context is cleared. This is not clear when using the
commands and this change add the context information
to the command output.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38221">#38221</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=1ba1631bd5b21ac3fa62341bc90d8f6f9bd281c2">1ba1631</a></li>
</ul>
</div>
<div class="section" id="task-code-cleanup">
<h3>[TASK] Code cleanup</h3>
<p>Does code cleanup, mostly to documentation, but also tweaks
unused variables, missing return statements and similar things.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=02647e4dc260e2c993eab3d88d34f3b364042c8d">02647e4</a></li>
</ul>
</div>
<div class="section" id="id20">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=838fe96829086a485b243badf059dcbbf9327883">838fe96</a></li>
</ul>
</div>
<div class="section" id="task-some-tiny-tweaks-to-the-1-1-0b3-changelog">
<h3>[TASK] Some tiny tweaks to the 1.1.0b3 changelog</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fd417d6e91d92741db5c3fbfdc7a55a448b0e4a4">fd417d6</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-beta3">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta3</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8da82b23127b0e99907374fbcdb96ca904d0386f">8da82b2</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-map-file-uploads-to-arguments-if-not-empty">
<h3>[BUGFIX] Only map file uploads to arguments if not empty</h3>
<p>Currently the HTTP request converts the FILES superglobal
to request arguments even if no file has been uploaded.
This leads to an exception when submitting a form without
uploading a file because the property mapper receives a
corrupt source array in that case.</p>
<p>This adjust the HTTP request to only map values from the
FILES superglobal to arguments if a file has been uploaded.</p>
<p>This also tweaks the ResourceTypeConverter to accept
an empty source. Besides the converter now only outputs
filer errors (for too large or corrupt files) to the user.
Server errors (e.g. non-existing/read-only tmp directory)
are logged to the systemLogger.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38184">#38184</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=4441c3cb94079e602bcfbebc3c7e10cb95d32b53">4441c3c</a></li>
</ul>
</div>
<div class="section" id="bugfix-inform-about-possible-cause-for-no-class-schema-found">
<h3>[BUGFIX] Inform about possible cause for &#8220;No class schema found&#8221;</h3>
<p>When mapping meta data for Doctrine an error about &#8220;No class schema
found for …&#8221; could occur. It would not tell in what model the mapping
was taking place, leaving the user to guesswork. This adds output
of the currently examined class to the exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37547">#37547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=82e8f439859418654723011431c4a3ed8f2a5a6c">82e8f43</a></li>
</ul>
</div>
<div class="section" id="bugfix-routing-cache-only-works-for-one-request">
<h3>[BUGFIX] Routing cache only works for one request</h3>
<p>Currently the routing uses a TransientMemory cache backend by
default. Besides, objects in the routing values are converted
to hashes using spl_object_hash() - which generates a new hash
for every request.</p>
<p>This change configures the RouterCachingAspect to use a
SimpleFile cache backend and adjusts the aspect to use the
persistence manager in order to convert objects to their
identifiers before creating cache entries.</p>
<p>This also adds a signal to the FunctionalTestCase base
class that flushes the routing caches on teardown.</p>
<p>Furthermore this adds two convenience methods
getLastMatchedRoute() and getLastResolvedRoute() to the router
which should make debugging and testing easier.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38172">#38172</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=de4ea73dc015b18d7e2ed887e66d3d49a3ccc8bd">de4ea73</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-mapper-should-distinguish-between-error-and-null">
<h3>[BUGFIX] Property mapper should distinguish between error and NULL</h3>
<p>Currently, when a nested type converter returns NULL, this is silently
caught by the property mapper. Thus, it is not possible to reset e.g.
an integer value to NULL again.</p>
<p>This change fixes that behavior, and adds a functional test for it.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35136">#35136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ca4ef91cee2ecb84fa8d8abcd24418a1e83d3c16">ca4ef91</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id25">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=2a9e2f2fe2fe71b52860a33a6fa009fbe8cab0b7">2a9e2f2</a></li>
</ul>
</div>
<div class="section" id="task-add-query-parameters-for-form-action-as-hidden-fields">
<h3>[TASK] Add query parameters for form action as hidden fields</h3>
<p>This change makes the form viewhelper usable with method GET by adding
query parameters of the action as hidden fields to the form. Otherwise
the browser would replace them by the form values
(<a class="reference external" href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.4">http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.4</a>).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/11636">#11636</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=0c8ef04ce86582e4eea8a702b3f4a90c9d639227">0c8ef04</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-render-hidden-upload-fields-if-a-resource-is-available">
<h3>[BUGFIX] Only render hidden upload fields if a resource is available</h3>
<p>The UploadViewHelper always creates hidden fields for filename and
resource pointer so that previously uploaded files are not lost
if validation errors occur.</p>
<p>This change makes sure that those hidden fields are only rendered
if a file has been uploaded before because otherwise the property
mapper tries to create a Resource object and fails with an
exception (see #38184).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38184">#38184</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=ecc4f01ead99f3993bd3908d974485e2c65dd080">ecc4f01</a></li>
</ul>
</div>
<div class="section" id="id28">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=40a283fb44865efde9d36645130eae7c15b85f72">40a283f</a></li>
</ul>
</div>
<div class="section" id="id29">
<h3>[TASK] Code cleanup</h3>
<p>Does code cleanup, mostly to documentation, but also tweaks
unused variables, missing return statements and similar things.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=ad4ed8417fd8e3897c417e168898557e7989f6e6">ad4ed84</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id31">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=7c65b111bf6b2d0b1501e26b9124cf3c4f832de3">7c65b11</a></li>
</ul>
</div>
<div class="section" id="id32">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=c96108a799dbac24d228a21a6e370d421d655ce7">c96108a</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id33">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=45afa0ba497770ed12fcfbc4c2c8477c34fb7b7d">45afa0b</a></li>
</ul>
</div>
<div class="section" id="id34">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=80b82d4e979cd7e787339572abb080260d7726d8">80b82d4</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id35">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=4c4f158101c4d572344f4f1335bbd65e956e393d">4c4f158</a></li>
</ul>
</div>
<div class="section" id="id36">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=d3a82c0edc1f34e65b54b3edfbc08fc0dbc35a45">d3a82c0</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="5a5d496f-87b6-3798-5ff5-1fe0eadb93a9" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="231f229f-6e3a-1b68-33a3-7fd953582e71" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="110-rc2" locale="">
        <properties>
         <title>1.1.0-rc2</title>
        </properties>
        <node identifier="4ed4a416-6dd8-6fb5-3b69-4e867da4d06e" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="ef7c8afa-6ad9-4771-c6dc-4cf955ece38d" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="rc2">
<h1>1.1.0-rc2</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-update-package-xml-with-new-version-number">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=78b8a86f1467e0f0c36bcd16cbfe4d94a58d5b98">78b8a86</a></li>
</ul>
</div>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>This updates command, type converter and Fluid VH references.</p>
<p>Counterpart to If61f27e9f55a42fc7fd0d10eb87b644f946aef7c.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e9e377903a8698e78314029845e5aef9eaafc6bd">e9e3779</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-broken-links-standardview-template">
<h3>[BUGFIX] Fix broken links StandardView template</h3>
<p>The links pointed to URLs no longer working.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39062">#39062</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=167b85e487ab3619c9200c5c47599d4f8e3693c9">167b85e</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-repositoryinterface">
<h3>[!!!][BUGFIX] Correct RepositoryInterface</h3>
<p>Fixes a docblock and adds __call() to the interface (thus the breaking
change flag), because everyone probably would expect it to be there.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38840">#38840</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=d2ea90ac1c02d5bb63cdc3f8d1ac38041e5bee22">d2ea90a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-return-values-of-doctrine-repository-magic-methods">
<h3>[!!!][BUGFIX] Fix return values of Doctrine\Repository magic methods</h3>
<p>Overrides __call from EntityRepository to make the methods return
the expected QueryResultInterface. Also adds support for countBy().</p>
<p>This is marked as a breaking change because if you relied on the
specific return values before, you need to adjust your code.</p>
<p>Along the way the code inside __call() is simplified.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38841">#38841</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=53049d6c5f12450292bd8b7ec6a4c8264c858066">53049d6</a></li>
</ul>
</div>
<div class="section" id="bugfix-have-doctrine-repository-findall-return-a-queryresult">
<h3>[BUGFIX] Have Doctrine\Repository::findAll() return a QueryResult</h3>
<p>This makes the behavior of Doctrine\Repository consistent and
allows the use of findAll() e.g. in combination with widgets.</p>
<p>With this change, findAll() also observes the default ordering
of a repository.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35035">#35035</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38381">#38381</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=936581210737b8f0dd05a7f4e94b283740194418">9365812</a></li>
</ul>
</div>
<div class="section" id="task-correct-typos-in-coding-guidelines">
<h3>[TASK] Correct typos in Coding Guidelines</h3>
<p>This corrects some typos in PartV/CodingGuidelines of the
documentation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=219d22c83b7c3ae2027468abdc597154d2ecc9b4">219d22c</a></li>
</ul>
</div>
<div class="section" id="bugfix-injections-only-on-last-level-of-class-hierarchy">
<h3>[BUGFIX] Injections only on last level of class hierarchy</h3>
<p>Property injections are no longer called for every level of your
class hierarchy, which means they are only executed once now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31179">#31179</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=9ca9ac545a9a874075bc908a1b07365fb3420f5d">9ca9ac5</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-abstract-classes-in-ensureaggregaterootinheritancechainconsistency">
<h3>[BUGFIX] Skip abstract classes in ensureAggregateRootInheritanceChainConsistency</h3>
<p>When using an abstract base class for domain models, the checks done in
ensureAggregateRootInheritanceChainConsistency() would fail, even though
it is fine to have an abstract base class not being aggregate root.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31522">#31522</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=c01cc4a20553c585b4afc926e5563143aaffc93b">c01cc4a</a></li>
</ul>
</div>
<div class="section" id="task-add-annotation-reference-to-documentation">
<h3>[TASK] Add annotation reference to documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38669">#38669</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=ec458ee69fc5a6cde665027e32bb0f6121ed2055">ec458ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-order-of-monitoring-and-proxy-building">
<h3>[BUGFIX] Fix order of monitoring and proxy building</h3>
<p>During bootstrap file monitoring would be run too late,
so that while change detection worked fine, the results
were not used correctly: Reflection data was updated,
but that happened after DI proxy building, so that e.g.
added Inject annotations would not have the expected
effect.</p>
<p>This change moves file monitoring before reflection
initialization to fix this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37574">#37574</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=2b09113f409dc67c756c60fd6cf19ca1032c252e">2b09113</a></li>
</ul>
</div>
<div class="section" id="task-document-configuration-validation">
<h3>[TASK] Document configuration validation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38680">#38680</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=736c7c4f5789c09d810a645bbba221e0b8f25415">736c7c4</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-publishingconfiguration-to-be-persisted">
<h3>[BUGFIX] Allow PublishingConfiguration to be persisted</h3>
<p>Any resource publishing configuration attached to a resource could
not be persisted, because the needed mapping information for
Doctrine was missing and the target type of the relation was an
interface.</p>
<p>This change adds an AbstractPublishingConfiguration and the needed
annotations, plus a schema migration.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32826">#32826</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=31f255997d8f9f2c0437a104ac430b3efc0597e2">31f2559</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-f-uri-resource-title-parameter-in-guide">
<h3>[BUGFIX] Remove f:uri.resource title parameter in Guide</h3>
<p>The resource management documentation described a title parameter
for the ResourceViewHelper that ceased to exist a long time ago.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38382">#38382</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=f9f3a4fb66abb3aaf24ac6c737f264a7fb6ea776">f9f3a4f</a></li>
</ul>
</div>
<div class="section" id="task-add-typeconverter-reference">
<h3>[TASK] Add TypeConverter reference</h3>
<p>Tweaks the DateTimeConverter docblock to be proper reST.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38646">#38646</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=af7eb9e9d64a257d5865037592e24d7c717e9148">af7eb9e</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-timezone-override-side-effect-in-datetimeconverter">
<h3>[BUGFIX] Fix timezone override side effect in DateTimeConverter</h3>
<p>Specifying a timezone override in DateTimeConverter would lead to
wrong times due to the timezone being applied to the finished date
instance, not upon creation.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35369">#35369</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=195ec432616c2e790b8d6421c9551b89cdd2fa2b">195ec43</a></li>
</ul>
</div>
<div class="section" id="task-create-reflection-manual-page">
<h3>[TASK] Create Reflection manual page</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38561">#38561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=7c368357656e7d02506f8204b3dda8fba8e0d0ae">7c36835</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-indentation-in-contributing-to-flow3">
<h3>[BUGFIX] Fix indentation in &#8220;Contributing to FLOW3&#8221;</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38884">#38884</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=227aaacf13299d025c0f542507a9b4e2f543b4bd">227aaac</a></li>
</ul>
</div>
<div class="section" id="task-add-documentation-to-annotation-classes">
<h3>[TASK] Add documentation to annotation classes</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38669">#38669</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=51a4e2c973e9e592fced81e526015217bf3ed1d6">51a4e2c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-use-of-target-in-annotation-classes">
<h3>[BUGFIX] Fix use of Target in annotation classes</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38667">#38667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=280003f29746167f771064008f6bfa0cb95fd97b">280003f</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-execute-bit-on-some-files">
<h3>[BUGFIX] Adjust execute bit on some files</h3>
<p>This fixes the execute bit (and setfilepermissions.sh) so that
no differences are created when setting permissions on a fresh
clone.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36049">#36049</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=272893adddf7bdd4ae979edac7652180f6c97fba">272893a</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-some-code">
<h3>[TASK] Clean up some code</h3>
<p>Fixes some comments, style issues and API usage.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37574">#37574</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8e393d38794c3da3201562dede34649215a99626">8e393d3</a></li>
</ul>
</div>
<div class="section" id="feature-support-teardown-for-functional-tests-in-generic-persistence">
<h3>[FEATURE] Support tearDown for functional tests in generic persistence</h3>
<p>Implement a tearDown method in the generic persistence according to the
Doctrine PersistenceManager. The call is delegated to the underlying
backend.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38785">#38785</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8996d94c01686d010749448351b274be945edbbf">8996d94</a></li>
</ul>
</div>
<div class="section" id="bugfix-memcachedbackendtest-fail">
<h3>[BUGFIX] MemcachedBackendTest fail</h3>
<p>MemcachedBackendTest doesn&#8217;t use TYPO3\FLOW3\Core\ApplicationContext
to initialize MemcacheBackend.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38713">#38713</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=00ff17ef1149bdfa6df5fed07d06d94bd51280bb">00ff17e</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-internalrequestengine-for-each-functional-test">
<h3>[BUGFIX] Reset InternalRequestEngine for each functional test</h3>
<p>Currently all functional tests share the same instance of
\TYPO3\FLOW3\Mvc\Routing\Router because the InternalRequestEngine
is of scope singleton.
This leads to unexpected results and failing tests if tests add
custom routes.</p>
<p>This change fixes this by making the ObjectManager forget the
singleton instance of the request engine after each testrun.
This also reverts the changes that were introduced with
I5a5bf17d00c5be05748a18122dae42989f429221 as they did not
have the expected effect.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38435">#38435</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=06e21083c4f806973bcb1176d6ae74bd473a6ffc">06e2108</a></li>
</ul>
</div>
<div class="section" id="bugfix-baseuri-contains-default-https-port">
<h3>[BUGFIX] BaseUri contains default HTTPS port</h3>
<p>By resolving #37770 now the BaseUri and thus the base tag when
using &lt;f:base /&gt; contains the HTTP port if it&#8217;s not equal to 80.</p>
<p>This adjusts Request and Uri to omit the port if it is equal to
443 and the request scheme is https.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38547">#38547</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37770">#37770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fc7b877445e9172639663f461d2410f157f5fc5d">fc7b877</a></li>
</ul>
</div>
<div class="section" id="task-add-introduction-to-the-guide">
<h3>[TASK] Add &#8220;Introduction&#8221; to the guide</h3>
<p>Added introduction section for the guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=efe74d516d0c82994f28adc1e0867b9be1a74027">efe74d5</a></li>
</ul>
</div>
<div class="section" id="task-functional-tests-for-routing-framework">
<h3>[TASK] Functional tests for Routing Framework</h3>
<p>Adds testing routes to the provided Testing/Routes.yaml
file and adds tests covering mathing and resolving of
arbitrary routes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37608">#37608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=593f84a214b8ac1f432681d2aa74872b86857ea4">593f84a</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-a-code-migration-s-class-name">
<h3>[BUGFIX] Correct a code migration&#8217;s class name</h3>
<p>A code migration class name didn&#8217;t match its file name,
this patch corrects this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38442">#38442</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=e175c5223f352ed9a60cd3f6c91562736288459e">e175c52</a></li>
</ul>
</div>
<div class="section" id="id34">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=03bacc61e5de2a9f65698f17b7f137097eaede61">03bacc6</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-rc1">
<h3>[TASK] Add changelog for FLOW3 1.1.0-rc1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=8bb3a97b763ff014fbe270a32b4a8d17a8149ff0">8bb3a97</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-the-router-for-each-functional-test">
<h3>[BUGFIX] Reset the router for each functional test</h3>
<p>Currently all functional tests share the same instance of
\TYPO3\FLOW3\Mvc\Routing\Router because the InternalRequestEngine
is of scope singleton.
This leads to unexpected results and failing tests if tests add
custom routes.</p>
<p>This change fixes this by reinitializing the request engine for
each test case that has testableHttpEnabled set to TRUE.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38435">#38435</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Flow.git?a=commit;h=fe1e420c73c06d19d3ebef13872237db652ff3e7">fe1e420</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id36">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=6613e1ed236ee6a8653bcfe84b2677ae37ae7a70">6613e1e</a></li>
</ul>
</div>
<div class="section" id="task-correct-striptags-test-because-of-unintended-incompletion-result">
<h3>[TASK] Correct StripTags test because of unintended incompletion result</h3>
<p>A test&#8217;s data provider&#8217;s method name began with the character sequence
&#8216;test&#8217;, was hence regarded as test to be executed.
This resulted into an &#8220;Incomplete&#8221; result when running the tests.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=492a8daa397c66d2b7f07082f7d583a1a969ad66">492a8da</a></li>
</ul>
</div>
<div class="section" id="bugfix-replace-placeholders-in-fallback-for-id-translation">
<h3>[BUGFIX] Replace placeholders in fallback for id translation</h3>
<p>When using id based translation and no translation is defined in XLIFF,
the tag value is used as a fallback in TranslateViewHelper.</p>
<p>With this change, the fallback is passed to label based translation,
making placeholder replacement work also if no translation does exist
yet.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37387">#37387</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a4a939cbecd9f15b2bdb3e864b84f81a41371450">a4a939c</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-use-of-dashes-in-attribute-names-possible">
<h3>[BUGFIX] Make use of dashes in attribute names possible</h3>
<p>When using e.g. data-foo in VH tags, the parser would choke. This
change fixes this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38592">#38592</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=049704f0f77cdae986c03d8ca435013425c15881">049704f</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-wrong-use-of-internal-annotation">
<h3>[BUGFIX] Remove (wrong) use of Internal annotation</h3>
<p>The internal annotation is used to declare command methods
as internal, not to mark things as not being public API.</p>
<p>Furthermore, it is not allowed to be used on properties
and with #38667 fixed Fluid would cause exceptions.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38667">#38667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=7e68ea46467ec978c0bd54c25632582690eca6c2">7e68ea4</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-eval-from-standaloneviewtest">
<h3>[BUGFIX] Remove eval from StandaloneViewTest</h3>
<p>Removes the use of eval from the StandaloneViewTest so that
now a Fixture class is used that extends the StandaloneView.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38873">#38873</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31179">#31179</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=73c686b0ff4710e2a89f30a526f9bdb132723f95">73c686b</a></li>
</ul>
</div>
<div class="section" id="id43">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Fluid.git?a=commit;h=a479713a1f737e8cdb2b0d94eb2bbe4840814808">a479713</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id44">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=45931af82d389dd29374f2ed322b2e73d0d43b79">45931af</a></li>
</ul>
</div>
<div class="section" id="id45">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Kickstart.git?a=commit;h=fb00dfcbcb1ea28782c524aff96ca82f32b1d6b0">fb00dfc</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id46">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=6b182c15903ee80ac6f01158929d75128cfe3261">6b182c1</a></li>
</ul>
</div>
<div class="section" id="id47">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Party.git?a=commit;h=436c90f382bc1e857115d8a3cfeb7372629069f6">436c90f</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id48">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=97b935a91b05b40b88f18824c8a9d7dd2e95b52f">97b935a</a></li>
</ul>
</div>
<div class="section" id="id49">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/Flow/Packages/TYPO3.Welcome.git?a=commit;h=cb90a4ad9ca410102b929eca3ea895283ac3a5c1">cb90a4a</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="3293bca4-bc03-8911-e52a-1a4b6e373304" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="79611d5b-ed7f-9ac0-79d3-d8fd0d945432" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="200" locale="">
        <properties>
         <title>2.0.0</title>
        </properties>
        <node identifier="17b747ac-f2bd-d103-07e0-dee20a8307ae" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="59101976-8b9b-d83e-6796-9fefb89c9dc0" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>2.0.0</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-remove-minimum-stability-setting">
<h3>[TASK] Remove minimum stability setting</h3>
<p>This removes the minimum-stability so tagged releases of dependencies
are used. For doctrine/migrations it explicitly allows dev versions,
because no suitable stable release exists.</p>
<p>The packages that are part of TYPO3 Flow directly (Flow, Fluid, Party,
Welcome, Kickstart, BuildEssentials) are explicitly allowed in beta
state.</p>
<p>This change speeds up installation (because zip archives will be used
instead of git clones) and avoids surprises due to possibly unstable
code being pulled in.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47808">#47808</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=5fdd79788877109bb79d9f4ecc6d022aaaa07e5c">5fdd797</a></li>
</ul>
</div>
<div class="section" id="task-remove-jenkins-repository-from-composer-manifest">
<h3>[TASK] Remove Jenkins repository from  composer manifest</h3>
<p>Since our packages are on Packagist now, the Satis repository on Jenkins
should no longer be used by the public.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44022">#44022</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=e40206bcae662bc4bff1c56285f6d356d8f8f8f3">e40206b</a></li>
</ul>
</div>
<div class="section" id="task-update-composer-json-with-new-dependencies">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=7cdcca7f31c4b7ae9d3fd86cfd41e525b16e4318">7cdcca7</a></li>
</ul>
</div>
<div class="section" id="task-rename-vendor-to-libraries">
<h3>[TASK] Rename Vendor to Libraries</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42013">#42013</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=c46b3c34560f21a93e0781fe27c8738f2b899eed">c46b3c3</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-flow3-renaming">
<h3>[TASK] adjust to FLOW3 renaming</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=749ce7721bcea1e0499b034622fbc2b312bc03c7">749ce77</a></li>
</ul>
</div>
<div class="section" id="task-composerify-base-distribution">
<h3>[!!!][TASK] Composerify base distribution</h3>
<p>Removes submodules in favor of installing via composer. Files installed
via composer from the FLOW3 package are removed as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=3922aeaeadae68cb04e30722d5e6cf01b00b6382">3922aea</a></li>
</ul>
</div>
<div class="section" id="task-update-phoenix-project-name">
<h3>[TASK] Update phoenix project name</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=709e9a1aadb1add683d2b2a2cae487c0aed15cf1">709e9a1</a></li>
</ul>
</div>
<div class="section" id="task-do-not-recurse-into-submodules-for-phoenix-distribution">
<h3>[TASK] Do not recurse into submodules for Phoenix distribution</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=4d74d895f9556734425f4c5942485a995b6910cd">4d74d89</a></li>
</ul>
</div>
<div class="section" id="task-add-phoenix-distribution-build-surf-configuration">
<h3>[TASK] Add Phoenix distribution build surf configuration</h3>
<p>Note: This needs the corresponding change in BuildEssentials as well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38500">#38500</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=218bcbf45ff4cb0dcbeaea63e0b8826718cdf704">218bcbf</a></li>
</ul>
</div>
<div class="section" id="task-adjust-release-deployment-descriptor">
<h3>[TASK] Adjust release deployment descriptor</h3>
<p>This adds the configuration needed to push tags based on
the PUSH_TAGS environment variable and tweaks some tiny
(style) issues.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=34b5bfbe8670a8d6a7bd337b62f1edbf26ceefc0">34b5bfb</a></li>
</ul>
</div>
<div class="section" id="task-mention-phpsession-configuration-change-in-upgrading-txt">
<h3>[TASK] Mention PhpSession configuration change in Upgrading.txt</h3>
<p>This informs about the PhpSession settings key change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37993">#37993</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=839d0544a05036f2cefb04069428a94472baaf73">839d054</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-dead-symlinks-from-release-archives">
<h3>[BUGFIX] Remove dead symlinks from release archives</h3>
<p>The default Surf configuration symlinks Data and Configuration
to a shared folder. For release archives that leads to dead
symlinks being in the archives.</p>
<p>This changes disables both symlink tasks in the release
deployment descriptor.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37569">#37569</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=96c47dd4bc2476a06159157bf212a8906d3a719c">96c47dd</a></li>
</ul>
</div>
<div class="section" id="task-adjust-surf-deployment-descriptor">
<h3>[TASK] Adjust Surf deployment descriptor</h3>
<p>The deployment descriptor used to release archives of FLOW3
needed a little adjustment.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=5971c56a1dc387ccf905fca298d1bf51d3802503">5971c56</a></li>
</ul>
</div>
<div class="section" id="task-clean-upgrading-txt-from-1-1-content">
<h3>[TASK] Clean Upgrading.txt from 1.1 content</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=402ac49130f6d85e071133f0dfb878c2b4e6bda3">402ac49</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="feature-bind-routes-to-http-request-methods">
<h3>[FEATURE] Bind routes to HTTP request methods</h3>
<p>This change allows routes to be limited to certain request methods.
This is especially useful for REST services where you often need the
same URI to invoke different actions depending on the HTTP method.</p>
<p>Usage:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">-</span>
  <span class="nx">uriPattern</span><span class="o">:</span> <span class="s1">&#39;foo/bar&#39;</span>
  <span class="nx">defaults</span><span class="o">:</span>
    <span class="s1">&#39;@package&#39;</span><span class="o">:</span>    <span class="s1">&#39;Some.Package&#39;</span>
    <span class="s1">&#39;@controller&#39;</span><span class="o">:</span> <span class="s1">&#39;Standard&#39;</span>
    <span class="s1">&#39;@action&#39;</span><span class="o">:</span>     <span class="s1">&#39;first&#39;</span>
  <span class="nx">httpMethods</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">]</span>

<span class="o">-</span>
  <span class="nx">uriPattern</span><span class="o">:</span> <span class="s1">&#39;foo/bar&#39;</span>
  <span class="nx">defaults</span><span class="o">:</span>
    <span class="s1">&#39;@package&#39;</span><span class="o">:</span>    <span class="s1">&#39;Some.Package&#39;</span>
    <span class="s1">&#39;@controller&#39;</span><span class="o">:</span> <span class="s1">&#39;Standard&#39;</span>
    <span class="s1">&#39;@action&#39;</span><span class="o">:</span>     <span class="s1">&#39;second&#39;</span>
  <span class="nx">httpMethods</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;PUT&#39;</span><span class="p">]</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27117">#27117</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0b629987369565fb91c447511afdb962b68e3a80">0b62998</a></li>
</ul>
</div>
<div class="section" id="bugfix-doctrine-docparser-ignores-flow-autoloader">
<h3>[BUGFIX] Doctrine DocParser ignores Flow autoloader</h3>
<p>The Doctrine DocParser does not utilize the autoloaders
registered into spl_autoload. This change registers
the Flow autoloader into Doctrines AnnotionRegistry so
it will be used in the lookup.</p>
<p>The error only occurs in Production context, but
it&#8217;s hard to say how this change can be verified as
it seems to be very specific when the error occurs
and does not have to occur for all controller /
action combinations in the application.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48551">#48551</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6e22079902e0b2c7d0683242b463ce9982d2e473">6e22079</a></li>
</ul>
</div>
<div class="section" id="bugfix-controllers-must-not-be-of-scope-singleton">
<h3>[BUGFIX] Controllers must not be of scope singleton</h3>
<p>Removes the scope(&#8220;singleton&#8221;) annotation from the
provided base controllers.</p>
<p>Background:
Usually the scope of a controller doesn&#8217;t really make a difference,
because they are only instantiated once per request.
But if the same controller is used multiple times
(e.g. within two plugin/widget instances on one page) the side
effects could be very confusing.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/45647">#45647</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e6a334be9afee57d5261a47b9faacf75bb9bf8e3">e6a334b</a></li>
</ul>
</div>
<div class="section" id="bugfix-validation-is-not-reset-in-functional-tests">
<h3>[BUGFIX] Validation is not reset in functional tests</h3>
<p>If using the internal request engine (= in functional tests) the ValidationResolver
that contains a 1st level cache for validated objects is not properly reset.</p>
<p>This change fixes this by introducing a reset() method that is called by
InternalRequestEngine::sendRequest()</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46715">#46715</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=85f4f6aced36a935045e6e6428105d679f81a12c">85f4f6a</a></li>
</ul>
</div>
<div class="section" id="bugfix-provide-working-apache-settings-in-documentation">
<h3>[BUGFIX] Provide working apache settings in documentation</h3>
<p>The provided AllowOverride is now matching the needs of Flow.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48951">#48951</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2785f9d9510ac98f24b33261b893aeb5e02bbe85">2785f9d</a></li>
</ul>
</div>
<div class="section" id="bugfix-orm-fails-on-databases-with-low-maximum-length-for-table-names">
<h3>[BUGFIX] ORM fails on databases with low maximum length for table names</h3>
<p>This fixes a bug that creates too long database identifiers on
systems where maxIdentifierLength is less than 31 as Oracle has.</p>
<p>This patch fixes the bug in a backwards compatible way.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/49007">#49007</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=89db1038abee37e2c39a434df82bda0970faed04">89db103</a></li>
</ul>
</div>
<div class="section" id="task-fix-rst-markup-in-routing-chapter">
<h3>[TASK] Fix rST markup in Routing chapter</h3>
<p>Some code blocks were not correctly marked up, leading to block quotes
instead of code listings.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a93ddeb72d72858808a50b42eae1d296457a9875">a93ddeb</a></li>
</ul>
</div>
<div class="section" id="bugfix-exception-in-proxyclassbuilder-cannot-be-thrown-because-wrong-exception-message">
<h3>[BUGFIX] Exception in ProxyClassBuilder cannot be thrown because wrong exception message</h3>
<p>This leads to weird exceptions such as:</p>
<blockquote>
<div>Notice: Undefined variable: TYPO3\Flow\Command\ConfigurationCommandController</div></blockquote>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49370">#49370</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f6513a440d3a941db98bbe709a925fd1b033cdf3">f6513a4</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-a-serialization-problem-with-intercepted-request">
<h3>[BUGFIX]&nbsp;Fix a serialization problem with intercepted request</h3>
<p>This change fixes a recursive serialization problem where the
ActionRequest is serialized multiple times in a session entry.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49289">#49289</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ee843b5ec8eb9f3b9b01b63a1b6bb852edc0f51c">ee843b5</a></li>
</ul>
</div>
<div class="section" id="feature-iterator-support-for-apc-cache-backend">
<h3>[FEATURE] Iterator support for APC cache backend</h3>
<p>This adds support for iterating over entries of an APC cache.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/49185">#49185</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=95016a801e2ee4c4a181a44137db44b6efda517f">95016a8</a></li>
</ul>
</div>
<div class="section" id="bugfix-session-storage-has-poor-performance-for-hundreds-of-sessions">
<h3>[BUGFIX] Session storage has poor performance for hundreds of sessions</h3>
<p>Fixes an issue with the storage backend for sessions which resulted in
a bad overall performance when hundreds of sessions were active
simultaneously. The improved implementation is now based on two separate
cache storages and a new garbage collector which allows for more fine
grained tuning.</p>
<p>If you previously used a different than the default cache backend for
sessions, you will need to adjust your configuration because this
implementation is based on two distinct cache backend configurations
(see updated Caches.yaml).</p>
<p>The option name for setting the garbage collection probability has
changed: the settings now come with a dedicated section for garbage
collection which contains the probability and, added by this patch, the
maximum number of old sessions which may be removed by the garbage
collector during one invocation.</p>
<p>You need to flush caches with &#8211;force after applying this change set.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/49189">#49189</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49190">#49190</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=54d08ed5606ce4d87c63f0d571eeb4837679322b">54d08ed</a></li>
</ul>
</div>
<div class="section" id="feature-iterator-support-for-cache-frontends-backends">
<h3>[FEATURE] Iterator support for Cache Frontends / Backends</h3>
<p>This adds support for iterating over entries of a cache. In this
particular patch only support for the VariableFrontend and the file
based backends is included. Further implementations will be part of
separate commits.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49185">#49185</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f1c8c79f2aa6ba0ae7faf46a468f7e16c18823e1">f1c8c79</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-introduction-is-broken">
<h3>[BUGFIX] Property introduction is broken</h3>
<p>This change fixes property introduction through aspects by adding
missing checks for available property introductions.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39413">#39413</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=23492025086f7482d96dcc668ecb4615c31b1aa5">2349202</a></li>
</ul>
</div>
<div class="section" id="bugfix-session-garbage-collection-is-non-functional">
<h3>[BUGFIX] Session garbage collection is non-functional</h3>
<p>Fixes an issue with the newly introduced session handling which resulted
in a big amount of orphaned cache entries due to a non-functional
garbage collection. In combination with a non-optimized implementation
of the garbage collector, this resulted in very long request times if
thousands of entries existed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49021">#49021</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=32d97dcfa6b16ad5361ed1a94417e9951a347435">32d97dc</a></li>
</ul>
</div>
<div class="section" id="feature-add-setoption-to-curlengine">
<h3>[FEATURE] Add setOption() to CurlEngine</h3>
<p>This allows to configure cURL in the CurlEngine. Examples for use are
proxy server settings or SSL certification handling:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CurlEngine</span><span class="p">();</span>
<span class="nv">$engine</span><span class="o">-&gt;</span><span class="na">setOption</span><span class="p">(</span><span class="nx">CURLOPT_PROXY</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">);</span>
<span class="nv">$engine</span><span class="o">-&gt;</span><span class="na">setOption</span><span class="p">(</span><span class="nx">CURLOPT_PROXYPORT</span><span class="p">,</span> <span class="mi">8888</span><span class="p">);</span>
</pre></div>
</div>
<p>In addition the singleton scope of the CurlEngine is removed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43903">#43903</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=31ad55a74cb231e1c86c33b3e14b42b1780e51a8">31ad55a</a></li>
</ul>
</div>
<div class="section" id="task-small-documentation-correction">
<h3>[TASK] Small documentation correction</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b0816196c3bc71ece71f414bebbac853f2b3f21e">b081619</a></li>
</ul>
</div>
<div class="section" id="task-tiny-cgl-cleanup">
<h3>[TASK] Tiny CGL cleanup</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=67f9c72327058aca8999f36db3ceaaabd5870a2d">67f9c72</a></li>
</ul>
</div>
<div class="section" id="bugfix-cache-is-not-flushed-for-changes-in-sub-routes">
<h3>[BUGFIX] Cache is not flushed for changes in sub routes</h3>
<p>The CacheManager automatically flushes routing caches in
Development context if a Routes.yaml file was changed.
This extends the behavior to flush caches even if a custom
sub route (Routes.xyz.yaml) was modified.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47255">#47255</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43966">#43966</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2382549ff49e1e3460d890c131cb6b31ba602b55">2382549</a></li>
</ul>
</div>
<div class="section" id="feature-routing-nested-subroutes">
<h3>[FEATURE] Routing: Nested SubRoutes</h3>
<p>With this change it&#8217;s possible to load SubRoutes from other SubRoutes.
The syntax is the same as before with two additions:</p>
<ol class="arabic">
<li><dl class="first docutils">
<dt>You can specify a <tt class="docutils literal"><span class="pre">suffix</span></tt> in order to load a SubRoute from</dt>
<dd><p class="first last">a different file than the default <tt class="docutils literal"><span class="pre">Routes.yaml</span></tt></p>
</dd>
</dl>
</li>
<li><p class="first">You can set <tt class="docutils literal"><span class="pre">variables</span></tt> that will be replaced in the merged SubRoutes</p>
</li>
</ol>
<p>Usage:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">-</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Product&#39;</span>
  <span class="nx">uriPattern</span><span class="o">:</span> <span class="s1">&#39;products/&lt;EntitySubroutes&gt;&#39;</span>
  <span class="nx">defaults</span><span class="o">:</span>
    <span class="s1">&#39;@package&#39;</span><span class="o">:</span>    <span class="s1">&#39;My.Package&#39;</span>
    <span class="s1">&#39;@controller&#39;</span><span class="o">:</span> <span class="s1">&#39;Product&#39;</span>
  <span class="nx">subRoutes</span><span class="o">:</span>
    <span class="s1">&#39;EntitySubroutes&#39;</span><span class="o">:</span>
      <span class="nx">package</span><span class="o">:</span> <span class="s1">&#39;MyPackage.RestTest&#39;</span>
       <span class="c1"># load SubRoutes from My.Package/Configuration/Routes.Entity.yaml</span>
      <span class="nx">suffix</span><span class="o">:</span>  <span class="s1">&#39;Entity&#39;</span>
       <span class="c1"># replace placeholder &quot;&lt;entityName&gt;&quot; with &quot;product&quot;:</span>
      <span class="nx">variables</span><span class="o">:</span>
        <span class="s1">&#39;entityName&#39;</span><span class="o">:</span> <span class="s1">&#39;product&#39;</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43966">#43966</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=dc6ec95ecfd21a49eb0f1707f847a3e377dc14b6">dc6ec95</a></li>
</ul>
</div>
<div class="section" id="task-re-enable-and-fix-flowannotationdriver-tests">
<h3>[TASK] Re-enable and fix FlowAnnotationDriver tests</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=087d19a23393a0d7521a6f33df75aef056b6b757">087d19a</a></li>
</ul>
</div>
<div class="section" id="task-remove-leftover-package-manager-controller-for-cli">
<h3>[TASK] Remove leftover package manager controller for CLI</h3>
<p>This one was replaced by a command controller some time ago.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=18ff7ac5d33f6102593620fae8760c96a8a97758">18ff7ac</a></li>
</ul>
</div>
<div class="section" id="task-fix-mailing-list-uri-on-first-guide-page">
<h3>[TASK] Fix mailing list URI on first guide page</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a42d124200dadd2bec1cfe137851b3c2fdaad2ed">a42d124</a></li>
</ul>
</div>
<div class="section" id="task-update-configuration-schemas">
<h3>[TASK] Update configuration schemas</h3>
<p>This change updates the configuration schemas to the latest merges.</p>
<p>On top, it allows for configuration of doctrine connection
wrappers and the MasterSlaveConnection wrapper, that allows to setup
a master/slave database connection.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47346">#47346</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cb2d6fbdb8abe048eaf0bd36d080c842187250bf">cb2d6fb</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-missing-search-acl-to-file-permission-script">
<h3>[BUGFIX] Add missing &#8220;search&#8221; ACL to file permission script</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48133">#48133</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7d287860ba612676eabe6af88dfff4e03fb990f8">7d28786</a></li>
</ul>
</div>
<div class="section" id="task-some-translation-corrections-and-addition-of-french">
<h3>[TASK] Some translation corrections and addition of French</h3>
<ul class="simple">
<li>Add new trans-unit id and new target-language fr translation
for ValidationErrors.xlf</li>
<li>Add new file and new target-language fr for translation
for Main.xlf</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45279">#45279</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8666254913c7ee2c63ec844e8e60f174ebbbfe0e">8666254</a></li>
</ul>
</div>
<div class="section" id="task-fix-rst-markup-in-objectmanagement-chapter">
<h3>[TASK] Fix rST markup in ObjectManagement chapter</h3>
<p>A note block was not correctly marked up.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a75daf3df6b5f79ba39bbd878743f512f2f4d8e9">a75daf3</a></li>
</ul>
</div>
<div class="section" id="bugfix-authentication-does-not-work-any-longer-without-redirects">
<h3>[BUGFIX] Authentication does not work any longer without redirects</h3>
<p>This fixes a regression that made the authenticated roles only available
in the security context after a redirect following authentication.</p>
<p>Background:</p>
<p>This is a regression introduced with the 1st level cache added in
Id256b168ff9c6aa4cac8da8957ada237f9236c71 but the actual problem is
that the PersistenceQueryRewritingAspect initializes the security
context if it was not initialized before (since change
I44838de1503cbe49cf3fee51921b731bfaa0cfc5) when intercepting QOM
queries setting the context roles to &#8220;Anonymous&#8221; and &#8220;Everybody&#8221;.</p>
<p>This change adds a new method Context::withoutAuthorizationChecks()
that allows you temporarily disable authorization related interceptors
e.g. PolicyEnforcement and PersistenceQueryRewriting aspects in order
to be able to circumvent authorization in low level operations (for
example to fetch the current account in an AuthenticationProvider).</p>
<p>Usage:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">securityContext</span><span class="o">-&gt;</span><span class="na">withoutAuthorizationChecks</span><span class="p">(</span>
  <span class="k">function</span> <span class="p">(</span><span class="nv">$accountRepository</span><span class="p">,</span> <span class="nv">$username</span><span class="p">,</span> <span class="nv">$providerName</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$account</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// this will disable the PersistenceQueryRewritingAspect for this one call</span>
    <span class="nv">$account</span> <span class="o">=</span> <span class="nv">$accountRepository</span>
      <span class="o">-&gt;</span><span class="na">findActiveByAccountIdentifierAndAuthenticationProviderName</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span> <span class="nv">$providerName</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">);</span>
</pre></div>
</div>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46352">#46352</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46636">#46636</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b964e06bb30ce6eb6e2efcae8723d6b762876139">b964e06</a></li>
</ul>
</div>
<div class="section" id="bugfix-handle-open-basedir-properly-during-file-upload">
<h3>[BUGFIX] Handle open basedir properly during file upload</h3>
<p>This solves the issues of uploading files when using open_basedir
restriction. Instead of having to add the temporary upload
directory (upload_tmp_dir) in the open_basedir configuration,
which is a bad idea, this ensures that it works even though the
open basedir restricts access to the temporary upload directory.</p>
<p>Make sure that the temporary upload directory is writable to test
this issue.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45936">#45936</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=32410bdd9f63050ba48c812d8b3264b2591ae851">32410bd</a></li>
</ul>
</div>
<div class="section" id="task-adjust-dependencies-to-doctrine-packages">
<h3>[TASK] Adjust dependencies to doctrine packages</h3>
<p>This changes the dependencies to migrations and data-fixtures so they
explicitly point to dev versions. This allows to set the global minimum
stability to something lower than dev.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47808">#47808</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3d4d72334f25c0a343f52a09651f3787ce962183">3d4d723</a></li>
</ul>
</div>
<div class="section" id="bugfix-classloader-does-not-handle-underscore-correctly">
<h3>[BUGFIX] ClassLoader does not handle underscore correctly</h3>
<p>For class names containing an underscore the ClassLoader now correctly
replaces that with a directory separator when loading classes.</p>
<p>This fixes compatibility with some PSR-0 compatible composer packages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47675">#47675</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fd830e6a62dcdf321409ba2aa4d70a8aaf3da011">fd830e6</a></li>
</ul>
</div>
<div class="section" id="bugfix-initializeobject-is-no-longer-executed-twice">
<h3>[BUGFIX] initializeObject is no longer executed twice</h3>
<p>In every session-scope object initializeObject() was
called twice as soon as the session is started.
Now initializeObject() is only called once.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45609">#45609</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=298ee692ee2381d0b525e4da071ac9a3307e05b5">298ee69</a></li>
</ul>
</div>
<div class="section" id="task-complete-documentation-for-error-rendering-groups">
<h3>[TASK] Complete documentation for Error Rendering Groups</h3>
<p>This adds a section about how to configure and use the custom error
views resp. rendering groups.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39423">#39423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=29b87b09b08fe2d04a788d874862dd52b2b545ba">29b87b0</a></li>
</ul>
</div>
<div class="section" id="bugfix-propertymapper-now-normalizes-simple-types">
<h3>[BUGFIX] PropertyMapper now normalizes simple types</h3>
<p>This fixes a bug where the property mapper was unable to find a
valid typeconverter for properties annotated with int or bool.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47054">#47054</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f6d8d4fbc3a4cc5ce86c44089d146c37bc312fb7">f6d8d4f</a></li>
</ul>
</div>
<div class="section" id="bugfix-lazy-di-causes-endless-loop-for-certain-session-objects">
<h3>[BUGFIX] Lazy DI causes endless loop for certain session objects</h3>
<p>Fixes an issue with the Lazy Dependency Injection mechanism which caused
and endless loop if session-scoped objects were unserialized and later on
injected lazily.</p>
<p>Background:</p>
<p>when a session is resumed (rather early in the HTTP Request Handler), the
objects contained in the session are unserialized and register their
instance automatically at the Object Manager. If
such an object, for example the Security Context, is later on injected
lazily into another class, the generated proxy code will overwrite the
instance which was previously set at the Object Manager.</p>
<p>In the reported case the RequestHandler retrieved the Security Context
via ObjectManager-&gt;get() and received a DependencyProxy instead of the
expected real instance. On using it, the DependencyProxy called the
ObjectManager-&gt;get() method to retrieve the real instance which resulted
in a recursion.</p>
<p>This patch corrects the generated proxy code to check for an existing
real instance before trying to generate a Dependency Proxy.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46424">#46424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=be43db2a12c63d1da71272f5310186d56dceaa7b">be43db2</a></li>
</ul>
</div>
<div class="section" id="bugfix-generateuuid-creates-uppercase-characters-in-uuids">
<h3>[BUGFIX] generateUUID() creates uppercase characters in UUIDs</h3>
<p>The UUIDs generated by that method were always lowercase, now they are
uppercase (since change I1237fdfbee75cbfca2f2082cf30a69383dbc7fd5). As
soon as you do a case-sensitive comparison on those UUIDs as strings,
this will now break, even if the UUIDs are the same semantically.</p>
<p>This change makes them lowercase again.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47534">#47534</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46862">#46862</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=60ea1313d0206c8528830872eec2c7a712424b6e">60ea131</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-policyservice-createrole-to-use-the-role-object">
<h3>[BUGFIX] Fix PolicyService-&gt;createRole to use the Role object</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47500">#47500</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2399c8ab33f0f9c08799ba7df87d0ce4c18630a1">2399c8a</a></li>
</ul>
</div>
<div class="section" id="task-fix-spelling-error-related-to-static-method-advice-test">
<h3>[TASK] Fix spelling error related to static method advice test</h3>
<p>This was introduced with I15817e357d98eb78de8984a78582de5cdf16064e</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47371">#47371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=41b37104cb38d9b24740a0a10acf42f347412028">41b3710</a></li>
</ul>
</div>
<div class="section" id="bugfix-aop-erroneously-allows-to-advise-static-methods">
<h3>[BUGFIX] AOP erroneously allows to advise static methods</h3>
<p>Fixes an issue with the AOP proxy builder which erroneously allowed to
advise static methods which resulted in a PHP fatal error as soon as
such a method was called.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47371">#47371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a8e61f717b3a2f57a746aa0e38ebfe7a9341d175">a8e61f7</a></li>
</ul>
</div>
<div class="section" id="bugfix-generateuuid-can-be-broken-by-seeding-mt-rand">
<h3>[BUGFIX] generateUUID can be broken by seeding mt_rand</h3>
<p>Use randomizer which cannot be seeded / configured by userspace code.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46862">#46862</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e8f8e08e0885419651c494aff6ae804e8bf643b3">e8f8e08</a></li>
</ul>
</div>
<div class="section" id="bugfix-setparentroles-fails-if-passed-roles-contain-duplicates">
<h3>[BUGFIX] setParentRoles() fails if passed roles contain duplicates</h3>
<p>Fixes an issue where Doctrine failed inserting parent roles if the array
passed to Role-&gt;setParentRoles() contained duplicates.</p>
<p>Even though getParentRoles() does return roles without duplicates,
setParentRoles() did not filter duplicates and caused the SQL error
mentioned in the related issue ticket.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47473">#47473</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ec284d851ef79af9440dd94bb73168a56edbe886">ec284d8</a></li>
</ul>
</div>
<div class="section" id="bugfix-actioncontroller-throws-warning-because-of-short-method-names">
<h3>[BUGFIX] ActionController throws warning because of short method names</h3>
<p>Fixes an issue in ActionController which caused a PHP warning if the
concrete ActionController implementation contained methods whose name
was shorter than 7 characters.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47469">#47469</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=084d60756f361186676ee96042f38aaedf6eb4cd">084d607</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-hasrole-to-policyservice">
<h3>[BUGFIX] Add hasRole() to PolicyService</h3>
<p>The PolicyService needs hasRole() to allow checks for existing roles
without workarounds.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47416">#47416</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=899b0dc8d0f4f26d3123bb2eda041f99c01717e4">899b0dc</a></li>
</ul>
</div>
<div class="section" id="task-update-upgrading-txt">
<h3>[TASK] Update Upgrading.txt</h3>
<p>Adds some words about role handling and safe requests.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=451033a28227fbcb753fda6fb53cb18cb29b2c26">451033a</a></li>
</ul>
</div>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a82d6f9e5aa9a9ca1a43d2c7caf1c6dfb70e1a4e">a82d6f9</a></li>
</ul>
</div>
<div class="section" id="feature-http-method-tunneling">
<h3>[FEATURE] HTTP method tunneling</h3>
<p>This change allows the HTTP method to be overridden by the client.
This is especially useful for clients that only support a subset of the
supported methods (e.g. browsers).</p>
<p>The request method can be overridden by specifying a <tt class="docutils literal"><span class="pre">__method</span></tt>
argument. Additionally Flow now respects the <tt class="docutils literal"><span class="pre">X-HTTP-Method</span></tt>
respectively <tt class="docutils literal"><span class="pre">X-HTTP-Method-Override</span></tt> header.</p>
<p>usage:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;POST&quot;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;__method&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;DELETE&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Note:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">The</span> <span class="nx">HTTP</span> <span class="nx">request</span> <span class="nx">method</span> <span class="nx">can</span> <span class="nx">only</span> <span class="nx">be</span> <span class="nx">changed</span> <span class="k">for</span> <span class="nx">POST</span> <span class="nx">requests</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47137">#47137</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f5b5024bdb618b5b018188ea16bd138490a02b1c">f5b5024</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-exception-header-in-internalrequestengine">
<h3>[BUGFIX] Fix exception header in InternalRequestEngine</h3>
<p>When using the virtual browser in functional tests, the
InternalRequestEngine communicates any exceptions
which occurred during the request by adding special
headers to the HTTP response.</p>
<p>Previously the &#8220;X-Flow-ExceptionCode&#8221; header contained
exception codes like &#8220;#1222268609: &#8221;. This patch fixes
the rendering to just the code, like &#8220;1222268609&#8221;.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a8f20ca26b7039c3d8adb715b0e544511e8e3d74">a8f20ca</a></li>
</ul>
</div>
<div class="section" id="feature-skip-automatic-persistence-and-csrf-protection-for-safe-requests">
<h3>[!!!][FEATURE] Skip automatic persistence and CSRF protection for &#8220;safe&#8221; requests</h3>
<p>This change set introduces an important behavior for Flow applications:
HTTP request methods which are, by definition, considered to be &#8220;safe&#8221;
(that is, &#8220;read-only&#8221;) are now treated as such.</p>
<p>In practice it means that GET requests will not trigger a persistAll() call
anymore and CSRF protection for actions is not checked anymore if
the request is a GET request.</p>
<p>Please adjust your applications to cleanly observe this principle since
more optimizations in this direction are planned for later versions of
TYPO3 Flow.</p>
<p>This patch contains the corresponding documentation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47252">#47252</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e9d2336c740f8478a60aa0092fe536c068280222">e9d2336</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-mapper-can-again-map-account-roles">
<h3>[BUGFIX] Property mapper can again map account roles</h3>
<p>Due to the type hint in the setter method of roles, the property
mapper was unable to set the converted property.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47232">#47232</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=903271f4f4959c8ee279e61dcc894ffd9968e6c7">903271f</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow-exception-shouldn-t-be-in-use-statement">
<h3>[BUGFIX] Flow Exception shouldn&#8217;t be in use statement</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47253">#47253</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=524b0e5abfdf8c193dc86a925769659f5255d388">524b0e5</a></li>
</ul>
</div>
<div class="section" id="bugfix-system-roles-don-t-get-a-package-namespace">
<h3>[BUGFIX] System roles don&#8217;t get a package namespace</h3>
<p>The role change I39f335baa01fbe9b883e98e85cb1f063bbaf5744
introduced the automatic prepend of the package namespace
where the role has been defined; except for system roles
which are at the moment Anonymous and Everybody.</p>
<p>For ACLs, however, the package namespace has been prepended
also for the system roles. This fixes that behavior.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47229">#47229</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28862">#28862</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5936bb558470a485cee61948c030e498c1af0d5f">5936bb5</a></li>
</ul>
</div>
<div class="section" id="task-use-composer-installers-instead-of-own-fork">
<h3>[TASK] Use composer/installers instead of own fork</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7d38c53dc1de23ebdd0101b0945661a9a845396c">7d38c53</a></li>
</ul>
</div>
<div class="section" id="feature-static-compilation-of-compile-time-data">
<h3>[FEATURE] Static compilation of compile time data</h3>
<p>Implement a CompileStatic annotation for static methods that will be
evaluated by the proxy builder in production. Update bootstrap and some
classes to enable efficient caching of reflection information and lazy
loading of the reflection service.</p>
<p>Note: It is not possible to give a type hint to those static methods,
since it could be a DependencyProxy that is actually passed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46371">#46371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6d56d5f73a93e2edaa7ea5d25050d9259e4296c7">6d56d5f</a></li>
</ul>
</div>
<div class="section" id="task-remove-operator-again-in-simplefilebackend-and-classloader">
<h3>[TASK] Remove &#64;-operator again in SimpleFileBackend and ClassLoader</h3>
<p>This change removes the shut-up operator again from include_once()
calls in the ClassLoader and SimpleFileBackend in order to provide
meaningful error messages to the developer if class files or cache
entries were not found.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46689">#46689</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d4f25bd9fadccc1b7c27a68f7b00289499bb450">8d4f25b</a></li>
</ul>
</div>
<div class="section" id="task-two-tweaks-to-the-documentation">
<h3>[TASK] Two tweaks to the documentation</h3>
<p>Add a hint on setting the default collation for MySQL and tweak the
installation instructions a tiny bit.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c90918c71d93914cbb787e3602a4f2b39d9a252b">c90918c</a></li>
</ul>
</div>
<div class="section" id="bugfix-keep-array-keys-with-nested-descendall-in-jsonview">
<h3>[BUGFIX] Keep array keys with nested _descendAll in JsonView</h3>
<p>When nesting _descendAll the JsonView discards array keys. This change
fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46046">#46046</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b21ad76f92ea34d4a0fff26e83c862059e508ca4">b21ad76</a></li>
</ul>
</div>
<div class="section" id="feature-support-arguments-in-scripts-executecommand">
<h3>[FEATURE] Support arguments in Scripts::executeCommand</h3>
<p>Previously it was not supported to have command arguments in a CLI
subcommand. This patch solves this issue by adding a $commandArguments
parameter to the executeCommand() method.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46072">#46072</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5ee0e9deaf97b96d12426cdf0cf09e20b890f7a1">5ee0e9d</a></li>
</ul>
</div>
<div class="section" id="feature-allow-influencing-ini-usage-for-sub-process">
<h3>[FEATURE] Allow influencing ini usage for sub process</h3>
<p>With a newly introduced configuration directive
<tt class="docutils literal"><span class="pre">TYPO3.Flow.core.subRequestPhpIniPathAndFilename</span></tt> it
is now possible to control whether to use an ini file
or not for sub processes. The allowed values for this
setting might either be NULL or not set to use the
parent process&#8217; ini file; or might be a path to a
specific ini file.</p>
<p>If this setting is set to <tt class="docutils literal"><span class="pre">false</span></tt>, no explicit ini file
will be used for sub processes.</p>
<p>Additionally, this patch refactors the actual command
generation out of the execution method in order to make
it unit-testable, which is also included in this patch.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45178">#45178</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8c6aab2b16c8020535862ae76008ec485b6f6ea4">8c6aab2</a></li>
</ul>
</div>
<div class="section" id="bugfix-initialize-rolerepository-correctly">
<h3>[BUGFIX] Initialize $roleRepository correctly</h3>
<p>The $roleRepository is set &#8220;manually&#8221; in initializeRolesFromPolicy() -
only if caches are outdated. But the $roleRepository is needed even if
the caches are up to date, so this breaks.</p>
<p>This change moves the initialization outside the check.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47115">#47115</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f2f334d51d64b9c81fff8c566eb23a9cf2b76d45">f2f334d</a></li>
</ul>
</div>
<div class="section" id="task-throw-exception-on-lacking-var-annotation">
<h3>[TASK] Throw exception on lacking &#64;var annotation</h3>
<p>In the Validation\ValidationResolver now an
exception is thrown if the validated
property does not have an &#64;var annotation
which is mandatory.</p>
<p>This prevents a Notice exception when
accessing the not present &#8216;var&#8217; key
on the tag values array, and gives instead
a more helpful exception message.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d5fff3f64b54437db774e922b85262abac4e2723">d5fff3f</a></li>
</ul>
</div>
<div class="section" id="task-re-add-testing-routes-yaml">
<h3>[TASK] Re-add Testing Routes.yaml</h3>
<p>This partly reverts I9aa80105cf05e675fbb6ca26bd99f377f52254c8
which rendered functional routing tests useless (they are skipped if
the testing routes are not available).</p>
<p>Now, if Flow Subroutes are included in a distribution, Routing tests
will be executed again.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=30f916ce983b2d0cfe56fdf9d8e2fd2e20cf5a55">30f916c</a></li>
</ul>
</div>
<div class="section" id="task-add-default-route-in-functional-test-for-security">
<h3>[TASK] Add default route in functional test for security</h3>
<p>If the Flow framework routes were not mounted some functional tests
failed due to the request matcher of the TestingProvider. This change
adds the required route programatically. Since the Routes.yaml for
functional tests is not needed anymore it can be removed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=96493aba44faf36ed59f0422361a72d69146ed8b">96493ab</a></li>
</ul>
</div>
<div class="section" id="feature-handle-roles-consistently-as-objects">
<h3>[!!!][FEATURE] Handle roles consistently as objects</h3>
<p>With this change roles are consistently used as objects.</p>
<p>To prevent naming conflicts between roles from different packages the
package key is added to the role names.</p>
<p>The handling of roles now is more strict and does not allow the use of
not configured (non-existent) roles anymore.</p>
<p>Roles are now referenced as real instances instead of their string
identifiers in models. Roles which were defined in policies are now
automatically mirrored to the RoleRepository (usually stored as a
table in a database).</p>
<p>The getRoles() method has been removed from TokenInterface.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/28862">#28862</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43578">#43578</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37451">#37451</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27698">#27698</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=28e52aa8883c1fabc630b2f0f7756f72adaf1707">28e52aa</a></li>
</ul>
</div>
<div class="section" id="feature-allow-split-configuration-sources">
<h3>[FEATURE] Allow split configuration sources</h3>
<p>With this change it is possible to allow split configuration sources
when defining a custom configuration type. This allows to use multiple
YAML for a type (when using the bundled YamlSource), which will be
merged together.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37854">#37854</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b783aec907500d918283bd1c3444a79201989757">b783aec</a></li>
</ul>
</div>
<div class="section" id="feature-allow-custom-custom-configuration-files-in-configurationmanager">
<h3>[FEATURE] Allow custom custom configuration files in ConfigurationManager</h3>
<p>Using the added methods it is possible to register new &#8220;types&#8221; of
configuration. The set of processing types remains constant, but one
can now e.g. register &#8220;Assets&#8221; as configuration type and use the
&#8220;Settings&#8221; processing rule for that. This way it it possible to move
settings for assets into a dedicated file, &#8220;Assets.yaml&#8221;.</p>
<p>The change adds</p>
<ul class="simple">
<li>resolveConfigurationProcessingType() method</li>
<li>registerConfigurationType() method</li>
<li>2 tests to add a new ConfigurationType</li>
<li>emitConfigurationManagerReady() to register new ConfigurationTypes during boot</li>
</ul>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37854">#37854</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=78078564f6c3aad3ababfb4a1262d41a444f3a0f">7807856</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-sessionless-authentication">
<h3>[FEATURE] Support for sessionless authentication</h3>
<p>This feature enables authentication without the need of a session to
be started. This is useful for stateless services (e.g. REST) where
you don&#8217;t want Flow to create a session cookie.</p>
<p>Authentication tokens which don&#8217;t rely on a session simply implement
the SessionlessTokenInterface marker interface.</p>
<p>This patch reverts parts of the first implementation of sessionless
authentication introduced in <a class="reference external" href="https://review.typo3.org/#/c/18388">https://review.typo3.org/#/c/18388</a>
(commit I5f86cb7a3a3fff3220d61d705f216e1b1d4f2369).
The original implementation was a breaking change with a few
unresolved side effects.</p>
<p>The implementation contained in this change set is backwards
compatible with already existing authentication tokens which
relied on sessions.</p>
<p>This patch also contains a small speed optimization for the CSRF
Protection pattern which assumes that no account has been
authenticated yet if the Authentication Manager is still a Dependency
Proxy.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45282">#45282</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46428">#46428</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ff5de86a050865abee0fb5c860261c66710b74f5">ff5de86</a></li>
</ul>
</div>
<div class="section" id="bugfix-session-add-safeguard-against-incompatible-request-handlers">
<h3>[BUGFIX] Session: add safeguard against incompatible request handlers</h3>
<p>This adds additional checks and throws an exception if a session should be
started but the currently active request handler does not implement the
HttpRequestHandlerInterface.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44087">#44087</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=27e892dbbbb17a5f04deea1f359b2d5872d1b1c2">27e892d</a></li>
</ul>
</div>
<div class="section" id="bugfix-reduce-side-effects-of-sessions-used-in-functional-tests">
<h3>[BUGFIX] Reduce side effects of sessions used in functional tests</h3>
<p>This patch makes sure that once a session has been closed or
destroyed, it will rebuild information determined from the request /
response in case it is started again.</p>
<p>While this scenario (a session is closed and started again during
the same PHP request) is uncommon in real world projects, it may
happen during functional tests. Therefore this is mainly a fix to
reduce side effects in functional tests.</p>
<p>A concrete side effect Flow has without this patch is that session
cookies are set to the HTTP response only when a session was
started the first time.</p>
<p>This patch also adds an explanation about starting / resuming
sessions to the class doc comment.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46703">#46703</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44202">#44202</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8f6917b64af670e3b0bd4d288b94fde74971ae6c">8f6917b</a></li>
</ul>
</div>
<div class="section" id="task-cache-result-of-isauthenticated-in-authenticationprovidermanager">
<h3>[!!!][TASK] Cache result of isAuthenticated in AuthenticationProviderManager</h3>
<p>This change will calculate the result of the authentication in
authenticate() and respect the authentication strategy for the result.
The authenticate() method will be called lazily if not done before.</p>
<p>This is breaking since isAuthenticated() before would behave like the
&#8220;at least one token&#8221; strategy was used, even the strategy was set to
&#8220;all tokens&#8221;.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3fc07ade13ac9f4beca541b6bd0a2ad01fa25008">3fc07ad</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow-should-work-with-php-versions-lower-than-5-3-9">
<h3>[BUGFIX] Flow should work with PHP versions lower than 5.3.9</h3>
<p>The change Ia42e374202845dfe5e95c72512e9fefb4f00e789 introduced
usage of is_a() with 3 arguments which is only implemented from
PHP 5.3.9. This change replaces the call with a manual check for
inheritance.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32829">#32829</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f64f3cc984c1dad5455036700b14b1353ce7af3e">f64f3cc</a></li>
</ul>
</div>
<div class="section" id="task-use-property-injection-where-possible">
<h3>[TASK]&nbsp;Use property injection where possible</h3>
<p>This change refactors setter injection to property injection to allow
lazy dependency injection.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d65ba467a0579149bfa291ef1407d5dd8525e150">d65ba46</a></li>
</ul>
</div>
<div class="section" id="task-optimize-i18n-service">
<h3>[TASK] Optimize I18N service</h3>
<p>This change makes the I18N service usable for lazy loading by removing
it from the default runtime. Additionally the Locale class is marked
as non-proxyable to prevent calls to the wakeup function.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a9db0dc455d32da7d26a4790ff64665f8082ab8f">a9db0dc</a></li>
</ul>
</div>
<div class="section" id="feature-set-packagetype-when-creating-new-package">
<h3>[FEATURE] Set packageType when creating new package</h3>
<p>When calling packageManager-&gt;createPackage you have
no way to define what package type you are creating.</p>
<p>This allows for ex. SiteKickstarter to set correct
package type in composer manifest</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44258">#44258</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0146a6228a33ed17cc60030f4d0bb44eb12c0acd">0146a62</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-side-effects-in-apc-cache-backend">
<h3>[BUGFIX] Avoid side effects in APC cache backend</h3>
<p>When more than one cache was using the APC cache backend, use of the
same entry identifiers would cause side effects, as the frontends would
access the same entries.</p>
<p>This is fixed by including the cache identifier in the prefix hash.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44471">#44471</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38135">#38135</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=84d3271ebad7f5eaba08ec4ef67171e2d21397b0">84d3271</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-variable-type-declaration-in-security-context">
<h3>[BUGFIX] Fix variable type declaration in Security\Context</h3>
<p>The $request member is annotated as being Http\Request but must be
Mvc\ActionRequest instead.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44743">#44743</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f8791c69d6d4c4ce1d7ce5adbe29714f416749c0">f8791c6</a></li>
</ul>
</div>
<div class="section" id="task-adjust-tests-to-rewritten-urls-in-functional-tests">
<h3>[TASK] Adjust tests to rewritten URLs in functional tests</h3>
<p>The resolution for #44434 makes Flow behave as if mod_rewrite was
available during functional tests. Some tests checking against
generated URLs need to be adjusted, so they no longer expect it  to
produce links with embedded &#8220;index.php&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/44434">#44434</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ee050af39aa52d12aa7ec776ae71e2fe419a9c97">ee050af</a></li>
</ul>
</div>
<div class="section" id="bugfix-actually-do-regex-search-replace-in-code-migrations">
<h3>[BUGFIX] Actually do regex search/replace in code migrations</h3>
<p>Actually makes searchAndReplaceRegex() in code migrations do something
with the target files.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44402">#44402</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2ee1ea0f9b61920b817a84d807bdd03e9ffea8d1">2ee1ea0</a></li>
</ul>
</div>
<div class="section" id="bugfix-enable-settings-override-with-empty-array-value">
<h3>[!!!][BUGFIX] Enable settings override with empty array value</h3>
<p>This change updates the behavior of arrayMergeRecursiveOverrule such
that empty arrays are also treated as empty values. If you used this
function before it can lead to different results after the change.</p>
<p>Before the change an empty array value was always merged
into the first array, even if emptyValuesOverride was set to TRUE.
With the new behavior an empty array value overrides a given input
value if emptyValuesOverride is set. This allows to override settings
with an empty array in the settings hierarchy.</p>
<p>This change is breaking if your settings hierarchy depends on
empty array values not overriding a parent configuration.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36720">#36720</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=339f877cf93665d25932a7a2da45b1a4c6b5c8ee">339f877</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-upload-of-files-without-file-extension">
<h3>[BUGFIX] Allow upload of files without file extension</h3>
<p>This change allows upload of files without a file extension. The upload
of PHP-Files is still not allowed. The method importUploadedResource
does not have a unit test, since it is not testable through the use of
move_uploaded_file.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46536">#46536</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8210663811ac91ec6e822319a6876572b2ce1990">8210663</a></li>
</ul>
</div>
<div class="section" id="bugfix-compile-original-and-proxy-class-into-one-file">
<h3>[BUGFIX] Compile original and proxy class into one file</h3>
<p>Reduce amount of file inclusions by combining original class
code and proxy class code into the same file as both need to
be loaded anyway.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46338">#46338</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=29636d53d0a8db3277696942a84b6183263c2a36">29636d5</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-unneeded-filesystem-calls">
<h3>[BUGFIX] Remove unneeded filesystem calls</h3>
<p>This change removes a call to is_dir in the FileMonitor
which is duplicate as the ReadDirectoryRecursively does
exactly the same and throws an error in this case.
Also 2 calls to file_exists are removed as they&#8217;re not
necessary at this point as filemtime() will just return
FALSE if something goes wrong.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46290">#46290</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ab5f67c48ab44a96d29aab0f5b08a0b9e8bccdc7">ab5f67c</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-flow-doctrine-cache-adapter">
<h3>[BUGFIX] Add Flow-Doctrine cache adapter</h3>
<p>This adds a cache adapter for Doctrine. It is used for the Doctrine ORM
metadata and query cache instead of the ArrayCache used until now.</p>
<p>Until now the cache implementations of Doctrine that could be configured
were not usable. This change fixes that, so that actually a cache for
metadata and query caching is used.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45264">#45264</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e5933c388ca151e09167f42d80938a6cc1719eed">e5933c3</a></li>
</ul>
</div>
<div class="section" id="task-keep-roles-until-tokens-get-updated">
<h3>[TASK] Keep roles until tokens get updated</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46352">#46352</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=750ad089bc8f8b26f362bb2e340fb3738b373076">750ad08</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-security-related-functional-tests">
<h3>[BUGFIX] Fix security related functional tests</h3>
<p>With the fix related to &#8220;sessionless authentication&#8221;
(I5f86cb7a3a3fff3220d61d705f216e1b1d4f2369) settings have been
adjusted in order to use the testing provider &amp; token only for requests
matching a ControllerObjectName of &#8220;TYPO3\Flow\Tests\.*&#8221;.</p>
<p>This change adjusts the tests accordingly.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/45282">#45282</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45953">#45953</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6a94328fee89740dc40edc930125840fae3d0025">6a94328</a></li>
</ul>
</div>
<div class="section" id="id91">
<h3>[!!!][FEATURE] Support for &#8220;sessionless authentication&#8221;</h3>
<p>This feature enables authentication without the need of a session to be started.
This is useful for stateless services (e.g. REST) where you don&#8217;t want Flow to create
a session cookie.</p>
<p>This is a breaking change if you created a custom authentication provider or -token
and relied on the fact that AuthenticationProvider::authenticate() started a session.
With this change the session is started when AuthenticationToken::updateCredentials() is
called. This way the token can decide if it needs a session.
Just add a &#64;Flow\Session(autoStart=true) to the updateCredentials() method if your custom
token relies on a session.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45282">#45282</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=158f3519fd043533c3deef8dbc300527a0020490">158f351</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-security-related-unit-test-failures">
<h3>[BUGFIX] Fix security-related unit test failures</h3>
<p>The change I724c1b352dd1807ba53b1e336f2d90e90360ff4d introduced some
test failures. This change takes care of the failing unit tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42601">#42601</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=18fa6d16149925e01eafc67a345cfaa3c6265243">18fa6d1</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-security-related-functional-test-failures-part-2">
<h3>[BUGFIX] Fix security-related functional test failures, part 2</h3>
<p>The change I724c1b352dd1807ba53b1e336f2d90e90360ff4d introduced some
test failures. This change takes care of the failing functional tests.</p>
<p>It does that by:</p>
<ul class="simple">
<li>setting the &#8220;current request&#8221; again after a call to clearContext() in
ContentSecurityTest</li>
<li>adjusting the expected exception in MethodSecurityTest in two places</li>
</ul>
<p>This is a followup to I353e2cba11473cf9ddef82f96b6a79d9d6fefbba which
was broken after having fixed those already.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42601">#42601</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44765">#44765</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5612a5619107d5e40728264a19a0fb02bad460ec">5612a56</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-security-related-functional-test-failures">
<h3>[BUGFIX] Fix security-related functional test failures</h3>
<p>The change I724c1b352dd1807ba53b1e336f2d90e90360ff4d introduced some
test failures. This change takes care of the failing functional tests.</p>
<p>It does that by:</p>
<ul class="simple">
<li>changing the order in which security is set up in the
FunctionalTestCase provided by Flow.</li>
<li>setting the &#8220;current request&#8221; again after a call to clearContext() in
ContentSecurityTest</li>
<li>adjusting the expected exception in MethodSecurityTest in two places</li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44765">#44765</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42601">#42601</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=26a56543fb2227c4664b107d7c72cae688b6bbfc">26a5654</a></li>
</ul>
</div>
<div class="section" id="bugfix-the-security-context-is-only-allowed-to-be-initialized-after-routing-took-place">
<h3>[BUGFIX] The security context is only allowed to be initialized after routing took place</h3>
<p>This bugfix solves the root-cause for the following two symptoms:</p>
<ul class="simple">
<li>two logins needed in Neos until the Site is shown</li>
<li>if the Flow_Mvc_Routing_FindMatchResults cache is deactivated completely,
the login does not work at all.</li>
</ul>
<p>The problem is as follows:</p>
<ul>
<li><p class="first">The security context needs the current request for working properly;
such that it can separate the active and inactive tokens correctly in
\TYPO3\Flow\Security\Context::separateActiveAndInactiveTokens()</p>
</li>
<li><p class="first">The current request is built during routing. Thus, the routing mechanism
(f.e. RoutePart handlers) is not allowed to access the Security Context
in any way. If it does (like in this example), things might break in various
ways.</p>
</li>
<li><p class="first">For Neos, the following call chain takes place:</p>
<blockquote>
<div><ul>
<li><p class="first">Routing</p>
</li>
<li><p class="first">FrontendNodeRoutePartHandler-&gt;matchValue line 51</p>
</li>
<li><p class="first">NodeService-&gt;getNodeByContextNodePath() line 57</p>
</li>
<li><p class="first">new ContentContext() calls &#8220;initializeObject&#8221;</p>
</li>
<li><p class="first">ContentContext-&gt;initializeObject does $this-&gt;domainRepository-&gt;findByHost()</p>
</li>
<li><p class="first">this internally uses Repository-&gt;findAll()</p>
</li>
<li><p class="first">this executes the TYPO3\Flow\Security\Aspect\PersistenceQueryRewritingAspect-&gt;rewriteQomQuery</p>
</li>
<li><p class="first">because Neos has policy entries for entities (TYPO3\TYPO3CR\Domain\Model\Node),
$this-&gt;securityContext-&gt;initialize() is called, WITHOUT HAVING A
REQUEST SET BEFORE.</p>
</li>
<li><p class="first">This results in a half- and wrongly-initialized Security Context
set up, with activeTokens not properly set, and also only the
standard roles assigned (&#8220;Everybody&#8221;).</p>
</li>
<li><dl class="first docutils">
<dt>Thus, the check in TYPO3\Neos\Controller\Frontend\NodeController-&gt;showAction() fails:</dt>
<dd><p class="first last">$this-&gt;accessDecisionManager-&gt;decideOnResource(&#8216;TYPO3_Neos_Backend_BackendController&#8217;);</p>
</dd>
</dl>
</li>
<li><p class="first">This redirects the user back to the login ($this-&gt;redirect(&#8216;index&#8217;, &#8216;Login&#8217;))</p>
</li>
<li><p class="first">Now, if the routing cache is activated, the aspect kicks in (in
the second iteration) and directly returns the match result, without
triggering a database query before.</p>
</li>
</ul>
</div></blockquote>
</li>
</ul>
<p>Thus, we need to enforce that the security context is not initialized during
the routing phase.</p>
<p>The attached patch is just a quick fix; with not really the clean solution.
But at least it works and the problem is properly described ;-)</p>
<p>This is a follow-up to issue #42601; where the according code has been
implemented.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ff2a4117465b5b108dfac55bfdf7d1dd3aaf1034">ff2a411</a></li>
</ul>
</div>
<div class="section" id="bugfix-throw-exception-when-using-options-with-singleton-validators">
<h3>[BUGFIX] Throw exception when using options with singleton validators</h3>
<p>Validators being singleton must not be called with options because
the options are then inherent properties of the Validator and cannot
be executed subsequently with other options.</p>
<p>An exception is thrown if such a case occurs because it is then
a design mistake of the developer.</p>
<p>Besides, this improves the namespace use a bit.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34872">#34872</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=05fc389ba3bf7022960cfd6cd9f66f1f82732f11">05fc389</a></li>
</ul>
</div>
<div class="section" id="bugfix-reintroduce-support-for-entities-with-custom-id-properties">
<h3>[BUGFIX] Reintroduce support for entities with custom id properties</h3>
<p>This adjusts the pointcut expressions of the PersistenceMagicAspect
to introduce UUID identifiers only to entities that do not contain custom
identifier properties (annotated with &#64;ORM\Id).</p>
<p>This change also refactors the unit tests and adds functional tests for
the aspect.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46883">#46883</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=20270da59e12142d4a4e9282bfe779505a9998a5">20270da</a></li>
</ul>
</div>
<div class="section" id="task-code-cleanup-in-error-classes">
<h3>[TASK] Code cleanup in Error classes</h3>
<ul class="simple">
<li>Make proper use of namespace</li>
<li>Fixes a number of CGL violations</li>
<li>Fixes other small issues</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0efc639ea60a6fd2bdc80f6bc918c2b2ff65d5e9">0efc639</a></li>
</ul>
</div>
<div class="section" id="task-some-documentation-fixes-regarding-caching">
<h3>[TASK] Some documentation fixes regarding Caching</h3>
<p>This corrects an incorrect mentioned of <tt class="docutils literal"><span class="pre">Settings.yaml</span></tt>
(which must be <tt class="docutils literal"><span class="pre">Objects.yaml</span></tt> correctly), and some
occurrences of an unnecessary additional colon in a
literal block (<tt class="docutils literal"><span class="pre">::</span></tt>)</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7a93e92aefc7bf3f1b6a829ee7aa5bd978d92118">7a93e92</a></li>
</ul>
</div>
<div class="section" id="bugfix-stringlengthvalidator-should-use-utf-8-safe-function">
<h3>[BUGFIX] StringLengthValidator should use UTF-8 safe function</h3>
<p>StringLengthValidator no longer uses strlen to determine the
length of the string to be validated but uses the
Utility\Unicode\Functions::strlen method which relies on
mb_string internally.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36159">#36159</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=33ca0190410ebee2fcc1a76e6fed29ff5e14092c">33ca019</a></li>
</ul>
</div>
<div class="section" id="task-optimize-validation-to-improve-performance">
<h3>[TASK] Optimize Validation to improve performance</h3>
<p>The validation result object traverses the whole result-
tree every time someone checks for errors, notices or
warnings.</p>
<p>This patch refactors the Result object to cache the result
internally and propagate changes to the parent result object.</p>
<p>In addition the heavy merge actions use this cached
information to prevent unnecessary operations.</p>
<p>Furthermore the validators are reworked to prevent
superfluous object creation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46340">#46340</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e7ac72fedde36df838183d34a191c33c79bd5ce9">e7ac72f</a></li>
</ul>
</div>
<div class="section" id="task-add-unit-tests-for-utility-algorithms">
<h3>[TASK] Add Unit Tests for Utility\Algorithms</h3>
<p>This adds Unit Tests for the Utility\Algorithms class and its functions.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=50e730f7b682910e9678f442ee604c83a39c0f6d">50e730f</a></li>
</ul>
</div>
<div class="section" id="bugfix-undefined-index-breaks-logger-setup-in-production">
<h3>[BUGFIX] Undefined index breaks logger setup in Production</h3>
<p>With I6da4763fb94798b1d1647b6108457996a48aa128 the logger used for the
system log was made configurable. In Production context, when cached
settings are used, this breaks after an update - and even &#8211;force with a
cache flush does not help.</p>
<p>This change adds a safeguard against the settings not being there.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/40738">#40738</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46053">#46053</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8ece74988defc7b3b38e8d2dbcbe76987a18883a">8ece749</a></li>
</ul>
</div>
<div class="section" id="feature-make-system-logger-frontend-configurable">
<h3>[FEATURE] Make System Logger frontend configurable</h3>
<p>Move hard coded TYPO3\FLOW3\Log\Logger to Settings.yaml instead. This
allows a user to fully replace the logger instead of just adding or
removing backends.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40738">#40738</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46053">#46053</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b1c23134f132bfce2b2eb828222b966d3e06e360">b1c2313</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-the-abstractexceptionhandler-check-for-error-reporting">
<h3>[BUGFIX] Make the AbstractExceptionHandler check for error_reporting()</h3>
<p>When the shut-up operator is used in PHP the error_reporting level is
temporarly lowered to 0. The AbstractExceptionHandler does not check
for this, and outputs the exception whenever it is called.</p>
<p>This is a problem when the set_exception_handler method is used, as
PHP will still call those exception handlers even if the shut-up
operator is used. This is why the AbstractExceptionHandler should
check for error_reporting() === 0 and ignore the exception if so.</p>
<p>This change fixes the exit code 255 error during the compile run
which is thrown in the Testing context where we set E_WARNING to
be an exceptional error.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46485">#46485</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=706fee4a2f7fa0a1c98b1177c28810b247919a45">706fee4</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-composer-requirements">
<h3>[BUGFIX] Fix composer requirements</h3>
<p>This fixes some requirements that were a bit too relaxed (due to a
misunderstanding when introducing composer to Flow).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c17ad7f249e1966460b7499aa2cdbbb433779f69">c17ad7f</a></li>
</ul>
</div>
<div class="section" id="feature-lazy-dependency-injection">
<h3>[!!!][FEATURE] Lazy Dependency Injection</h3>
<p>This introduces lazy dependency injection for dependencies injected
through Property Injection. Instead of loading the respective class
and instantiating the dependency right away, a proxy object is
injected which automatically replaces itself with the real dependency
once a method is called on it.</p>
<p>The &#64;Inject annotation now accepts an optional argument &#8220;lazy&#8221; which
allows for turning off lazy dependency injection in specific cases.</p>
<p>Please read the new section in the Object Management chapter of
the Flow manual, included in this change set.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43819">#43819</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7e03bb9ed82540d47d10c7278e60a7f61cc924e0">7e03bb9</a></li>
</ul>
</div>
<div class="section" id="bugfix-mapping-to-subtype-with-type-fails">
<h3>[BUGFIX] Mapping to subtype with [__type] fails</h3>
<p>The type of a target object can be manipulated by setting __type in the
form (or during action initialization when saving the form). This
however fails if the target subclass contains fields that the original
class does not have, because the property mapping is done before the
final class is extracted from the __type request variable.</p>
<p>To get this working, the process of getting the final class name is
moved before the property mapping.</p>
<p>If you wrote your own type converters, you might need to implement the
new getTargetTypeForSource() method if you do not extend the provided
AbstractTypeConverter of Flow.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32829">#32829</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e23dc49cda973f4bdf255b352eab9efb3852861c">e23dc49</a></li>
</ul>
</div>
<div class="section" id="task-remove-cache-has-call-in-router-caching-aspect">
<h3>[TASK] Remove cache has call in router caching aspect</h3>
<p>This change removes a call to &#8220;has&#8221; on the cache frontend, which is not
needed if we want to use the entry with &#8220;get&#8221;. This improves the
performance when building a larger number of URIs.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ffa30680ad75180db824dea740aea9ea5d82b5ff">ffa3068</a></li>
</ul>
</div>
<div class="section" id="task-remove-file-get-contents-call-in-cache-filebackend">
<h3>[TASK] Remove file_get_contents call in Cache FileBackend</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46343">#46343</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=127c88101a479900e80a9a8326f97cc420d74b10">127c881</a></li>
</ul>
</div>
<div class="section" id="bugfix-routing-includes-object-arguments-even-though-it-should-not">
<h3>[BUGFIX] Routing includes object arguments even though it should not</h3>
<p>Route::resolve() considered &#8220;__identity&#8221; arguments as internal and ignored them,
if they were not part of the respective Route defaults or uriPattern.
This change fixes this by only iterating through sub requests (marked with a &#8220;&#8211;&#8221;)</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45463">#45463</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=890fda2e46eb3c3eb7147c3f985f847a65e03124">890fda2</a></li>
</ul>
</div>
<div class="section" id="bugfix-implement-case-sensitivity-switch-for-query-equals">
<h3>[BUGFIX] Implement case-sensitivity switch for Query::equals()</h3>
<p>That was left as a todo and never done. Now it is possible to check
case-insensitive. Checking case-sensitive works depending on database
support, it can only be done if the database allows for case-sensitive
checking.</p>
<p>The change also trivially solves a todo about NULL checking in equals().</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44520">#44520</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2951352155ba0842c1f4276ca5200f04abd66cd0">2951352</a></li>
</ul>
</div>
<div class="section" id="bugfix-constants-use-in-yaml-configuration-maintains-type">
<h3>[BUGFIX] Constants use in YAML Configuration maintains type</h3>
<p>If a constant expression in the YAML configuration is used,
for example <tt class="docutils literal"><span class="pre">foo:</span> <span class="pre">'%PHP_VERSION_ID%'</span></tt>, and the value
exclusively represents this constant (i.e. no additional string
concatenation like <tt class="docutils literal"><span class="pre">path:</span> <span class="pre">'%FLOW_PATH_DATA%Logs/Exception'</span></tt>),
the value is substituted directly in order to maintain the initial
type of the constant.</p>
<p>Prior to this, a <tt class="docutils literal"><span class="pre">str_replace</span></tt> was done which resulted in a string
in every case no matter if the constant was meant to be an integer,
for example.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45864">#45864</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=67f0b8b80ab981b37f8cc212e7a6669d7bc04cb7">67f0b8b</a></li>
</ul>
</div>
<div class="section" id="bugfix-expose-timezone-in-jsonview-s-datetime-output">
<h3>[!!!][BUGFIX] Expose timezone in JsonView&#8217;s DateTime output</h3>
<p>This corrects the string formatting in JsonView regarding
DateTime objects. The additionally required Timezone offset
is appended as of ISO 8601 in order to not lead into timezone
issues after transferring the resulting JSON.</p>
<p>This is breaking in cases where the original incorrect behaviour
was worked around by subsequent processing of the transmitted
timestamp.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44997">#44997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=dfb87c1373ced4d18c0fe4cd8999820639366b82">dfb87c1</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-getidentifierbyobject-for-lazy-doctrine-proxy">
<h3>[BUGFIX] Fix getIdentifierByObject for lazy doctrine proxy</h3>
<p>This bug was introduces with Ib6e1eda1ac38677e84c46a441d099b2c5c1e6e24
and causes the content security functional test to fail. There was no
unit test or other indication for this behaviour, so this change adds
a unit test for the Doctrine persistence manager.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=915b29ab03c5f6c39d30e2e0163708d89e1bbf3b">915b29a</a></li>
</ul>
</div>
<div class="section" id="task-change-order-of-accessing-identity-in-getidentifierbyobject">
<h3>[TASK] Change order of accessing identity in getIdentifierByObject</h3>
<p>This change improves the performance of getIdentifierByObject since
the EntityManager contains method is rather slow.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c9da4d587687511703dc4709332bd4e601c96ed4">c9da4d5</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow-cli-again-works-for-windows-command-prompt">
<h3>[BUGFIX] Flow CLI again works for Windows command prompt</h3>
<p>Probably introduced with Ibd70e2dc8ff3a958a33ad0eb422060dc0fd8b799,
the Flow CLI call via the provided .bat file didn&#8217;t work anymore
because the used <tt class="docutils literal"><span class="pre">$_SERVER['PHP_SELF']</span></tt> will behave differently
for the flow shell and the flow.bat file: in case of the shell,
the actual <tt class="docutils literal"><span class="pre">Scripts/flow.php</span></tt> file will be included, while in
case of the .bat file, the <tt class="docutils literal"><span class="pre">Scripts/flow.php</span></tt> file is immediately
called with PHP. This results in a different PHP_SELF value.</p>
<p>The <tt class="docutils literal"><span class="pre">FLOW_ROOTPATH</span></tt> value which has to be determined, now is built
manually in case of a <tt class="docutils literal"><span class="pre">DIRECTORY_SEPARATOR</span></tt> equaling a
Windows one.</p>
<p>Additionally, in order to still allow calling the flow executable
from arbitrary locations also for Windows, the flow.bat file
is adjusted a bit in order to not rely on being at the root
path when calling the file.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44000">#44000</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31642">#31642</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5590bded94b9a21d0eb11b5f497d49b5c2fd877f">5590bde</a></li>
</ul>
</div>
<div class="section" id="bugfix-redirect-instead-of-raising-entity-not-found-exception">
<h3>[BUGFIX] Redirect instead of raising &#8220;Entity not found&#8221; exception</h3>
<p>If you are logged in into a secured Flow project and delete the
corresponding db user (for whatever reasons) an exception &#8220;Entity not
found&#8221; is raised and not caught.</p>
<p>With this change the exception is caught and instead PolicyEnforcement
will throw an AuthenticationRequiredException, usually calling a
redirect to the configured login page.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29907">#29907</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7b1564bfa839be258fe2759491dba5db241d5e08">7b1564b</a></li>
</ul>
</div>
<div class="section" id="bugfix-correctly-handle-boolean-values-with-property-injection">
<h3>[BUGFIX] Correctly handle boolean values with property injection</h3>
<p>This change fixes a bug in the property injection where an empty string
or 1 are used for representing a boolean value. This change forces the
value to be TRUE or FALSE when the value configured in Objects.yaml
is a boolean value.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45413">#45413</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4f67ebe472a176676b2e6dd7741db77441c7224a">4f67ebe</a></li>
</ul>
</div>
<div class="section" id="bugfix-account-s-expirationdate-can-be-set-null">
<h3>[BUGFIX] Account&#8217;s expirationDate can be set NULL</h3>
<p>After setting the expirationDate once, it&#8217;s impossible to set it
NULL again due to the typehint in the function parameters.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45629">#45629</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=82b7b0b76e6fad97ec38d81ddd3da2359e18ae1d">82b7b0b</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-jsonview-and-jsonviewtest-internals">
<h3>[TASK] Clean up JsonView and JsonViewTest internals</h3>
<p>Fix docblock and add array type hint to $configuration argument of
transformValue() and transformObject(); fix language in JsonViewTest
test names.</p>
<p>A tiny, non-functional change to Http\Message is included.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d75f9981422ba9fed5255fd34279de2ec83afe5f">d75f998</a></li>
</ul>
</div>
<div class="section" id="bugfix-check-inheritance-in-typehandling-iscollectiontype">
<h3>[BUGFIX] Check inheritance in TypeHandling::isCollectionType()</h3>
<p>With this change TypeHandling::isCollectionType() does consider
inheritance when it comes to the checking it does. Thus a subclass of
SplObjectStorage or an implementation of Doctrine&#8217;s Collection interface
will now be seen as a collection type.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44535">#44535</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=59c0976870264f59ca88b186f27b2a89c4c2cd4e">59c0976</a></li>
</ul>
</div>
<div class="section" id="task-use-include-with-shutup-instead-of-file-exists">
<h3>[TASK] Use include with shutup instead of file_exists</h3>
<p>This change uses include with shutup operator instead of file_exists
checks for optimized performance.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46337">#46337</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0a84926a859cd077c3c9d6f2744c01552805c045">0a84926</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow-bootstrap-now-works-if-phpunit-is-used-as-phar-file">
<h3>[BUGFIX] Flow Bootstrap now works if PhpUnit is used as Phar file</h3>
<p>If PhpUnit was used as a Phar file, the Flow Core Bootstrap failed
during initialization in Testing context because it tried to find
PhpUnit&#8217;s autoloader. Since autoloading is already in effect when
using the Phar version, a simple check for the existence of a
PhpUnit class is sufficient.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=21e54686026649542814cab9c7f8d47c3699c57f">21e5468</a></li>
</ul>
</div>
<div class="section" id="bugfix-exception-thrown-in-typehandling-follow-up">
<h3>[BUGFIX] Exception thrown in TypeHandling (follow up)</h3>
<p>When using isCollectionType() on an string, a warning is thrown.
The change id Iae59221cbd72677e6c18ad0a383792a798447253 introduced this.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45876">#45876</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2a8841d3a8ac1e940fce964d1f9e4c5457b054db">2a8841d</a></li>
</ul>
</div>
<div class="section" id="bugfix-exception-thrown-in-typehandling">
<h3>[BUGFIX] Exception thrown in TypeHandling</h3>
<p>When using isCollectionType() on an unknown class, an exception is
caused by a warning PHP gives about that class being unknown.</p>
<p>The issue has been introduced together with the patch
I007b0faf486680ecfb2fe7c753ef4cabcf6d618c</p>
<p>This adds a check that the element is a known class before using
is_subclass_of() to prevent the exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45876">#45876</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=988e05c29b61c2e4f1f71611f7d7171ab13616f1">988e05c</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-method-listing-of-cache-frontendinterface">
<h3>[BUGFIX] Correct method listing of cache FrontendInterface</h3>
<p>The documented listing of the method the cache&#8217;s FrontendIterface
supports is now in sync with the actually supported methods.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6de5ac3086f7ec8b57ff4447193b9a6450808249">6de5ac3</a></li>
</ul>
</div>
<div class="section" id="task-tiny-tweaks-to-security-documentation">
<h3>[TASK] Tiny tweaks to security documentation</h3>
<p>Some markup fixes to the security chapter.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d4a4189cc08763cfbfe3a672b206a5d0678c6e3b">d4a4189</a></li>
</ul>
</div>
<div class="section" id="task-add-rendering-date-to-documentation-index">
<h3>[TASK] Add rendering date to documentation index</h3>
<p>This includes Ief5e120f763c53f998db8b261eea7e810146c2dc as well.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1d09cb29c91b25fa42c4635fa0947f23f5d2c97c">1d09cb2</a></li>
</ul>
</div>
<div class="section" id="task-ignore-libraries-in-core-migrate-commands">
<h3>[TASK] Ignore Libraries in core:migrate commands</h3>
<p>This change makes the core:migrate commands ignore the folder
Packages/Libraries to avoid unintended side effects.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44398">#44398</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b097497435d559617b7c04feda6c8137671b3fc7">b097497</a></li>
</ul>
</div>
<div class="section" id="task-allow-package-key-wildcards-for-excludeclasses">
<h3>[TASK] Allow package key wildcards for excludeClasses</h3>
<p>The object.excludeClasses setting can now handle a trailing * as a
wildcard character in the package key.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2906824777003eabcae17a84f2dcb56a9e496301">2906824</a></li>
</ul>
</div>
<div class="section" id="task-make-aspects-singletons">
<h3>[TASK] Make Aspects singletons</h3>
<p>This sets the scope of three aspects to Singleton in order to improve
the overall performance.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=266ef9405eec256c8a8d26c8b3c3fd15fc5c574e">266ef94</a></li>
</ul>
</div>
<div class="section" id="bugfix-dependency-injection-safeguard-for-malformed-docblocks">
<h3>[BUGFIX] Dependency Injection: safeguard for malformed DocBlocks</h3>
<p>This adds a safeguard to the Dependency Injection Proxy Class Builder
which previously ended with a fatal error if client code contained a
malformed DocBlock</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45219">#45219</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=774d5a32c71548ff69626b2c6ed4881254724ceb">774d5a3</a></li>
</ul>
</div>
<div class="section" id="feature-add-unique-entity-validator">
<h3>[FEATURE] Add unique entity validator</h3>
<p>This adds a validator for ensuring uniqueness of submitted
entities. It uses the entity identity properties to determine
the uniqueness of the entity. Made with intended use in create
&amp; update actions using the action parameter validation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44622">#44622</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e4377e565640c487042607195008f8b1c1bc861d">e4377e5</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-yaml-schemas-to-latest-changes">
<h3>[BUGFIX] Adjust YAML schemas to latest changes</h3>
<p>the CLI command &#8221;./flow configuration:validate&#8221; currently reports
invalid configuration for type &#8220;Settings&#8221; and &#8220;Objects&#8221; due to
outdated schema files.
This adjust respective schemas to recent Flow changes.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44602">#44602</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7a41f8bd5fc5bdbcb05f9f424add621a0fa5f6dc">7a41f8b</a></li>
</ul>
</div>
<div class="section" id="task-tweak-figures-used-in-documentation">
<h3>[TASK] Tweak figures used in documentation</h3>
<p>Tweaks image inclusions in the sources and fixes some tiny markup
errors along the way.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/44885">#44885</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=22b0c7d847c190afc5b29fcb37e3399d25357dfe">22b0c7d</a></li>
</ul>
</div>
<div class="section" id="task-adjust-rest-documentation-for-docs-typo3-org">
<h3>[TASK] Adjust reST documentation for docs.typo3.org</h3>
<p>Moves images around, adjust sources as needed, add Settings.yml.</p>
<p>Some source syntax fixes along the way.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44885">#44885</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e5b2639284dbae9a16d51942812ca98dfc5a3e31">e5b2639</a></li>
</ul>
</div>
<div class="section" id="task-add-api-tags-for-methods-in-resource">
<h3>[TASK] Add &#64;api tags for methods in Resource</h3>
<p>This just adds missing &#64;api tags to those methods we support as part of
the API.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ebadfb3b3a775b56339007ba21edb7018cdcd781">ebadfb3</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-high-memory-consumption-of-renderobjectdump">
<h3>[BUGFIX] Fix high memory consumption of renderObjectDump()</h3>
<p>This change reduces the maximum recursion level for Doctrine Collection
dumps from 12 to 3. This reduces memory consumption during exception
handling and when using \TYPO3\Flow\var_dump().</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44278">#44278</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4e54aaa06849f6ddcb8bf48fed9089e75f0b02fe">4e54aaa</a></li>
</ul>
</div>
<div class="section" id="task-adds-a-documentation-tip-to-keep-type-hinting">
<h3>[TASK] Adds a documentation tip to keep type hinting</h3>
<p>This adds a tip to the PropertyMapping documentation
in relation to the MVC stack; mentioning how to not
lose type hinting capabilities due to index-accessing
controller&#8217;s <tt class="docutils literal"><span class="pre">arguments</span></tt> array.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=009fb0b5230e9c6b22ab4f7e1117591960175dfb">009fb0b</a></li>
</ul>
</div>
<div class="section" id="bugfix-prevent-uribuilder-adding-current-namespaced-arguments">
<h3>[BUGFIX] Prevent UriBuilder adding current namespaced arguments</h3>
<p>UriBuilder no longer removes namespaced arguments from the
parent request causing all arguments of namespaced sub request to
be added to new request even though addQueryString isn&#8217;t set.</p>
<p>The bug was introduced in Iba56bfffa9d8f47670afb1297575607b1b0023a8</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44139">#44139</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4064c298a56da4514b32901444d38872b475e776">4064c29</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-use-of-datetimevalidator-possible">
<h3>[BUGFIX] Make use of DateTimeValidator possible</h3>
<p>When one used Validate(type=&#8221;DateTime&#8221;) the ValidatorResolver would try
to use DateTime as the validator itself. This change fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40449">#40449</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6cdca9d99b56542ce6eea5cf982ecbc7909610e8">6cdca9d</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-code-migration-status-command">
<h3>[BUGFIX] Fix code migration status command</h3>
<p>Calling flow:core:migrate &#8211;status is fixed by this change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44397">#44397</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b7fa745ce4563bd0d32095284296b1cc68db2f2e">b7fa745</a></li>
</ul>
</div>
<div class="section" id="task-adjust-suggested-folder-structure-in-package-management-section">
<h3>[TASK] Adjust suggested folder structure in Package Management section</h3>
<p>I7772051938a4306328108bacde34710c54fc3a69 introduced suggested
names for directories under Resources/Public.</p>
<p>This adjusts the suggested folder names as discussed and adds a link
to the ResourceManagement chapter.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42726">#42726</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/13694">#13694</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ea2679715d92e404570200a17992c056bf91fef8">ea26797</a></li>
</ul>
</div>
<div class="section" id="bugfix-lock-doctrine-orm-to-version-2-3-x">
<h3>[BUGFIX] Lock Doctrine ORM to version 2.3.x</h3>
<p>This change locks the Doctrine ORM to version 2.3.x to avoid unwanted
changes from sneaking in.</p>
<p>To be on the safe side, YAML and Dom Crawler from Symfony are locked
down as well (2.1.x and 2.2.x respectively).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44496">#44496</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44479">#44479</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4d27277a9e6869fd22a66bf1edb4800f47c83b7d">4d27277</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-git-error-with-core-migrate-status-command">
<h3>[BUGFIX] Fix git error with &#8220;core:migrate &#8211;status&#8221; command</h3>
<p>Obviously there are some different ways git handles the &#8211;grep option
to the log command. This changes should make it work everywhere, and
uses the syntax actually spelled out in the help text.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44280">#44280</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1e14c97cabb2e106e0dc5ef2096655a98621c695">1e14c97</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-migration-error-on-missing-configuration-directory">
<h3>[BUGFIX] Fix migration error on missing Configuration directory</h3>
<p>For packages having no Configuration directory the core migration tool
died with an error message when trying to process configuration. This
is solved by checking for existence before trying to read any files.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43948">#43948</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c1aba304a5d837771618bb498a0b58e7dcbac684">c1aba30</a></li>
</ul>
</div>
<div class="section" id="task-some-documentation-fixes">
<h3>[TASK] Some documentation fixes</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a7a362804f5e154a0d74a1388043c2cace677fd2">a7a3628</a></li>
</ul>
</div>
<div class="section" id="task-update-link-and-thumbnail-for-one-page-cgl">
<h3>[TASK] Update link and thumbnail for one-page CGL</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43882">#43882</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cbf470282cb95ace0089d469ac9d8a9160b9bf3c">cbf4702</a></li>
</ul>
</div>
<div class="section" id="task-adjust-routing-documentation-to-recent-changes">
<h3>[TASK] Adjust routing documentation to recent changes</h3>
<p>This fixes the routing examples provided with the definitive guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=59dc58efd03bd29507b6c8c3df739786de1b6318">59dc58e</a></li>
</ul>
</div>
<div class="section" id="bugfix-silence-warning-on-writing-packagestates-php">
<h3>[BUGFIX] Silence warning on writing PackageStates.php</h3>
<p>When the file permissions on for example the configuration folder are
not correct a PHP warning is shown. This is shown on top of the
friendly error TYPO3.Setup message and should be hidden.</p>
<p>The only way to silence this is to use the shut-up operator in
sortAndSavePackageStates() inside PackageManager. Any exception or
error code thrown at that point are not catchable by a (setup)
controller.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42202">#42202</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=87a50e978f482aea7656ff2faf8d6ddc270df19f">87a50e9</a></li>
</ul>
</div>
<div class="section" id="bugfix-handle-constant-correctly-in-doctrine-service">
<h3>[BUGFIX] Handle constant correctly in Doctrine\Service</h3>
<p>The runDql() method in Persistence\Doctrine\Service didn&#8217;t
use the passed by value for the hydrationMode correctly.</p>
<p>Now that value is considered to be an already resolved constant
as annotated and noted down in the method&#8217;s signature.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44049">#44049</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=70cb604b783ce348cd192aa2cb50e01832b46176">70cb604</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-2-0-beta-1">
<h3>[TASK] Add ChangeLog for 2.0 beta 1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=21d6a69d63e0192b45a6d9e8341dcbf798a8fe64">21d6a69</a></li>
</ul>
</div>
<div class="section" id="id145">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=aa45f04d0aff0e7bab73030e1e18390297806e49">aa45f04</a></li>
</ul>
</div>
<div class="section" id="task-set-flow-version-branch-to-2-0">
<h3>[TASK] Set FLOW_VERSION_BRANCH to 2.0</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=36817a61b02bd7466fc607b3147ec445122029d1">36817a6</a></li>
</ul>
</div>
<div class="section" id="task-remove-api-annotation-from-view-canrender">
<h3>[TASK] Remove API annotation from View::canRender()</h3>
<p>With #40888 View::canRender() is no longer called from within
ActionController::resolveView().
As the framework no longer relies on that method to exist the
&#64;api annotation is removed.</p>
<p>Besides this marks EmptyView deprecated.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/40888">#40888</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42176">#42176</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6f03a9a448b7d9981c0cc2bc40dea5f4be863ae4">6f03a9a</a></li>
</ul>
</div>
<div class="section" id="task-update-references-in-the-guide">
<h3>[TASK] Update references in the Guide</h3>
<p>Another update to references forvalidators, converters and Fluid
ViewHelpers.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=14c861fafa5e42f361b302097e46c169c3b4f5e7">14c861f</a></li>
</ul>
</div>
<div class="section" id="task-update-readme-txt-and-upgrading-txt-files">
<h3>[TASK] Update Readme.txt and Upgrading.txt files</h3>
<p>This updates the Readme.txt and Upgrading.txt files of TYPO3 Flow for
the release of 2.0.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=80850d0fc3cf7fee5f016188d87e8652971c1186">80850d0</a></li>
</ul>
</div>
<div class="section" id="task-update-package-management-section">
<h3>[TASK] Update Package Management section</h3>
<p>This adjusts the package management section of the TYPO3 Flow Guide to
the composer changes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42726">#42726</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6606d48f0b9aa28ccddb7ba8604089b00a0c9a9a">6606d48</a></li>
</ul>
</div>
<div class="section" id="task-use-instead-of-for-entity-resources-in-policies">
<h3>[!!!][TASK] Use \ instead of _ for entity resources in Policies</h3>
<p>When defining entity resources in a Policy.yaml file, the entity type
had to be the class name with \ replaced by _. With this change the
regular class name is to be used instead.</p>
<p>A code migration to adjust Policy.yaml files is part of the change.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43629">#43629</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e6c6ac5b53c1510739c03f0f065901bc3eff1199">e6c6ac5</a></li>
</ul>
</div>
<div class="section" id="task-update-quickstart-and-getting-started-installation-instructions">
<h3>[TASK] Update Quickstart and Getting Started installation instructions</h3>
<p>Updates the download instructions to talk about composer instead of
unpacking archives.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6e18986e785b936907f90aa50c8cc60396f7cdde">6e18986</a></li>
</ul>
</div>
<div class="section" id="bugfix-invoking-cli-from-a-different-directory-doesn-t-work">
<h3>[BUGFIX] Invoking CLI from a different directory doesn&#8217;t work</h3>
<p>When executing the TYPO3 Flow CLI from a directory that is
not equal to the root path and if the FLOW_ROOTPATH environment
variable is not set, Flow dies with an exception.</p>
<p>This change fixes this by falling back to the current directory in that
case.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31642">#31642</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=81ed883987a7efa78db18b61bc0204c6aef76126">81ed883</a></li>
</ul>
</div>
<div class="section" id="bugfix-route-defaults-have-to-be-specified-when-creating-uris">
<h3>[!!!][BUGFIX] Route defaults have to be specified when creating URIs</h3>
<p>Currently when creating URIs one can omit route values that are defined
as defaults of the route.
This is not the intended behavior though, because with a lot of routes
in place this leads to the situation where it gets difficult to target
a certain route.
Thus for a route to match the given route values, one should have to
specify all the routing defaults exactly as they are specified by the
route (except for when a route part appears in the uriPattern).</p>
<p>This is a breaking change if you used Router or UriBuilder to create
URIs without specifying all defaults (see #43589 for details).
Besides, all Fluid ViewHelpers that use the UriBuilder now require the
action argument to be specified.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f17a2274b512a0b8cbf8810a0b73600cb9736ff9">f17a227</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-correct-domcrawler-again">
<h3>[BUGFIX] Use correct DomCrawler (again)</h3>
<p>The latest manifest update downgraded the DomCrawler, breaking some
Fluid tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0d62cf61b438110e65df910e0cbbcbe087c504c5">0d62cf6</a></li>
</ul>
</div>
<div class="section" id="feature-add-array-and-object-support-for-notemptyvalidator">
<h3>[FEATURE] Add array and object support for NotEmptyValidator</h3>
<p>This patch resolves the problem that empty arrays are not correctly
validated when using the NotEmpty validation annotation. Arrays
and Countables that are empty will now trigger an error.</p>
<p>Follow-up patch to <a class="reference external" href="https://review.typo3.org/14707">https://review.typo3.org/14707</a></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42467">#42467</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d22893332b5457c73567a8c1b8cc2906d3d22b95">d228933</a></li>
</ul>
</div>
<div class="section" id="bugfix-handle-missing-but-registered-packages-gracefully">
<h3>[BUGFIX] Handle missing - but registered - packages gracefully</h3>
<p>In production a missing, but registered package leads to a fatal
error. Handle this situation gracefully.</p>
<p>Allow logging early on in the package manager.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42342">#42342</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f0ef1636d0166263fd4696068d1d85476bea065b">f0ef163</a></li>
</ul>
</div>
<div class="section" id="task-replace-references-to-flow-1-2">
<h3>[TASK] Replace references to &#8220;Flow 1.2&#8221;</h3>
<p>This fixes some documentation/comments referring to &#8220;Flow 1.2&#8221;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43839">#43839</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=886da55db84fef9943a92218a9f5596f7b0b9a95">886da55</a></li>
</ul>
</div>
<div class="section" id="bugfix-throw-viewnotfoundexception-if-view-could-not-be-resolved">
<h3>[BUGFIX] Throw ViewNotFoundException if view could not be resolved</h3>
<p>This improves the resolving of views by removing the canRender()
checks from ActionController::resolveView as discussed in #42176.</p>
<p>Besides this skips the creation of the obsolete NotFoundView in favor
of throwing a ViewNotFoundException.</p>
<p>This also adds overdue unit tests for the ActionController.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40888">#40888</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40857">#40857</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42176">#42176</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9f99c840136955d14f5c39f0de8ac0a5f7ee1913">9f99c84</a></li>
</ul>
</div>
<div class="section" id="feature-taggable-sessions">
<h3>[FEATURE] Taggable sessions</h3>
<p>This introduces the ability to tag a session and retrieve remote
sessions by tag through the Session Manager.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43832">#43832</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3a2c1165a55a076c1a86ddac282043256c67165e">3a2c116</a></li>
</ul>
</div>
<div class="section" id="task-prepare-composer-manifest-for-release">
<h3>[TASK] Prepare composer manifest for release</h3>
<p>Adjust some dependencies to pull in new stable releases only, instead
of the latest development version.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7552f0558a94f793db931a951dc3859b13605839">7552f05</a></li>
</ul>
</div>
<div class="section" id="id161">
<h3>[TASK] Update references in the Guide</h3>
<p>Freshly rendered references for commands, validators, converters,
ViewHelper and annotations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=96cb52ddf0f61a3d86fc4fc9aeb9fea2a2b9a427">96cb52d</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-race-condition-in-session-shutdown">
<h3>[BUGFIX] Fix race condition in session shutdown</h3>
<p>This protects sessions against being revived through the shutdown
method even though they were destroyed remotely in the meantime.</p>
<p>This patch also contains a small modification and related test to make
sure that incoming session cookies are not blindly sent back to the
user agent in the response. Instead, a clean, new session cookie with
the parameters set in Flow&#8217;s settings is created.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43673">#43673</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4dac593a462b55165f0df3a794180fee1381e4f5">4dac593</a></li>
</ul>
</div>
<div class="section" id="task-add-reference-for-predefined-constants-to-documentation">
<h3>[TASK] Add reference for predefined constants to documentation</h3>
<p>This adds a new page in Chapter V, Appendixes, listing the
predefined constants Flow introduces, and their intended meaning.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43609">#43609</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ab44a1b7087aae2bb59746426d59bc19e81fa9dc">ab44a1b</a></li>
</ul>
</div>
<div class="section" id="feature-allow-configuration-processing-in-code-migrations">
<h3>[FEATURE] Allow configuration processing in code migrations</h3>
<p>This adds the new method <tt class="docutils literal"><span class="pre">processConfiguration</span></tt> to AbstractMigration.</p>
<p>It is given a configuration type, a processor and an optional flag
stating whether or not the processed configuration should be saved.</p>
<p>The processor is a Closure and is handed the parsed configuration of the
package under migration, for each found file separately. If you need to
modify the configuration, make sure to use pass-by-reference for the
processor configuration parameter in addition to setting the $saveResult
flag to TRUE.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43089">#43089</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a3c0c8b171d65fb545cbc6c6e1a071f0aacb60a4">a3c0c8b</a></li>
</ul>
</div>
<div class="section" id="task-make-system-call-to-php-binary-reliable-especially-on-windows">
<h3>[TASK] Make system call to php binary reliable, especially on Windows</h3>
<p>This solves execution of php binary on windows environments with paths
containing whitespace and special characters (like round brackets). On
windows, commands containing white spaces must be quoted, but quoted paths may
not be escaped, which escapeshellcmd() wrongly does.</p>
<p>This is solved by using escapeshellarg() on windows instead and also adds more
verbose exception messages in the case of failure.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35916">#35916</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=17c31e32c08a8a98bd851226137804c243bfeac1">17c31e3</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-session-usage-in-functional-test-cases">
<h3>[BUGFIX] Fix session usage in functional test cases</h3>
<p>This fixes a bug in the FunctionalTestCase which resulted in a fatal
error in Session-&gt;start().</p>
<p>Testable HTTP is now always enabled. The enableTestableSecurity() method
(deprecated since 1.1) has been removed as well.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43590">#43590</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5629be5b6e0135d087f64170cf7b4b6cac31adfb">5629be5</a></li>
</ul>
</div>
<div class="section" id="task-make-getpropertyinternal-protected">
<h3>[TASK] Make getPropertyInternal() protected</h3>
<p>The getPropertyInternal() method obviously is intended for internal use
in the ObjectAccess class. This change makes it protected.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43617">#43617</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d7e2cf8d34fd65b9719bee4915b1b6a42439241">8d7e2cf</a></li>
</ul>
</div>
<div class="section" id="feature-destroy-session-explicitly-in-logout">
<h3>[FEATURE] Destroy session explicitly in logout</h3>
<p>This change moves the call to Session-&gt;destroy() from a signal
to the AuthenticationProviderManager that already has the current
session as a dependency.</p>
<p>The &#8220;emitLoggedOut&#8221; signal is emitted before the session is
destroyed to allow other slots to inspect the session.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43575">#43575</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=15e1aa055fa153e13d57cd181a63f908f2f5525b">15e1aa0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-arguments-check-in-buildconstructorinjectioncode-allow-null">
<h3>[BUGFIX] Fix arguments check in buildConstructorInjectionCode, allow NULL</h3>
<p>It was not possible to pass NULL as constructor arguments, because of
the use of isset() instead of array_key_exists().</p>
<p>Also a few other places needed to be changed and some tiny (unrelated)
tweaks were made.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38988">#38988</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=798d2b324dd420c64cfbfad6359befdadbb59f45">798d2b3</a></li>
</ul>
</div>
<div class="section" id="feature-touch-remote-sessions-and-tag-with-account-info">
<h3>[FEATURE] Touch remote sessions and tag with account info</h3>
<p>This introduces two new features: updating the last activity timestamp
of a remote session through a new method &#8220;touch()&#8221; and tagging sessions
with their respective account (if any).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43491">#43491</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c268993d9e41e0fdfbc937b94a5cf230c7ba7693">c268993</a></li>
</ul>
</div>
<div class="section" id="feature-remote-session-management">
<h3>[!!!][FEATURE] Remote session management</h3>
<p>This introduces the foundations for remote session management – that is,
inspection, modification and destruction of sessions which are not
currently active in the browser running the current HTTP request</p>
<p>This patch also REMOVES the PhpSession implementation and configures
the new, Flow-native implementation to be the default session handler.</p>
<p>If you provided specific configuration for session cookies through
TYPO3:Flow:Session:PhpSession:<em>, you will need to adjust your settings
to use options in TYPO3:Flow:Session:</em> instead.</p>
<p>This change set also contains a new type converter which is capable of
converting a session identifier to a session object.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43376">#43376</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=986ad3a9ae9554c569b70596f7d5bb0cfe0dbdf3">986ad3a</a></li>
</ul>
</div>
<div class="section" id="task-revert-exclusion-of-classes-with-broken-psr-0-in-domcrawler">
<h3>[TASK] Revert exclusion of classes with broken PSR-0 in DomCrawler</h3>
<p>This reverts commit ee8f8e1d898c15549c22278e3fe80cd5702df182 (source is
Id3fbb8ad5154c633b7153b4f8eef742f385b05a3).</p>
<p>The fix is no longer needed, as DomCrawler has been fixed, see
the pull request at <a class="reference external" href="https://github.com/symfony/DomCrawler/pull/7">https://github.com/symfony/DomCrawler/pull/7</a></p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4f162e24c5f99839bacc029052ed8fd92928c5dd">4f162e2</a></li>
</ul>
</div>
<div class="section" id="bugfix-regard-wildcard-in-propertyconfiguration-shouldmap">
<h3>[BUGFIX] Regard wildcard in PropertyConfiguration shouldMap()</h3>
<p>Using &#8216;name.*&#8217; in property mapping configuration did not work for
fields added on the client, because shouldMap() would reject those
fields before the configuration was even checked.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43387">#43387</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bd0acd47f330e7c71f5af7165e8d1f71c65d5d25">bd0acd4</a></li>
</ul>
</div>
<div class="section" id="bugfix-check-for-installation-of-phpunit-by-composer">
<h3>[BUGFIX] Check for installation of phpunit by composer</h3>
<p>Ib4b6c68c03590444addb7c2e5af89b2a2d90051f introduced a regression
for running functional tests when composer is used in the project,
but PHPUnit is still installed using PEAR.</p>
<p>This change adds an additional check to verify if phpunit is actually
installed in the Libraries folder. By doing so the Bootstrap will
fall back to the PEAR installation of phpunit.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43377">#43377</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a4955450e2a23d943176c21a6ce11b4c2fa6b48a">a495545</a></li>
</ul>
</div>
<div class="section" id="bugfix-exclude-parameters-of-the-current-request-from-created-uris">
<h3>[BUGFIX] Exclude parameters of the current request from created URIs</h3>
<p>Since <a class="reference external" href="https://review.typo3.org/#/c/15261/">https://review.typo3.org/#/c/15261/</a> the arguments
of the current/uri-building-origin request were added
without although addQueryString was FALSE.</p>
<p>The UriBuilder now only keeps the requestArguments on
non-involved requestNamespaces.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42770">#42770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=feeb87c5ee2f3a7edaa0d8c2bff7f67c262660f1">feeb87c</a></li>
</ul>
</div>
<div class="section" id="task-cosmetic-fixes-in-http-cookie-and-response">
<h3>[TASK] Cosmetic fixes in Http Cookie and Response</h3>
<p>This adds a missing type hint in Cookie and moves the status code array
in Response to a method: that way all the status codes don&#8217;t appear in
debug backtraces anymore.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=75ba1c190440edfd1c4c2e5c14054445c96eb676">75ba1c1</a></li>
</ul>
</div>
<div class="section" id="bugfix-package-loading-must-be-ordered-by-dependencies">
<h3>[BUGFIX] Package loading must be ordered by dependencies</h3>
<p>In order to ensure proper merging of configurations packages most
be loaded ordered by dependencies.</p>
<p>This should be handled by ordering PackageStates accordingly.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42730">#42730</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/28672">#28672</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f9100b04ec5e7388a358bfa5540f6752b66b7a3d">f9100b0</a></li>
</ul>
</div>
<div class="section" id="bugfix-respect-limit-offset-constraints-when-counting-results">
<h3>[!!!][BUGFIX] Respect limit/offset constraints when counting results</h3>
<p>Until now QueryResult::count() discarded limit constraints that were
active for the affected query, so
$query-&gt;setLimit(3)-&gt;execute()-&gt;count() could return a value &gt; 3.
If the query had an offset Flow even threw an exception.</p>
<p>This changeset adjusts the Query so that limit and offset constraints
are taken into account. It furthermore unsets the offset in the query
in order to circumvent the exception.</p>
<p>This is a breaking change if you relied on Query::count() to always return
all results regardless of a specified limit. In this case better generate
multiple QueryResults (they&#8217;re only created in-memory until you actually
access them)</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42955">#42955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d46eef43f377c15bd8987bc1c61d519e868d875a">d46eef4</a></li>
</ul>
</div>
<div class="section" id="task-code-cleanup">
<h3>[TASK] Code cleanup</h3>
<p>This change</p>
<ul class="simple">
<li>fixes a number of CGL violations and typos</li>
<li>changes public to protected in PolicyService</li>
<li>removes an &#64;api annotation</li>
<li>adds a &#64;throws annotation</li>
<li>removes an unused use statement</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0695c46280d8222f355d92da896aecedb73dc0e9">0695c46</a></li>
</ul>
</div>
<div class="section" id="feature-remove-trailing-slash-from-routes-for-empty-subroutes">
<h3>[FEATURE] Remove trailing slash from routes for empty subroutes</h3>
<p>Flow throws an exception if a route contains a trailing slash in
order to avoid duplicate slashes in URIs and to make it possible
to add some kind of global default suffix to all URIs.
When using sub routes and a prefix with a trailing slash in the
uriPattern of the main route (e.g. uriPattern: &#8216;blog/&lt;BlogSubroutes&gt;&#8217;)
this leads to an unwanted exception if there is an empty (fallback)
subroute because the merged uriPattern would contain a trailing
slash (&#8220;blog/&#8221;).</p>
<p>This change strips trailing slashes from merged uriPatterns if the sub
routes uriPattern is empty.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31777">#31777</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=46904338747b4c490d73e4e46f5aeef281a2135e">4690433</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-handling-of-paths-with-dots-in-getlocalizedfilename">
<h3>[BUGFIX] Fix handling of paths with dots in getLocalizedFilename()</h3>
<p>When a path like resource://TYPO3.Neos/Public/JavaScript/ is handed to
getLocalizedFilename(), it tries to check for the existence of
resource://TYPO3.en.Neos/Public/JavaScript/ - which breaks, unless you
happen to have a package TYPO3.en.Neos activated.</p>
<p>This change fixes this by using the basename in the check for an
extension.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43195">#43195</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fefb00eadefe768c1e8415fc6faac6b1f84c81bc">fefb00e</a></li>
</ul>
</div>
<div class="section" id="task-add-doctrine-bin-folder-to-gitignore-file">
<h3>[TASK] Add doctrine /bin/ folder to .gitignore file</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=28c27ed8db97467755b19c340e0c9496b690ac72">28c27ed</a></li>
</ul>
</div>
<div class="section" id="task-allow-use-of-composer-installed-phpunit-in-testing-context">
<h3>[TASK] Allow use of composer-installed PHPUnit in Testing context</h3>
<p>The Testing context loads PHPUnit for functional tests. If using
PHPUnit installed via composer, this needs to be handled differently
than for a PEAR-installed setup.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0e1ac1c88c9a25f24333780e259dc4fc98b9bffa">0e1ac1c</a></li>
</ul>
</div>
<div class="section" id="bugfix-flowsession-fixed-renewid">
<h3>[BUGFIX] FlowSession: Fixed renewId()</h3>
<p>This patch provides a new implementation of FlowSession&#8217;s renewId()
method. It previously loaded all data from the old cache entry in order
to write it into a cache entry with the new session identifier. This
effectively overwrote any existing session-scoped object which existed
in the old cache data.</p>
<p>The new implementation uses a session identifier independent internal
storage identifier which doesn&#8217;t change on renewing the public session
identifier. This way we don&#8217;t need to move around session data, but
can simply store a new mapping between session id and storage id.</p>
<p>This patch also lets the HTTP Request store only the baseUri instead of
the whole settings array which leads to a smaller footprint and less
information stored in a session (as the current request is, in most
cases, part of the serialized session data).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43110">#43110</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1b6267f73f9ab74ba4a6ba719e078ce530bf1b6f">1b6267f</a></li>
</ul>
</div>
<div class="section" id="task-rename-csrfstrategy-and-csrftokens-member-variables">
<h3>[TASK] Rename csrfStrategy and csrfTokens member variables</h3>
<p>The csrfStrategy and csrfTokens member variables have weird names,
since they protect against CSRF they should rather be named
csrfProtectionStrategy and csrfProtectionTokens.</p>
<p>This change adjusts the Security\Context internals accordingly.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=28f170d85a46f7ad6363c91e825e8b776575143d">28f170d</a></li>
</ul>
</div>
<div class="section" id="feature-add-logging-of-resource-access-decision-voting">
<h3>[FEATURE] Add logging of resource access decision voting</h3>
<p>This change adds a logging aspect for decideOnResource() to log votes
analogous to what is done for decideOnJoinPoint().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43091">#43091</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=39dd293d0bfb8d57608b37643c62764548df99ff">39dd293</a></li>
</ul>
</div>
<div class="section" id="taks-tweak-and-clean-up-code-migration">
<h3>[TAKS] Tweak and clean up code migration</h3>
<p>This change cleans up the code a little by fixing some CGL violations
and moving some code around.</p>
<p>Packages in Libraries are now skipped by default (was Vendors before).</p>
<p>If available, composer&#8217;s autoload.php is used instead of manually
requiring class files.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8a1e24b618ac6bdf0c7feb0af88585a63f42651c">8a1e24b</a></li>
</ul>
</div>
<div class="section" id="task-fix-tiny-flow3-leftover-in-docblock">
<h3>[TASK] Fix tiny FLOW3 leftover in docblock</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8daa495e5a6d1677334d6a29be353652dc3324e7">8daa495</a></li>
</ul>
</div>
<div class="section" id="task-update-documentation-to-composer-changes">
<h3>[TASK] Update documentation to composer changes</h3>
<p>This updates the documentation to fix the most prominent errors and
inconsistencies regarding package handling and file locations that were
caused by the composer changes.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=98395c76c65efc477d2bf7e3b6dfc159b99f6153">98395c7</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-flowsession-initialization">
<h3>[BUGFIX] Fix FlowSession initialization</h3>
<p>This patch fixes the FlowSession initialization for non HTTP-Requests.
Previously the initializeObject() method was trying to retrieve the
HTTP request even from a CLI request handler, resulting in a fatal
error.</p>
<p>Additionally this patch now defines a default storage backend
(FileBackend) for FlowSession. Therefore it&#8217;s now sufficient to enable
FlowSession in Objects.yaml for getting started.</p>
<p>The garbage collection now is more reliable and triggered when a session
is resumed instead of when the shutdownObject() method is called.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42801">#42801</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=beac8272f684c69cc08df4b5f5e90736279aa654">beac827</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-composer-manifest-detection">
<h3>[BUGFIX] Fix composer manifest detection</h3>
<p>The method findComposerManifestPaths() would return wrong results if
the list of found JSON files was in the &#8220;wrong&#8221; order. Adding a call to
asort() makes the longer paths come later in the list and fixes the
behavior.</p>
<p>Also the direct detection of a manifest is fixed and a useless
condition is removed.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42807">#42807</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bc8e604853889861e23cd78da170a32e4c7731a1">bc8e604</a></li>
</ul>
</div>
<div class="section" id="task-handle-inheritancetype-annotation-more-robust">
<h3>[TASK] Handle InheritanceType annotation more robust</h3>
<p>When specifying InheritanceType but no heirs exist, no longer
an exception will be thrown. Instead inheritance will be disabled
to allow specifying InheritanceType &#8220;for future use&#8221;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27283">#27283</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f08339dcf8751f28c4843238e006a496ab8456cd">f08339d</a></li>
</ul>
</div>
<div class="section" id="feature-allow-arrays-to-be-set-via-object-yaml-property-values">
<h3>[FEATURE] Allow arrays to be set via Object.yaml property values</h3>
<p>This introduces the option to also set arrays as plain native values
in Objects.yaml. This allows settings like the following:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Acme\\Foobar\\Domain\\Repository\\BazRepository</span><span class="o">:</span>
  <span class="nx">properties</span><span class="o">:</span>
    <span class="nx">defaultOrderings</span><span class="o">:</span>
      <span class="nx">value</span><span class="o">:</span>
        <span class="nx">creationDate</span><span class="o">:</span> <span class="s1">&#39;ASC&#39;</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42539">#42539</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fd2178cfa3cf880cd3add52189e517470b30eb4c">fd2178c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-missing-argument-and-superfluous-trailing-slash">
<h3>[BUGFIX] Fix missing argument and superfluous trailing slash</h3>
<p>A few errors sneaked into Ifb6612a808e8cd8ee892de727dd961287a119152.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2338ac6491960005dab4f9741e829931efdd3ad8">2338ac6</a></li>
</ul>
</div>
<div class="section" id="task-align-signatures-of-methods-involved-in-creating-package">
<h3>[TASK] Align signatures of methods involved in creating package</h3>
<p>The docblock of PackageFactory::create() was wrong, and the manifestPath
is now optional. PackageManager is adjusted as needed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ad141e0bfe0e0556d68db5127724dde604319a7b">ad141e0</a></li>
</ul>
</div>
<div class="section" id="feature-check-validator-options-and-make-them-self-documenting">
<h3>[!!!][FEATURE] Check validator options and make them self-documenting</h3>
<p>Validators now must declare any options they accept using the class
property $supportedOptions. It is indexed by option name and
holds an array for each option giving the default value,
a description, type and an optional required flag.</p>
<p>This is used to check accepted options and to generate option
documentation for the validator reference documentation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37820">#37820</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d374b12f2e7d13142ffc3ea9078ff3ba50ca7758">d374b12</a></li>
</ul>
</div>
<div class="section" id="bugfix-throw-proper-exception-in-configurationbuilder">
<h3>[BUGFIX] Throw proper exception in ConfigurationBuilder</h3>
<p>Add a check if the return value of get_class_methods() used in
autowireProperties() actually is an array. Throw an exception if it is
not, as this should not happen.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41809">#41809</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d488398654c2a1a88ec736aa38d1c8cb2aaa615c">d488398</a></li>
</ul>
</div>
<div class="section" id="task-add-checks-for-composer-manifest-in-package">
<h3>[TASK] Add checks for composer manifest in Package</h3>
<p>The existence of a Composer manifest has been a soft requirement,
make it hard.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2ff9a044ffa8457b71127319706c31937a9dc017">2ff9a04</a></li>
</ul>
</div>
<div class="section" id="task-cleanup-use-statements-with-leading-backslash">
<h3>[TASK] Cleanup use statements with leading backslash</h3>
<p>An almost purely cosmetic issue, but still: use always takes fully
qualified class names, thus no leading backslash should be used.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=662fed794a7a8eee48ea1057b0f374305d864cb0">662fed7</a></li>
</ul>
</div>
<div class="section" id="bugfix-consider-only-a-packages-top-level-composer-manifest">
<h3>[BUGFIX] Consider only a packages top-level composer manifest</h3>
<p>For different scenarios it is allowed for a package to contain more
than one composer-manifest. For example in tests or if a package
bundles several other packages. Only the root-manifest should be
evaluated by the PackageManager.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42516">#42516</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a148ca1ed1ded30ef8ecba4cdab2a0a575bd2c67">a148ca1</a></li>
</ul>
</div>
<div class="section" id="feature-native-php-based-session-handler">
<h3>[FEATURE] Native PHP-based session handler</h3>
<p>This introduces an alternative session implementation which is based on
the backend modules of the Flow Cache framework. All cache backend
implementations available for caching (PDO, Redis, Apc, Memcache etc)
can now be used for storing session data.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42366">#42366</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42403">#42403</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5b56ade837f86ecb80678392b229cffd691232f3">5b56ade</a></li>
</ul>
</div>
<div class="section" id="task-small-design-corrections-in-documentation-part-ii">
<h3>[TASK] Small design corrections in documentation part II</h3>
<p>Tweaks the error output in the New.html template. Some other tiny
corrections.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e311c25168a731a61379561107b4b9ef3108d3dc">e311c25</a></li>
</ul>
</div>
<div class="section" id="task-make-mvc-controller-exception-extend-mvc-exception">
<h3>[TASK] Make Mvc\Controller\Exception extend Mvc\Exception</h3>
<p>Formerly the exception subclassed FLOW3\Exception directly.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42785">#42785</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2c27eb19fc8c6ba777c2a542bebebc3c6fffa8c7">2c27eb1</a></li>
</ul>
</div>
<div class="section" id="feature-add-simple-array-insight-in-html-debug-backtrace">
<h3>[FEATURE] Add simple array insight in HTML debug backtrace</h3>
<p>In the visual HTML debug backtrace, now array arguments get an
additional title attribute, allowing to see the runtime values
of the particular array when hovered with the mouse.</p>
<p>Such a tooltip would look like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
  <span class="nx">integer</span> <span class="mi">0</span> <span class="o">=&gt;</span> <span class="nx">Acme\\FooBar\\SomeObject</span> <span class="nx">singleton</span> <span class="nx">object</span> <span class="nx">proxy</span>
  <span class="nx">integer</span> <span class="mi">1</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s2">&quot;indexAction&quot;</span> <span class="p">(</span><span class="mi">11</span><span class="p">)</span>
</pre></div>
</div>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=366174f3d641d4969f748e35f483177c53a20efd">366174f</a></li>
</ul>
</div>
<div class="section" id="feature-show-package-keys-in-schema-migration-listing">
<h3>[FEATURE] Show package keys in schema migration listing</h3>
<p>Additionally show the related package keys in the
doctrine:migrationstatus command listing. For this,
it brings a new PackageManager method <tt class="docutils literal"><span class="pre">getPackageOfObject()</span></tt>
that allows retrieving a package by a package&#8217;s member&#8217;s
class name.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42011">#42011</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4b04b7dcfec6b54e60632056869dfe3eb4a9b831">4b04b7d</a></li>
</ul>
</div>
<div class="section" id="task-fixed-wrong-filename-in-documentation">
<h3>[TASK] Fixed wrong filename in Documentation</h3>
<p>The documentation used a wrong filename for a code listing
(BlogRepository instead of PostRepository).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=417a57148b8196eae55da7c4631c07779418013d">417a571</a></li>
</ul>
</div>
<div class="section" id="feature-allow-integer-value-as-timestamp-in-datetimeconverter">
<h3>[FEATURE] Allow integer value as timestamp in DateTimeConverter</h3>
<p>The DateTime TypeConverter cannot transform integer values to
a DateTime object because of a strict check for string.</p>
<p>Accept integer values and also assume plain digits to be
a timestamp and use &#8220;U&#8221; as date format if no additional
configuration is given.</p>
<p>Additionally change the is_numeric() checks to ctype_digit()
as is_numeric() would also allow float values.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41989">#41989</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4c800987247b122a91eb3e2a599f2e8eb9ad57af">4c80098</a></li>
</ul>
</div>
<div class="section" id="feature-type-converter-for-http-uris">
<h3>[FEATURE] Type converter for HTTP URIs</h3>
<p>This provides a type converter, converting simple strings
into their URI representations. This allows convenient type
converting for use in action methods.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42025">#42025</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b9fb6863e088125b353d4ff9dc941de042d41fd7">b9fb686</a></li>
</ul>
</div>
<div class="section" id="feature-allow-class-constants-in-configuration">
<h3>[FEATURE] Allow class constants in Configuration</h3>
<p>Currently, only plain PHP constants are allowed for substitution in
Configuration files. This changes the regular expression in order to
match class constants too.</p>
<p>So not only <tt class="docutils literal"><span class="pre">%PHP_VERSION%</span></tt> would be possible, but also, for example,
<tt class="docutils literal"><span class="pre">%TYPO3\\FLOW3\\Core\\Bootstrap::MINIMUM_PHP_VERSION%</span></tt>.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41358">#41358</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=50832abe17af1b8c37eb4fa84d0d87d8039c7a3f">50832ab</a></li>
</ul>
</div>
<div class="section" id="bugfix-objectserializer-not-capable-of-collections">
<h3>[BUGFIX] ObjectSerializer not capable of Collections</h3>
<p>Serializing Objects containing properties being a
Doctrine Collection fails with an exception since the
ObjectSerializer is not capable of recognizing them.</p>
<p>This change adds support for Collection properties in objects
and arrays.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42715">#42715</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a41d018e241abef08656daeea2920204dd78c72c">a41d018</a></li>
</ul>
</div>
<div class="section" id="task-small-code-cleanup-in-http-request-handler">
<h3>[TASK] Small code cleanup in Http Request Handler</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2cc6c24482b63623fd5904415703b667a323d2ff">2cc6c24</a></li>
</ul>
</div>
<div class="section" id="feature-cache-frontend-getbytag-now-returns-identifiers">
<h3>[FEATURE] Cache Frontend: getByTag() now returns identifiers</h3>
<p>This changes the behavior of getByTag() to not only return a
numeric array of entry values but now index them with their
entry identifier.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42761">#42761</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5cc198c92686dd07ec834b5ac72ed9f0f55820b3">5cc198c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-test-for-persistencequeryrewritingaspect">
<h3>[BUGFIX] Fix unit test for PersistenceQueryRewritingAspect</h3>
<p>The solution for #42601 broke one test in the
PersistenceQueryRewritingAspectTest.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42758">#42758</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3d946860c611b601492acd59a031d654d3503daa">3d94686</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-functional-browsertest-in-neos-context">
<h3>[BUGFIX] Fix functional BrowserTest in Neos context</h3>
<p>The functional BrowserTest in Flow (added as part of the solution to
issue #42049) fails when run in a Neos context. This is caused by the
different routes configuration.</p>
<p>The change tweaks the route used in the test slightly.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42756">#42756</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9736f94532c3776154e701354559fa3dba67705e">9736f94</a></li>
</ul>
</div>
<div class="section" id="task-use-doctrine-2-3-orm-and-adjust-as-needed">
<h3>[TASK] Use Doctrine 2.3 ORM and adjust as needed</h3>
<p>This adjusts our annotation driver to the changes in Doctrine 2.3 that
were breaking.</p>
<p>Also it adds the code needed to support new features:</p>
<ul class="simple">
<li>NamedNativeQueries annotation</li>
<li>SqlResultSetMappings annotation</li>
<li>Table-&gt;options</li>
<li>DiscriminatorColumn-&gt;columnDefinition</li>
<li>AssociationOverrides annotation</li>
<li>AttributeOverrides annotation</li>
<li>CustomIdGenerator annotation</li>
</ul>
<p>Furthermore it requires doctrine/data-fixtures now, something we
previously had packaged into our Doctrine.Common package.</p>
<p>This change drops three changes we had applied to the stock packages
before:</p>
<ul class="simple">
<li>ORM - Throw exception if no identifier can be found in UnitOfWork</li>
<li>ORM - In proxies add docblocks and move __wakeup() call around</li>
<li>DBAL -  Fix connection charset with MySQL for PHP &lt; 5.3.6
(see <a class="reference external" href="https://review.typo3.org/4587">https://review.typo3.org/4587</a>).</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40863">#40863</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b807ceb06695ae742da2be7e2d9b3d51f21bfd97">b807ceb</a></li>
</ul>
</div>
<div class="section" id="task-tweak-exception-message-for-not-settable-property">
<h3>[TASK] Tweak exception message for not settable property</h3>
<p>This explains the possible reason for a not settable property
a bit more and describes how to solve the mentioned problem.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=667ff177cda4f6dff51ab06599e2d7da46062406">667ff17</a></li>
</ul>
</div>
<div class="section" id="bugfix-enforce-query-rewriting-more-reliably">
<h3>[BUGFIX] Enforce Query Rewriting more reliably</h3>
<p>This initializes the security context if it hasn&#8217;t been initialized
when the PersistenceQueryRewritingAspect becomes active.</p>
<p>Previously it could happen that entities which should be covered by
a policy are visible to anonymous users.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42601">#42601</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9af3204b3ceb08b488370d6d85802cac87821154">9af3204</a></li>
</ul>
</div>
<div class="section" id="bugfix-tweak-help-output-output-version">
<h3>[BUGFIX] Tweak help output, output version</h3>
<p>The help output was a bit clumsy regarding the name of Flow
and did not output the version (since it is missing in the manifest).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b6e3faac8a8ba0de37364b40e2ecd48c72368922">b6e3faa</a></li>
</ul>
</div>
<div class="section" id="task-rename-phoenix-to-neos">
<h3>[TASK] Rename Phoenix to Neos</h3>
<p>This change adjusts some technically irrelevant uses of Phoenix to
Neos, just for completeness.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41668">#41668</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c45b234356c9a3cde3160598a719a8a56a9ef648">c45b234</a></li>
</ul>
</div>
<div class="section" id="bugfix-http-uri-constructor-throws-exception-on-invalid-uri">
<h3>[!!!][BUGFIX] Http\Uri constructor throws exception on invalid Uri</h3>
<p>The constructor of the Uri object now checks the return value
of the parse_url method and throws an exception if this returns
anything else than a valuable array, because in this case the
given Uri is considered seriously malformed.</p>
<p>This is considered breaking because prior to this change,
the Uri just silently was created with all empty values.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42511">#42511</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1b03b89c9a61c5a8066544929a9be590eb3521b3">1b03b89</a></li>
</ul>
</div>
<div class="section" id="bugfix-introduce-http-response-createfromraw">
<h3>[BUGFIX] Introduce HTTP Response::createFromRaw()</h3>
<p>The Response::createFromRaw method halted if a Set-Cookie header
arrives due to lacking handling.</p>
<p>This brings an implementation to parse the Set-Cookie directive
as described in RFC 6265 Section 5.2. The Response::createFromRaw
method passes the Set-Cookie header data to this new implementation
in order to create a Cookie object from it.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c17a95dbb96099897924493b92ea822d9c9fa6d6">c17a95d</a></li>
</ul>
</div>
<div class="section" id="bugfix-initialize-resource-wrapper-before-session">
<h3>[BUGFIX] Initialize resource wrapper before session</h3>
<p>If you try to attach a resource-dependent object to a session, this
will fail, as the _wakeup() method is called before the resource
wrappers are initialized.</p>
<p>This patch makes sure that the resource framework is initialized
before the session framework in the standard runtime sequence of the
bootstrap.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42434">#42434</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=84ef743d1530b5344b2599efea211bd311f9e16c">84ef743</a></li>
</ul>
</div>
<div class="section" id="feature-identify-key-pair-by-fingerprint-in-rsawalletservice">
<h3>[FEATURE] Identify key pair by fingerprint in RsaWalletService</h3>
<p>This change uses SSH compatible fingerprints of the RSA public
key instead of a random UUID to store keys. This allows to have
a consistent reference of keys across systems.</p>
<p>This change is backwards-compatible with the old behavior, because#
stored keys can still be used with their generated UUID.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42355">#42355</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8a706f20a7bd3cd34f08778a52a40acf35f17313">8a706f2</a></li>
</ul>
</div>
<div class="section" id="bugfix-support-named-indexes-in-multivalue-translation-labels">
<h3>[BUGFIX] Support named indexes in multivalue translation labels</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42169">#42169</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=71318ee5819bc78a04d2c632774ac0abb13b946f">71318ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-typo-in-setfilepermissions-script">
<h3>[BUGFIX] Typo in setfilepermissions Script</h3>
<p>This fixes the output of the setfilepermissions script to the correct
spelling of TYPO3.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42368">#42368</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c3371afade3336c3ded27b99898ba05a5474f6fa">c3371af</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-sign-method-in-rsawalletservice">
<h3>[BUGFIX] Fix sign method in RsaWalletService</h3>
<p>Fixes the sign method to use the actual key string for
openssl_sign and adds a unit test for that.</p>
<p>Additionally a wrong return type is fixed in the interface.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e63ab7329b4887455e1248611a5d8564d57de1f7">e63ab73</a></li>
</ul>
</div>
<div class="section" id="task-tighten-package-key-check-a-little">
<h3>[TASK] Tighten package key check a little</h3>
<p>The pattern used to check for a valid package key was made less strict
during composer integration. Although composer itself imposes almost no
restrictions, packagist requires a &#8220;vendor/name&#8221; format.</p>
<p>This changes thus adjusts the PATTERN_MATCH_PACKAGEKEY constant to
require a dot in the package key.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42319">#42319</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9762f6271c1bedbffe7295dfc9281e30a6d029a1">9762f62</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-http-host-not-always-followed-by-port-colon">
<h3>[BUGFIX] Make HTTP_HOST not always followed by port colon</h3>
<p>If there is no port given, a trailing colon for the HTTP_HOST
is not allowed to follow.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42241">#42241</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=53a6fde577e9e55792b8217b9874a286b3f75438">53a6fde</a></li>
</ul>
</div>
<div class="section" id="task-cgl-documentation-add-a-notice-about-byte-order-mark">
<h3>[TASK] CGL-Documentation - Add a notice about byte order mark</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42164">#42164</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=96f47786555fb39f43f30f08c99a18c178c4664c">96f4778</a></li>
</ul>
</div>
<div class="section" id="task-remove-oneline-exception-for-throw-statements">
<h3>[TASK] Remove oneline exception for throw statements</h3>
<p>Removes the exception for throwing exceptions in oneliners, which is
not allowed anymore.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42168">#42168</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39977">#39977</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=580b963277d99d8a9d628274df3ebd2e124f9c40">580b963</a></li>
</ul>
</div>
<div class="section" id="bugfix-workaround-issues-with-multiline-commit-messages">
<h3>[BUGFIX] Workaround issues with multiline commit messages</h3>
<p>In core migration functionality, particularily on windows
systems, the commit message is cropped at the first occurrence
of a newline character. This leads into trouble when the core
migration tool searches for the Migration: ... footers in the
commit history as they won&#8217;t be there then.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41848">#41848</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=77f148cde87cbf3a4da95ba4b3786ea2dfc6ba33">77f148c</a></li>
</ul>
</div>
<div class="section" id="feature-let-http-browser-follow-location-redirects">
<h3>[FEATURE] Let HTTP browser follow Location redirects</h3>
<p>Since Http&#8217;s Browser object should behave like a real browser, Location
headers are now followed (as soon as they come with a 3xx response code
as of RFC2616 14.30).</p>
<p>This patch includes a safeguard that prevents following infinite
redirect loops and an option to disable the automatic redirection
altogether.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42049">#42049</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e90a00d669c4ad196462ad12a7fd75a06c36b1a8">e90a00d</a></li>
</ul>
</div>
<div class="section" id="bugfix-apply-psr-0-code-migration-only-to-non-psr-0-packages">
<h3>[BUGFIX] Apply PSR-0 code migration only to non-PSR-0 packages</h3>
<p>This change adds a condition to prevent the code migration to move
classes inside the Classes directory if it is already in PSR-0 layout.</p>
<p>Additionally an already existing composer.json will not be overwritten
and a safeguard was added to AbstractMigration that checks if a file
that should be deleted actually exists.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41848">#41848</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=03d6d6fdbdedc0819ba9b7aa9312bd436cb7a84d">03d6d6f</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-path-check-in-http-cookie-constructor">
<h3>[BUGFIX] Correct path check in HTTP\Cookie constructor</h3>
<p>A variable name has been corrected in the constructor
of the Cookie class.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39836">#39836</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9f407900b2f2c52c0215ef1a806e3a7e17712b87">9f40790</a></li>
</ul>
</div>
<div class="section" id="feature-include-technical-details-to-exceptions-in-dev-context">
<h3>[FEATURE] Include technical details to exceptions in dev context</h3>
<p>Since the implementation of custom error renderers (#39423)
404 errors don&#8217;t show any technical details to the user,
even in development context.</p>
<p>This change passes the exception to the fluid template which can
render it, if configured. Furthermore this adds default rendering
options and configures all exceptionHandlers to include technical
details in development context.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42135">#42135</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=be181ef7c6a4f46d3e2f753f3d55e74b8b773388">be181ef</a></li>
</ul>
</div>
<div class="section" id="task-documentation-fix-link-to-cgl-on-one-page-document">
<h3>[TASK] Documentation: Fix link to CGL on one page document</h3>
<p>The link was renamed during the FLOW3 to TYPO3 Flow replacement
but the site package is not yet renamed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cf4f0ee4676f238189532328a8343da4f80ff3b5">cf4f0ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-csrf-token-is-not-appended-for-actions-with-mixed-case-characters">
<h3>[BUGFIX] CSRF token is not appended for actions with mixed case characters</h3>
<p>The CrsfProtectionAspect no longer appends the CSRF token when the
target action contains uppercase characters (e.g. someSpecialAction).</p>
<p>This change fixes this by resolving the correctly cased method name
before checking for the SkipCsrfToken annotation in the aspect.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42083">#42083</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9ea304b4531e404112ae9c189554ef73057fa05b">9ea304b</a></li>
</ul>
</div>
<div class="section" id="bugfix-respect-explicit-empty-subpackage-in-urifor-with-subrequests">
<h3>[BUGFIX] Respect explicit empty subpackage in uriFor with subrequests</h3>
<p>This change just checks for the empty string in the routing arguments and
sets a controller argument for building the URL. That way no subpackage
argument will be overriden from the subrequest.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42082">#42082</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8ebb3f6ecb6cbbb2eae971acc240e7091f5b9b5e">8ebb3f6</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-path-to-database-error-template">
<h3>[BUGFIX] Fix path to database error template</h3>
<p>The Settings.yaml contained an outdated path for the
Fluid template which is supposed to display database
errors.</p>
<p>The message of the fatal error caused by this bug contained:
&#8216;Template file &#8220;resource://TYPO3.Flow/Private/Error/Default_Template.html&#8221;
could not be loaded&#8217;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39423">#39423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ec4d4225a2cddeabda6deb45357140989bc18293">ec4d422</a></li>
</ul>
</div>
<div class="section" id="task-check-for-unexpected-properties-in-policy-schema">
<h3>[TASK] Check for unexpected properties in Policy schema</h3>
<p>This change disables unknown properties for resources and
acl group keys to prevent mistakes. For example, the schema should fail
if an entry is directly added to &#8220;resources&#8221; without using the
&#8220;method&#8221; subkey.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=441957b92d32e2b3c3bfd3d6cbf15721c8cf16e4">441957b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-composer-manifest-loading-and-unit-tests">
<h3>[BUGFIX] Fix composer manifest loading and unit tests</h3>
<p>This change fixes 2 tests in PackageTest that failed when run from
a package directory, because the $package-&gt;getComposerManifest()
method did pick up the relative composer.json file inside that.</p>
<p>Additionally some minor CGL cleanups in PackageTest.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c85ccd700f01b5f218469ebddd3b500c134054d9">c85ccd7</a></li>
</ul>
</div>
<div class="section" id="bugfix-uribuilder-doesn-t-properly-handle-arguments-of-subrequests">
<h3>[BUGFIX] UriBuilder doesn&#8217;t properly handle arguments of SubRequests</h3>
<p>If you&#8217;re creating a link inside a SubRequest that link currently
doesn&#8217;t add/remember the Arguments, Controller, etc from the
parentRequest if it&#8217;s nested more than one level:</p>
<blockquote>
<div>MainRequest-&gt;SubRequest-&gt;SubRequest</div></blockquote>
<p>This change fixes the mergeArgumentsWithRequestArguments
to properly add all of parentRequests for links inside SubRequests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41571">#41571</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3b43e2a9f19df8731af6c10655932694761a8932">3b43e2a</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-unnecessary-call-for-code-compilation">
<h3>[BUGFIX] Remove unnecessary call for code compilation</h3>
<p>This change removes the forced compile command subrequest
in a non Production context. Proxy classes are only
initialized if the code cache is not up to date or with
a special second check after file monitoring was run.</p>
<p>This speeds up the development context quite enormous
if no code was changed.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41818">#41818</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c9f04ee02f519bf480d1902662f593663d31e059">c9f04ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-tests-fail-when-run-from-package-path">
<h3>[BUGFIX] Tests fail when run from package path.</h3>
<p>Composer manifests missing in some tests, and not read properly by
package in others</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f442e2f516043d7e35dee6814272650000dab741">f442e2f</a></li>
</ul>
</div>
<div class="section" id="task-exclude-classes-with-broken-psr-0-in-domcrawler">
<h3>[TASK] Exclude classes with broken PSR-0 in DomCrawler</h3>
<p>See <a class="reference external" href="https://github.com/symfony/DomCrawler/pull/7">https://github.com/symfony/DomCrawler/pull/7</a></p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ee8f8e1d898c15549c22278e3fe80cd5702df182">ee8f8e1</a></li>
</ul>
</div>
<div class="section" id="bugfix-actionrequest-does-not-resolve-correctly-cased-package-key">
<h3>[BUGFIX] ActionRequest does not resolve correctly cased package key</h3>
<p>ActionRequest resolves lowercased package key by looking for
Package class instead of asking PackageManager. If no Package class
exists in the given Package, the request fails.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41657">#41657</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b744c359a9ff0373a5c22926cf3577468bbe952e">b744c35</a></li>
</ul>
</div>
<div class="section" id="task-small-code-cleanup-in-package">
<h3>[TASK] Small code cleanup in Package</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=94a43b695cb216c1654c21b3b824d1bbb7593f7c">94a43b6</a></li>
</ul>
</div>
<div class="section" id="bugfix-documentation-mentions-the-notemptyvalidator">
<h3>[BUGFIX] Documentation mentions the NotEmptyValidator</h3>
<p>The Part II (Getting Started), Validation chapter contains
a note about the requirement and purpose of the NotEmptyValidator.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41451">#41451</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d00e8767ac76b68a377153abca67523a8a69faa8">d00e876</a></li>
</ul>
</div>
<div class="section" id="bugfix-changed-f-form-textbox-to-f-form-textfield-in-documentation">
<h3>[BUGFIX] Changed f:form.textbox to f:form.textfield in Documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0a78fb8ab46d0b398354e02bdaf205f464fc387e">0a78fb8</a></li>
</ul>
</div>
<div class="section" id="task-make-exception-templates-more-configurable">
<h3>[TASK] Make exception templates more configurable</h3>
<p>At the moment only the file name can be set, but not
the format, partial &amp; layout paths are configurable.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=81c41cdf4892a406748368457748cc0e7f1a60fc">81c41cd</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-unit-test-for-yamlsource-to-changed-indentation">
<h3>[BUGFIX] Adjust unit test for YamlSource to changed indentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=50c3e1c2655b3cf9fbf8daebe964a44c3ddef9ea">50c3e1c</a></li>
</ul>
</div>
<div class="section" id="task-use-two-spaces-as-yaml-indentation-instead-of-four">
<h3>[TASK] Use two spaces as yaml indentation instead of four</h3>
<p>This was introduced when upgrading the Symfony Yaml package
to the latest source with the move to composer.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=41c63520d77a4184730c5abbe7433efa9f90f4cf">41c6352</a></li>
</ul>
</div>
<div class="section" id="task-make-package-getcomposermanifest-public">
<h3>[TASK] make Package::getComposerManifest() public</h3>
<p>This is needed for fixing the site import of setup</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4a53002a4666cb36ad2d10d63d30c0ac53f86ad5">4a53002</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-tests">
<h3>[BUGFIX] fix unit tests</h3>
<p>The test of Idc1d9d48998a0de0ecd07f834baa769ddf1e5ba4 was not adjusted
to the rename.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=01468684ebf40b4e47d29f2c05770e8e889619e3">0146868</a></li>
</ul>
</div>
<div class="section" id="bugfix-update-composer-type-in-migration">
<h3>[BUGFIX] Update composer type in migration</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8c73d8e59651f0923c5d32f60ed89bd97d3cd42a">8c73d8e</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-package-management-to-updated-composer-package-types">
<h3>[BUGFIX] Adjust Package Management to updated composer package types</h3>
<p>This fixes issues f.e. with functional test runs of Phoenix.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3f4b7342bc30f0acc0a43bce27c15f4f8c8d0fc9">3f4b734</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-monitoring-of-changed-class-files">
<h3>[BUGFIX] Fix monitoring of changed class files</h3>
<p>This change fixes the resolving of the class name from a changed file
since the PSR-0 changes caused some problems with the assumption of
the class name layout in that place. The change keeps the old
behavior for test files since these are not yet updated to a new
layout.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41499">#41499</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3d0a981f7c105641369793ae2eb847dafbd68d33">3d0a981</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-unnecessary-call-to-to-sortandsavepackagestates">
<h3>[BUGFIX] Remove unnecessary call to to sortAndSavePackageStates</h3>
<p>This change should fix the saving of a new PackageStates.php file on
every request which causes a rebuild of proxy classes and flushing of
other caches through file monitoring.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41497">#41497</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=14a788244e4be7b84907e576d758567942d0cf07">14a7882</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-proxy-blacklisting">
<h3>[BUGFIX] Fix Proxy Blacklisting</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f4b26dadd7db648c972e6fc185827769a6ac2b23">f4b26da</a></li>
</ul>
</div>
<div class="section" id="bugfix-try-to-fix-composer-loading-problem">
<h3>[BUGFIX] Try to fix composer loading problem</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=33acf04710f0dd7ef1209dac558b5fcaefd1dba6">33acf04</a></li>
</ul>
</div>
<div class="section" id="task-rename-flow3-to-typo3-flow">
<h3>[!!!][TASK] Rename FLOW3 to TYPO3 Flow</h3>
<p>Adjusts the code, comments, documentation as needed.</p>
<p>A code migration to adjust packages and schema migrations are added as
well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=57526b7fa57d82b08b64144214df9ffb1e475ffe">57526b7</a></li>
</ul>
</div>
<div class="section" id="task-rename-flow3-to-typo3-flow-move-files">
<h3>[!!!][TASK] Rename FLOW3 to TYPO3 Flow, move files</h3>
<p>Moves files so names match the FLOW3 to Flow change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=69d40a96d0795cab6414fa153e8cb586f48b988d">69d40a9</a></li>
</ul>
</div>
<div class="section" id="task-some-leftover-case-changes">
<h3>[TASK] Some leftover case changes</h3>
<p>This adjusts the case of some forgotten namespaces and classes.</p>
<p>Also it marks a number of migrations as (correctly) applied.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=569fcb8657b3c6521db122bef78f0717a98b1586">569fcb8</a></li>
</ul>
</div>
<div class="section" id="task-adjust-packagemanagertest-to-skip-unnamed-change">
<h3>[TASK] Adjust PackageManagerTest to &#8220;skip unnamed&#8221; change</h3>
<p>With I5e29317bbada2b6aed13fe26b50c1ae1ed9c2c80 a check was added that
lead to a failing unit test. So much for trivial stuff. :)</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=adc2fba0c4ecdee971bfbfacb99c49d5a69483f2">adc2fba</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-sure-generated-composermanifest-is-valid">
<h3>[BUGFIX] Make sure generated composermanifest is valid</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41449">#41449</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=17af2c03a747b3fc2bb07e81c6395ed3bbf60a67">17af2c0</a></li>
</ul>
</div>
<div class="section" id="task-skip-packages-without-name-in-manifest">
<h3>[TASK] Skip &#8220;packages&#8221; without name in manifest</h3>
<p>When using packages that have example &#8220;composer.json&#8221; files (like
Doctrine ORM 2.3 in source form) this will avoid errors.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d40e50a39f2a0cb4fcaf4837724b44af57e754a4">d40e50a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-package-manifest-detection">
<h3>[BUGFIX] Fix package / manifest detection</h3>
<p>In production context class loading fails because the classloader has a
wrong map for namespaces. This is caused by getNamespace() doing the
wrong thing - because it finds no composer manifest.</p>
<p>This change fixes this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41418">#41418</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d010f9205be95cde69d901070d5858a55f1ec9af">d010f92</a></li>
</ul>
</div>
<div class="section" id="task-copy-dotfiles-during-composer-install">
<h3>[TASK] Copy dotfiles during composer install</h3>
<p>Dotfiles like .htaccess need to be copied as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41421">#41421</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8feeaa3c2b630e32d00e0e647ccce59578b18550">8feeaa3</a></li>
</ul>
</div>
<div class="section" id="feature-allow-copy-of-dotfiles-in-copydirectoryrecursively">
<h3>[FEATURE] Allow copy of dotfiles in copyDirectoryRecursively()</h3>
<p>Adds a new parameter to copyDirectoryRecursively(), namely the boolean
$copyDotFiles.</p>
<p>To enable this, also readDirectoryRecursively() now knows a new
parameter named $returnDotFiles.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41421">#41421</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9b63414540d98a64e26f361f017bee3bedf9de1a">9b63414</a></li>
</ul>
</div>
<div class="section" id="task-remove-leftover-shortcuts-handling">
<h3>[TASK] Remove leftover .Shortcuts handling</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=196e37dbae8039f391f739ca2978ac7c95f81c55">196e37d</a></li>
</ul>
</div>
<div class="section" id="task-fix-flow3-commandline-script">
<h3>[TASK] Fix flow3 commandline script</h3>
<p>Shortens a docblock and removes define() left over from recent work.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1a417b66d4f96da7de00ddb9a154107b23985e8a">1a417b6</a></li>
</ul>
</div>
<div class="section" id="task-move-gitignore-to-composer-install-default">
<h3>[TASK] Move .gitignore to composer install default</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ee4d1f8c3d4bd4089588dcc7392838f90672c614">ee4d1f8</a></li>
</ul>
</div>
<div class="section" id="task-tweak-install-script-behavior-add-example-configuration">
<h3>[TASK] Tweak install script behavior, add (example) configuration</h3>
<p>With this change the composer post install/update script will discern
between &#8220;Essentials&#8221;, being files that will always be copied - even if
they already exist in their target location - and &#8220;Defaults&#8221;, being
files that will be copied only if not already existing.</p>
<p>This is used to add the example configuration files as essentials and a
Routes.yaml as default.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4179179dc14d11e2617125d50017a83beaae4114">4179179</a></li>
</ul>
</div>
<div class="section" id="feature-allow-keeping-files-in-copydirectoryrecursively">
<h3>[FEATURE] Allow keeping files in copyDirectoryRecursively()</h3>
<p>This change adds a flag $keepExistingFiles to copyDirectoryRecursively()
in Files. It defaults to FALSE and if set to TRUE allows to keep files
already present in the target location.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41378">#41378</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c7cce8d502c9b55fea3b823c6a7d3ade45f17db4">c7cce8d</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-htaccess-file-to-installed-files">
<h3>[BUGFIX] Add .htaccess file to installed files</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41369">#41369</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=987b91a89a4c1792ed5c7b88887147758f189a2c">987b91a</a></li>
</ul>
</div>
<div class="section" id="task-update-settings-to-new-name-of-installer-package">
<h3>[TASK] Update settings to new name of installer package</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d3039191d3f3b0edaa99280cc1da30b6bc89a64c">d303919</a></li>
</ul>
</div>
<div class="section" id="task-update-class-exclusion-to-changed-composer-installer-name">
<h3>[TASK] Update class exclusion to changed composer installer name</h3>
<p>The installer change it&#8217;s package key from christianjul.installers to
flow3.composerinstallers so the exclusion needs to be adjusted.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0ea33a38f2e5ab0b1a13e707d9c5715dec2c2cc2">0ea33a3</a></li>
</ul>
</div>
<div class="section" id="task-change-dependency-to-require-flow3-composer-installers">
<h3>[TASK] Change dependency to require flow3/composer-installers</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=125ff01663cbea7bba36a42e3bcfb76f5d598783">125ff01</a></li>
</ul>
</div>
<div class="section" id="task-use-composer-version-of-installer">
<h3>[TASK] Use composer version of installer</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=947608e4b8d6c9aef48e0418a1ce1bf313c605a7">947608e</a></li>
</ul>
</div>
<div class="section" id="task-require-christianjul-installers-directly">
<h3>[TASK] Require christianjul/installers directly</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9a68c0eb9c7e37b1286c23d8463031c71e832d6f">9a68c0e</a></li>
</ul>
</div>
<div class="section" id="task-test-commit-for-composer-install">
<h3>[TASK] Test commit for composer install</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=37492ff27740939f24a6a272c12a30c5aefd042e">37492ff</a></li>
</ul>
</div>
<div class="section" id="task-change-requirement-to-real-composer-installer">
<h3>[TASK] Change requirement to real composer installer</h3>
<p>Also drop require-dev - only valid for root manifests</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e3f9f13dcb1fde487741447f034c0a4c0150f526">e3f9f13</a></li>
</ul>
</div>
<div class="section" id="bugfix-handle-missing-composer-type-gracefully">
<h3>[BUGFIX] Handle missing composer type gracefully</h3>
<p>The type in a composer manifest is optional, so we need to check for it&#8217;s
existence before we use it.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41334">#41334</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cb870e17847dc8ef41d4928ed67bc5ed9706af2a">cb870e1</a></li>
</ul>
</div>
<div class="section" id="task-install-web-index-php-on-composer-install">
<h3>[TASK] Install &#8220;Web/index.php&#8221; on Composer install</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41310">#41310</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0f8b4d2fff8b5dd44b227a885a8338b63722422d">0f8b4d2</a></li>
</ul>
</div>
<div class="section" id="task-add-utility-to-get-classes-namespace-entry-point">
<h3>[!!!][TASK] Add utility to get classes namespace entry-point</h3>
<p>With PSR-0 the entry-point of the classes files needs prefixing of the
pathified namespace. Add a getter, getClassesNamespaceEntryPath(), to
resolve this.</p>
<p>Also makes sure the namespace is only resolved once.</p>
<p>Renames getPackageNamespace() to getNamespace() - adjust your code as needed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1594a523c9a5950b249f1b04e221fac61e1ccbac">1594a52</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-excludeclasses-setting-for-non-installed-package">
<h3>[BUGFIX] Allow excludeClasses setting for non-installed package</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41157">#41157</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a952d97feb4ba2802a0f182184464271585b87cc">a952d97</a></li>
</ul>
</div>
<div class="section" id="bugfix-getclassespath-returns-path-without-trailing-slash">
<h3>[BUGFIX] getClassesPath() returns path without trailing slash</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41181">#41181</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1925ba316fda179e624f4dc1a0ba76848517c0cc">1925ba3</a></li>
</ul>
</div>
<div class="section" id="task-add-code-migration-to-composerify-a-package">
<h3>[TASK] Add code migration to &#8220;composerify&#8221; a package</h3>
<p>The migration moves all class files into a PSR-0 compatible directory
structure and adds a composer manifest; Package.xml is removed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=613025176356c63973da4db8635cb99eb0f00338">6130251</a></li>
</ul>
</div>
<div class="section" id="feature-isolate-migrations-and-provide-package-data">
<h3>[FEATURE] Isolate migrations and provide package data</h3>
<p>With this change migrations have access to the data of the target
package (the package currently being migrated) and can be sure that each
migration run is isolated from other runs (the internal state is reset
for each execution).</p>
<p>The command output is tweaked a little along the way.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2e2d98f69efcb5a7ef1ce7a61946ad30c13d5fc1">2e2d98f</a></li>
</ul>
</div>
<div class="section" id="feature-add-movefile-and-deletefile-operations-to-migrations">
<h3>[FEATURE] Add moveFile() and deleteFile() operations to migrations</h3>
<p>Code migrations now can use deleteFile() and moveFile() to work on
files.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5950a7640fcf0fd069a3bda6c91b05b4259b4145">5950a76</a></li>
</ul>
</div>
<div class="section" id="feature-make-metadata-available-to-migrations">
<h3>[FEATURE] Make metadata available to migrations</h3>
<p>This makes metadata from Package.xml and composer.json available
to migrations.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bdc5a0efa8062747dd8c5f006243b4da40651cea">bdc5a0e</a></li>
</ul>
</div>
<div class="section" id="task-fix-psr-0-compatibility-for-functional-tests">
<h3>[TASK] Fix PSR-0 compatibility for functional tests</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9b9e92b1c9100ae586d0d1c0ec217c38de64e94b">9b9e92b</a></li>
</ul>
</div>
<div class="section" id="task-update-unit-tests-to-vfsstream-1-0">
<h3>[TASK] Update unit tests to vfsStream &gt; 1.0</h3>
<p>This adds &#8220;mikey179/vfsStream&#8221; to composer.json and adjusts the unit
tests to the new vfsStream API.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37813">#37813</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ef3426147586ba421d32416fd74d9a840acdd10a">ef34261</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-failing-tests-in-package-management">
<h3>[BUGFIX] Fix failing tests in package management</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41092">#41092</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41093">#41093</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=91e1881846a9aef69a46cb7713927208b0d0b1ce">91e1881</a></li>
</ul>
</div>
<div class="section" id="bugfix-packagestates-php-does-not-contains-relative-paths">
<h3>[BUGFIX] PackageStates.php does not contains relative paths</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41088">#41088</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=94761514bd3fac7bd48884569ed538cc7b8f7139">9476151</a></li>
</ul>
</div>
<div class="section" id="task-make-package-management-use-composer">
<h3>[TASK] Make package management use Composer</h3>
<p>Refactor package management to use Composer, also relax constraints in order
to utilize 3rd party composer / PSR-0 components.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6fdd85536dbf8737bcec264e7e3b1b75b6c265d2">6fdd855</a></li>
</ul>
</div>
<div class="section" id="task-exclude-specific-classes-from-object-management">
<h3>[TASK] Exclude specific classes from object management</h3>
<p>In order to exclude classes from object management - either for performance
or compatibility reasons - create a configuration that allows specific
classes to be excluded. Most be configurable outside of package in question
to support 3rd party components</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6e88cac9924a260e9275e9e4ed26919571e97991">6e88cac</a></li>
</ul>
</div>
<div class="section" id="task-handle-exceptions-thrown-in-classreflection">
<h3>[TASK] Handle exceptions thrown in ClassReflection</h3>
<p>When a class cannot be loaded for reflection, it will be ignored and a message
is logged.</p>
<p>This makes sure that classes that are never used do not break the system. If
they are indeed used later, things will still break, but even at a more
helpful position.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b811e14723bf45c0c5ddcb8fbcccca2429a4fcd9">b811e14</a></li>
</ul>
</div>
<div class="section" id="task-add-composer-installer-script-and-resources">
<h3>[TASK] Add Composer installer script and resources</h3>
<p>Upon running &#8216;install&#8217; or &#8216;update&#8217; with composer, required paths
and files outside of TYPO3.FLOW3 package must be created.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f9b09a912bbe4f27cd0db982d3b58d2c18bfdf9c">f9b09a9</a></li>
</ul>
</div>
<div class="section" id="task-add-composer-manifest">
<h3>[TASK] Add composer manifest</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f227c3091edc3795b3b830782b512ddd2b366902">f227c30</a></li>
</ul>
</div>
<div class="section" id="task-update-referenced-paths-to-reflect-psr-0-paths">
<h3>[TASK] Update referenced paths to reflect PSR-0 paths</h3>
<p>See Idad621923ffccdb7b2742d9aba0ff22fdab3e192 for the files being moved.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5c1bde47804d8b182432d1d88776ae958cd30ed5">5c1bde4</a></li>
</ul>
</div>
<div class="section" id="task-move-all-classes-to-psr-0-compatible-path">
<h3>[!!!][TASK] Move all classes to PSR-0 compatible path</h3>
<p>In order to be fully PSR-0 compatible the path below the classes
directory should now be in a path identical to the namespace</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6a5d4d75284f2d35ab3f694f74fc588f6b2c4986">6a5d4d7</a></li>
</ul>
</div>
<div class="section" id="feature-provide-flag-for-disabling-link-protection-in-uribuilder">
<h3>[FEATURE] Provide flag for disabling link protection in UriBuilder</h3>
<p>This introduces a new flag for the UriBuilder which allows to configure
if a link built by the UriBuilder may be modified by some security
mechanism or not. FLOW3&#8217;s CSRF protection mechanism now considers this
flag.</p>
<p>By disabling link protection, it is now possible on a per-link basis,
to generate a link without CSRF protection tokens for cases when it&#8217;s
clear that links are public.</p>
<p>This patch also removes the CSRF protection of links used in ExtDirect
services. This needs to be re-implemented in the ExtJS package.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41137">#41137</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2058a64d73c74a6a647115af95112fa05039bfeb">2058a64</a></li>
</ul>
</div>
<div class="section" id="feature-convenience-function-for-registering-routes-in-functional-tests">
<h3>[FEATURE] Convenience function for registering routes in functional tests</h3>
<p>This adds a new convenience function registerRoute() to the functional
base testcase.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41136">#41136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6562a48e802265d404f1d80c6154a2280b122aa9">6562a48</a></li>
</ul>
</div>
<div class="section" id="bugfix-debugger-now-respects-possible-occurence-of-closures">
<h3>[BUGFIX] Debugger now respects possible occurence of Closures</h3>
<p>A trial isset() call for a property of a Closure resulted in a PHP
error saying &#8220;Closure objects cannot have properties&#8221;. To avoid this,
the isset() statement has been replaced with a property_exists().</p>
<p>This is considered slower than isset(), like claimed in a User Contributed
Note [1], but obviously the only workaround for these cases [2]. And speed
is not an issue when the debugger is used…</p>
<p>[1] <a class="reference external" href="http://www.php.net/manual/en/function.property-exists.php#97538">http://www.php.net/manual/en/function.property-exists.php#97538</a>
[2] <a class="reference external" href="https://bugs.php.net/bug.php?id=50146">https://bugs.php.net/bug.php?id=50146</a></p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41046">#41046</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=15d38605eb1e2597357ef0705cf70bf8303f97bb">15d3860</a></li>
</ul>
</div>
<div class="section" id="task-adjust-csrfprotectionaspect-unit-test">
<h3>[TASK] Adjust CsrfProtectionAspect unit test</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/40984">#40984</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e1f227cb3341b6f12436c9928d8903e28a0b703f">e1f227c</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-sure-autoloader-is-always-unregistered">
<h3>[BUGFIX] Make sure autoloader is always unregistered</h3>
<p>ClassReflection adds an autoloader to catch cases of unresolved
classes. This autoloader needs to be unregistered reliably after
use.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40989">#40989</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=dfc34e543391eab3aad5fd210eefe27050f2393a">dfc34e5</a></li>
</ul>
</div>
<div class="section" id="bugfix-cleanup-csrf-protection-issues">
<h3>[BUGFIX] Cleanup CSRF protection issues</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40984">#40984</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4574114c6c3e56be84b214c7993da87f036b18b4">4574114</a></li>
</ul>
</div>
<div class="section" id="task-clarify-parent-request-type-in-docblocks">
<h3>[TASK] Clarify parent request type in docblocks</h3>
<p>Instead of just &#8220;object&#8221; this uses a more specific type in a few
docblocks (&#8220;ActionRequest|HttpRequest&#8221;).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a081efa618f57b7e582b8b6a0110e18775570840">a081efa</a></li>
</ul>
</div>
<div class="section" id="task-whitespace-fix-in-class-docblock">
<h3>[TASK] Whitespace fix in class docblock</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d9b71a6532240191cb37d84dbe5862ba1ea495e1">d9b71a6</a></li>
</ul>
</div>
<div class="section" id="bugfix-display-error-message-if-data-is-not-writeable">
<h3>[BUGFIX] Display error message if &#8220;Data/&#8221; is not writeable</h3>
<p>If the directory &#8220;Data/&#8221; or &#8220;Data/Persistent/&#8221; does not exist and could
not be created by the bootstrap, an error message is now displayed which
hints on using the setfilepermissions command.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40890">#40890</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=939181e9b8e78d8c8304c5d04cc275fb55d2c226">939181e</a></li>
</ul>
</div>
<div class="section" id="bugfix-parse-target-type-before-comparing-the-instance-with-it">
<h3>[BUGFIX] Parse target type before comparing the instance with it</h3>
<p>The PropertyMapper chokes on already converted Objects if the targetType
is a compositeType like Collection&lt;Entity&gt;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40661">#40661</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4168539bb817cf17d0a17bff562c4d2694ada3e6">4168539</a></li>
</ul>
</div>
<div class="section" id="task-small-code-cleanup-in-reflectionservice">
<h3>[TASK] Small code cleanup in ReflectionService</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5ea591536b41e99ff96b279e7878696274ce28d8">5ea5915</a></li>
</ul>
</div>
<div class="section" id="bug-fix-wrong-escape-sequence-in-yaml">
<h3>[BUG] Fix wrong escape sequence in yaml</h3>
<p>Backslash is not a valid escape-character in yaml for single-
quoted strings.</p>
<p>see: <a class="reference external" href="http://yaml.org/spec/current.html#id2534365">http://yaml.org/spec/current.html#id2534365</a></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40840">#40840</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=604406e9908306b19f0725c257bc212e6188ea6e">604406e</a></li>
</ul>
</div>
<div class="section" id="task-custom-error-page-higher-priority-for-class-matches">
<h3>[TASK] Custom error page: higher priority for class matches</h3>
<p>All custom error rendering options should be evaluated for
matches of the exception class name before trying to match
against status code because the latter are often used as
fallback options (for example, 404 for anything not found).</p>
<p>The TYPO3.TYPO3 package wouldn&#8217;t be able to display a specific
&#8220;Missing Homepage&#8221; error message without this patch because
FLOW3&#8217;s 404 handling would kick in before.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39423">#39423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9b28224c55b04a88b545c5ee6732c63d6ffb591a">9b28224</a></li>
</ul>
</div>
<div class="section" id="task-handle-errors-in-subprocesses-properly">
<h3>[TASK] Handle errors in subprocesses properly</h3>
<p>To be able to properly handle missing class dependencies in ClassReflection
a ClassLoader should be added to end of the ClassLoader chain that throws
an exception if it&#8217;s reached, meaning the class couldn&#8217;t be loaded.</p>
<p>Make executeCommand throw an exception on errors, rather than just echo any
command output collected.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39599">#39599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e590a18ea3b12b73e01fe890bb3df72d901325bb">e590a18</a></li>
</ul>
</div>
<div class="section" id="feature-custom-error-renderers">
<h3>[!!!][FEATURE] Custom Error Renderers</h3>
<p>This extends the exception handlers so that they can render arbitrary
templates based on the status code and/or class name of the thrown
exception.</p>
<p>The template to be used and variables that should be passed to the
template are configured in so called &#8220;renderingGroups&#8221; in the options
of the exception handler.</p>
<p>This is a breaking change because it deprecates the provided
NotFoundController &amp; NotFoundView.</p>
<p>This patch also contains the related documentation, including general
information about FLOW3&#8217;s error handling.</p>
<p>Also included in this patch is an update to the YAML schema definitions.</p>
<p>Furthermore, removed all hints on &#8220;FLOW3&#8221; from the production exception
handler.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39423">#39423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=20e41f38b36482eb3cd861463885e1a032111be4">20e41f3</a></li>
</ul>
</div>
<div class="section" id="feature-add-identifier-to-booting-sequence">
<h3>[FEATURE] Add identifier to Booting\Sequence</h3>
<p>The identifier is set in Bootstrap to &#8220;runtime&#8221; and &#8220;compiletime&#8221;
respectively.</p>
<p>If you wire a slot to the beforeInvokeStep and afterInvokeStep
signals, the identifier will be handed over as second parameter
after the step instance.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38424">#38424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e69479279c5aa98905cb603df4a907d48759b9a2">e694792</a></li>
</ul>
</div>
<div class="section" id="task-add-logging-to-importresource-and-createresource">
<h3>[TASK] Add logging to importResource() and createResource()</h3>
<p>When importing or creating a resource fails, the reason is
logged to the system log.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=228cb5486d0b3ab7c0fa97dea821c807a977857a">228cb54</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-failing-unittests-for-new-authenticationcontroller">
<h3>[BUGFIX] Fix failing UnitTests for new AuthenticationController</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40760">#40760</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6ba2ae145d740bb2d8333072d3fc23040c3f09b7">6ba2ae1</a></li>
</ul>
</div>
<div class="section" id="bugfix-always-add-csrf-token-if-authenticated">
<h3>[BUGFIX] Always add CSRF token, if authenticated</h3>
<p>This ensures that the CSRF token is also present
if the main request is not restricted, but if
the subrequests is.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=443d6f1ad3f9aa76e43f18700eb38a9363db4aa5">443d6f1</a></li>
</ul>
</div>
<div class="section" id="feature-provide-a-general-abstract-authentication-controller">
<h3>[FEATURE] Provide a general abstract authentication controller</h3>
<p>This can be used to be inherited from in a custom package,
to enable developers to quickly implement their own
authentication controller.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39839">#39839</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3eb7b5c080809497168ee36890c708ebc9a2e492">3eb7b5c</a></li>
</ul>
</div>
<div class="section" id="task-fix-return-type-documentation-of-createquery">
<h3>[TASK] Fix return type documentation of createQuery</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f7f467133705e2d86e98da4d6c35a432dbf40c7e">f7f4671</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-sql-logging-in-production-context">
<h3>[BUGFIX] Fix SQL logging in Production context</h3>
<p>The logger factory in Objects.yaml refers to a Setting directive which
with this change is present in Production context. Before, the Settings
could not be found, resulting in a NULL argument where an array is
expected as soon as query logging was enabled in Production.</p>
<p>Some cleanup to logging settings along the way.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40580">#40580</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=007e41ba3e8906661647579ecba37720be968f3b">007e41b</a></li>
</ul>
</div>
<div class="section" id="feature-improved-argument-type-watch-in-html-debug-backtrace">
<h3>[FEATURE] Improved argument type watch in HTML debug backtrace</h3>
<p>In the debug backtrace of method calls, this gives concrete
information about the actual argument values in case of being
boolean; and reveals the amount of array elements, if such.</p>
<p>An array is now presented as <tt class="docutils literal"><span class="pre">array|2|</span></tt> for example, if
it has two elements.</p>
<p>Boolean values are not longer only displayed as <tt class="docutils literal"><span class="pre">boolean</span></tt>,
but as their concrete TRUE or FALSE value accordingly. Since
the color scheme stays the same, it can still easily be
distinguished from string values.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39879">#39879</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d953765612a7a7f94cee46f77ceb94034be81e4c">d953765</a></li>
</ul>
</div>
<div class="section" id="bugfix-session-timeout-shouldn-t-be-changed-to-10-seconds">
<h3>[BUGFIX] Session Timeout shouldn&#8217;t be changed to 10 seconds</h3>
<p>This reverts the changed session timeout setting introduced
in If7d004c7.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40657">#40657</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3ef0662e1abcd80c530fc9386a629f96404fb983">3ef0662</a></li>
</ul>
</div>
<div class="section" id="bugfix-internalrequestengine-observes-exception-status-code">
<h3>[BUGFIX] InternalRequestEngine observes exception status code</h3>
<p>The InternalRequestEngine set the status code in case of an exception
to 500 in any case. With this change it will instead use the code
defined in an exception, if available.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40658">#40658</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4b479b2e5d13cec7eef8ba7184394d331d1eca31">4b479b2</a></li>
</ul>
</div>
<div class="section" id="bugfix-prevent-data-from-destroyed-session-from-being-loaded">
<h3>[BUGFIX] Prevent data from destroyed session from being loaded</h3>
<p>This fixes a problem with session data which is being unserialized
even though its session is about to be destroyed. Because the
time of the last activity was stored in the session and needs to be
retrieved in order to determine if the session is still valid, also all
other session data is being unserialized by PHP. This results in
session scope objects registering themselves at the Object Manager
due to their code in __wakeup().</p>
<p>Now the session time out is not stored in the session anymore but
in its own cookie. Therefore the session data is only unserialized
if the session is still valid.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37001">#37001</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1b409cc3eeb853ee6a733e627752839f6050ce62">1b409cc</a></li>
</ul>
</div>
<div class="section" id="bugfix-throw-exception-on-csrf-token-error">
<h3>[BUGFIX] Throw exception on CSRF token error</h3>
<p>Currently, if a required CSRF token is missing or invalid,
FLOW3 dies with a hard coded &#8220;Access denied!&#8221;.</p>
<p>This change disables the try/catch blocks in the
RequestDispatchingAspect so that the access denied
exception is actually rendered.</p>
<p>This shouldn&#8217;t pose a security issue as details are hidden
in production context.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27798">#27798</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1b3a9e25b1ee2738ea30547d395e9f6b576af4fa">1b3a9e2</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-request-injection-in-security-context">
<h3>[BUGFIX] Fix request injection in security context</h3>
<p>As inject* methods are excluded from the session
lazy loading proxy mechanism, the injectRequest
method of the security context didn&#8217;t work correctly
in requests with a session timeout. Renaming the
method to setRequest solves the problem.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37001">#37001</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d1c1372ce0e69abfac9716b493ed878e4a16baa">8d1c137</a></li>
</ul>
</div>
<div class="section" id="feature-enable-functional-tests-to-be-executed-by-non-cli-sapi">
<h3>[FEATURE] Enable functional tests to be executed by non CLI SAPI</h3>
<p>The FunctionalTestRequestHandler should be executable by non CLI requests to
enable TestRunners like VisualPHPUnit.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40273">#40273</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d01cdf42987f9d1104f93ca785a69a69eebbd7e">8d01cdf</a></li>
</ul>
</div>
<div class="section" id="feature-curl-request-engine-for-http-browser">
<h3>[FEATURE] cURL request engine for HTTP browser</h3>
<p>This provides a new request engine, based on cURL,
which can be used with the virtual browser contained
in FLOW3&#8217;s HTTP foundation. It can be used to send
requests and receive responses via HTTP.</p>
<p>This patch also contains a few minor modifications in
the RequestEngineInterface and InternalRequestEngine
class.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40414">#40414</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=20a8c74c3b5db0ce787c72cfdc44249a806690a1">20a8c74</a></li>
</ul>
</div>
<div class="section" id="bugfix-misused-joincolumns-in-manytomany">
<h3>[!!!][BUGFIX] Misused JoinColumns in ManyToMany</h3>
<p>With this fix the JoinColumns are created and used in the same
way regardless if you have a JoinTable annotation.</p>
<p>This is (almost) a cosmetic fix as it works without, but can lead
to confusion if looking at the database.</p>
<p>Breaking change as the JoinColumns could change if you annotated
with JoinTable.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33397">#33397</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f8b0bb7ac110f0e3c5d9fae6e252fc9e326b4da9">f8b0bb7</a></li>
</ul>
</div>
<div class="section" id="bugfix-don-t-override-orphanremoval-setting-from-doctrine">
<h3>[!!!][BUGFIX] Don&#8217;t override orphanRemoval setting from Doctrine</h3>
<p>In Doctrine 2 ORM, orphanRemoval is disabled by default. In FLOW3 we want
orphanRemoval to happen, if the target is not an aggregate root, changing
the default Doctrine behavior.</p>
<p>Because we want developers to be able to override that override, we had a
check in place, to favor the setting coming from the annotation. But since
there is no way to check if the FALSE in the orphanRemoval of an annotation
is the default or has been explitly set, this would fail to allow an
override with FALSE.</p>
<p>For many-to-many we thus assume that orphanRemoval is very rarely a
useful thing, and thus skip our own default handling.</p>
<p>If you want orphanRemoval on many-to-many associations, you now must
explicitly enable it with the annotation option!</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40389">#40389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ca60d48ec5f7fc4e39c5a833c429ea83411e1fa5">ca60d48</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-headers-has-for-cache-control">
<h3>[BUGFIX] Fix Headers::has() for Cache-Control</h3>
<p>The Http\Headers::get() method now correctly returns
TRUE if a cache control header exists.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40372">#40372</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=28fc7e7b717218ee69516112373bd5b6a7c9237a">28fc7e7</a></li>
</ul>
</div>
<div class="section" id="task-add-windows-version-hint-to-documentation">
<h3>[TASK] Add Windows version hint to documentation</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38038">#38038</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fe8c0786c1421d1ac379eb2ce619b66b018cc85c">fe8c078</a></li>
</ul>
</div>
<div class="section" id="task-detect-inject-methods-more-strictly">
<h3>[TASK] Detect inject methods more strictly</h3>
<p>Currently every method starting with &#8220;inject&#8221; is considered
for property injection by the ConfigurationManager.
That includes methods named &#8220;inject&#8221; or &#8220;injectionFoo&#8221;.</p>
<p>This change makes the detection more strict to only accept
methods that start with &#8220;inject&#8221; followed by an upper case
character.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39681">#39681</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=45f872a57b3a07b7d08e3136f42effa3ebb15072">45f872a</a></li>
</ul>
</div>
<div class="section" id="feature-make-webredirect-entrypoint-less-routing-dependent">
<h3>[FEATURE] Make WebRedirect EntryPoint less Routing dependent</h3>
<p>The WebRedirect currently expects an option uri that points
to a relative or absolute URI to redirect when trying to access
a protected action.</p>
<p>This change makes it possible to specify route values instead
so that the Routing framework can determine the correct target
URI depending on the Routes.yaml configuration.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39837">#39837</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=94c0c7bb26561a09a7df527a76572188ab8e06a9">94c0c7b</a></li>
</ul>
</div>
<div class="section" id="bugfix-loop-confuses-variable-check-on-migrating">
<h3>[BUGFIX] Loop confuses variable check on migrating</h3>
<p>When migrating code and not specifying a package to work on, the code
would get confused after the first available migration, because the
internal loop used $packageKey as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/40263">#40263</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d8d6fee4ae3e177c5b4f4509126c266f5410ef68">d8d6fee</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0">
<h3>[TASK] Add changelog for FLOW3 1.1.0</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a47ccbf01bc7924571cb20497c47ec857525bec0">a47ccbf</a></li>
</ul>
</div>
<div class="section" id="feature-allow-mapping-of-indexed-property-names-with-placeholder">
<h3>[FEATURE] Allow mapping of indexed property names with placeholder</h3>
<p>For multi-valued property types (Doctrine\Common\Collections\Collection or
array) the property mapper uses indexes as property names. To match the
property mapping configuration for any index, the path syntax supports an
asterisk as a placeholder:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$propertyMappingConfiguration</span>
        <span class="o">-&gt;</span><span class="na">forProperty</span><span class="p">(</span><span class="s1">&#39;items.*&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
                <span class="s1">&#39;TYPO3\\FLOW3\\Property\\TypeConverter\\PersistentObjectConverter&#39;</span><span class="p">,</span>
                <span class="nx">\\TYPO3\\FLOW3\\Property\\TypeConverter\\PersistentObjectConverter</span><span class="o">::</span><span class="na">CONFIGURATION_CREATION_ALLOWED</span><span class="p">,</span>
                <span class="k">TRUE</span>
        <span class="p">);</span>
</pre></div>
</div>
<p>This also works recursively, as in &#8216;items.*.author&#8217;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37436">#37436</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=faaee920c10087dad46980131ea01f41d40071bd">faaee92</a></li>
</ul>
</div>
<div class="section" id="add-changelog-for-flow3-1-0-6">
<h3>Add changelog for FLOW3 1.0.6</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4fcbba8108b5e9911a97827a684b9feeb6ac8c27">4fcbba8</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-reflection-on-php-5-3-16">
<h3>[BUGFIX] Fix reflection on PHP 5.3.16</h3>
<p>The fix for <a class="reference external" href="https://bugs.php.net/62715">https://bugs.php.net/62715</a> landed in PHP 5.3.16, and because of
<a class="reference external" href="https://bugs.php.net/62874">https://bugs.php.net/62874</a> reflection fails (in Production context) with a
pretty unhelpful exception:</p>
<blockquote>
<div>Fatal error: Uncaught exception … with message &#8216;Parameter is not optional&#8217; in …</div></blockquote>
<p>This change adds an additional check with isOptional() to the relevant code
part.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40003">#40003</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2dbfd8fe92a617e5f01339d8acae1a1287de2c5c">2dbfd8f</a></li>
</ul>
</div>
<div class="section" id="bugfix-alphanumeric-validator-fails-on-umlauts">
<h3>[BUGFIX] Alphanumeric-Validator fails on umlauts</h3>
<p>This change adds support for umlauts in the AlphanumericValidator,
by changing the regex pattern to [:alnum:] and adding utf-8 mode flag.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35295">#35295</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f1fa75067c1b58424b0be2d319696b9c01c34605">f1fa750</a></li>
</ul>
</div>
<div class="section" id="feature-control-validation-groups-via-annotations">
<h3>[FEATURE] Control Validation Groups via annotations</h3>
<p>This feature adds support for overriding validation groups in actions through
&#64;FLOW\ValidationGroups annotation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36695">#36695</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=46ea9e11c74db201fd7dc127e618f657f8784d12">46ea9e1</a></li>
</ul>
</div>
<div class="section" id="cleanup-some-cgl-fixes">
<h3>[CLEANUP] Some CGL fixes</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d554ec231394c737dce09c4d672ef34ba03a92e5">d554ec2</a></li>
</ul>
</div>
<div class="section" id="task-increase-branch-version-number-to-1-2">
<h3>[TASK] Increase branch version number to 1.2</h3>
<p>This updates the constant in Bootstrap.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f7c29db8d4186d06a0f19b1214249c8ad89843c4">f7c29db</a></li>
</ul>
</div>
<div class="section" id="task-get-rid-of-strtolower-in-foreach-loop">
<h3>[TASK] Get rid of strtolower() in foreach loop</h3>
<p>A tiny optimization I could not resist.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=41267d166924f51b770cf8de360a8bb74484b0c2">41267d1</a></li>
</ul>
</div>
<div class="section" id="task-fix-markup-errors-on-documentation">
<h3>[TASK] Fix markup errors on documentation</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=522057e5fbab87ee606039023c93cad3a1b7dfbf">522057e</a></li>
</ul>
</div>
<div class="section" id="feature-cookie-management-support">
<h3>[FEATURE] Cookie management support</h3>
<p>This implements the cookie management feature
which previously only existed as a stub in the
HTTP foundation.</p>
<p>This patch also contains the corresponding tests
and documentation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39836">#39836</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ea08462aeba9427b7bfe128ea15e1b67dc1542b2">ea08462</a></li>
</ul>
</div>
<div class="section" id="wip-task-new-chapter-mvc">
<h3>[WIP][TASK] New chapter: MVC</h3>
<p>This adds a new chapter to The Definitive Guide.</p>
<p>Also adjust some mentions of &#8220;DocComment&#8221; in other chapters
and adds a stub for a section about HMAC to the security chapter.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/3881">#3881</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d96192477241d8d04a00db0089b04b8dab911fe1">d961924</a></li>
</ul>
</div>
<div class="section" id="feature-validate-email-addresses-with-filter-var">
<h3>[FEATURE] Validate email addresses with filter_var()</h3>
<p>This change makes FLOW3 use filter_var instead of a regex check
to validate email addresses.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39714">#39714</a></li>
<li>Extbase Issue: <a class="reference external" href="http://forge.typo3.org/issues/6970">#6970</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bf268108c0bcad6559a52918810dcba92bcc3fb4">bf26810</a></li>
</ul>
</div>
<div class="section" id="bugfix-propertymapper-should-be-able-to-work-with-recursive-already-converted-objects">
<h3>[BUGFIX] PropertyMapper should be able to work with recursive already-converted objects</h3>
<p>If f.e. an array of already converted objects is passed into the PropertyMapper, a fatal error
will be thrown.</p>
<p>Thus, we move the check from convert() to doMapping() such that it works recursively.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39445">#39445</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8ac03660b9c5835d67f9f514b3035fa2e9eb2dd5">8ac0366</a></li>
</ul>
</div>
<div class="section" id="feature-added-some-signals-for-the-debug-toolbar">
<h3>[FEATURE] Added some Signals for the Debug.Toolbar</h3>
<ul class="simple">
<li>added an Signal to AbstractAdvice on Advice invocation</li>
<li>added an Signal to ActionRequest when it&#8217;s dispatched</li>
<li>added getSignals to the SignalSlot\Dispatcher to get all configured Signals
with it&#8217;s slots</li>
</ul>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37879">#37879</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=713ca78986cc5d2c1b486a4a8a8ef84e5ee59c65">713ca78</a></li>
</ul>
</div>
<div class="section" id="feature-configurable-cli-subrequest-environment-variables">
<h3>[FEATURE] Configurable CLI Subrequest environment variables</h3>
<p>When debugging with xdebug, a major difficulty is that in development
and functional tests, there are always two requests being executed:
The main request and a CLI request inside.</p>
<p>Now, most IDEs do not support the (optional) feature of multi-threaded
PHP debugging, effectively stopping the sub-request and also the main
request in this case.</p>
<p>With this change it&#8217;s possible to change xdebug configuration settings
for the CLI subrequests making it possible to debug them individually.
By default the remote port is now changed from 9000 to 9001 in
Development and Testing context. So you can debug the subrequest by
configuring your IDE to listen on port 9001.</p>
<p>Apart from that, this change allows you to set arbitrary environment
variables by adding entries to the
TYPO3.FLOW3.core.subRequestEnvironmentVariables setting.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39648">#39648</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cfa70692f78516d136d180598d0b689848ee0b4f">cfa7069</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-warning-about-property-injection-in-test">
<h3>[BUGFIX] Fix warning about property injection in test</h3>
<p>The DependencyInjectionTest testcase has a test called
injectionInParentClassIsDoneOnlyOnceOnCreationOfObject, leading to FLOW3
trying to use the inject method for the property
&#8220;ionInParentClassIsDoneOnlyOnceOnCreationOfObject&#8221;…</p>
<p>This change renames the test method to fix this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39681">#39681</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a7fdef8459cee547770e3cf5611bd79b4fc169fc">a7fdef8</a></li>
</ul>
</div>
<div class="section" id="task-support-literal-strings-in-boolean-arguments">
<h3>[TASK] Support literal strings in boolean arguments</h3>
<p>This change adds support for string literals in boolean comparisons.
String literals have to be surrounded by single or double quotes and
may contain escaped single or double quotes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/6757">#6757</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3b47daf59e958b06eb6ae21b7986b3170dc17547">3b47daf</a></li>
</ul>
</div>
<div class="section" id="task-add-section-about-uri-class-in-http-chapter">
<h3>[TASK] Add section about Uri class in HTTP chapter</h3>
<p>This adds some explanation for the use of the Uri class.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39424">#39424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=68d19d7f323eeae42de93be85326ad8d0321a061">68d19d7</a></li>
</ul>
</div>
<div class="section" id="task-new-chapter-http">
<h3>[TASK] New chapter: HTTP</h3>
<p>This adds a new chapter to The Definitive Guide</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39424">#39424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a0db61b7c70c9d88845894d00181ccb2b4486d7b">a0db61b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-some-outdated-code-examples-in-part-ii">
<h3>[BUGFIX] Fix some outdated code (examples) in Part II</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39374">#39374</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=aafcbb696c90d9e8b81f6428ed7cd08be4be20bd">aafcbb6</a></li>
</ul>
</div>
<div class="section" id="bugfix-disable-proxy-building-for-http-classes">
<h3>[BUGFIX] Disable proxy building for Http classes</h3>
<p>This disables proxy building for (most of) the classes in
the Http part of FLOW3.</p>
<p>They are not needing it and some would circumvent the built
proxy because they are instantiated statically.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39005">#39005</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=868e073b9877d562c6ed65a5158c1c67b3a501a8">868e073</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-arguments-rendering-for-dumped-backtraces">
<h3>[BUGFIX] Fix arguments rendering for dumped backtraces</h3>
<p>When an exception was dumped to Data/Logs/Exceptions/…txt all
arguments were doubled, once with parenthesis around them, once
without. This change fixes this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38625">#38625</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=09d4a7203cf84ba031d1ea27e9318e5c1cf16b2c">09d4a72</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow3-s-var-dump-still-chokes-on-doctrine-collections">
<h3>[BUGFIX] FLOW3&#8217;s var_dump() still chokes on Doctrine collections</h3>
<p>Using Doctrine\Common\Util\Debug::export() to render doctrine
collections leads to an exception because our Debugger expects
a string and doctrine&#8217;s debugger returns an array.
This change fixes this by post processing the result.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39286">#39286</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37481">#37481</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fd3eaff01fa0f8ce6ee3c3c4817db4d67d252089">fd3eaff</a></li>
</ul>
</div>
<div class="section" id="bugfix-corrected-annotation-of-assign-method-in-viewinterface">
<h3>[BUGFIX] Corrected annotation of assign method in ViewInterface</h3>
<p>A view is basically intended to be able to get arbitrary values,
hence data types assigned, so the annotation gets corrected to
accomodate for this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39293">#39293</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9ede9cc9fedde3ac39d53e06556f70d333e1371a">9ede9cc</a></li>
</ul>
</div>
<div class="section" id="task-new-chapter-command-line">
<h3>[TASK] New chapter: Command Line</h3>
<p>This is a new chapter for The Definitive Guide.
Also marked the executeCommand() method in the
Scripts class as an &#64;api function.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38944">#38944</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8f9b4491bfeff21fe1e156366bd2a31a0874e772">8f9b449</a></li>
</ul>
</div>
<div class="section" id="bugfix-rsawalletservice-save-keys-only-if-modified">
<h3>[BUGFIX] RsaWalletService: Save keys only if modified</h3>
<p>This patch adds a check to the shutdown() method of the
RsaWalletServicePhp to make sure that the keys are only
saved to disk if they were actually modified.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39267">#39267</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=752e4a6dc404667071261e9c210b867068cc7e01">752e4a6</a></li>
</ul>
</div>
<div class="section" id="bugfix-missing-setting-namespace-in-error-message">
<h3>[BUGFIX] Missing setting namespace in error message</h3>
<p>When an invalid PHP binary is found, the error message hint at setting
the path in settings misses the setting namespace TYPO3 in the beginning.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39142">#39142</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=32c8a20b3f512831ffc05402f1b72344df529e65">32c8a20</a></li>
</ul>
</div>
<div class="section" id="task-fix-partial-validation-example">
<h3>[TASK] Fix partial validation example</h3>
<p>The partial validation example was flawed. This change updates the
example to an actual working usecase.</p>
<p>Credits to Ruud Alberts for finding.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c95d732a3343e09c6b6903174214a57676de9cff">c95d732</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-rc2">
<h3>[TASK] Add changelog for FLOW3 1.1.0-rc2</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2f1a4ef8f6ef96b8613efe9ff3fb4a1db9449cb0">2f1a4ef</a></li>
</ul>
</div>
<div class="section" id="id331">
<h3>[TASK] Update references in documentation</h3>
<p>This updates command, type converter and Fluid VH references.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=76c814b7bed7118bf2bab04e043ff3b15765f3b1">76c814b</a></li>
</ul>
</div>
<div class="section" id="feature-catch-pdoexceptions-to-prevent-database-information-in-debug-backtrace">
<h3>[FEATURE] Catch PDOExceptions to prevent database information in debug backtrace</h3>
<p>Add catching of \PDOExceptions to the Doctrine Query class, and output the
exception message &amp; code, but prevent the debug backtrace leading up to
it, since it contains the database information in the method calls.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37360">#37360</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4df796af78cca60f1fddb5ea09cec0081908dd86">4df796a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-broken-links-standardview-template">
<h3>[BUGFIX] Fix broken links StandardView template</h3>
<p>The links pointed to URLs no longer working.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39062">#39062</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2b2fcaab6f34eb6bb2ad4cfc01770bd3d492d9ec">2b2fcaa</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-functional-tests-after-floatconverter-change">
<h3>[BUGFIX] Fix functional tests after FloatConverter change</h3>
<p>Somehow two failing functional tests went unnoticed so far,
broken with Ib95c52d958d765eb0a9cd20e415642186e25ee57.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36333">#36333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b83b9b43d5872829e60b36fb2b554669755453e3">b83b9b4</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-repositoryinterface">
<h3>[!!!][BUGFIX] Correct RepositoryInterface</h3>
<p>Fixes a docblock and adds __call() to the interface (thus the breaking
change flag), because everyone probably would expect it to be there.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38840">#38840</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f305aee0395b20a1a3de6d91dd9aed3cc7ecec98">f305aee</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-return-values-of-doctrine-repository-magic-methods">
<h3>[!!!][BUGFIX] Fix return values of Doctrine\Repository magic methods</h3>
<p>Overrides __call from EntityRepository to make the methods return
the expected QueryResultInterface. Also adds support for countBy().</p>
<p>This is marked as a breaking change because if you relied on the
specific return values before, you need to adjust your code.</p>
<p>Along the way the code inside __call() is simplified.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38841">#38841</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=934c2c425de2f0eb71c8df18a7dda1860445239f">934c2c4</a></li>
</ul>
</div>
<div class="section" id="feature-floatconverter-uses-locale-parser">
<h3>[FEATURE] FloatConverter uses Locale parser</h3>
<p>If configured using the Property Mapping Configuration,
the FloatConverter now can also use the Locale parser
to get the intended <cite>float</cite> value from a string input.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36333">#36333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d10d076b3116d5eea2c124ad8a3a0ede4da6ee6c">d10d076</a></li>
</ul>
</div>
<div class="section" id="task-correct-typos-in-coding-guidelines">
<h3>[TASK] Correct typos in Coding Guidelines</h3>
<p>This corrects some typos in PartV/CodingGuidelines of the
documentation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d743972f5f5ed2f8d9736faeaa40df90c06d0279">d743972</a></li>
</ul>
</div>
<div class="section" id="task-minor-typo-corrections-in-code">
<h3>[!!!][TASK] Minor typo corrections in code</h3>
<p>This trivially corrects some typos in code.</p>
<p>As a consequence, the DataNotSerializeableException was renamed
to DataNotSerializableException.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c86356cca0346dcfa1327f47a0c24f5ea01fb7e8">c86356c</a></li>
</ul>
</div>
<div class="section" id="task-document-configuration-validation">
<h3>[TASK] Document configuration validation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38680">#38680</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9f4dba0552745df3e384da4f69ee5068b597263e">9f4dba0</a></li>
</ul>
</div>
<div class="section" id="bugfix-injections-only-on-last-level-of-class-hierarchy">
<h3>[BUGFIX] Injections only on last level of class hierarchy</h3>
<p>Property injections are no longer called for every level of your
class hierarchy, which means they are only executed once now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31179">#31179</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f9330b400d4fe8cac7e486becef043a9f82e1dca">f9330b4</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-order-of-monitoring-and-proxy-building">
<h3>[BUGFIX] Fix order of monitoring and proxy building</h3>
<p>During bootstrap file monitoring would be run too late,
so that while change detection worked fine, the results
were not used correctly: Reflection data was updated,
but that happened after DI proxy building, so that e.g.
added Inject annotations would not have the expected
effect.</p>
<p>This change moves file monitoring before reflection
initialization to fix this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37574">#37574</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d35532647cd6c6279ff1c5e7cc9123371778c1f1">d355326</a></li>
</ul>
</div>
<div class="section" id="task-add-typeconverter-reference">
<h3>[TASK] Add TypeConverter reference</h3>
<p>Tweaks the DateTimeConverter docblock to be proper reST.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38646">#38646</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=16e149351ab162cfe613b707461ac6eef6707e3f">16e1493</a></li>
</ul>
</div>
<div class="section" id="task-add-http-status-code-to-exceptions">
<h3>[TASK] Add HTTP status code to exceptions</h3>
<p>Currently if an exception is rendered with either Debug-
or ProductionExceptionHandler the HTTP status is set to
&#8220;500 Internal Server Error&#8221;.</p>
<p>This change adds a property &#8220;statusCode&#8221; to the FLOW3
base Exception allowing to set a custom HTTP status code.</p>
<p>This also sets status codes for some of the FLOW3 exceptions</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27798">#27798</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2a3bfd1e3ff6d07f7a79f245e1c61dfa9e182de1">2a3bfd1</a></li>
</ul>
</div>
<div class="section" id="task-create-reflection-manual-page">
<h3>[TASK] Create Reflection manual page</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38561">#38561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=205d209a4f0c998665cfa89d5349b1a32fcd0d46">205d209</a></li>
</ul>
</div>
<div class="section" id="task-tweak-typeconverter-extends-statements">
<h3>[TASK] Tweak TypeConverter extends statements</h3>
<p>Use short class names for extends in TypeConverters.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38646">#38646</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=69d2705ca5012994cc66d86370521c5488f4dba0">69d2705</a></li>
</ul>
</div>
<div class="section" id="task-remove-flow3-s-magic-timezone-setting-behavior">
<h3>[!!!][TASK] Remove FLOW3&#8217;s magic timezone setting behavior</h3>
<p>FLOW3 used to magically set a default timezone if there&#8217;s none set
(in order to avoid the PHP notice being thrown, resulting in an
exception).</p>
<p>Because every default time zone will be the wrong one for most people;
and to raise awareness of having to care about the system&#8217;s time zone,
this behavior is dropped.</p>
<p>This change is marked breaking because in cases where no timezone
is set in PHP configuration, FLOW3 will no longer work.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37438">#37438</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3f3b1e0034af0fd20533a1bdbdca8f20588d87ec">3f3b1e0</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-publishingconfiguration-to-be-persisted">
<h3>[BUGFIX] Allow PublishingConfiguration to be persisted</h3>
<p>Any resource publishing configuration attached to a resource could
not be persisted, because the needed mapping information for
Doctrine was missing and the target type of the relation was an
interface.</p>
<p>This change adds an AbstractPublishingConfiguration and the needed
annotations, plus a schema migration.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32826">#32826</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9dd8a61234837658af6168f49237a9bab0890e85">9dd8a61</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-indentation-in-contributing-to-flow3">
<h3>[BUGFIX] Fix indentation in &#8220;Contributing to FLOW3&#8221;</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38884">#38884</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=91cb31125ea1e5cab6bb96ccc705f33e64d244d3">91cb311</a></li>
</ul>
</div>
<div class="section" id="feature-add-flushconfigurationcache-to-configurationmanager">
<h3>[FEATURE] Add flushConfigurationCache to ConfigurationManager</h3>
<p>This allows to remove the cached configuration in Production context.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38859">#38859</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=42702acc149b25756d6de32d424747a4ef274de7">42702ac</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-execute-bit-on-some-files">
<h3>[BUGFIX] Adjust execute bit on some files</h3>
<p>This fixes the execute bit (and setfilepermissions.sh) so that
no differences are created when setting permissions on a fresh
clone.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36049">#36049</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f91996c6117d2e095dac9dc68829805163f31778">f91996c</a></li>
</ul>
</div>
<div class="section" id="task-some-code-cleanup-csrf-settings-documentation">
<h3>[TASK] Some code cleanup, CSRF settings documentation</h3>
<p>Does some code (style) cleanup and adds descriptions for CSRF
options in Settings.yaml.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f406f7c96d9877fe1ffb1ed2f9c0162538665b68">f406f7c</a></li>
</ul>
</div>
<div class="section" id="bugfix-have-doctrine-repository-findall-return-a-queryresult">
<h3>[BUGFIX] Have Doctrine\Repository::findAll() return a QueryResult</h3>
<p>This makes the behavior of Doctrine\Repository consistent and
allows the use of findAll() e.g. in combination with widgets.</p>
<p>With this change, findAll() also observes the default ordering
of a repository.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35035">#35035</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38381">#38381</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9825cdbf68efafe86c8118e7b44e4d92a25470bf">9825cdb</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-timezone-override-side-effect-in-datetimeconverter">
<h3>[BUGFIX] Fix timezone override side effect in DateTimeConverter</h3>
<p>Specifying a timezone override in DateTimeConverter would lead to
wrong times due to the timezone being applied to the finished date
instance, not upon creation.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35369">#35369</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=49196a7cf539ce4eafb68e81d79fbfbfd265812a">49196a7</a></li>
</ul>
</div>
<div class="section" id="feature-support-teardown-for-functional-tests-in-generic-persistence">
<h3>[FEATURE] Support tearDown for functional tests in generic persistence</h3>
<p>Implement a tearDown method in the generic persistence according to the
Doctrine PersistenceManager. The call is delegated to the underlying
backend.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38785">#38785</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=af46cd9cbf1c8f6e7bb0dabd6142571ad8a7e04f">af46cd9</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-some-code">
<h3>[TASK] Clean up some code</h3>
<p>Fixes some comments, style issues and API usage.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37574">#37574</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d57781ab6fc326571d14c7722b472623797c6cf3">d57781a</a></li>
</ul>
</div>
<div class="section" id="bugfix-memcachedbackendtest-fail">
<h3>[BUGFIX] MemcachedBackendTest fail</h3>
<p>MemcachedBackendTest doesn&#8217;t use TYPO3\FLOW3\Core\ApplicationContext
to initialize MemcacheBackend.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38713">#38713</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b9f907d8c9f17251af0fd5522b221be6926ada42">b9f907d</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-f-uri-resource-title-parameter-in-guide">
<h3>[BUGFIX] Remove f:uri.resource title parameter in Guide</h3>
<p>The resource management documentation described a title parameter
for the ResourceViewHelper that ceased to exist a long time ago.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38382">#38382</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d799913e3e24caba4977b317a712aea57b5b0982">d799913</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-internalrequestengine-for-each-functional-test">
<h3>[BUGFIX] Reset InternalRequestEngine for each functional test</h3>
<p>Currently all functional tests share the same instance of
\TYPO3\FLOW3\Mvc\Routing\Router because the InternalRequestEngine
is of scope singleton.
This leads to unexpected results and failing tests if tests add
custom routes.</p>
<p>This change fixes this by making the ObjectManager forget the
singleton instance of the request engine after each testrun.
This also reverts the changes that were introduced with
I5a5bf17d00c5be05748a18122dae42989f429221 as they did not
have the expected effect.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38435">#38435</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cff94d79b2146f315f1a1aff5fc8be4b30ff55ae">cff94d7</a></li>
</ul>
</div>
<div class="section" id="task-add-annotation-reference-to-documentation">
<h3>[TASK] Add annotation reference to documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38669">#38669</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=086ee1ec27a228bd4570238c5113414100a05387">086ee1e</a></li>
</ul>
</div>
<div class="section" id="task-add-documentation-to-annotation-classes">
<h3>[TASK] Add documentation to annotation classes</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38669">#38669</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e4fbaad0b5217b3383eb04bb45efe63b7d1c7dbe">e4fbaad</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-use-of-target-in-annotation-classes">
<h3>[BUGFIX] Fix use of Target in annotation classes</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38667">#38667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fbe64c7c65436af5b0b6fc5c7196322a69ecc757">fbe64c7</a></li>
</ul>
</div>
<div class="section" id="feature-extract-authenticateaccount-functionality">
<h3>[FEATURE] Extract authenticateAccount functionality</h3>
<p>This extracts the portion that is responsible for the actual account
authentication in order to use this exclusively in own tests.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37470">#37470</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6bbe20c397c81444422bf1345a499244d88f7481">6bbe20c</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-abstract-classes-in-ensureaggregaterootinheritancechainconsistency">
<h3>[BUGFIX] Skip abstract classes in ensureAggregateRootInheritanceChainConsistency</h3>
<p>When using an abstract base class for domain models, the checks done in
ensureAggregateRootInheritanceChainConsistency() would fail, even though
it is fine to have an abstract base class not being aggregate root.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31522">#31522</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2d62b1e83ec1cdc3878c79ca6b4a2b08e8d44d40">2d62b1e</a></li>
</ul>
</div>
<div class="section" id="task-use-inject-annotation-instead-of-tag">
<h3>[TASK] Use Inject annotation instead of tag</h3>
<p>The ConfigurationBuilder still used getPropertyNamesByTag(),
this change replaces that with getPropertyNamesByAnnotation().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38622">#38622</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=761e2876dbefe59e4fae759d7589b6505acbb2ec">761e287</a></li>
</ul>
</div>
<div class="section" id="task-functional-tests-for-routing-framework">
<h3>[TASK] Functional tests for Routing Framework</h3>
<p>Adds testing routes to the provided Testing/Routes.yaml
file and adds tests covering mathing and resolving of
arbitrary routes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37608">#37608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6c9633fac3e563480f15e242e736b0cac827895e">6c9633f</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-the-router-for-each-functional-test">
<h3>[BUGFIX] Reset the router for each functional test</h3>
<p>Currently all functional tests share the same instance of
\TYPO3\FLOW3\Mvc\Routing\Router because the InternalRequestEngine
is of scope singleton.
This leads to unexpected results and failing tests if tests add
custom routes.</p>
<p>This change fixes this by reinitializing the request engine for
each test case that has testableHttpEnabled set to TRUE.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38435">#38435</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3bb66040c0c55d7ae5ded62d7df0878d61fe6b58">3bb6604</a></li>
</ul>
</div>
<div class="section" id="bugfix-baseuri-contains-default-https-port">
<h3>[BUGFIX] BaseUri contains default HTTPS port</h3>
<p>By resolving #37770 now the BaseUri and thus the base tag when
using &lt;f:base /&gt; contains the HTTP port if it&#8217;s not equal to 80.</p>
<p>This adjusts Request and Uri to omit the port if it is equal to
443 and the request scheme is https.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38547">#38547</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37770">#37770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=58354078b93ed5678abf205bb6563afdb4775d5a">5835407</a></li>
</ul>
</div>
<div class="section" id="task-add-introduction-to-the-guide">
<h3>[TASK] Add &#8220;Introduction&#8221; to the guide</h3>
<p>Added introduction section for the guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=439702c189fa864ff26668986e6fbf5f04616aa4">439702c</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-rc1">
<h3>[TASK] Add changelog for FLOW3 1.1.0-rc1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=291cb179bd8e0f6d535607227bc36226502e3f8d">291cb17</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-check-in-atomic-writes-code">
<h3>[BUGFIX] Fix wrong check in atomic writes code</h3>
<p>Fixes a wrong check in Cache\FileBackend and RsaWalletServicePhp
as well as a bunch of one-line if blocks.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/27989">#27989</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1355fcd72db319e90fdd06dd8b78abcfbe069c8a">1355fcd</a></li>
</ul>
</div>
<div class="section" id="feature-inform-about-lock-expiry-in-cli">
<h3>[FEATURE] Inform about lock expiry in CLI</h3>
<p>When a CLI command is not executed because the FLOW3 system
is locked, the time remaining until lock expiry is shown in
the message to the user.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38419">#38419</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=849e9e1c3d1e6bd7e918274eb95ad70c81056615">849e9e1</a></li>
</ul>
</div>
<div class="section" id="task-add-essential-design-patterns-to-the-guide">
<h3>[TASK] Add &#8220;Essential Design Patterns&#8221; to the guide</h3>
<p>Re-uses some AOP verbage from part III of the guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=90cad6b682060a57d2c50bf06121a38ac378f0af">90cad6b</a></li>
</ul>
</div>
<div class="section" id="task-document-routing-feature-appendexceedingarguments">
<h3>[TASK] Document Routing feature &#8220;appendExceedingArguments&#8221;</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35394">#35394</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8dde9f2b624b49c93cbc7f84ab73f4dee5d4194a">8dde9f2</a></li>
</ul>
</div>
<div class="section" id="bugfix-identityroutepart-should-accept-identity-array">
<h3>[BUGFIX] IdentityRoutePart should accept identity array</h3>
<p>IdentityRoutePart::matchValue() returns an identity array in
the format array(&#8216;__identity&#8217; =&gt; &#8216;&lt;Identifier&gt;&#8217;) (see #37403).</p>
<p>This change ajusts resolveValue() to accept arrays in that
format, too.
This is required for widgets that fetch arguments from the
current request and pass them to the UriBuilder.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38404">#38404</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=23a2b37d218ad04c90957e4fe49fd3791e22f93d">23a2b37</a></li>
</ul>
</div>
<div class="section" id="task-adjust-filename-spelling-to-match-rest-of-package">
<h3>[TASK] Adjust filename spelling to match rest of package</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35298">#35298</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=91141a35001fc9f1a77c888bfdf906b42daac337">91141a3</a></li>
</ul>
</div>
<div class="section" id="task-remove-trailing-colon-from-example-headlines">
<h3>[TASK] Remove trailing colon from example headlines</h3>
<p>It just looked weird this way…</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=63421e014ec3b9d687a2f9f19f85b98b6443b3e4">63421e0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-objects-yaml-classname-example-in-guide">
<h3>[BUGFIX] Fix Objects.yaml className example in guide</h3>
<p>The guide still stated that setting className in Objects.yaml
was possible for classes, but it works only for interfaces.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37648">#37648</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=dc396d0b5a4fb64b99e3ed95613b2c96756a9dc5">dc396d0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-code-documentation-of-datetimeparser">
<h3>[BUGFIX] Fix code documentation of DatetimeParser</h3>
<p>The parser code documentation would state the parse methods
expect \DateTime instances, but in fact strings are expected.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34050">#34050</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7024268cd8cd45394aa764ba9f45a759f0629b2d">7024268</a></li>
</ul>
</div>
<div class="section" id="task-provide-conventions-for-ids-in-xliff-files">
<h3>[TASK] Provide conventions for ids in XLIFF files</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32606">#32606</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f4f841bdbd32eb8a7a5f66e79e2d7108b85aa4ad">f4f841b</a></li>
</ul>
</div>
<div class="section" id="task-update-and-link-cgl-on-one-page">
<h3>[TASK] Update and link CGL on one page</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36651">#36651</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=20f273f4389698d3c9c40e1c0b831dc17f503da8">20f273f</a></li>
</ul>
</div>
<div class="section" id="task-show-up-hints-for-nesting-inline-viewhelpers">
<h3>[TASK] Show up hints for nesting inline ViewHelpers</h3>
<p>This adds a section with some examples about how to nest
and use inline ViewHelpers.
Besides, it does some minor typo and formatting corrections.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34749">#34749</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=28ab103142b0567498c4fc7ed744a72209f647bb">28ab103</a></li>
</ul>
</div>
<div class="section" id="bugfix-log-route-values-if-a-route-can-t-be-resolved">
<h3>[BUGFIX] Log route values if a route can&#8217;t be resolved</h3>
<p>This re-introduces logging if a route could not be resolved.
This behaviour was lost with I9605731f78cb1be9b0fb5c439d7149a676b6ccb7</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38172">#38172</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c11036150d7814762dd9de67a0ed641c960d94a9">c110361</a></li>
</ul>
</div>
<div class="section" id="task-update-cgl-on-one-page">
<h3>[TASK] Update &#8220;CGL on one page&#8221;</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36651">#36651</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3633f65053ad7f072d6aa7a29754d62e0eebd37b">3633f65</a></li>
</ul>
</div>
<div class="section" id="id392">
<h3>[TASK] Code cleanup</h3>
<p>Does code cleanup, mostly to documentation, but also tweaks
unused variables, missing return statements and similar things.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3128201c0435a028d5a57aa0a9e1755c4e478495">3128201</a></li>
</ul>
</div>
<div class="section" id="task-add-architectural-overview-to-the-guide">
<h3>[TASK] Add &#8220;Architectural Overview&#8221; to the guide</h3>
<p>Based on the introduction from the old DocBook manual,
tweaked and amended.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29266">#29266</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fd62a028e424a14c117c36340c2e88f35369cb81">fd62a02</a></li>
</ul>
</div>
<div class="section" id="task-some-tiny-tweaks-to-the-1-1-0b3-changelog">
<h3>[TASK] Some tiny tweaks to the 1.1.0b3 changelog</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4ae9c667d38e571a279d84e13a0de6cfd6dbb31f">4ae9c66</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-beta3">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta3</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=38e6e22486b3e5c08076c6ddfadc32ea50148360">38e6e22</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-map-file-uploads-to-arguments-if-not-empty">
<h3>[BUGFIX] Only map file uploads to arguments if not empty</h3>
<p>Currently the HTTP request converts the FILES superglobal
to request arguments even if no file has been uploaded.
This leads to an exception when submitting a form without
uploading a file because the property mapper receives a
corrupt source array in that case.</p>
<p>This adjust the HTTP request to only map values from the
FILES superglobal to arguments if a file has been uploaded.</p>
<p>This also tweaks the ResourceTypeConverter to accept
an empty source. Besides the converter now only outputs
filer errors (for too large or corrupt files) to the user.
Server errors (e.g. non-existing/read-only tmp directory)
are logged to the systemLogger.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38184">#38184</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=38fcda543a3c4ad0600fdba19c6fbd31da895e20">38fcda5</a></li>
</ul>
</div>
<div class="section" id="bugfix-inform-about-possible-cause-for-no-class-schema-found">
<h3>[BUGFIX] Inform about possible cause for &#8220;No class schema found&#8221;</h3>
<p>When mapping meta data for Doctrine an error about &#8220;No class schema
found for …&#8221; could occur. It would not tell in what model the mapping
was taking place, leaving the user to guesswork. This adds output
of the currently examined class to the exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37547">#37547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a88b400cee51f51e032de71d42d8c03eec545d26">a88b400</a></li>
</ul>
</div>
<div class="section" id="task-add-context-information-to-cache-clearing-commands">
<h3>[TASK] Add context information to cache clearing commands</h3>
<p>When using the flow3:cache:flush commands only the current
cli context is cleared. This is not clear when using the
commands and this change add the context information
to the command output.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38221">#38221</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=44e04bfc8ca04f3fcc14b3dd5f3087388f8aad99">44e04bf</a></li>
</ul>
</div>
<div class="section" id="task-fix-section-about-resources-in-flow3-manual">
<h3>[TASK] Fix section about Resources in FLOW3 manual</h3>
<p>This fixes the Fluid code snippet of the resource upload example
in the Resource Management section.
Besides this adds a sample domain model to make this easier to
understand.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e444f6a9c5a12d53f983d0b9a7d7e368e2d0dbb7">e444f6a</a></li>
</ul>
</div>
<div class="section" id="task-documentation-corrections-each-minor">
<h3>[TASK] Documentation corrections, each minor</h3>
<p>Some additional corrections, basically typo corrections,
for the manual.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=13b891d201ec9605503b2c2be06db19efa04cbd6">13b891d</a></li>
</ul>
</div>
<div class="section" id="bugfix-routing-cache-only-works-for-one-request">
<h3>[BUGFIX] Routing cache only works for one request</h3>
<p>Currently the routing uses a TransientMemory cache backend by
default. Besides, objects in the routing values are converted
to hashes using spl_object_hash() - which generates a new hash
for every request.</p>
<p>This change configures the RouterCachingAspect to use a
SimpleFile cache backend and adjusts the aspect to use the
persistence manager in order to convert objects to their
identifiers before creating cache entries.</p>
<p>This also adds a signal to the FunctionalTestCase base
class that flushes the routing caches on teardown.</p>
<p>Furthermore this adds two convenience methods
getLastMatchedRoute() and getLastResolvedRoute() to the router
which should make debugging and testing easier.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38172">#38172</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c7386f4a917276f4f2fe65ca50fb8f6745a6bba8">c7386f4</a></li>
</ul>
</div>
<div class="section" id="task-update-fluid-viewhelper-reference">
<h3>[TASK] Update Fluid ViewHelper reference</h3>
<p>This adds format.identifier documentation and a depreciation
notice for identity.json to the Fluid VH reference.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a96ea73b410f06df2a542ed6b300c9f969579ec4">a96ea73</a></li>
</ul>
</div>
<div class="section" id="bugfix-non-standard-ports-are-now-considered-by-httprequest">
<h3>[BUGFIX] Non-standard ports are now considered by HttpRequest</h3>
<p>Ports that are not 80 for HTTP or 443 for HTTPS were simply not
passed through to the Request when being created by the create()
method.</p>
<p>Also Uri will now set the port to 443 for HTTPS if no port is
given in the string handed to the constructor.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37770">#37770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d7106f99e8500fc8e1cdf88a114cd77d1368e100">d7106f9</a></li>
</ul>
</div>
<div class="section" id="task-comment-fixes-for-accuracy-and-grammar">
<h3>[TASK] Comment fixes for accuracy and grammar</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c2e90adf6c487d1e1a7f614fbe039139182c5a6a">c2e90ad</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-phpsession-read-settings-from-phpsession">
<h3>[BUGFIX] Make PhpSession read settings from &#8220;PhpSession&#8221;</h3>
<p>The settings for the PhpSession are read from the key &#8220;PhpSession&#8221; now,
to ensure consistency. Before that they were read from &#8220;PHPSession&#8221;.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37993">#37993</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=96de170837473596138e42112839c14d75e6c17f">96de170</a></li>
</ul>
</div>
<div class="section" id="bugfix-uri-respects-query-and-fragment-even-without-path">
<h3>[BUGFIX] Uri respects query and fragment even without path</h3>
<p>Corresponding to the appropriate RFC 3986, section 3.3
the query and fragment indeed may be present also if no
path is given.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37903">#37903</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=75d98528be52c83c6226b2eca162e166d4c98cc3">75d9852</a></li>
</ul>
</div>
<div class="section" id="task-make-extending-genericobjectvalidator-easier">
<h3>[TASK] Make extending GenericObjectValidator easier</h3>
<p>This change moves the check for already validated objects out
of the isValid() method and into validate() instead. Since in
custom validators isValid() is the method to implement, this
makes correct implementation less error-prone.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37363">#37363</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ed3788b39662247d03fec6e7f45f99ad2ccc3f9f">ed3788b</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-mapper-chokes-on-already-converted-objects">
<h3>[BUGFIX] Property Mapper chokes on already-converted objects</h3>
<p>This happens for example when using the TYPO3.Form Project with a DatePicker,
which already transforms the value to the correct data type.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36988">#36988</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6695a4cb88c1d7cb9cc351bb99ce2322b9a73486">6695a4c</a></li>
</ul>
</div>
<div class="section" id="bugfix-correctly-implement-validator-resolver-short-notation">
<h3>[BUGFIX] Correctly implement validator resolver short notation</h3>
<p>Currently, the short notation for validators which has been introduced
with Id807dbfa78ae1388aa8cd53bfc578893eade427c does only support syntax
like TYPO3\FLOW3:EmailAddress; but we should rather support TYPO3.FLOW3:EmailAddress
as this is how we use package keys at all other places which are not PHP code.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38154">#38154</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33862">#33862</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fdfca9eb878fda281fc777afadb911b0bf26d6e9">fdfca9e</a></li>
</ul>
</div>
<div class="section" id="task-add-note-to-view-chapter-about-default-model-properties">
<h3>[TASK] Add note to View chapter about default model properties</h3>
<p>This note should be made seen the confusion around fixing #35894</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35894">#35894</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a785bb6813f5d2131aecb529c03a10e2017a05bc">a785bb6</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-baseuri-setting-work-for-resource-publishing">
<h3>[BUGFIX] Make baseUri setting work for resource publishing</h3>
<p>The baseUri setting was not observed in the filesystem resource
publisher.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37550">#37550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=92b4d9950e1ed0950062eebf01308c08dea907d7">92b4d99</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-exception-handling-framework-for-commandcontroller">
<h3>[BUGFIX] Use exception handling framework for CommandController</h3>
<p>The CommandRequestHandler brought its own tiny exception handling
with the main drawback exceptions not being logged anymore, unlike
the Error\AbstractExceptionHandler features.</p>
<p>When handling a CommandRequest, a dedicated CommandExceptionHandler
is involved, taking care of occuring exceptions.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37995">#37995</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f0eaa57a8de45a941fefaadfc2cd9a44a9d4cbd5">f0eaa57</a></li>
</ul>
</div>
<div class="section" id="feature-configuration-validation-through-adapted-json-schema">
<h3>[FEATURE] Configuration validation through (adapted) JSON Schema</h3>
<p>Implementation of a PHP array schema validator modeled using the
JSON Schema specification as guideline.</p>
<p>The following CLI commands which utilize the validator are provided:</p>
<ul class="simple">
<li>configuration:validate validates the configuration of a certain type
with respect to the provided schemata. The schema files are searched
for in Resources/Private/Schema of all active packages.</li>
<li>configuration:generateschema is a kickstarter which generates a basic
schema to be used as a starting point for further adjustments</li>
</ul>
<p>Furthermore, this change includes schemata for all FLOW3 settings and the other
configuration types (Caches, Objects, Policy and Routes).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31277">#31277</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1c8a80de60bff7ad0f878ade7e1cedc0f28ee365">1c8a80d</a></li>
</ul>
</div>
<div class="section" id="bugfix-internal-request-engine-needs-to-clear-security-context">
<h3>[BUGFIX] Internal Request Engine needs to clear security context</h3>
<p>In order to get the security tokens matching the new request created
in the internal request engine, the security context should be cleared
using the &#8220;clearContext&#8221; method. This means that the tokens will be
matched with the configuration from the routing based on the new request
and not the parent request.</p>
<p>This patch also contains a small enhancement which adds two additional
headers to the virtual browser&#8217;s response containing the code and message
of a possible exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37377">#37377</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f67078cb7d88cc8c1c058244c63239fbd3616d92">f67078c</a></li>
</ul>
</div>
<div class="section" id="task-fix-markup-errors-in-flow3-manual">
<h3>[TASK] Fix markup errors in FLOW3 manual</h3>
<p>This change fixes another markup issue resulting in rendering
glitches.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=70e012aa0dadea833484e52617f2c07e18c39e61">70e012a</a></li>
</ul>
</div>
<div class="section" id="id416">
<h3>[TASK] Fix markup errors in FLOW3 manual</h3>
<p>This change fixes a number of markup issues resulting in rendering
glitches.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2ce7ec8e5733d6e0c272cf1288058b57a53912bb">2ce7ec8</a></li>
</ul>
</div>
<div class="section" id="task-update-templating-chapter">
<h3>[TASK] Update templating chapter</h3>
<p>Along with some style and markup tweaks this adds details
on XML namespace declaration and XSD generation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ad55bfbef4af6112a5a1a33e292bad0fb68444ab">ad55bfb</a></li>
</ul>
</div>
<div class="section" id="task-update-validation-chapter">
<h3>[TASK] Update validation chapter</h3>
<p>Along with some style and markup tweaks this moves some sections
around and adds details on avoiding recursive/duplicate validation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ffa7f5633c6c8719297c023be9963295dd838310">ffa7f56</a></li>
</ul>
</div>
<div class="section" id="task-update-object-management-chapter">
<h3>[TASK] Update object management chapter</h3>
<p>This updates the section on custom factories.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=70cf2d80347bc1fa2b4f3bfaf49125e51af22708">70cf2d8</a></li>
</ul>
</div>
<div class="section" id="task-update-persistence-chapter">
<h3>[TASK] Update persistence chapter</h3>
<p>Some layout/markup tweaks and removed some outdated parts about
the generic PDO persistence we had earlier. Also explain identity
and value object handling in more detail.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9ba651114b766d7ecac17ba67e4f9dd31d0747f6">9ba6511</a></li>
</ul>
</div>
<div class="section" id="task-update-flow3-manual">
<h3>[TASK] Update FLOW3 manual</h3>
<p>This change removes the glossary and colophon from the guide
and applies mostly markup changes to various parts.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f951e298d6a669b32a9bcf220ebbb4e2f8995454">f951e29</a></li>
</ul>
</div>
<div class="section" id="bugfix-discourage-people-to-expose-anything-but-the-web-folder">
<h3>[BUGFIX] Discourage people to expose anything but the Web folder</h3>
<p>This updates the Quickstart to explicitly push people into using Web
as the document root for their web server.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38016">#38016</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6545e477153fd3d6026ab3673056e292bd5ded9e">6545e47</a></li>
</ul>
</div>
<div class="section" id="task-refactor-constructor-argument-of-exceptionhandler-implementors">
<h3>[TASK] Refactor constructor argument of ExceptionHandler implementors</h3>
<p>Moves the redundant constructor method of each AbstractExceptionHandler
implementor to the AbstractExceptionHandler itself.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38002">#38002</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=62df179937f5ebdd120ce644787232ae4a349737">62df179</a></li>
</ul>
</div>
<div class="section" id="task-session-handling-documentation">
<h3>[TASK] Session handling documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37668">#37668</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d7f0f38d125459e8a53d4b447d339d4d7baff24">8d7f0f3</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-recursion-detection-in-instantiateclass">
<h3>[BUGFIX] Fix recursion detection in instantiateClass</h3>
<p>When in ObjectManager-&gt;instantiateClass() the speedup case was
used, recursion detection would potentially fail, as it returns
early without removing the class name from the list of classes
currently being instantiated.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37997">#37997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=88988c587cb1fd45597f46766ae79f76cee4ac5e">88988c5</a></li>
</ul>
</div>
<div class="section" id="task-code-cleanup-without-functional-changes">
<h3>[TASK] Code cleanup without functional changes</h3>
<p>This change fixes some comments, shuffles the order of things a
little and adds some empty lines.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6584400ca883ed991c123784d650a649cf6c0308">6584400</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-unused-configuration-option-from-settings">
<h3>[BUGFIX] Remove unused configuration option from settings</h3>
<p>This change removes a no longer used/supported option from the
shipped Development configuration.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37966">#37966</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9d72dba06a5801d542b3c8f812ec2ea8d76b62c6">9d72dba</a></li>
</ul>
</div>
<div class="section" id="task-update-validator-reference-with-correct-option-types">
<h3>[TASK] Update validator reference with correct option types</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8ad03883fdf96e350732d1832187985b9a8d4918">8ad0388</a></li>
</ul>
</div>
<div class="section" id="task-add-validator-reference-to-the-flow3-guide">
<h3>[TASK] Add validator reference to the FLOW3 guide</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ad190d453b430ca658a10267d33b7dc8c5f3a1f4">ad190d4</a></li>
</ul>
</div>
<div class="section" id="task-add-cli-command-reference-to-guide">
<h3>[TASK] Add CLI command reference to guide</h3>
<p>Adds a reference for the CLI commands in the FLOW3
base distribution.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=51ff07dfa7915d00943b986a9cfd1126451220ec">51ff07d</a></li>
</ul>
</div>
<div class="section" id="task-add-contributors-list">
<h3>[TASK] Add contributors list</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=de0a19623de02e96f8f08f0bd6828038c72ddf29">de0a196</a></li>
</ul>
</div>
<div class="section" id="id429">
<h3>[TASK] Update Fluid ViewHelper reference</h3>
<p>This change updates the Fluid VH reference and does some tiny
tweaks along the way.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=594b122e7f7e8e558e07bdbe0cf5b7bb68af5380">594b122</a></li>
</ul>
</div>
<div class="section" id="task-tiny-docblock-fix-in-doctrinecommandcontroller">
<h3>[TASK] Tiny docblock fix in DoctrineCommandController</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a915d023260a43bdba5caeecccf0ee874244e75f">a915d02</a></li>
</ul>
</div>
<div class="section" id="bugfix-corrected-uri-host-regular-expression">
<h3>[BUGFIX] Corrected &#8220;Uri host&#8221; regular expression</h3>
<p>The regular expression verifying the validity of
a host name in Uri&#8217;s setHost method was of an incorrect
syntax leading to a PHP error message.
Besides correcting that, this patch adds a Test to
proof the intended functionality.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37554">#37554</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9b047552c5a560268fbe588d5d0f2d19605f4dbe">9b04755</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-0-5">
<h3>[TASK] Add changelog for FLOW3 1.0.5</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=083e453522432b271f909baf82f2cf3ee9f37567">083e453</a></li>
</ul>
</div>
<div class="section" id="task-update-code-migration-to-do-two-more-fixes">
<h3>[TASK] Update code migration to do two more fixes</h3>
<p>This adds adjustments for getOriginalRequestMappingResults() and
getOriginalRequest()-&gt;getArguments().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37762">#37762</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=65a3e7b65f0bebe162ba68cc7adbf40770da336a">65a3e7b</a></li>
</ul>
</div>
<div class="section" id="bugfix-packages-can-be-frozen-in-development-only">
<h3>[BUGFIX] Packages can be frozen in Development only</h3>
<p>Freezing packages was not possible in other contexts than Development
with the related commands. But if a package was frozen according to
PackageStates.php, it would advertise itself as frozen in all contexts.</p>
<p>While this did not seem to have any real effects, it caused confusing
output with the cache:flush command in Production context.</p>
<p>This change makes the Package class ignore the frozen state in any
context except Development and adds a check in the freezePackage()
method of the PackageManager.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37223">#37223</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4bff5587d71a10fab4bb6d4b83e881141959e389">4bff558</a></li>
</ul>
</div>
<div class="section" id="bugfix-purge-doctrine-proxies-that-are-no-longer-needed">
<h3>[BUGFIX] Purge Doctrine proxies that are no longer needed</h3>
<p>With this change the proxy target directory is emptied before
Doctrine proxies are (re)built, removing outdated proxy classes.</p>
<p>This solves fatal errors when (proxied) classes are removed, and
thus can no longer be found when referenced from their heirs.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/26903">#26903</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2f2e3fc0d236a68485f6fc5c682c7d460549f0c6">2f2e3fc</a></li>
</ul>
</div>
<div class="section" id="task-no-longer-freeze-packages-by-default">
<h3>[TASK] No longer freeze packages by default</h3>
<p>Due to the possible pitfalls with frozen packages, no packages will be frozen
by default. This way a developer has to learn about frozen packages before he
can be confronted with them (and their pitfalls).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37726">#37726</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cadcb6127fd1ae2eef6d08c48680428d0361c8a1">cadcb61</a></li>
</ul>
</div>
<div class="section" id="bugfix-integrity-constraint-violation-deleting-resources">
<h3>[BUGFIX] Integrity constraint violation deleting resources</h3>
<p>If you have two resources using the same resource pointer,
deleting a Resource will trigger deletion of the
connected ResourcePointer which then leads to an integrity
constraint violation.</p>
<p>This patch tells doctrine NOT to cascade delete operations.
This will lead to orphan resource-pointers which have to
be deleted manually or on a regular base.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34448">#34448</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=02a7d844e21f2481094a1dacc86ce51484a8d051">02a7d84</a></li>
</ul>
</div>
<div class="section" id="task-update-security-framework-chapter">
<h3>[TASK] Update Security Framework chapter</h3>
<p>Quick update of the Security Framework chapter to reflect recent
changes in FLOW3. Also some minor spelling error fixes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37672">#37672</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=df033b0d9586b2734e93cabb780b97971734010a">df033b0</a></li>
</ul>
</div>
<div class="section" id="task-document-utility-functions">
<h3>[TASK] document utility functions</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37669">#37669</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2ef191c942b7178e27e64e27dd86bdcc1d9b939d">2ef191c</a></li>
</ul>
</div>
<div class="section" id="task-documentation-of-validation">
<h3>[TASK] Documentation of Validation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37666">#37666</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d40ad114b615d854b13384c03b8eadfa38f71f9">8d40ad1</a></li>
</ul>
</div>
<div class="section" id="task-make-validator-resolver-public-api">
<h3>[TASK] Make validator resolver public API</h3>
<p>People should use it when validation is used in custom code instead of
creating validators using new; thus the ValidatorResolver must be marked
as public API.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37665">#37665</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8182c526ce6ee0c40f5845b4ac1d8df26cf87465">8182c52</a></li>
</ul>
</div>
<div class="section" id="task-improve-property-mapping-documentation">
<h3>[TASK] improve Property Mapping Documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37664">#37664</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9be5bb0b2b179dd7b3d24340be59cdcf61a19431">9be5bb0</a></li>
</ul>
</div>
<div class="section" id="task-update-package-xml-with-new-version-number">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cab86deb8830734db32da86dac3e662ff321fb1a">cab86de</a></li>
</ul>
</div>
<div class="section" id="task-some-tiny-tweaks-to-the-1-1-0b2-changelog">
<h3>[TASK] Some tiny tweaks to the 1.1.0b2 changelog</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=57bbe6571b25a52ee413c98cc29812b2ab1780f0">57bbe65</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-beta2">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta2</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=82590ff253c61a6daf82241a69de467ad0c0e193">82590ff</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-inconsistent-validate-and-ignorevalidation-behavior">
<h3>[BUGFIX] Fix inconsistent Validate and IgnoreValidation behavior</h3>
<p>The Validate annotation does an ltrim of &#8220;$&#8221; on the argument which the
IgnoreValidation annotation did not do. This change makes the two behave
the same by adding that trim to IgnoreValidation as well.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37385">#37385</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=24485a773ddc75867133d58d5980bda07885b0ab">24485a7</a></li>
</ul>
</div>
<div class="section" id="task-make-all-parameter-optional-in-package-refreeze">
<h3>[TASK] Make &#8220;all&#8221; parameter optional in package:refreeze</h3>
<p>For freeze, unfreeze and refreeze the default value for
the packageKey is now &#8220;all&#8221;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37358">#37358</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bc84ef1d18b3bacc4443c3b52ae76c09b2f1f44c">bc84ef1</a></li>
</ul>
</div>
<div class="section" id="bugfix-persistencemanager-add-now-requires-objects-being-new">
<h3>[BUGFIX] PersistenceManager-&gt;add() now requires objects being new</h3>
<p>The add method in repositories did also update existing entities,
this can be dangerous, as it allows an attacker to misuse creation
forms (i.e. a register form) and change existing entities.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34527">#34527</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d4b3c7099b597525ebb3406dbef0b9f204d67d2">8d4b3c7</a></li>
</ul>
</div>
<div class="section" id="task-log-skipped-persistall-due-to-closed-entitymanager">
<h3>[TASK] Log skipped persistAll() due to closed EntityManager</h3>
<p>To avoid exceptions we only flush the EM if it is still open. To be
able to spot errors more easily, this adds a log entry if the EM
was closed and flushing was skipped.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/30934">#30934</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=660ee7e9909766a4a93cb73263a2ca9f73295e66">660ee7e</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-some-coding-style-issues">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add space to &#8220;foreach(&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1ff13c47bb21555d2169bef0d534b55716f48149">1ff13c4</a></li>
</ul>
</div>
<div class="section" id="id448">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add spaces to &#8221;){&#8220;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bb514fda56fb8bd7a6cd723babc7ad1204aa0824">bb514fd</a></li>
</ul>
</div>
<div class="section" id="task-create-configuration-directories-only-on-save">
<h3>[TASK] Create configuration directories only on save</h3>
<p>The configuration directories for cached configuration were created
inside the constructor of the ConfigurationManager. This caused the
unit test to create directories outside the VFS. Moving the creation
to the saveConfigurationCache method fixes that. Additionally cleans
up some unit tests related to ApplicationContext and
ConfigurationManager.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cb141c73e994e84e4efd03d5e4228add6a3ec642">cb141c7</a></li>
</ul>
</div>
<div class="section" id="bugfix-keep-existing-packagestates-php">
<h3>[BUGFIX] Keep existing PackageStates.php</h3>
<p>A wrong check for the existence of the configured &#8220;packagePath&#8221; caused
the loss of custom package states configuration on every request in
development mode or initially in production.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37607">#37607</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=166b44e139b7d93dd001ff9bd6502ce43a88cb06">166b44e</a></li>
</ul>
</div>
<div class="section" id="bugfix-router-overrides-request-arguments">
<h3>[BUGFIX] Router overrides request arguments</h3>
<p>With the reworked Request stack, the router kicks in after
the action request have been built, overriding all arguments
the respective route specifies.</p>
<p>This works for the most cases, but leads to issues when you
try to specify part of a complex target argument via the route
and part via request.</p>
<p>For example if you update a domain model via request body but
specify the model itself through the URI like
<a class="reference external" href="http://domain/products/product-1">http://domain/products/product-1</a> - now the Identity-RoutePart
detects &#8220;product-1&#8221; and turns it into the corresponding __identity
array but then the Router kicks in and overrides the &#8220;product&#8221;
argument completely resulting in a new object to be created by
the property mapper.</p>
<p>This change adjusts the Router to recursively merge arguments
with the route values instead, with precedence to the route
values.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37445">#37445</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=170733fb8d83ab208b74fc56e6e9894f80276362">170733f</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-validating-instances-more-often-than-needed">
<h3>[BUGFIX] Avoid validating instances more often than needed</h3>
<p>The GenericObjectValidator uses a static variable to store objects being
validated. Objects were still validated over and over because at the
end of isValid() they were detached again.</p>
<p>This change replaces that detach() call with another concept. Now
any validator implementing the new ObjectValidatorInterface can be
given an SplObjectStorage to keep track of instances already
validated.</p>
<p>If you reset that container when it makes sense (before you
actively validate objects) you can avoid validating single instances
more than once in one validation run but still validate at various
points on your logic flow.</p>
<p>If you have implemented your own object validator you should
implement the new ObjectValidatorInterface - the easiest way is
to extend the GenericObjectValidator, if you haven&#8217;t done that
so far.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37363">#37363</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34154">#34154</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=26e4b3fa846c50fdbdc7908c11eda0756ed85f2c">26e4b3f</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-ip-address-validation">
<h3>[BUGFIX] Fix IP address validation</h3>
<p>The IP address validation done with filter_var() worked
on the development machine running PHP 5.3.12, however,
it failed on the integration server running PHP 5.3.5.
Apparently, the filter_var options for FILTER_VALIDATE_IP
behave differently in these versions.</p>
<p>This patch removes the validation for IPv4 / IPv6 addresses
because they didn&#8217;t make sense anyway.</p>
<p>In that regard: hooray for PHP behavior changes. They actually
exploit bad application code. Sometimes.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37584">#37584</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=744c7593aaf2faab82a2415a8e17015fd3bc60d0">744c759</a></li>
</ul>
</div>
<div class="section" id="feature-provide-way-to-determine-client-ip-address">
<h3>[FEATURE] Provide way to determine client IP address</h3>
<p>This adds a method getClientIpAddress() to the HTTP Request
class. It considers various kinds of environment variables
which are present when using proxies or certain server setups
for determining the actual client IP address.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37584">#37584</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=66bcdf54a158a4731259bad05a5eee39ae6f5dcb">66bcdf5</a></li>
</ul>
</div>
<div class="section" id="feature-content-negotiation-for-media-types">
<h3>[!!!][FEATURE] Content Negotiation for Media Types</h3>
<p>This improves the support for detecting the Media
Type (that is, &#8220;format&#8221; in an ActionRequest context)
based on the request&#8217;s Accept header.</p>
<p>This implementation supports Quality Values and Media
Ranges as specified in RFC 2616.</p>
<p>The way to define the supported formats of a controller
has changed: Previously a class property $supportedFormats
contained a list of filename extensions which would be
supported. This property is not supported anymore.
Instead, controllers may now specify a list of IANA
Internet Media Types in a property $supportedMediaTypes.</p>
<p>The default setting for these supported media types
in ActionController is &#8220;text/html&#8221;. You&#8217;ll need to adjust
your controllers accordingly if you relied on the
$supportedFormats feature.</p>
<p>Also note that the format in ActionRequest is now NULL
by default. The ActionController makes sure to set the
correct format, but if you created your own ActionRequest
for a special purpose, you need to take care of setting
it yourself.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37561">#37561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=03b6d85916e46ed8b2e99bc549d7248957dca935">03b6d85</a></li>
</ul>
</div>
<div class="section" id="bugfix-save-relative-package-path-in-packagestates-php">
<h3>[BUGFIX] Save relative package path in PackageStates.php</h3>
<p>Using absolute paths in the PackageStates.php causes problems in a
chroot environment where the absolute path is different in CLI then
in the HTTPD process.</p>
<p>Also relative paths allow to put PackageStates.php under version
control to maintain a specific state even when paths differ
on development and production systems.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37220">#37220</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33719">#33719</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=531178a24edaa3e23e0d6dee53a5ff69f03a7b9c">531178a</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-mapper-should-distinguish-between-error-and-null">
<h3>[Bugfix] Property mapper should distinguish between error and NULL</h3>
<p>currently, when a nested type converter returns NULL, this is silently
caught by the property mapper. Thus, it is not possible to reset f.e.
an integer value to NULL again.</p>
<p>This change fixes that behavior, and adds a functional test for it.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35136">#35136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5badcdb095b688e96460f579ec131fbaaa3c6e3f">5badcdb</a></li>
</ul>
</div>
<div class="section" id="task-switch-from-mime-to-media-types">
<h3>[!!!][TASK] Switch from MIME to Media Types</h3>
<p>The term MIME type is outdated, at least if used in a web context. The correct
term is &#8220;Internet Media Type&#8221;. Furthermore, our list of MIME types (or media
types) was not up to date.</p>
<p>This patch introduces a new utility class &#8220;MediaTypes&#8221; which replaces
&#8220;FileTypes&#8221;. Along with the new class comes a script which allows the core team
to conveniently update the list of Media Types and filename extensions.</p>
<p>This is a breaking change as the FileTypes class is deprecated with it. The old
methods are still available but should not be used anymore. A code migration to
use the new ones instead is shipped with the change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ef3e8fbbae550efc12af8fa69e1b39eafeddab6f">ef3e8fb</a></li>
</ul>
</div>
<div class="section" id="bugfix-float-and-integer-converters-do-not-correctly-handle-errors-and-empty-values">
<h3>[!!!][BUGFIX] Float and Integer converters do not correctly handle errors and empty values</h3>
<p>When an argument of a controller action is annotated with
&#64;param integer $var, the validation never fails if a string
is passed to the argument.
This is because the IntegerConverter implicitly casts the
string to an integer. The same problem exists with floats.</p>
<p>This change fixes this by checking the value and returning
an error object if it is not numeric. Besides this tweaks
the FloatConverter to accept float and integer values as
input and it adds a bunch of unit &amp; functional tests.</p>
<p>Furthermore, empty strings are now correctly converted as NULL values.
This is a breaking change if you relied upon the old behavior that
empty values are converted to the number 0.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35136">#35136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a915647549a52621d1b23b7787f0bd2e03a91261">a915647</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-our-var-dump-usable-with-doctrine-collections">
<h3>[BUGFIX] Make our var_dump() usable with Doctrine collections</h3>
<p>For Doctrine\Collection instances we use Doctrine&#8217;s export()
method now to render the dump.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37481">#37481</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c5497de779450b06de1f1f850b21d683d22b7b40">c5497de</a></li>
</ul>
</div>
<div class="section" id="task-remove-debug-output-in-log-on-configuration-changes">
<h3>[TASK] Remove debug output in log on configuration changes</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cec2133bb7916bf06af0ea97a0e09d84b87e046e">cec2133</a></li>
</ul>
</div>
<div class="section" id="feature-add-gethttpresponse-to-httprequesthandler">
<h3>[FEATURE] Add getHttpResponse() to HttpRequestHandler</h3>
<p>This adds a getter method to the HTTP request handler
which allows for retrieving the response corresponding
to the currently handled request.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36696">#36696</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7e1087a99a5f56bdf458cfd23f61a31f9e3749e4">7e1087a</a></li>
</ul>
</div>
<div class="section" id="feature-make-http-responses-standards-compliant">
<h3>[FEATURE] Make HTTP responses standards compliant</h3>
<p>This adds a new API method to the HTTP response which
is called by a request handler to assure conformity
with RFC 2616 and other related specifications.</p>
<p>While there are a lot of rules to consider, this patch
only introduces a first set of important checks which
are all explained by a corresponding test.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=63283d92fa34cff7ce5b3dcd244b1aae1711e652">63283d9</a></li>
</ul>
</div>
<div class="section" id="bugfix-set-property-mapping-configuration-in-restcontroller">
<h3>[BUGFIX] Set property mapping configuration in RestController</h3>
<p>Since Iac7bbb2a58ad890701fff2b0ad6b16a0e0b15bba we use a
whitelist-based approach to configure property mapping.
This change hooks into the create/update action of the
RestController and sets the required property mapping
configuration.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36776">#36776</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=94d958a57f662a27c5411df52707778e6c077301">94d958a</a></li>
</ul>
</div>
<div class="section" id="feature-allow-configurable-identity-key-in-jsonview">
<h3>[FEATURE] Allow configurable identity key in JsonView</h3>
<p>Providing _exposeObjectIdentifier option is
not restricted to result in __identity anymore,
but is configurable to be an arbitrary string.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34414">#34414</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=29ffc635275a68fa84c76d4b3a30d4086255f0b5">29ffc63</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-hint-on-validator-empty-handling-to-migration">
<h3>[BUGFIX] Add hint on validator empty handling to migration</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37231">#37231</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d511b04e01e96f7919fc804487b7e03f839313f7">d511b04</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-exception-message-in-repository-remove">
<h3>[BUGFIX] Fix Wrong exception message in Repository-&gt;remove()</h3>
<p>The message would say add() was involved, which is wrong.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37448">#37448</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=57e1e955e4494f4fb506c753c9560cfe90234c03">57e1e95</a></li>
</ul>
</div>
<div class="section" id="feature-response-setexpires-getexpires">
<h3>[FEATURE] Response setExpires() / getExpires()</h3>
<p>This adds two new convenience methods to the Response
API which allow for setting and retrieving the Expires
HTTP header.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=60c22ce6a6eb8ede184069ad52573ad3b4163c3a">60c22ce</a></li>
</ul>
</div>
<div class="section" id="feature-make-message-response-setters-chainable">
<h3>[FEATURE] Make Message / Response setters chainable</h3>
<p>This makes the setter methods of the Message and the
Response class chainable.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=149a012ea5afbc6e02014d6ec564ae7f0788a767">149a012</a></li>
</ul>
</div>
<div class="section" id="feature-more-convenience-methods-in-response">
<h3>[FEATURE] More convenience methods in Response</h3>
<p>This adds a few more convenience methods for setting
headers and cache control directives in the Response
object:</p>
<ul class="simple">
<li>setDate() / getDate()</li>
<li>setLastmodified() / getLastModified()</li>
<li>setMaximumAge() / getMaximumAge()</li>
<li>setSharedMaximumAge() / getSharedMaximumAge()</li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b18a9a51db14f3f45e17c1f36323b54b8428af90">b18a9a5</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-cache-control-headers">
<h3>[FEATURE] Support for HTTP Cache-Control headers</h3>
<p>This adds support for the Cache-Control header.
The &#8220;Headers&#8221; object now handles the Cache-Control
header in a special way by keeping track of the
various cache directives separately. Those can
be set through the method setCacheControlDirective()
and get(&#8216;Cache-Control&#8217;) returns a rendered version
based on the previously set directives.</p>
<p>Alternatively, a whole Cache-Control header can also
be set through set() / setHeader(). The given field
value will then be parsed and the individual cache
directives are stored internally.</p>
<p>This patch also corrects the behavior of set() and
get() to convert date / time values always to GMT.
Also added a related note in the comments of the
respective API methods.</p>
<p>This patch also adds the new API methods setPrivate()
and setPublic() to the Response class.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fb8b06479e34efb38e610d4ad2684569d6092004">fb8b064</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-error-message-about-command-controller-classes">
<h3>[BUGFIX] Fix error message about command controller classes</h3>
<p>If you create a CommandController which is not in the &#8220;Controller&#8221; directory
of a package or where the name does not end in &#8220;CommandController&#8221; you will
get an error saying &#8220;Invalid controller class name [...] 1305100019&#8221;.</p>
<p>This change makes the error message a little more helpful.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33139">#33139</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=575650915f69773733108052ba7da3e0e82e5c11">5756509</a></li>
</ul>
</div>
<div class="section" id="feature-add-depends-annotation-to-ignored-ones">
<h3>[FEATURE] Add &#64;depends annotation to ignored ones</h3>
<p>To allow test dependencies in Unit Tests, the &#64;depends
annotation is added to the ignored annotation array.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37475">#37475</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d84ffe233f56dcd6265b5eaac1f5884380ecafe5">d84ffe2</a></li>
</ul>
</div>
<div class="section" id="feature-add-hasrole-method-to-account-entity">
<h3>[FEATURE] Add hasRole() method to Account entity</h3>
<p>At the moment the roles still have to be persisted as
strings in the serialized roles property in the database.
Already converting all roles to objects would require
some more refactoring.
This change is tested on already existing, and on new
users.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37451">#37451</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a79904d9c67634f6562632db0bc4cbc45465504a">a79904d</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-put-delete-arguments">
<h3>[FEATURE] Support for HTTP PUT/DELETE arguments</h3>
<p>This adds transparent argument support for arguments
in PUT and DELETE requests which are passed through
the request body. Depending on the content type of
the request, the message body is parsed and then
mapped into arguments for further use in controllers.</p>
<p>The following content content types are currently
supported:</p>
<ul class="simple">
<li>application/x-www-form-urlencoded</li>
<li>application/json</li>
<li>xml</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36913">#36913</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=26f83dd314e9b38d7d7bca10ec3d4b27e467ab5e">26f83dd</a></li>
</ul>
</div>
<div class="section" id="task-common-base-class-message-for-request-response">
<h3>[TASK] Common base class Message for Request / Response</h3>
<p>This introduces a new class &#8220;Message&#8221; which acts as a
common parent class for the HTTP Request and Response.
It provides shared functionality such as setting and
getting headers, charset handling and more.</p>
<p>It is in line with the terminology in RFC 2616.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7ac583ff633d7653ae45a84e4c36a280da6eba93">7ac583f</a></li>
</ul>
</div>
<div class="section" id="task-temporarily-remove-nested-response-code">
<h3>[TASK] Temporarily remove nested response code</h3>
<p>This temporarily removes the code in HTTP Response which
tackles support of nested responses. This feature needs
to be implemented only when most of the other features,
including Cache Control, are in place.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=238efb0698735cf49457da7f9fe01671b757a905">238efb0</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-age-and-date-header">
<h3>[FEATURE] Support for HTTP Age and Date header</h3>
<p>This patch adds API methods and internal handling of
the HTTP &#8220;Date&#8221; and &#8220;Age&#8221; headers, according to
RFC 2616. It also introduces the use of the &#8220;Now&#8221;
singleton as a time reference for age calculations.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a1c37e38dd6f015a53f087b6d8c398db5bbcdfeb">a1c37e3</a></li>
</ul>
</div>
<div class="section" id="task-annotation-cleanup-for-http-response-tostring-method">
<h3>[TASK] Annotation cleanup for http response __toString method</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a2e8c4559231edcc02cdf79d37fc825e5ca2daf6">a2e8c45</a></li>
</ul>
</div>
<div class="section" id="task-identityroutepart-should-return-identity-array">
<h3>[TASK] IdentityRoutePart should return __identity array</h3>
<p>IdentityRoutePart::matchValue() currently returns the identifier
of the ObjectPathMapping record directly.
This makes it difficult to merge arguments with data from the
requestBody (e.g. for PUT requests).</p>
<p>This change adjusts the route part so that it sets $this-&gt;value
to an array in the format array(&#8216;__identity&#8217; =&gt; &#8216;&lt;Identifier&gt;&#8217;)</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37403">#37403</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=02fc35beae76ab7488245e92ffdb2489a17c1b01">02fc35b</a></li>
</ul>
</div>
<div class="section" id="feature-fluent-interface-for-propertymappingconfiguration-methods">
<h3>[FEATURE] Fluent Interface for PropertyMappingConfiguration methods</h3>
<p>Setter and other methods not intended to return particular
values now return $this in order to provide a Fluent Interface
that allows chaining of multiple calls to the same object.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34866">#34866</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2eeca51fe0feb8442da9832e6eb1e73bc9fa0291">2eeca51</a></li>
</ul>
</div>
<div class="section" id="bugfix-http-response-can-be-cast-to-string-again">
<h3>[BUGFIX] Http Response can be cast to string again</h3>
<p>This reverts the removal of the __toString() method for the
Http Response. We currently rely on this behavior in the
ActionController which combines response content by simple
string concatenation.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=aa303c35b427f35c6ffedb91e5e74c9d52b6a937">aa303c3</a></li>
</ul>
</div>
<div class="section" id="task-http-response-status-code-and-content-type">
<h3>[TASK] HTTP Response: Status Code and Content Type</h3>
<p>This adds a few new methods to the HTTP Response
class - including the related unit tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1bf8bbd678c6f4ca76d087b83c6cb5fbbbb65cf7">1bf8bbd</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-now-as-unique-time-reference">
<h3>[FEATURE] Introduce &#8220;Now&#8221; as unique time reference</h3>
<p>This patch introduces a new class called &#8220;Now&#8221; which
inherits DateTime and has the scope Singleton. It can
be used in all cases where a reliably comparable value
of &#8220;now&#8221; is needed or where time needs to be mocked
in related tests.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37376">#37376</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7f9fb7db5a624cc6b545057e98a4a35540b64db2">7f9fb7d</a></li>
</ul>
</div>
<div class="section" id="bugfix-nested-arrays-in-annotation-options-are-no-longer-dropped">
<h3>[BUGFIX] Nested arrays in Annotation options are no longer dropped</h3>
<p>When giving a nested array of options to an annotation the rendered
form in proxy classes was cut off.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37193">#37193</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5a2cbd05f001479e6bf2b9363a7f01e07b511c4e">5a2cbd0</a></li>
</ul>
</div>
<div class="section" id="bugfix-credentialssource-in-account-should-be-nullable">
<h3>[BUGFIX] credentialsSource in Account should be nullable</h3>
<p>Not all authentication mechanisms need a &#8220;credentials source&#8221; (e.g. the
typo3.org SSO provider), so the column for the property should be nullable.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37341">#37341</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d3e991d4bce23f46c4bd3d3287c4c67d3abcba16">d3e991d</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-hint-in-code-migration">
<h3>[BUGFIX] Fix wrong hint in code migration</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37224">#37224</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5d3a102e22783b9293b2ac8834a00d8698539365">5d3a102</a></li>
</ul>
</div>
<div class="section" id="feature-day-month-year-keys-in-datetimeconverter-source-array">
<h3>[FEATURE] Day, month, year keys in DateTimeConverter source array</h3>
<p>This patch introduces additional possible array keys for the
source array of the DateTimeConverter. Now not only a string
representing the DateTime can be passed, but array keys
of the single day, month and year.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35195">#35195</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=01d918d0b648374d88740caa5e1429f7f72727c5">01d918d</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="feature-csrf-token-viewhelper">
<h3>[FEATURE] CSRF token ViewHelper</h3>
<p>With I9d667aa451a7510cf12ab13be745fed1f7ca477e CSRF tokens
are not added to URIs any longer.
Therefore you need to add the token yourself for &#8220;unsafe&#8221; requests
(POST, PUT, DELETE, ...).</p>
<p>This is not true for fluid forms where the token is added automatically
if the form does not have method=&#8221;get&#8221; set
(see Ic600a9e591d047ca9bbd39d352c4f337bcfaa6a9).</p>
<p>For other forms or AJAX requests the ViewHelper can be used like this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;&lt;someAction&gt;&quot;</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span><span class="o">&gt;</span>
  <span class="o">...</span>
  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;__csrfToken&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;{f:security.csrfToken()}&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47252">#47252</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=2f7a92559eebff872fad8022061320ae00067d6e">2f7a925</a></li>
</ul>
</div>
<div class="section" id="bugfix-declare-objectmanager-property">
<h3>[BUGFIX] Declare ObjectManager property</h3>
<p>The objectManager is injected and used but the property is not
declared in the class.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47968">#47968</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=d1b04071805570eee6afa8c5ce381eb63fa89a6b">d1b0407</a></li>
</ul>
</div>
<div class="section" id="feature-allow-f-link-action-to-operate-on-parent-request">
<h3>[FEATURE] Allow f:link.action to operate on parent request</h3>
<p>Add an useParentRequest argument to link.action, uri.action,
and form ViewHelpers to generate links using the Parent
Request instead of the current Request.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35790">#35790</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=e3736a887a7278742961ef925a3bd8513e38447f">e3736a8</a></li>
</ul>
</div>
<div class="section" id="task-csrf-protection-for-safe-request-methods">
<h3>[!!!][TASK] CSRF protection for &#8220;safe&#8221; request methods</h3>
<p>This change set adjusts URL related view helpers in Fluid to
an important behavior for Flow applications: HTTP request
methods which are, by definition, considered to be &#8220;safe&#8221;
(that is, &#8220;read-only&#8221;) are now treated as such.</p>
<p>The Fluid Link and Uri view helpers will not generate CSRF tokens
anymore, since we assume that you are using them for GET requests.
The FormViewHelper however, will enable link protection if the
form does not have method=&#8221;get&#8221; set.</p>
<p>Please adjust your applications to cleanly observe this principle since
more optimizations in this direction are planned for later versions of
TYPO3 Flow.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47252">#47252</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=db1a42045882eeafb1e677eccbf24b227d5f8b52">db1a420</a></li>
</ul>
</div>
<div class="section" id="task-remove-dependency-on-installer">
<h3>[TASK] Remove dependency on installer</h3>
<p>Rely on implicit dependency through TYPO3.Flow</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=3bc590b49ef1177a9ec133ab61bec69fd3c43842">3bc590b</a></li>
</ul>
</div>
<div class="section" id="task-add-packagekey-attribute-to-ifhasrole-view-helper">
<h3>[TASK] Add packageKey attribute to ifHasRole view helper</h3>
<p>This change adds support for handling a packageKey to the ifHasRole
view helper. It can be used in three ways:</p>
<ol class="arabic simple">
<li>The &#8216;old&#8217; way, with just a string like &#8216;Administrator&#8217;
This will result in a check for the Administrator role within
the current package (fetched from the controllerContext)</li>
<li>With a full role identifier like &#8216;Foo.MyPackage:Administrator&#8217;</li>
<li>Using both, the role attribute and packageKey attribute</li>
</ol>
<p>This was once Iae92119bf9f8d6125211d1e4b1e42a0a513d804b but had to be
reverted after an accidental merge.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37451">#37451</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=81a9555ac5566329766bd015dbb907f8ce50a1c8">81a9555</a></li>
</ul>
</div>
<div class="section" id="task-filemtime-is-namespaced-in-templateview-php">
<h3>[TASK] filemtime is namespaced in TemplateView.php</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45987">#45987</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=4dcc5f13534c27d3b55c77bee0c92a0b52687d2f">4dcc5f1</a></li>
</ul>
</div>
<div class="section" id="task-adjust-fluid-to-lazy-dependency-injection">
<h3>[TASK] Adjust Fluid to Lazy Dependency Injection</h3>
<p>This adjusts the ViewHelperNode and AbstractWidgetViewHelper
to Lazy Dependency Injection introduced in Flow 2.0</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43819">#43819</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=26b0dad7ec00bf6400a65993e5b52204aa35494c">26b0dad</a></li>
</ul>
</div>
<div class="section" id="bugfix-urlencode-viewhelper-accepts-objects-with-tostring">
<h3>[!!!][BUGFIX] urlencode viewhelper accepts objects with __toString</h3>
<p>This fixes a problem with the urlencode view helper. If you pass it an
object with __toString() method – for example an URI object – it is
returned as is. Now the view helper additionally checks for a __toString()
method.</p>
<p>This change is breaking if you rely on the viewhelper to return
values that are not a string or an object with __toString.
The viewhelper will now throw an exception in this case.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44889">#44889</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=b10d6f6b492c2241f73891760b8603bdc2d64df6">b10d6f6</a></li>
</ul>
</div>
<div class="section" id="task-add-placeholder-attribute-to-password-viewhelper">
<h3>[TASK] Add placeholder attribute to password ViewHelper</h3>
<p>As a follow-up to I24bb73c5de5a494259171ff289d434892f85e16e,
this also adds the placeholder attribute to the password
ViewHelper.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37558">#37558</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=f40be1d798609dcbd528779faeb53955c24ac3f9">f40be1d</a></li>
</ul>
</div>
<div class="section" id="task-make-gettemplaterootpath-public-like-its-setter">
<h3>[TASK] Make getTemplateRootPath() public like its setter</h3>
<p>The getTemplateRootPath() method in View\TemplateView now
becomes public analogous to its setter counterpart which
already is public, too.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29303">#29303</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=0c013e2ef49c4656c2cd55a8d79f9a5836c6ef75">0c013e2</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-pagination-widget-to-recent-changes">
<h3>[BUGFIX] Adjust pagination widget to recent changes</h3>
<p>With #43589 the action argument of link/URI ViewHelpers is
not optional any longer.</p>
<p>This change adjusts the template of the provided pagination widget
to that breaking change by specifying the action argument.</p>
<p>Besides this adds a check to widget.link &amp; widget.uri ViewHelpers
which throws a more meaningful exception if the action argument
was omitted.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44376">#44376</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=7e096556c737e64963cee43b8e3990dfcb840718">7e09655</a></li>
</ul>
</div>
<div class="section" id="id511">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=8ad378a9ccfd88d09da62b4cd8761f2316caac01">8ad378a</a></li>
</ul>
</div>
<div class="section" id="id512">
<h3>[TASK] Remove API annotation from View::canRender()</h3>
<p>With #40888 View::canRender() is no longer called from within
ActionController::resolveView().
As the framework no longer relies on that method to exist the
&#64;api annotation is removed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/40888">#40888</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42176">#42176</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=06ac5bce073785de32bec004a2c98c53726e8057">06ac5bc</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-one-of-action-and-actionuri-to-be-omitted-in-form-viewhelper">
<h3>[BUGFIX] Allow one of action and actionUri to be omitted in Form ViewHelper</h3>
<p>With I03fa30be2522ee53d5a8f184b57afe539ed4f991 the action argument
of the Form ViewHelper was made required. But in fact you can override the
action attribute by specifying the &#8220;actionUri&#8221; argument. In that case the
&#8220;action&#8221; argument should not be required.</p>
<p>This removes this requirement again. But if neither &#8220;action&#8221; nor &#8220;actionUri&#8221;
is specified, an exception will be thrown.</p>
<p>This also removes the obsolete method setFormActionUri()</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=8bc51f201aa416478710e0642007ccf1ad19e4ce">8bc51f2</a></li>
</ul>
</div>
<div class="section" id="id516">
<h3>[TASK] Prepare composer manifest for release</h3>
<p>Remove the version field, so versions can be read from tags in git
instead. Fixes the description slightly.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=af166567a6ae252606202b6e1cd29ee2ef13547b">af16656</a></li>
</ul>
</div>
<div class="section" id="bugfix-mark-action-argument-required-in-routing-related-viewhelpers">
<h3>[!!!][BUGFIX] Mark action argument required in routing related ViewHelpers</h3>
<p>Currently you can omit the action attribute when creating a link/URI in
Fluid. If no action was specified the default action of the matching route
was assumed. With #43589 the behavior changed and you&#8217;ll have to specify
all defaults of a route.</p>
<p>This change makes the action argument of follwing ViewHelpers required:</p>
<ul class="simple">
<li>f:link.action</li>
<li>f:uri.action</li>
<li>f:form</li>
</ul>
<p>This is a breaking change if you created a link without specifying the action.
In this case change your Fluid code from
&lt;f:action&gt; to &lt;f:action action=&#8221;index&#8221;&gt; (or whatever action is the default
of the target controller).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=c9d4c4a269edf8652c83d64a32648bfabf49678c">c9d4c4a</a></li>
</ul>
</div>
<div class="section" id="task-avoid-use-of-getpropertyinternal">
<h3>[TASK] Avoid use of getPropertyInternal()</h3>
<p>The getPropertyInternal() method obviously is intended for internal use
in the ObjectAccess class. This change replaces it&#8217;s use with a call to
getProperty().</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43617">#43617</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=c06652a11bdf3643a81fe5c9c62aa700daa1a8ae">c06652a</a></li>
</ul>
</div>
<div class="section" id="task-removed-testable-http-flag-from-tests">
<h3>[TASK] Removed testable HTTP flag from tests</h3>
<p>Testable HTTP is now always enabled, thus the flag to switch it on can
be removed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43590">#43590</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=2a188cb0aabbbecbec8b644b982d96e4db21b8c1">2a188cb</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-name-attribute-of-layoutviewhelper-optional">
<h3>[BUGFIX] Make name attribute of LayoutViewHelper optional</h3>
<p>This change removes the required = TRUE from the registerArgument()
call for the name attribute of LayoutViewHelper. This matches the
fallback behavior in the postParseEvent() method.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43579">#43579</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=5ce7ad51c1ce96b2376bb4a8b5a89cf6e1a4faee">5ce7ad5</a></li>
</ul>
</div>
<div class="section" id="feature-allow-fluid-arrays-only-in-viewhelper-arguments">
<h3>[!!!][FEATURE] Allow Fluid arrays only in ViewHelper arguments</h3>
<p>This change greatly enhances the JavaScript compatibility of Fluid.</p>
<p>Fluid Arrays are a subset of the JavaScript object syntax, making it
hard to work with them in mixed HTML/JavaScript documents. For example
before this change, the following JavaScript Object was parsed by Fluid:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">var</span> <span class="nx">uris</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">endPoint1</span><span class="o">:</span> <span class="s1">&#39;{f:uri.action(…)}&#39;</span><span class="p">,</span>
  <span class="nx">endPoint2</span><span class="o">:</span> <span class="s1">&#39;{f:uri.action(…)}&#39;</span><span class="p">,</span>
<span class="p">};</span>
</pre></div>
</div>
<p>Before this change, the above snippet resulted in the following template,
as the generated array was casted to a string:</p>
<blockquote>
<div>var uris = Array</div></blockquote>
<p>With this change, Fluid only parses arrays which are used inside
ViewHelper arguments, such that an array inside normal text is not
converted anymore.</p>
<div class="section" id="breaking-change">
<h4>Breaking Change</h4>
<p>This change is only breaking in very rare cases where one relied on
the inner contents of the ViewHelper being an array, f.e. if one used
the debug ViewHelper as follows:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">debug</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">key1</span><span class="o">:</span> <span class="s1">&#39;value1&#39;</span><span class="p">,</span> <span class="nx">key2</span><span class="o">:</span> <span class="s1">&#39;value2&#39;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">debug</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>… or if anybody wrote custom ViewHelpers which use this convention.</p>
<p>Relying on that would be very fragile anyways, as the insertion of a
single space character before the opening curly bracket or after the
closing one would cast the array back to a string.</p>
<p>ViewHelpers which were written like this should be re-written to take
the array as ViewHelper argument:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">debug</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;{key1: &#39;value1&#39;, key2: &#39;value2&#39;}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43356">#43356</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=ba09ec53d0fc932e4d65a4acfd925398e058b37e">ba09ec5</a></li>
</ul>
</div>
</div>
<div class="section" id="feature-allow-resourceviewhelper-to-accept-resource-paths">
<h3>[!!!][FEATURE] Allow ResourceViewHelper to accept resource:// paths</h3>
<p>This enables the path argument of the Uri.ResourceViewHelper
to accept also resource URIs in the format &#8220;resource://Package.Name/Public/...&#8221;.
This functionality used to be achievable with the former uri
argument but was removed with I92dccba6b5acd623ff33eb538e62d0682f00b95e.</p>
<p>This is marked breaking because it introduces Exceptions in case
of incorrect argument usage or values.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=5504beef578d5ef2e6c0f394fbed1a6e240d70c5">5504bee</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-doc-comment-in-link-email-viewhelper">
<h3>[BUGFIX] Fix Doc comment in link.email ViewHelper</h3>
<p>Fixes the code example in the classes doc comment
and replaces a minor whitespace issue</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43121">#43121</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=d21bd9e0629db33040b59df2f341b366bc79c07f">d21bd9e</a></li>
</ul>
</div>
<div class="section" id="task-add-member-for-paginatecontroller-objects">
<h3>[TASK] Add member for PaginateController::objects</h3>
<p>Adds declaration for the $objects member in the controller of the
pagination widget.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=56956519d46f1a3bdeb1ecb8c5dfcf54b9e3952f">5695651</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-broken-widgettest">
<h3>[BUGFIX] Fix broken WidgetTest</h3>
<p>The fix for #42511 broke the functional WidgetTest in Fluid, because
it relied on &#8220;broken&#8221; URIs being accepted. The AJAX URI is now prefixed
with &#8220;<a class="reference external" href="http://localhost/">http://localhost/</a>&#8221; to make the test work again.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42746">#42746</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42511">#42511</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=65ea61e4c17f6d635ef828afd90f2e01b3795e52">65ea61e</a></li>
</ul>
</div>
<div class="section" id="feature-i18n-support-for-uri-resource-vh-in-fluid">
<h3>[!!!][FEATURE] I18n support for uri.resource VH in Fluid</h3>
<p>This adds the (already documented) localization of resources to the
uri.resource VH. Any path will be localized if possible, unless the
feature is switched off using the &#8220;localize&#8221; argument.</p>
<p>The change is marked as breaking because it removed the &#8220;uri&#8221;
argument formerly available to the VH.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32339">#32339</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39792">#39792</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=e9a21a49bf1e6c72ccde995a582857c8bcac4609">e9a21a4</a></li>
</ul>
</div>
<div class="section" id="bugfix-fluid-should-depend-on-the-composer-installer">
<h3>[BUGFIX] Fluid should depend on the composer installer</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=913272d4260fd75610a195192969a926af48e94d">913272d</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-flow3-renamed-to-typo3-flow">
<h3>[TASK] Adjust to FLOW3 renamed to TYPO3 Flow</h3>
<p>Adjusts the code, comments, documentation as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=284e8f86439b3c8e0eb9abb4933ab78841d2f4bb">284e8f8</a></li>
</ul>
</div>
<div class="section" id="task-update-composer-type-to-new-naming-scheme">
<h3>[TASK] Update composer type to new naming scheme</h3>
<p>In accordance with the rename to TYPO3 Flow, the
composer-type is now &#8216;typo3-flow-…&#8217;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=45a3117dc1c800f226c658757bdfa2d3738846ce">45a3117</a></li>
</ul>
</div>
<div class="section" id="id531">
<h3>[TASK] Change dependency to require flow3/composer-installers</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=56822145986c86b490a178b48f9e72ff02280570">5682214</a></li>
</ul>
</div>
<div class="section" id="task-use-composer-version-of-installers">
<h3>[TASK] Use composer version of installers</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=8061eeb300cb891dee2353f43c8731097e7e1447">8061eeb</a></li>
</ul>
</div>
<div class="section" id="task-add-christianjul-installers-dependency">
<h3>[TASK] Add christianjul/installers dependency</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=4449c2aa41c378f06e17b2faa879b880b3ef8bcf">4449c2a</a></li>
</ul>
</div>
<div class="section" id="id534">
<h3>[TASK] Update unit tests to vfsStream &gt; 1.0</h3>
<p>This adjusts the unit tests to the new vfsStream API.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37813">#37813</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=e42dfb079f34d017837358764e5c71fe898675af">e42dfb0</a></li>
</ul>
</div>
<div class="section" id="task-make-psr-0-and-composer-compatible">
<h3>[TASK] Make PSR-0 and composer compatible</h3>
<p>Moves all classes into a PSR-0 directory structure and adds a composer
manifest instead of Package.xml.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=dfab7ff48b4c29c65c0eab1bc4e63c121a28bb38">dfab7ff</a></li>
</ul>
</div>
<div class="section" id="feature-allow-using-locale-in-currency-and-date-viewhelper">
<h3>[FEATURE] Allow using Locale in Currency and Date ViewHelper</h3>
<p>This enables switching the use of the current active Locale
in Format.Currency and Format.Date ViewHelper.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33143">#33143</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=afdbc774a68af9e1a9aaf72a61680078b510d7c0">afdbc77</a></li>
</ul>
</div>
<div class="section" id="id538">
<h3>[TASK] Whitespace fix in class docblock</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=f20e61d31917e74d19e2b7fdd84a4dbf95c85d38">f20e61d</a></li>
</ul>
</div>
<div class="section" id="task-code-documentation-fix-on-return-types">
<h3>[TASK] Code documentation fix on return types</h3>
<p>The variable container accepts any type, not only objects.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=bbb99516cdb8f0252ad426f65b469bd55556a593">bbb9951</a></li>
</ul>
</div>
<div class="section" id="task-enhance-exception-for-duplicate-variables">
<h3>[TASK] Enhance exception for duplicate variables</h3>
<p>The exception message for &#8216;Duplicate variable declarations!&#8217; now
contains the variablename which is doubled.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40828">#40828</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=438da61f6f460dd84079223c3b936c4df6e435fb">438da61</a></li>
</ul>
</div>
<div class="section" id="feature-format-jsonviewhelper-escapes-tag-characters-per-default">
<h3>[FEATURE] Format.JsonViewHelper escapes tag characters per default</h3>
<p>Since occuring plain greater-than or less-than characters in HTML
context could be dangerous (even CDATA sequences can be stopped with
this), the tags are now converted to their hexadecimal representation.
Since this is standard JSON syntax, this is considered not to be a
breaking change.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39886">#39886</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=3d6a9326a0f1d28127a09c339c7a3da7743af33a">3d6a932</a></li>
</ul>
</div>
<div class="section" id="id541">
<h3>[TASK] Support literal strings in boolean arguments</h3>
<p>This change adds support for string literals in boolean comparisons.
String literals have to be surrounded by single or double quotes and
may contain escaped single or double quotes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/6757">#6757</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=125413ca638696bb4eef9b5c26eceed51acdcf4e">125413c</a></li>
</ul>
</div>
<div class="section" id="bugfix-templateparser-unquotestring-does-not-trim-escaped-quotes-correctly">
<h3>[BUGFIX] TemplateParser unquoteString does not trim escaped quotes correctly</h3>
<p>This change fixes wrong trimming of trailing quotes in escaped sequences
by replacing trim() calls with a preg_replace() alternative.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39604">#39604</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=009b1fc60ca13edc8aa95a2716a8b07c479ca169">009b1fc</a></li>
</ul>
</div>
<div class="section" id="feature-reserved-variables-represent-their-meaning-when-accessing">
<h3>[FEATURE] Reserved variables represent their meaning when accessing</h3>
<p>All reserved variables, ie true, false, on, off etc. now represent
their intended value when accessing them.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39410">#39410</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=3000719576da649017a4cbed51da2c2c058737f6">3000719</a></li>
</ul>
</div>
<div class="section" id="bugfix-action-uri-of-the-form-viewhelper-is-not-reset">
<h3>[BUGFIX] Action URI of the form ViewHelper is not reset</h3>
<p>Form ViewHelpers store the action URI attribute for performance
reasons.
But because instances of ViewHelpers are reused, this value needs
to be reset.
Besides this removes an obsolete property &#8220;formActionUriArguments&#8221;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39456">#39456</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11636">#11636</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=694538964346bc39f0dbf90725fd5474c6c5ee08">6945389</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-textareaviewhelper-html5-aware">
<h3>[BUGFIX] Make TextareaViewHelper HTML5 aware</h3>
<p>This makes the arguments &#8220;rows&#8221; and &#8220;cols&#8221; of the form.textarea
ViewHelper optional.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31189">#31189</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=2ed20916d219fa7a885ba6f9b65ae7265ed59dda">2ed2091</a></li>
</ul>
</div>
<div class="section" id="task-make-reflectionservice-property-in-abstractviewhelper-protected">
<h3>[TASK] Make reflectionService property in AbstractViewHelper protected</h3>
<p>The property &#8220;reflectionService&#8221; in the AbstractViewHelper should be
protected instead of private to allow usage of the reflection service in
view helpers without having to inject again with another property name.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39255">#39255</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=4b3c0967b73ebe13e044dab061192999c016b60b">4b3c096</a></li>
</ul>
</div>
<div class="section" id="task-correct-striptags-test-because-of-unintended-incompletion-result">
<h3>[TASK] Correct StripTags test because of unintended incompletion result</h3>
<p>A test&#8217;s data provider&#8217;s method name began with the character sequence
&#8216;test&#8217;, was hence regarded as test to be executed.
This resulted into an &#8220;Incomplete&#8221; result when running the tests.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=96f77ee3b32cdfe802b18792931e5b73cdbda831">96f77ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-use-of-dashes-in-attribute-names-possible">
<h3>[BUGFIX] Make use of dashes in attribute names possible</h3>
<p>When using e.g. data-foo in VH tags, the parser would choke. This
change fixes this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38592">#38592</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=88d7486d961daa35af376559675e93bcffe7756c">88d7486</a></li>
</ul>
</div>
<div class="section" id="bugfix-move-functional-test-configuration-to-testing">
<h3>[BUGFIX] Move functional test configuration to Testing</h3>
<p>This moves the functional test configuration to the
Testing context, to avoid errors in other contexts.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38873">#38873</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=50370f1ae6080b77502457d26245d5ad1cb271bf">50370f1</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-eval-from-standaloneviewtest">
<h3>[BUGFIX] Remove eval from StandaloneViewTest</h3>
<p>Removes the use of eval from the StandaloneViewTest so that
now a Fixture class is used that extends the StandaloneView.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38873">#38873</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31179">#31179</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=ec1b90495f25053418661025a311c8456b0c2cf3">ec1b904</a></li>
</ul>
</div>
<div class="section" id="bugfix-replace-placeholders-in-fallback-for-id-translation">
<h3>[BUGFIX] Replace placeholders in fallback for id translation</h3>
<p>When using id based translation and no translation is defined in XLIFF,
the tag value is used as a fallback in TranslateViewHelper.</p>
<p>With this change, the fallback is passed to label based translation,
making placeholder replacement work also if no translation does exist
yet.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37387">#37387</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=96189df3951e77ed115c33d4a12603e0571c3f7a">96189df</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-wrong-use-of-internal-annotation">
<h3>[BUGFIX] Remove (wrong) use of Internal annotation</h3>
<p>The internal annotation is used to declare command methods
as internal, not to mark things as not being public API.</p>
<p>Furthermore, it is not allowed to be used on properties
and with #38667 fixed Fluid would cause exceptions.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38667">#38667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=55e055c0f3bd3c48f5bce02eba9ddd8661fd7cb4">55e055c</a></li>
</ul>
</div>
<div class="section" id="id558">
<h3>[TASK] Code cleanup</h3>
<p>Does code cleanup, mostly to documentation, but also tweaks
unused variables, missing return statements and similar things.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=edd10b4d737b3d21fc7e6b3d5b3a5dc69aa60cfb">edd10b4</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-render-hidden-upload-fields-if-a-resource-is-available">
<h3>[BUGFIX] Only render hidden upload fields if a resource is available</h3>
<p>The UploadViewHelper always creates hidden fields for filename and
resource pointer so that previously uploaded files are not lost
if validation errors occur.</p>
<p>This change makes sure that those hidden fields are only rendered
if a file has been uploaded before because otherwise the property
mapper tries to create a Resource object and fails with an
exception (see #38184).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38184">#38184</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=630992b7378e53ae51e2aa341837a4010dbe4bd2">630992b</a></li>
</ul>
</div>
<div class="section" id="task-add-query-parameters-for-form-action-as-hidden-fields">
<h3>[TASK] Add query parameters for form action as hidden fields</h3>
<p>This change makes the form viewhelper usable with method GET by adding
query parameters of the action as hidden fields to the form. Otherwise
the browser would replace them by the form values
(<a class="reference external" href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.4">http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.4</a>).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/11636">#11636</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=488b238d9436d73df7e06679a6e76e83515f0fb7">488b238</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unusable-checkbox-radio-if-formobject-is-null">
<h3>[BUGFIX] Fix unusable checkbox/radio if formObject is NULL</h3>
<p>When using a form object inside of a form view helper inside an index
action template and a checkbox is referring to a property $sth of
$someFormObject, the form object can be NULL with code like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">indexAction</span><span class="p">(</span><span class="nx">\\Some\\Type</span> <span class="nv">$someFormObject</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">){</span> <span class="o">...</span> <span class="p">}</span>

<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span> <span class="o">...</span> <span class="nx">object</span><span class="o">=</span><span class="s2">&quot;{someFormObject}&quot;</span><span class="o">&gt;</span>
 <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">checkbox</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;{sth}&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="s2">&quot;{sth.value} == yes&quot;</span><span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Initially calling the index action makes someFormObject NULL. If the submitted
form had validation errors someFormObject is NULL, too. This possibility
was ignored in a call for the formObject from within the CheckboxViewHelper as
well as from the RadioViewHelper.</p>
<dl class="docutils">
<dt>So you would get an exception telling you</dt>
<dd>No value found for key &#8220;TYPO3\Fluid\ViewHelpers\FormViewHelper-&gt;formObject&#8221;</dd>
</dl>
<p>This change fixes that bug and thus also sets the checkbox and radio
&#8220;checked&#8221; attribute properly when a validation error occurred.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35894">#35894</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=cbe93048c094cdc1eec2feafc70bd1ee1d99c47b">cbe9304</a></li>
</ul>
</div>
<div class="section" id="feature-add-a-viewhelper-for-entity-identifier-retrieval">
<h3>[FEATURE] Add a ViewHelper for entity identifier retrieval</h3>
<p>This adds a ViewHelper &#8220;format.identifier&#8221; that returns
the plain identifier for a given entity.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33494">#33494</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=c8d53e983c5a387b80560fd2bd62556a4c91833a">c8d53e9</a></li>
</ul>
</div>
<div class="section" id="bugfix-viewhelper-exceptions-should-not-be-caught-in-testing-context">
<h3>[BUGFIX] ViewHelper exceptions should not be caught in testing context</h3>
<p>While it is correct that ViewHelper exceptions are silently logged in
production context, they should be displayed in development and testing
context; and not only in development context.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37671">#37671</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=166e7e54a8ff03e44cd5e692e273894280594b32">166e7e5</a></li>
</ul>
</div>
<div class="section" id="id566">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=575adc243a7a820104d0d5506eb0377c2a38150b">575adc2</a></li>
</ul>
</div>
<div class="section" id="task-standalone-view-set-default-format-html">
<h3>[TASK] Standalone View: set default format &#8220;html&#8221;</h3>
<p>Since the introduction of Content Negotiation to FLOW3
(I7d753155aa72f41e3df85b076e8067bcbfe7ac04), the default
Format of the ActionRequest is not &#8220;html&#8221; but undefined.
The Standalone View relied on the default &#8220;html&#8221; format
and thus now needs to set it itself.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37561">#37561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=db77eca6d3f97471fc0970e634a9d3ccf30b2abc">db77eca</a></li>
</ul>
</div>
<div class="section" id="bugfix-hidden-fields-should-be-rendered-in-extra-section">
<h3>[BUGFIX] hidden fields should be rendered in extra section</h3>
<p>Currently form.select and form.checkbox ViewHelpers render
hidden fields before the actual input field in order to
force submission of a value.
This leads to the situation that labels wrapped around the
field do not correspond to the actual form field, but to
the hidden field.
This is fixed by letting the form ViewHelper taking care of
rendering the requried hidden fields in the already existing
section on top of the form.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/26481">#26481</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/13342">#13342</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=f25fa5fbc2ce1eea24e6b5434ed82ead412149c7">f25fa5f</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-empty-output-of-translateviewhelper">
<h3>[BUGFIX] Avoid empty output of TranslateViewHelper</h3>
<p>If translation by ID is used but no translation is found, the ID will now be
returned if the view helper tag has no content. Before this change it would
just return nothing (printable, at least).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35041">#35041</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=68e3bad56dfc67911d8c968f792b90bc8d55579f">68e3bad</a></li>
</ul>
</div>
<div class="section" id="feature-allow-access-to-attributes-in-tagbuilder">
<h3>[FEATURE] Allow access to attributes in TagBuilder</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37460">#37460</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=afaacebed16d6b9ab2cb320fecc32be6a9d7d69a">afaaceb</a></li>
</ul>
</div>
<div class="section" id="task-disable-escapinginterceptor-in-format-json-viewhelper">
<h3>[TASK] Disable escapingInterceptor in Format.Json ViewHelper</h3>
<p>Because the provided ViewHelper children will never be put
through to the template but only be used for source value
retrieval, the escapingInterceptor gets disabled.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/12442">#12442</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=50dcde38eeac969241e5b148e4610e4c1c4edb72">50dcde3</a></li>
</ul>
</div>
<div class="section" id="feature-adds-a-format-json-viewhelper">
<h3>[FEATURE] Adds a format.json ViewHelper</h3>
<p>Provide a ViewHelper that enables putting JSON out of an array or
object. Basically wraps PHP&#8217;s native json_encode() method.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/12442">#12442</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=87ea437e05eb0838afa45c24722785f7c0630240">87ea437</a></li>
</ul>
</div>
<div class="section" id="id574">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add spaces to &#8221;){&#8221; and to &#8220;foreach(&#8221;, fixes some docblocks and
indentation. Also avoids a possible uninitialised variable warning.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=1a688404901cc77d75807d798df8db9fdef96718">1a68840</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id576">
<h3>[TASK] Remove dependency on installer</h3>
<p>Rely on implicit dependency thorugh TYPO3.Flow</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=8b51051f1ca42c57bd86ce0cccdce5d0881a42fa">8b51051</a></li>
</ul>
</div>
<div class="section" id="task-remove-gizmo-as-electronic-address-type">
<h3>[TASK] Remove Gizmo as electronic address type</h3>
<p>Due to discontinued support as of April 3, 2011.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45276">#45276</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=d09ea87ce9b79ab442481a4edf99149478fd831c">d09ea87</a></li>
</ul>
</div>
<div class="section" id="bugfix-removing-primary-electronic-address-fails-in-persistence">
<h3>[BUGFIX] Removing primary electronic address fails in persistence</h3>
<p>When removing an electronic address which is also the primary
electronic address of a Person an exception is thrown in the
persistence layer due to a property being unset and not set
to NULL when validating the object before persisting.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45459">#45459</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=0a493dbb56907352b77f2d3d694f668312ad5856">0a493db</a></li>
</ul>
</div>
<div class="section" id="id579">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=587018d705b5b023699cf1ab10635a79475f2ab3">587018d</a></li>
</ul>
</div>
<div class="section" id="id581">
<h3>[TASK] Prepare composer manifest for release</h3>
<p>Remove the version field, so versions can be read from tags in git
instead.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=e15b0c2ec34aee7f2e677920f9236b2964d119cd">e15b0c2</a></li>
</ul>
</div>
<div class="section" id="id583">
<h3>[TASK] Cleanup use statements with leading backslash</h3>
<p>An almost purely cosmetic issue, but still: use always takes fully
qualified class names, thus no leading backslash should be used.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=aae5f6ee2cbf6adb1728bf23a04707347785f4a9">aae5f6e</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-down-migration-for-mysql-version20120429213446">
<h3>[BUGFIX] Fix down migration for Mysql, Version20120429213446</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41482">#41482</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=930a1d41535f8fbe771e215d04eba5f71ccdb5bc">930a1d4</a></li>
</ul>
</div>
<div class="section" id="bugfix-party-should-depend-on-the-composer-installer">
<h3>[BUGFIX] Party should depend on the composer installer</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=4f814fe1ed1a3d29504e2b67babc63ae8630a9ad">4f814fe</a></li>
</ul>
</div>
<div class="section" id="id585">
<h3>[TASK] Adjust to FLOW3 renamed to TYPO3 Flow</h3>
<p>Adjusts the code, comments, documentation as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=483d978a7771a0e4f1fe6080ba34de7e17e2fa62">483d978</a></li>
</ul>
</div>
<div class="section" id="id587">
<h3>[TASK] Update composer type to new naming scheme</h3>
<p>In accordance with the rename to TYPO3 Flow, the
composer-type is now &#8216;typo3-flow-…&#8217;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=4e0c4b342c2912e2edd52450b0e8ac4f32ade817">4e0c4b3</a></li>
</ul>
</div>
<div class="section" id="task-adjust-composer-manifest">
<h3>[TASK] Adjust composer manifest</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=1b33e6977b3e804e36b339d9d812e6ea87c46e0e">1b33e69</a></li>
</ul>
</div>
<div class="section" id="id590">
<h3>[TASK] Change dependency to require flow3/composer-installers</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=9ef4f5f730ddcb0310766fdc051bd14f8c11fee7">9ef4f5f</a></li>
</ul>
</div>
<div class="section" id="id591">
<h3>[TASK] Add christianjul/installers dependency</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=1961f20b9375ea1bca90d6412846e12ef771c8e1">1961f20</a></li>
</ul>
</div>
<div class="section" id="id593">
<h3>[TASK] Make PSR-0 and composer compatible</h3>
<p>Moves all classes into a PSR-0 directory structure and adds a composer
manifest instead of Package.xml.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=cbe85f30a830a0625e106b815447a76eefc557e7">cbe85f3</a></li>
</ul>
</div>
<div class="section" id="taks-whitespace-fix-in-class-docblock">
<h3>[TAKS] Whitespace fix in class docblock</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=6201a388d9d20ac3a4e73358d19127c10277288a">6201a38</a></li>
</ul>
</div>
<div class="section" id="id595">
<h3>[TASK] Code cleanup</h3>
<p>Tweaks a single constructor docblock.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=ac08ac51415e1eef0da77f0d85be39e1597ee0e4">ac08ac5</a></li>
</ul>
</div>
<div class="section" id="task-adjust-validators-to-avoid-validating-more-than-needed">
<h3>[TASK] Adjust validators to avoid validating more than needed</h3>
<p>Corresponds to If2975bb2e4b79fd7227bda9c7c65b32a7f210e8e.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34154">#34154</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=356939cec24a0194d4d6e5bff09cea8db6e60631">356939c</a></li>
</ul>
</div>
<div class="section" id="id599">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=ed0a6052819f303caec2deba1133f5f5a8510a8e">ed0a605</a></li>
</ul>
</div>
<div class="section" id="task-make-usagetype-on-electronicaddress-nullable">
<h3>[TASK] Make usagetype on ElectronicAddress nullable</h3>
<p>The usage property has no default value and thus should be
nullable to make &#8220;any&#8221; usage possible.</p>
<p>Adds a functional test (thanks Adrian Föder) as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35059">#35059</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=e1d0e7bd46afb82b58a484122b0b9fcb0d5edc29">e1d0e7b</a></li>
</ul>
</div>
<div class="section" id="id601">
<h3>[TASK] Adjust validators to avoid validating more than needed</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34145">#34145</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=eece55844a51c5cf8eba9229d66bccfd128df0b8">eece558</a></li>
</ul>
</div>
<div class="section" id="bugfix-duplicate-email-address-throws-exception">
<h3>[BUGFIX] Duplicate email address throws exception</h3>
<p>Since #29547 is resolved, trying to store an email address that
already exists throws an exception.
This change drops the unique indexes for &#8220;identifier&#8221;, &#8220;type&#8221; and
&#8220;usagetype&#8221; from the ElectronicAddress domain model.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37266">#37266</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29547">#29547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=ed1f4b8b69706db4f1d3dcab7e7283566711aaec">ed1f4b8</a></li>
</ul>
</div>
<div class="section" id="id605">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add space to &#8220;foreach(&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=6445053e14cc7ad45cf7fc486dec9f3c8fe4ee9c">6445053</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id608">
<h3>[BUGFIX] Controllers must not be of scope singleton</h3>
<p>Adjusts the controller templates to create prototypes instead
of singletons.</p>
<p>Background:
Usually the scope of a controller doesn&#8217;t really make a difference,
because they are only instantiated once per request.
But if the same controller is used multiple times
(e.g. within two plugin/widget instances on one page) the side
effects could be very confusing.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45647">#45647</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=989eef864d76e4b05dac0d7a09dd9d07cf69fc19">989eef8</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstarter-creates-delete-links">
<h3>[BUGFIX] Kickstarter creates &#8220;delete links&#8221;</h3>
<p>With 2.0 Flow won&#8217;t persist changes automatically
for safe requests (see #47252).
This adjusts the index template accordingly so that it
creates delete forms instead of links.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48028">#48028</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47252">#47252</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=7b3b2c8c4493658a72779b0b9df631d47a2c1908">7b3b2c8</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstarter-creates-superfluous-code">
<h3>[BUGFIX] Kickstarter creates superfluous code</h3>
<p>The kickstarter creates a lot of code that is not needed.
Especially redundant doc comments are counter productive.</p>
<p>This change tweaks and cleans up the generator templates so
that they create less noise.</p>
<p>This also comes with following minor improvements:</p>
<ul class="simple">
<li>Remove leading slash from use statement</li>
<li>Replace &#8220;&lt;f:form name&#8221; with &#8220;&lt;f:form objectName&#8221;</li>
<li>Move formatting ViewHelpers to subdirectory for good measure</li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48030">#48030</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=6c77979c1add13e054ba71b0122af175cf28c1c3">6c77979</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-command-controller-kickstart">
<h3>[BUGFIX] Fix command controller kickstart</h3>
<p>When kickstarting a command controller the class/file name would lack
the &#8220;Command&#8221; part (as of Ie758c26cecd591ed240478de3f9597714060fb88).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43908">#43908</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=adc1c2be8e8ada8b7dbc9538bdc986f97d438393">adc1c2b</a></li>
</ul>
</div>
<div class="section" id="id614">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=c2c556abeb379b3f17235399d02b44af36550cb8">c2c556a</a></li>
</ul>
</div>
<div class="section" id="id615">
<h3>[TASK] Prepare composer manifest for release</h3>
<p>Remove the version field, so versions can be read from tags in git
instead.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=3c7e9c54b2eb2b4cdf91bd9da86755bc1c89b1c8">3c7e9c5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-strpos-parameters-in-controller-kickstart">
<h3>[BUGFIX] Fix strpos() parameters in controller kickstart</h3>
<p>strpos() parameters were specified in reverse order which broke creation
of controllers for subpackages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43423">#43423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=97c03c55dbf1a213b95b43cdae064752c91eb420">97c03c5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-type-hint-of-collections-in-generated-model-classes">
<h3>[BUGFIX] Fix type hint of collections in generated model classes</h3>
<p>This makes sure that, when using collections with element type hints,
only the collection class name ends up in the type hint of the generated setter.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29791">#29791</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=3060ff79b14ea8ff7ca3fefb54dad911b625bc2f">3060ff7</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-error-message-about-invalid-package-key">
<h3>[BUGFIX] Fix error message about invalid package key</h3>
<p>When specifying an invalid package key in the kickstart
commands, the error message now includes a note about the
vendor namespace that has to be added.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43194">#43194</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=7a4886a83d696a9e2db3f10286875b2cac9be723">7a4886a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-case-of-class-names-to-generate">
<h3>[BUGFIX] Fix case of class names to generate</h3>
<p>This makes sure the created controller class names and
references are upper cased in order to avoid misleading
exceptions if the controller was specified lower cased.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43144">#43144</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=ee5f02611f1a4ddc9b5e0db338ef7c47e1d85246">ee5f026</a></li>
</ul>
</div>
<div class="section" id="id621">
<h3>[TASK] Update composer type to new naming scheme</h3>
<p>In accordance with the rename to TYPO3 Flow, the
composer-type is now &#8216;typo3-flow-…&#8217;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=4280efb254988ba03c6c1d2013377fd026cd1e29">4280efb</a></li>
</ul>
</div>
<div class="section" id="id623">
<h3>[TASK] Adjust to FLOW3 renamed to TYPO3 Flow</h3>
<p>Adjusts the code, comments, documentation as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=5ee2ca0cab7a85f7ce804d1b80c527e017b9d48c">5ee2ca0</a></li>
</ul>
</div>
<div class="section" id="task-add-dependency-to-require-flow3-composer-installers">
<h3>[TASK] Add dependency to require flow3/composer-installers</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=c86dcb772cd884eb2283aa44e431d016c45a1742">c86dcb7</a></li>
</ul>
</div>
<div class="section" id="task-update-to-write-in-psr-0-compatible-path">
<h3>[TASK] Update to write in PSR-0 compatible path</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41180">#41180</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=3cd555a208e7098c23af28bfd4e783b0bb7248bc">3cd555a</a></li>
</ul>
</div>
<div class="section" id="id626">
<h3>[TASK] Make PSR-0 and composer compatible</h3>
<p>Moves all classes into a PSR-0 directory structure and adds a composer
manifest instead of Package.xml.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=e23e727e87ae59124966093b8518e692bb617abb">e23e727</a></li>
</ul>
</div>
<div class="section" id="id628">
<h3>[TAKS] Whitespace fix in class docblock</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=e7c7a489cdd95e6e55a7da3c5f0f11ba9582375c">e7c7a48</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstart-package-gives-wrong-hint-for-valid-package-key">
<h3>[BUGFIX] kickstart:package gives wrong hint for valid package key</h3>
<p>The kickstarter wrongly claims that a valid package key
may contain underscores. This patch corrects the respective
messages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38999">#38999</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=211dcabe868d9679ba20be862acc843258b05cd2">211dcab</a></li>
</ul>
</div>
<div class="section" id="id630">
<h3>[TASK] Code cleanup</h3>
<p>Does cleanup to code documentation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=d6228bac6220e6c551dc9b1a7cbedacdd0e947eb">d6228ba</a></li>
</ul>
</div>
<div class="section" id="id632">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=ed26ddf4131a0479a8e73dbaa2bad05160bbcdc8">ed26ddf</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="bugfix-switch-welcome-site-to-jquery-for-consistency">
<h3>[BUGFIX] Switch welcome site to jQuery for consistency</h3>
<p>The welcome site now also uses jQuery as JavaScript library.
Additionally folder names were adapted to match the best
practice proposal we have.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44670">#44670</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=6d0b866da48893e2a6ea00b8b6cde100bbd68ac5">6d0b866</a></li>
</ul>
</div>
<div class="section" id="id634">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=662a7beba0ae2a439a3482b567bd9fa80ba3fe6e">662a7be</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-tests-to-required-action-arguments">
<h3>[BUGFIX] Adjust tests to required action arguments</h3>
<p>Adjusts tests to changed requirements introduced with
I03fa30be2522ee53d5a8f184b57afe539ed4f991</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=7ad7b6c53a550f433415e433b095cc3623dfe1b2">7ad7b6c</a></li>
</ul>
</div>
<div class="section" id="id636">
<h3>[TASK] Prepare composer manifest for release</h3>
<p>Remove the version field, so versions can be read from tags in git
instead. Fixes the description slightly.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=c7697af4ecb646412e338d2bbe6780c0424d8cc0">c7697af</a></li>
</ul>
</div>
<div class="section" id="task-update-logo-to-typo3-flow">
<h3>[TASK] Update logo to TYPO3 Flow</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42766">#42766</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=f05652e2215e3dfad89984bc4f1468e2546186f8">f05652e</a></li>
</ul>
</div>
<div class="section" id="id639">
<h3>[TASK] Update composer type to new naming scheme</h3>
<p>In accordance with the rename to TYPO3 Flow, the
composer-type is now &#8216;typo3-flow-…&#8217;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=44a146a59598a2e7e334372af0d480d4b9db5b5e">44a146a</a></li>
</ul>
</div>
<div class="section" id="id641">
<h3>[TASK] Adjust to FLOW3 renamed to TYPO3 Flow</h3>
<p>Adjusts the code, comments, documentation as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=9a041821dea0484f321a2a22dad79ec77046eefd">9a04182</a></li>
</ul>
</div>
<div class="section" id="id643">
<h3>[TASK] Adjust composer manifest</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=79fade8bbbcee5dabcb3c20d7b97b71c9457e039">79fade8</a></li>
</ul>
</div>
<div class="section" id="id645">
<h3>[TASK] Make PSR-0 and composer compatible</h3>
<p>Moves all classes into a PSR-0 directory structure and adds a composer
manifest instead of Package.xml.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=a18695b540cb664c41ad04f83deb2c2d972cdf6e">a18695b</a></li>
</ul>
</div>
<div class="section" id="id647">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=f889660f45eced95d9585a151ee57f2ead6d55f7">f889660</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="d36c7d7e-656a-a1db-2b67-953bd0f3cc5c" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="83dbb497-63d0-10ce-5f65-0d4e883ab954" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="200-beta1" locale="">
        <properties>
         <title>2.0.0-beta1</title>
        </properties>
        <node identifier="60ea48c0-4254-5de4-1378-9890520131b8" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="8c118d29-91cb-c4bb-9897-a9cbfc6031a8" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="beta1">
<h1>2.0.0-beta1</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-update-composer-json-with-new-dependencies">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=7cdcca7f31c4b7ae9d3fd86cfd41e525b16e4318">7cdcca7</a></li>
</ul>
</div>
<div class="section" id="task-rename-vendor-to-libraries">
<h3>[TASK] Rename Vendor to Libraries</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42013">#42013</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=c46b3c34560f21a93e0781fe27c8738f2b899eed">c46b3c3</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-flow3-renaming">
<h3>[TASK] adjust to FLOW3 renaming</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=749ce7721bcea1e0499b034622fbc2b312bc03c7">749ce77</a></li>
</ul>
</div>
<div class="section" id="task-composerify-base-distribution">
<h3>[!!!][TASK] Composerify base distribution</h3>
<p>Removes submodules in favor of installing via composer. Files installed
via composer from the FLOW3 package are removed as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=3922aeaeadae68cb04e30722d5e6cf01b00b6382">3922aea</a></li>
</ul>
</div>
<div class="section" id="task-update-phoenix-project-name">
<h3>[TASK] Update phoenix project name</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=709e9a1aadb1add683d2b2a2cae487c0aed15cf1">709e9a1</a></li>
</ul>
</div>
<div class="section" id="task-do-not-recurse-into-submodules-for-phoenix-distribution">
<h3>[TASK] Do not recurse into submodules for Phoenix distribution</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=4d74d895f9556734425f4c5942485a995b6910cd">4d74d89</a></li>
</ul>
</div>
<div class="section" id="task-add-phoenix-distribution-build-surf-configuration">
<h3>[TASK] Add Phoenix distribution build surf configuration</h3>
<p>Note: This needs the corresponding change in BuildEssentials as well.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38500">#38500</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=218bcbf45ff4cb0dcbeaea63e0b8826718cdf704">218bcbf</a></li>
</ul>
</div>
<div class="section" id="task-adjust-release-deployment-descriptor">
<h3>[TASK] Adjust release deployment descriptor</h3>
<p>This adds the configuration needed to push tags based on
the PUSH_TAGS environment variable and tweaks some tiny
(style) issues.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=34b5bfbe8670a8d6a7bd337b62f1edbf26ceefc0">34b5bfb</a></li>
</ul>
</div>
<div class="section" id="task-mention-phpsession-configuration-change-in-upgrading-txt">
<h3>[TASK] Mention PhpSession configuration change in Upgrading.txt</h3>
<p>This informs about the PhpSession settings key change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37993">#37993</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=839d0544a05036f2cefb04069428a94472baaf73">839d054</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-dead-symlinks-from-release-archives">
<h3>[BUGFIX] Remove dead symlinks from release archives</h3>
<p>The default Surf configuration symlinks Data and Configuration
to a shared folder. For release archives that leads to dead
symlinks being in the archives.</p>
<p>This changes disables both symlink tasks in the release
deployment descriptor.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37569">#37569</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=96c47dd4bc2476a06159157bf212a8906d3a719c">96c47dd</a></li>
</ul>
</div>
<div class="section" id="task-adjust-surf-deployment-descriptor">
<h3>[TASK] Adjust Surf deployment descriptor</h3>
<p>The deployment descriptor used to release archives of FLOW3
needed a little adjustment.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=5971c56a1dc387ccf905fca298d1bf51d3802503">5971c56</a></li>
</ul>
</div>
<div class="section" id="task-clean-upgrading-txt-from-1-1-content">
<h3>[TASK] Clean Upgrading.txt from 1.1 content</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Distributions/Base.git?a=commit;h=402ac49130f6d85e071133f0dfb878c2b4e6bda3">402ac49</a></li>
</ul>
</div>
<div class="section" id="id6">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=aa45f04d0aff0e7bab73030e1e18390297806e49">aa45f04</a></li>
</ul>
</div>
<div class="section" id="task-set-flow-version-branch-to-2-0">
<h3>[TASK] Set FLOW_VERSION_BRANCH to 2.0</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=36817a61b02bd7466fc607b3147ec445122029d1">36817a6</a></li>
</ul>
</div>
<div class="section" id="task-remove-api-annotation-from-view-canrender">
<h3>[TASK] Remove API annotation from View::canRender()</h3>
<p>With #40888 View::canRender() is no longer called from within
ActionController::resolveView().
As the framework no longer relies on that method to exist the
&#64;api annotation is removed.</p>
<p>Besides this marks EmptyView deprecated.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/40888">#40888</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42176">#42176</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6f03a9a448b7d9981c0cc2bc40dea5f4be863ae4">6f03a9a</a></li>
</ul>
</div>
<div class="section" id="task-update-references-in-the-guide">
<h3>[TASK] Update references in the Guide</h3>
<p>Another update to references forvalidators, converters and Fluid
ViewHelpers.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=14c861fafa5e42f361b302097e46c169c3b4f5e7">14c861f</a></li>
</ul>
</div>
<div class="section" id="task-update-readme-txt-and-upgrading-txt-files">
<h3>[TASK] Update Readme.txt and Upgrading.txt files</h3>
<p>This updates the Readme.txt and Upgrading.txt files of TYPO3 Flow for
the release of 2.0.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=80850d0fc3cf7fee5f016188d87e8652971c1186">80850d0</a></li>
</ul>
</div>
<div class="section" id="task-update-package-management-section">
<h3>[TASK] Update Package Management section</h3>
<p>This adjusts the package management section of the TYPO3 Flow Guide to
the composer changes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42726">#42726</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6606d48f0b9aa28ccddb7ba8604089b00a0c9a9a">6606d48</a></li>
</ul>
</div>
<div class="section" id="task-use-instead-of-for-entity-resources-in-policies">
<h3>[!!!][TASK] Use \ instead of _ for entity resources in Policies</h3>
<p>When defining entity resources in a Policy.yaml file, the entity type
had to be the class name with \ replaced by _. With this change the
regular class name is to be used instead.</p>
<p>A code migration to adjust Policy.yaml files is part of the change.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43629">#43629</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e6c6ac5b53c1510739c03f0f065901bc3eff1199">e6c6ac5</a></li>
</ul>
</div>
<div class="section" id="task-update-quickstart-and-getting-started-installation-instructions">
<h3>[TASK] Update Quickstart and Getting Started installation instructions</h3>
<p>Updates the download instructions to talk about composer instead of
unpacking archives.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6e18986e785b936907f90aa50c8cc60396f7cdde">6e18986</a></li>
</ul>
</div>
<div class="section" id="bugfix-invoking-cli-from-a-different-directory-doesn-t-work">
<h3>[BUGFIX] Invoking CLI from a different directory doesn&#8217;t work</h3>
<p>When executing the TYPO3 Flow CLI from a directory that is
not equal to the root path and if the FLOW_ROOTPATH environment
variable is not set, Flow dies with an exception.</p>
<p>This change fixes this by falling back to the current directory in that
case.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31642">#31642</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=81ed883987a7efa78db18b61bc0204c6aef76126">81ed883</a></li>
</ul>
</div>
<div class="section" id="bugfix-route-defaults-have-to-be-specified-when-creating-uris">
<h3>[!!!][BUGFIX] Route defaults have to be specified when creating URIs</h3>
<p>Currently when creating URIs one can omit route values that are defined
as defaults of the route.
This is not the intended behavior though, because with a lot of routes
in place this leads to the situation where it gets difficult to target
a certain route.
Thus for a route to match the given route values, one should have to
specify all the routing defaults exactly as they are specified by the
route (except for when a route part appears in the uriPattern).</p>
<p>This is a breaking change if you used Router or UriBuilder to create
URIs without specifying all defaults (see #43589 for details).
Besides, all Fluid ViewHelpers that use the UriBuilder now require the
action argument to be specified.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f17a2274b512a0b8cbf8810a0b73600cb9736ff9">f17a227</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-correct-domcrawler-again">
<h3>[BUGFIX] Use correct DomCrawler (again)</h3>
<p>The latest manifest update downgraded the DomCrawler, breaking some
Fluid tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0d62cf61b438110e65df910e0cbbcbe087c504c5">0d62cf6</a></li>
</ul>
</div>
<div class="section" id="feature-add-array-and-object-support-for-notemptyvalidator">
<h3>[FEATURE] Add array and object support for NotEmptyValidator</h3>
<p>This patch resolves the problem that empty arrays are not correctly
validated when using the NotEmpty validation annotation. Arrays
and Countables that are empty will now trigger an error.</p>
<p>Follow-up patch to <a class="reference external" href="https://review.typo3.org/14707">https://review.typo3.org/14707</a></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42467">#42467</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d22893332b5457c73567a8c1b8cc2906d3d22b95">d228933</a></li>
</ul>
</div>
<div class="section" id="bugfix-handle-missing-but-registered-packages-gracefully">
<h3>[BUGFIX] Handle missing - but registered - packages gracefully</h3>
<p>In production a missing, but registered package leads to a fatal
error. Handle this situation gracefully.</p>
<p>Allow logging early on in the package manager.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42342">#42342</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f0ef1636d0166263fd4696068d1d85476bea065b">f0ef163</a></li>
</ul>
</div>
<div class="section" id="task-replace-references-to-flow-1-2">
<h3>[TASK] Replace references to &#8220;Flow 1.2&#8221;</h3>
<p>This fixes some documentation/comments referring to &#8220;Flow 1.2&#8221;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43839">#43839</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=886da55db84fef9943a92218a9f5596f7b0b9a95">886da55</a></li>
</ul>
</div>
<div class="section" id="bugfix-throw-viewnotfoundexception-if-view-could-not-be-resolved">
<h3>[BUGFIX] Throw ViewNotFoundException if view could not be resolved</h3>
<p>This improves the resolving of views by removing the canRender()
checks from ActionController::resolveView as discussed in #42176.</p>
<p>Besides this skips the creation of the obsolete NotFoundView in favor
of throwing a ViewNotFoundException.</p>
<p>This also adds overdue unit tests for the ActionController.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40888">#40888</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40857">#40857</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42176">#42176</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9f99c840136955d14f5c39f0de8ac0a5f7ee1913">9f99c84</a></li>
</ul>
</div>
<div class="section" id="feature-taggable-sessions">
<h3>[FEATURE] Taggable sessions</h3>
<p>This introduces the ability to tag a session and retrieve remote
sessions by tag through the Session Manager.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43832">#43832</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3a2c1165a55a076c1a86ddac282043256c67165e">3a2c116</a></li>
</ul>
</div>
<div class="section" id="task-prepare-composer-manifest-for-release">
<h3>[TASK] Prepare composer manifest for release</h3>
<p>Adjust some dependencies to pull in new stable releases only, instead
of the latest development version.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7552f0558a94f793db931a951dc3859b13605839">7552f05</a></li>
</ul>
</div>
<div class="section" id="id22">
<h3>[TASK] Update references in the Guide</h3>
<p>Freshly rendered references for commands, validators, converters,
ViewHelper and annotations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=96cb52ddf0f61a3d86fc4fc9aeb9fea2a2b9a427">96cb52d</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-race-condition-in-session-shutdown">
<h3>[BUGFIX] Fix race condition in session shutdown</h3>
<p>This protects sessions against being revived through the shutdown
method even though they were destroyed remotely in the meantime.</p>
<p>This patch also contains a small modification and related test to make
sure that incoming session cookies are not blindly sent back to the
user agent in the response. Instead, a clean, new session cookie with
the parameters set in Flow&#8217;s settings is created.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43673">#43673</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4dac593a462b55165f0df3a794180fee1381e4f5">4dac593</a></li>
</ul>
</div>
<div class="section" id="task-add-reference-for-predefined-constants-to-documentation">
<h3>[TASK] Add reference for predefined constants to documentation</h3>
<p>This adds a new page in Chapter V, Appendixes, listing the
predefined constants Flow introduces, and their intended meaning.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43609">#43609</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ab44a1b7087aae2bb59746426d59bc19e81fa9dc">ab44a1b</a></li>
</ul>
</div>
<div class="section" id="feature-allow-configuration-processing-in-code-migrations">
<h3>[FEATURE] Allow configuration processing in code migrations</h3>
<p>This adds the new method <tt class="docutils literal"><span class="pre">processConfiguration</span></tt> to AbstractMigration.</p>
<p>It is given a configuration type, a processor and an optional flag
stating whether or not the processed configuration should be saved.</p>
<p>The processor is a Closure and is handed the parsed configuration of the
package under migration, for each found file separately. If you need to
modify the configuration, make sure to use pass-by-reference for the
processor configuration parameter in addition to setting the $saveResult
flag to TRUE.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43089">#43089</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a3c0c8b171d65fb545cbc6c6e1a071f0aacb60a4">a3c0c8b</a></li>
</ul>
</div>
<div class="section" id="task-make-system-call-to-php-binary-reliable-especially-on-windows">
<h3>[TASK] Make system call to php binary reliable, especially on Windows</h3>
<p>This solves execution of php binary on windows environments with paths
containing whitespace and special characters (like round brackets). On
windows, commands containing white spaces must be quoted, but quoted paths may
not be escaped, which escapeshellcmd() wrongly does.</p>
<p>This is solved by using escapeshellarg() on windows instead and also adds more
verbose exception messages in the case of failure.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35916">#35916</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=17c31e32c08a8a98bd851226137804c243bfeac1">17c31e3</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-session-usage-in-functional-test-cases">
<h3>[BUGFIX] Fix session usage in functional test cases</h3>
<p>This fixes a bug in the FunctionalTestCase which resulted in a fatal
error in Session-&gt;start().</p>
<p>Testable HTTP is now always enabled. The enableTestableSecurity() method
(deprecated since 1.1) has been removed as well.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43590">#43590</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5629be5b6e0135d087f64170cf7b4b6cac31adfb">5629be5</a></li>
</ul>
</div>
<div class="section" id="task-make-getpropertyinternal-protected">
<h3>[TASK] Make getPropertyInternal() protected</h3>
<p>The getPropertyInternal() method obviously is intended for internal use
in the ObjectAccess class. This change makes it protected.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43617">#43617</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d7e2cf8d34fd65b9719bee4915b1b6a42439241">8d7e2cf</a></li>
</ul>
</div>
<div class="section" id="feature-destroy-session-explicitly-in-logout">
<h3>[FEATURE] Destroy session explicitly in logout</h3>
<p>This change moves the call to Session-&gt;destroy() from a signal
to the AuthenticationProviderManager that already has the current
session as a dependency.</p>
<p>The &#8220;emitLoggedOut&#8221; signal is emitted before the session is
destroyed to allow other slots to inspect the session.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43575">#43575</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=15e1aa055fa153e13d57cd181a63f908f2f5525b">15e1aa0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-arguments-check-in-buildconstructorinjectioncode-allow-null">
<h3>[BUGFIX] Fix arguments check in buildConstructorInjectionCode, allow NULL</h3>
<p>It was not possible to pass NULL as constructor arguments, because of
the use of isset() instead of array_key_exists().</p>
<p>Also a few other places needed to be changed and some tiny (unrelated)
tweaks were made.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38988">#38988</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=798d2b324dd420c64cfbfad6359befdadbb59f45">798d2b3</a></li>
</ul>
</div>
<div class="section" id="feature-touch-remote-sessions-and-tag-with-account-info">
<h3>[FEATURE] Touch remote sessions and tag with account info</h3>
<p>This introduces two new features: updating the last activity timestamp
of a remote session through a new method &#8220;touch()&#8221; and tagging sessions
with their respective account (if any).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43491">#43491</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c268993d9e41e0fdfbc937b94a5cf230c7ba7693">c268993</a></li>
</ul>
</div>
<div class="section" id="feature-remote-session-management">
<h3>[!!!][FEATURE] Remote session management</h3>
<p>This introduces the foundations for remote session management – that is,
inspection, modification and destruction of sessions which are not
currently active in the browser running the current HTTP request</p>
<p>This patch also REMOVES the PhpSession implementation and configures
the new, Flow-native implementation to be the default session handler.</p>
<p>If you provided specific configuration for session cookies through
TYPO3:Flow:Session:PhpSession:<em>, you will need to adjust your settings
to use options in TYPO3:Flow:Session:</em> instead.</p>
<p>This change set also contains a new type converter which is capable of
converting a session identifier to a session object.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43376">#43376</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=986ad3a9ae9554c569b70596f7d5bb0cfe0dbdf3">986ad3a</a></li>
</ul>
</div>
<div class="section" id="task-revert-exclusion-of-classes-with-broken-psr-0-in-domcrawler">
<h3>[TASK] Revert exclusion of classes with broken PSR-0 in DomCrawler</h3>
<p>This reverts commit ee8f8e1d898c15549c22278e3fe80cd5702df182 (source is
Id3fbb8ad5154c633b7153b4f8eef742f385b05a3).</p>
<p>The fix is no longer needed, as DomCrawler has been fixed, see
the pull request at <a class="reference external" href="https://github.com/symfony/DomCrawler/pull/7">https://github.com/symfony/DomCrawler/pull/7</a></p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4f162e24c5f99839bacc029052ed8fd92928c5dd">4f162e2</a></li>
</ul>
</div>
<div class="section" id="bugfix-regard-wildcard-in-propertyconfiguration-shouldmap">
<h3>[BUGFIX] Regard wildcard in PropertyConfiguration shouldMap()</h3>
<p>Using &#8216;name.*&#8217; in property mapping configuration did not work for
fields added on the client, because shouldMap() would reject those
fields before the configuration was even checked.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43387">#43387</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bd0acd47f330e7c71f5af7165e8d1f71c65d5d25">bd0acd4</a></li>
</ul>
</div>
<div class="section" id="bugfix-check-for-installation-of-phpunit-by-composer">
<h3>[BUGFIX] Check for installation of phpunit by composer</h3>
<p>Ib4b6c68c03590444addb7c2e5af89b2a2d90051f introduced a regression
for running functional tests when composer is used in the project,
but PHPUnit is still installed using PEAR.</p>
<p>This change adds an additional check to verify if phpunit is actually
installed in the Libraries folder. By doing so the Bootstrap will
fall back to the PEAR installation of phpunit.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43377">#43377</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a4955450e2a23d943176c21a6ce11b4c2fa6b48a">a495545</a></li>
</ul>
</div>
<div class="section" id="bugfix-exclude-parameters-of-the-current-request-from-created-uris">
<h3>[BUGFIX] Exclude parameters of the current request from created URIs</h3>
<p>Since <a class="reference external" href="https://review.typo3.org/#/c/15261/">https://review.typo3.org/#/c/15261/</a> the arguments
of the current/uri-building-origin request were added
without although addQueryString was FALSE.</p>
<p>The UriBuilder now only keeps the requestArguments on
non-involved requestNamespaces.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42770">#42770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=feeb87c5ee2f3a7edaa0d8c2bff7f67c262660f1">feeb87c</a></li>
</ul>
</div>
<div class="section" id="task-cosmetic-fixes-in-http-cookie-and-response">
<h3>[TASK] Cosmetic fixes in Http Cookie and Response</h3>
<p>This adds a missing type hint in Cookie and moves the status code array
in Response to a method: that way all the status codes don&#8217;t appear in
debug backtraces anymore.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=75ba1c190440edfd1c4c2e5c14054445c96eb676">75ba1c1</a></li>
</ul>
</div>
<div class="section" id="bugfix-package-loading-must-be-ordered-by-dependencies">
<h3>[BUGFIX] Package loading must be ordered by dependencies</h3>
<p>In order to ensure proper merging of configurations packages most
be loaded ordered by dependencies.</p>
<p>This should be handled by ordering PackageStates accordingly.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42730">#42730</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/28672">#28672</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f9100b04ec5e7388a358bfa5540f6752b66b7a3d">f9100b0</a></li>
</ul>
</div>
<div class="section" id="bugfix-respect-limit-offset-constraints-when-counting-results">
<h3>[!!!][BUGFIX] Respect limit/offset constraints when counting results</h3>
<p>Until now QueryResult::count() discarded limit constraints that were
active for the affected query, so
$query-&gt;setLimit(3)-&gt;execute()-&gt;count() could return a value &gt; 3.
If the query had an offset Flow even threw an exception.</p>
<p>This changeset adjusts the Query so that limit and offset constraints
are taken into account. It furthermore unsets the offset in the query
in order to circumvent the exception.</p>
<p>This is a breaking change if you relied on Query::count() to always return
all results regardless of a specified limit. In this case better generate
multiple QueryResults (they&#8217;re only created in-memory until you actually
access them)</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42955">#42955</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d46eef43f377c15bd8987bc1c61d519e868d875a">d46eef4</a></li>
</ul>
</div>
<div class="section" id="task-code-cleanup">
<h3>[TASK] Code cleanup</h3>
<p>This change</p>
<ul class="simple">
<li>fixes a number of CGL violations and typos</li>
<li>changes public to protected in PolicyService</li>
<li>removes an &#64;api annotation</li>
<li>adds a &#64;throws annotation</li>
<li>removes an unused use statement</li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0695c46280d8222f355d92da896aecedb73dc0e9">0695c46</a></li>
</ul>
</div>
<div class="section" id="feature-remove-trailing-slash-from-routes-for-empty-subroutes">
<h3>[FEATURE] Remove trailing slash from routes for empty subroutes</h3>
<p>Flow throws an exception if a route contains a trailing slash in
order to avoid duplicate slashes in URIs and to make it possible
to add some kind of global default suffix to all URIs.
When using sub routes and a prefix with a trailing slash in the
uriPattern of the main route (e.g. uriPattern: &#8216;blog/&lt;BlogSubroutes&gt;&#8217;)
this leads to an unwanted exception if there is an empty (fallback)
subroute because the merged uriPattern would contain a trailing
slash (&#8220;blog/&#8221;).</p>
<p>This change strips trailing slashes from merged uriPatterns if the sub
routes uriPattern is empty.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31777">#31777</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=46904338747b4c490d73e4e46f5aeef281a2135e">4690433</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-handling-of-paths-with-dots-in-getlocalizedfilename">
<h3>[BUGFIX] Fix handling of paths with dots in getLocalizedFilename()</h3>
<p>When a path like resource://TYPO3.Neos/Public/JavaScript/ is handed to
getLocalizedFilename(), it tries to check for the existence of
resource://TYPO3.en.Neos/Public/JavaScript/ - which breaks, unless you
happen to have a package TYPO3.en.Neos activated.</p>
<p>This change fixes this by using the basename in the check for an
extension.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43195">#43195</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fefb00eadefe768c1e8415fc6faac6b1f84c81bc">fefb00e</a></li>
</ul>
</div>
<div class="section" id="task-add-doctrine-bin-folder-to-gitignore-file">
<h3>[TASK] Add doctrine /bin/ folder to .gitignore file</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=28c27ed8db97467755b19c340e0c9496b690ac72">28c27ed</a></li>
</ul>
</div>
<div class="section" id="task-allow-use-of-composer-installed-phpunit-in-testing-context">
<h3>[TASK] Allow use of composer-installed PHPUnit in Testing context</h3>
<p>The Testing context loads PHPUnit for functional tests. If using
PHPUnit installed via composer, this needs to be handled differently
than for a PEAR-installed setup.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0e1ac1c88c9a25f24333780e259dc4fc98b9bffa">0e1ac1c</a></li>
</ul>
</div>
<div class="section" id="bugfix-flowsession-fixed-renewid">
<h3>[BUGFIX] FlowSession: Fixed renewId()</h3>
<p>This patch provides a new implementation of FlowSession&#8217;s renewId()
method. It previously loaded all data from the old cache entry in order
to write it into a cache entry with the new session identifier. This
effectively overwrote any existing session-scoped object which existed
in the old cache data.</p>
<p>The new implementation uses a session identifier independent internal
storage identifier which doesn&#8217;t change on renewing the public session
identifier. This way we don&#8217;t need to move around session data, but
can simply store a new mapping between session id and storage id.</p>
<p>This patch also lets the HTTP Request store only the baseUri instead of
the whole settings array which leads to a smaller footprint and less
information stored in a session (as the current request is, in most
cases, part of the serialized session data).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43110">#43110</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1b6267f73f9ab74ba4a6ba719e078ce530bf1b6f">1b6267f</a></li>
</ul>
</div>
<div class="section" id="task-rename-csrfstrategy-and-csrftokens-member-variables">
<h3>[TASK] Rename csrfStrategy and csrfTokens member variables</h3>
<p>The csrfStrategy and csrfTokens member variables have weird names,
since they protect against CSRF they should rather be named
csrfProtectionStrategy and csrfProtectionTokens.</p>
<p>This change adjusts the Security\Context internals accordingly.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=28f170d85a46f7ad6363c91e825e8b776575143d">28f170d</a></li>
</ul>
</div>
<div class="section" id="feature-add-logging-of-resource-access-decision-voting">
<h3>[FEATURE] Add logging of resource access decision voting</h3>
<p>This change adds a logging aspect for decideOnResource() to log votes
analogous to what is done for decideOnJoinPoint().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43091">#43091</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=39dd293d0bfb8d57608b37643c62764548df99ff">39dd293</a></li>
</ul>
</div>
<div class="section" id="taks-tweak-and-clean-up-code-migration">
<h3>[TAKS] Tweak and clean up code migration</h3>
<p>This change cleans up the code a little by fixing some CGL violations
and moving some code around.</p>
<p>Packages in Libraries are now skipped by default (was Vendors before).</p>
<p>If available, composer&#8217;s autoload.php is used instead of manually
requiring class files.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8a1e24b618ac6bdf0c7feb0af88585a63f42651c">8a1e24b</a></li>
</ul>
</div>
<div class="section" id="task-fix-tiny-flow3-leftover-in-docblock">
<h3>[TASK] Fix tiny FLOW3 leftover in docblock</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8daa495e5a6d1677334d6a29be353652dc3324e7">8daa495</a></li>
</ul>
</div>
<div class="section" id="task-update-documentation-to-composer-changes">
<h3>[TASK] Update documentation to composer changes</h3>
<p>This updates the documentation to fix the most prominent errors and
inconsistencies regarding package handling and file locations that were
caused by the composer changes.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=98395c76c65efc477d2bf7e3b6dfc159b99f6153">98395c7</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-flowsession-initialization">
<h3>[BUGFIX] Fix FlowSession initialization</h3>
<p>This patch fixes the FlowSession initialization for non HTTP-Requests.
Previously the initializeObject() method was trying to retrieve the
HTTP request even from a CLI request handler, resulting in a fatal
error.</p>
<p>Additionally this patch now defines a default storage backend
(FileBackend) for FlowSession. Therefore it&#8217;s now sufficient to enable
FlowSession in Objects.yaml for getting started.</p>
<p>The garbage collection now is more reliable and triggered when a session
is resumed instead of when the shutdownObject() method is called.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42801">#42801</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=beac8272f684c69cc08df4b5f5e90736279aa654">beac827</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-composer-manifest-detection">
<h3>[BUGFIX] Fix composer manifest detection</h3>
<p>The method findComposerManifestPaths() would return wrong results if
the list of found JSON files was in the &#8220;wrong&#8221; order. Adding a call to
asort() makes the longer paths come later in the list and fixes the
behavior.</p>
<p>Also the direct detection of a manifest is fixed and a useless
condition is removed.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42807">#42807</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bc8e604853889861e23cd78da170a32e4c7731a1">bc8e604</a></li>
</ul>
</div>
<div class="section" id="task-handle-inheritancetype-annotation-more-robust">
<h3>[TASK] Handle InheritanceType annotation more robust</h3>
<p>When specifying InheritanceType but no heirs exist, no longer
an exception will be thrown. Instead inheritance will be disabled
to allow specifying InheritanceType &#8220;for future use&#8221;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27283">#27283</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f08339dcf8751f28c4843238e006a496ab8456cd">f08339d</a></li>
</ul>
</div>
<div class="section" id="feature-allow-arrays-to-be-set-via-object-yaml-property-values">
<h3>[FEATURE] Allow arrays to be set via Object.yaml property values</h3>
<p>This introduces the option to also set arrays as plain native values
in Objects.yaml. This allows settings like the following:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Acme\\Foobar\\Domain\\Repository\\BazRepository</span><span class="o">:</span>
  <span class="nx">properties</span><span class="o">:</span>
    <span class="nx">defaultOrderings</span><span class="o">:</span>
      <span class="nx">value</span><span class="o">:</span>
        <span class="nx">creationDate</span><span class="o">:</span> <span class="s1">&#39;ASC&#39;</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42539">#42539</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fd2178cfa3cf880cd3add52189e517470b30eb4c">fd2178c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-missing-argument-and-superfluous-trailing-slash">
<h3>[BUGFIX] Fix missing argument and superfluous trailing slash</h3>
<p>A few errors sneaked into Ifb6612a808e8cd8ee892de727dd961287a119152.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2338ac6491960005dab4f9741e829931efdd3ad8">2338ac6</a></li>
</ul>
</div>
<div class="section" id="task-align-signatures-of-methods-involved-in-creating-package">
<h3>[TASK] Align signatures of methods involved in creating package</h3>
<p>The docblock of PackageFactory::create() was wrong, and the manifestPath
is now optional. PackageManager is adjusted as needed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ad141e0bfe0e0556d68db5127724dde604319a7b">ad141e0</a></li>
</ul>
</div>
<div class="section" id="feature-check-validator-options-and-make-them-self-documenting">
<h3>[!!!][FEATURE] Check validator options and make them self-documenting</h3>
<p>Validators now must declare any options they accept using the class
property $supportedOptions. It is indexed by option name and
holds an array for each option giving the default value,
a description, type and an optional required flag.</p>
<p>This is used to check accepted options and to generate option
documentation for the validator reference documentation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37820">#37820</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d374b12f2e7d13142ffc3ea9078ff3ba50ca7758">d374b12</a></li>
</ul>
</div>
<div class="section" id="bugfix-throw-proper-exception-in-configurationbuilder">
<h3>[BUGFIX] Throw proper exception in ConfigurationBuilder</h3>
<p>Add a check if the return value of get_class_methods() used in
autowireProperties() actually is an array. Throw an exception if it is
not, as this should not happen.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41809">#41809</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d488398654c2a1a88ec736aa38d1c8cb2aaa615c">d488398</a></li>
</ul>
</div>
<div class="section" id="task-add-checks-for-composer-manifest-in-package">
<h3>[TASK] Add checks for composer manifest in Package</h3>
<p>The existence of a Composer manifest has been a soft requirement,
make it hard.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2ff9a044ffa8457b71127319706c31937a9dc017">2ff9a04</a></li>
</ul>
</div>
<div class="section" id="task-cleanup-use-statements-with-leading-backslash">
<h3>[TASK] Cleanup use statements with leading backslash</h3>
<p>An almost purely cosmetic issue, but still: use always takes fully
qualified class names, thus no leading backslash should be used.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=662fed794a7a8eee48ea1057b0f374305d864cb0">662fed7</a></li>
</ul>
</div>
<div class="section" id="bugfix-consider-only-a-packages-top-level-composer-manifest">
<h3>[BUGFIX] Consider only a packages top-level composer manifest</h3>
<p>For different scenarios it is allowed for a package to contain more
than one composer-manifest. For example in tests or if a package
bundles several other packages. Only the root-manifest should be
evaluated by the PackageManager.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42516">#42516</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a148ca1ed1ded30ef8ecba4cdab2a0a575bd2c67">a148ca1</a></li>
</ul>
</div>
<div class="section" id="feature-native-php-based-session-handler">
<h3>[FEATURE] Native PHP-based session handler</h3>
<p>This introduces an alternative session implementation which is based on
the backend modules of the Flow Cache framework. All cache backend
implementations available for caching (PDO, Redis, Apc, Memcache etc)
can now be used for storing session data.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42366">#42366</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42403">#42403</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5b56ade837f86ecb80678392b229cffd691232f3">5b56ade</a></li>
</ul>
</div>
<div class="section" id="task-small-design-corrections-in-documentation-part-ii">
<h3>[TASK] Small design corrections in documentation part II</h3>
<p>Tweaks the error output in the New.html template. Some other tiny
corrections.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e311c25168a731a61379561107b4b9ef3108d3dc">e311c25</a></li>
</ul>
</div>
<div class="section" id="task-make-mvc-controller-exception-extend-mvc-exception">
<h3>[TASK] Make Mvc\Controller\Exception extend Mvc\Exception</h3>
<p>Formerly the exception subclassed FLOW3\Exception directly.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42785">#42785</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2c27eb19fc8c6ba777c2a542bebebc3c6fffa8c7">2c27eb1</a></li>
</ul>
</div>
<div class="section" id="feature-add-simple-array-insight-in-html-debug-backtrace">
<h3>[FEATURE] Add simple array insight in HTML debug backtrace</h3>
<p>In the visual HTML debug backtrace, now array arguments get an
additional title attribute, allowing to see the runtime values
of the particular array when hovered with the mouse.</p>
<p>Such a tooltip would look like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
  <span class="nx">integer</span> <span class="mi">0</span> <span class="o">=&gt;</span> <span class="nx">Acme\\FooBar\\SomeObject</span> <span class="nx">singleton</span> <span class="nx">object</span> <span class="nx">proxy</span>
  <span class="nx">integer</span> <span class="mi">1</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s2">&quot;indexAction&quot;</span> <span class="p">(</span><span class="mi">11</span><span class="p">)</span>
</pre></div>
</div>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=366174f3d641d4969f748e35f483177c53a20efd">366174f</a></li>
</ul>
</div>
<div class="section" id="feature-show-package-keys-in-schema-migration-listing">
<h3>[FEATURE] Show package keys in schema migration listing</h3>
<p>Additionally show the related package keys in the
doctrine:migrationstatus command listing. For this,
it brings a new PackageManager method <tt class="docutils literal"><span class="pre">getPackageOfObject()</span></tt>
that allows retrieving a package by a package&#8217;s member&#8217;s
class name.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42011">#42011</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4b04b7dcfec6b54e60632056869dfe3eb4a9b831">4b04b7d</a></li>
</ul>
</div>
<div class="section" id="task-fixed-wrong-filename-in-documentation">
<h3>[TASK] Fixed wrong filename in Documentation</h3>
<p>The documentation used a wrong filename for a code listing
(BlogRepository instead of PostRepository).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=417a57148b8196eae55da7c4631c07779418013d">417a571</a></li>
</ul>
</div>
<div class="section" id="feature-allow-integer-value-as-timestamp-in-datetimeconverter">
<h3>[FEATURE] Allow integer value as timestamp in DateTimeConverter</h3>
<p>The DateTime TypeConverter cannot transform integer values to
a DateTime object because of a strict check for string.</p>
<p>Accept integer values and also assume plain digits to be
a timestamp and use &#8220;U&#8221; as date format if no additional
configuration is given.</p>
<p>Additionally change the is_numeric() checks to ctype_digit()
as is_numeric() would also allow float values.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41989">#41989</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4c800987247b122a91eb3e2a599f2e8eb9ad57af">4c80098</a></li>
</ul>
</div>
<div class="section" id="feature-type-converter-for-http-uris">
<h3>[FEATURE] Type converter for HTTP URIs</h3>
<p>This provides a type converter, converting simple strings
into their URI representations. This allows convenient type
converting for use in action methods.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42025">#42025</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b9fb6863e088125b353d4ff9dc941de042d41fd7">b9fb686</a></li>
</ul>
</div>
<div class="section" id="feature-allow-class-constants-in-configuration">
<h3>[FEATURE] Allow class constants in Configuration</h3>
<p>Currently, only plain PHP constants are allowed for substitution in
Configuration files. This changes the regular expression in order to
match class constants too.</p>
<p>So not only <tt class="docutils literal"><span class="pre">%PHP_VERSION%</span></tt> would be possible, but also, for example,
<tt class="docutils literal"><span class="pre">%TYPO3\\FLOW3\\Core\\Bootstrap::MINIMUM_PHP_VERSION%</span></tt>.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41358">#41358</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=50832abe17af1b8c37eb4fa84d0d87d8039c7a3f">50832ab</a></li>
</ul>
</div>
<div class="section" id="bugfix-objectserializer-not-capable-of-collections">
<h3>[BUGFIX] ObjectSerializer not capable of Collections</h3>
<p>Serializing Objects containing properties being a
Doctrine Collection fails with an exception since the
ObjectSerializer is not capable of recognizing them.</p>
<p>This change adds support for Collection properties in objects
and arrays.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42715">#42715</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a41d018e241abef08656daeea2920204dd78c72c">a41d018</a></li>
</ul>
</div>
<div class="section" id="task-small-code-cleanup-in-http-request-handler">
<h3>[TASK] Small code cleanup in Http Request Handler</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2cc6c24482b63623fd5904415703b667a323d2ff">2cc6c24</a></li>
</ul>
</div>
<div class="section" id="feature-cache-frontend-getbytag-now-returns-identifiers">
<h3>[FEATURE] Cache Frontend: getByTag() now returns identifiers</h3>
<p>This changes the behavior of getByTag() to not only return a
numeric array of entry values but now index them with their
entry identifier.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42761">#42761</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5cc198c92686dd07ec834b5ac72ed9f0f55820b3">5cc198c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-test-for-persistencequeryrewritingaspect">
<h3>[BUGFIX] Fix unit test for PersistenceQueryRewritingAspect</h3>
<p>The solution for #42601 broke one test in the
PersistenceQueryRewritingAspectTest.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42758">#42758</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3d946860c611b601492acd59a031d654d3503daa">3d94686</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-functional-browsertest-in-neos-context">
<h3>[BUGFIX] Fix functional BrowserTest in Neos context</h3>
<p>The functional BrowserTest in Flow (added as part of the solution to
issue #42049) fails when run in a Neos context. This is caused by the
different routes configuration.</p>
<p>The change tweaks the route used in the test slightly.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42756">#42756</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9736f94532c3776154e701354559fa3dba67705e">9736f94</a></li>
</ul>
</div>
<div class="section" id="task-use-doctrine-2-3-orm-and-adjust-as-needed">
<h3>[TASK] Use Doctrine 2.3 ORM and adjust as needed</h3>
<p>This adjusts our annotation driver to the changes in Doctrine 2.3 that
were breaking.</p>
<p>Also it adds the code needed to support new features:</p>
<ul class="simple">
<li>NamedNativeQueries annotation</li>
<li>SqlResultSetMappings annotation</li>
<li>Table-&gt;options</li>
<li>DiscriminatorColumn-&gt;columnDefinition</li>
<li>AssociationOverrides annotation</li>
<li>AttributeOverrides annotation</li>
<li>CustomIdGenerator annotation</li>
</ul>
<p>Furthermore it requires doctrine/data-fixtures now, something we
previously had packaged into our Doctrine.Common package.</p>
<p>This change drops three changes we had applied to the stock packages
before:</p>
<ul class="simple">
<li>ORM - Throw exception if no identifier can be found in UnitOfWork</li>
<li>ORM - In proxies add docblocks and move __wakeup() call around</li>
<li>DBAL -  Fix connection charset with MySQL for PHP &lt; 5.3.6
(see <a class="reference external" href="https://review.typo3.org/4587">https://review.typo3.org/4587</a>).</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40863">#40863</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b807ceb06695ae742da2be7e2d9b3d51f21bfd97">b807ceb</a></li>
</ul>
</div>
<div class="section" id="task-tweak-exception-message-for-not-settable-property">
<h3>[TASK] Tweak exception message for not settable property</h3>
<p>This explains the possible reason for a not settable property
a bit more and describes how to solve the mentioned problem.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=667ff177cda4f6dff51ab06599e2d7da46062406">667ff17</a></li>
</ul>
</div>
<div class="section" id="bugfix-enforce-query-rewriting-more-reliably">
<h3>[BUGFIX] Enforce Query Rewriting more reliably</h3>
<p>This initializes the security context if it hasn&#8217;t been initialized
when the PersistenceQueryRewritingAspect becomes active.</p>
<p>Previously it could happen that entities which should be covered by
a policy are visible to anonymous users.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42601">#42601</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9af3204b3ceb08b488370d6d85802cac87821154">9af3204</a></li>
</ul>
</div>
<div class="section" id="bugfix-tweak-help-output-output-version">
<h3>[BUGFIX] Tweak help output, output version</h3>
<p>The help output was a bit clumsy regarding the name of Flow
and did not output the version (since it is missing in the manifest).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b6e3faac8a8ba0de37364b40e2ecd48c72368922">b6e3faa</a></li>
</ul>
</div>
<div class="section" id="task-rename-phoenix-to-neos">
<h3>[TASK] Rename Phoenix to Neos</h3>
<p>This change adjusts some technically irrelevant uses of Phoenix to
Neos, just for completeness.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41668">#41668</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c45b234356c9a3cde3160598a719a8a56a9ef648">c45b234</a></li>
</ul>
</div>
<div class="section" id="bugfix-http-uri-constructor-throws-exception-on-invalid-uri">
<h3>[!!!][BUGFIX] Http\Uri constructor throws exception on invalid Uri</h3>
<p>The constructor of the Uri object now checks the return value
of the parse_url method and throws an exception if this returns
anything else than a valuable array, because in this case the
given Uri is considered seriously malformed.</p>
<p>This is considered breaking because prior to this change,
the Uri just silently was created with all empty values.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42511">#42511</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1b03b89c9a61c5a8066544929a9be590eb3521b3">1b03b89</a></li>
</ul>
</div>
<div class="section" id="bugfix-introduce-http-response-createfromraw">
<h3>[BUGFIX] Introduce HTTP Response::createFromRaw()</h3>
<p>The Response::createFromRaw method halted if a Set-Cookie header
arrives due to lacking handling.</p>
<p>This brings an implementation to parse the Set-Cookie directive
as described in RFC 6265 Section 5.2. The Response::createFromRaw
method passes the Set-Cookie header data to this new implementation
in order to create a Cookie object from it.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c17a95dbb96099897924493b92ea822d9c9fa6d6">c17a95d</a></li>
</ul>
</div>
<div class="section" id="bugfix-initialize-resource-wrapper-before-session">
<h3>[BUGFIX] Initialize resource wrapper before session</h3>
<p>If you try to attach a resource-dependent object to a session, this
will fail, as the _wakeup() method is called before the resource
wrappers are initialized.</p>
<p>This patch makes sure that the resource framework is initialized
before the session framework in the standard runtime sequence of the
bootstrap.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42434">#42434</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=84ef743d1530b5344b2599efea211bd311f9e16c">84ef743</a></li>
</ul>
</div>
<div class="section" id="feature-identify-key-pair-by-fingerprint-in-rsawalletservice">
<h3>[FEATURE] Identify key pair by fingerprint in RsaWalletService</h3>
<p>This change uses SSH compatible fingerprints of the RSA public
key instead of a random UUID to store keys. This allows to have
a consistent reference of keys across systems.</p>
<p>This change is backwards-compatible with the old behavior, because#
stored keys can still be used with their generated UUID.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42355">#42355</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8a706f20a7bd3cd34f08778a52a40acf35f17313">8a706f2</a></li>
</ul>
</div>
<div class="section" id="bugfix-support-named-indexes-in-multivalue-translation-labels">
<h3>[BUGFIX] Support named indexes in multivalue translation labels</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42169">#42169</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=71318ee5819bc78a04d2c632774ac0abb13b946f">71318ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-typo-in-setfilepermissions-script">
<h3>[BUGFIX] Typo in setfilepermissions Script</h3>
<p>This fixes the output of the setfilepermissions script to the correct
spelling of TYPO3.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42368">#42368</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c3371afade3336c3ded27b99898ba05a5474f6fa">c3371af</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-sign-method-in-rsawalletservice">
<h3>[BUGFIX] Fix sign method in RsaWalletService</h3>
<p>Fixes the sign method to use the actual key string for
openssl_sign and adds a unit test for that.</p>
<p>Additionally a wrong return type is fixed in the interface.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e63ab7329b4887455e1248611a5d8564d57de1f7">e63ab73</a></li>
</ul>
</div>
<div class="section" id="task-tighten-package-key-check-a-little">
<h3>[TASK] Tighten package key check a little</h3>
<p>The pattern used to check for a valid package key was made less strict
during composer integration. Although composer itself imposes almost no
restrictions, packagist requires a &#8220;vendor/name&#8221; format.</p>
<p>This changes thus adjusts the PATTERN_MATCH_PACKAGEKEY constant to
require a dot in the package key.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42319">#42319</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9762f6271c1bedbffe7295dfc9281e30a6d029a1">9762f62</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-http-host-not-always-followed-by-port-colon">
<h3>[BUGFIX] Make HTTP_HOST not always followed by port colon</h3>
<p>If there is no port given, a trailing colon for the HTTP_HOST
is not allowed to follow.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42241">#42241</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=53a6fde577e9e55792b8217b9874a286b3f75438">53a6fde</a></li>
</ul>
</div>
<div class="section" id="task-cgl-documentation-add-a-notice-about-byte-order-mark">
<h3>[TASK] CGL-Documentation - Add a notice about byte order mark</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42164">#42164</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=96f47786555fb39f43f30f08c99a18c178c4664c">96f4778</a></li>
</ul>
</div>
<div class="section" id="task-remove-oneline-exception-for-throw-statements">
<h3>[TASK] Remove oneline exception for throw statements</h3>
<p>Removes the exception for throwing exceptions in oneliners, which is
not allowed anymore.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42168">#42168</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39977">#39977</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=580b963277d99d8a9d628274df3ebd2e124f9c40">580b963</a></li>
</ul>
</div>
<div class="section" id="bugfix-workaround-issues-with-multiline-commit-messages">
<h3>[BUGFIX] Workaround issues with multiline commit messages</h3>
<p>In core migration functionality, particularily on windows
systems, the commit message is cropped at the first occurrence
of a newline character. This leads into trouble when the core
migration tool searches for the Migration: ... footers in the
commit history as they won&#8217;t be there then.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41848">#41848</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=77f148cde87cbf3a4da95ba4b3786ea2dfc6ba33">77f148c</a></li>
</ul>
</div>
<div class="section" id="feature-let-http-browser-follow-location-redirects">
<h3>[FEATURE] Let HTTP browser follow Location redirects</h3>
<p>Since Http&#8217;s Browser object should behave like a real browser, Location
headers are now followed (as soon as they come with a 3xx response code
as of RFC2616 14.30).</p>
<p>This patch includes a safeguard that prevents following infinite
redirect loops and an option to disable the automatic redirection
altogether.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42049">#42049</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e90a00d669c4ad196462ad12a7fd75a06c36b1a8">e90a00d</a></li>
</ul>
</div>
<div class="section" id="bugfix-apply-psr-0-code-migration-only-to-non-psr-0-packages">
<h3>[BUGFIX] Apply PSR-0 code migration only to non-PSR-0 packages</h3>
<p>This change adds a condition to prevent the code migration to move
classes inside the Classes directory if it is already in PSR-0 layout.</p>
<p>Additionally an already existing composer.json will not be overwritten
and a safeguard was added to AbstractMigration that checks if a file
that should be deleted actually exists.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41848">#41848</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=03d6d6fdbdedc0819ba9b7aa9312bd436cb7a84d">03d6d6f</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-path-check-in-http-cookie-constructor">
<h3>[BUGFIX] Correct path check in HTTP\Cookie constructor</h3>
<p>A variable name has been corrected in the constructor
of the Cookie class.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39836">#39836</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9f407900b2f2c52c0215ef1a806e3a7e17712b87">9f40790</a></li>
</ul>
</div>
<div class="section" id="feature-include-technical-details-to-exceptions-in-dev-context">
<h3>[FEATURE] Include technical details to exceptions in dev context</h3>
<p>Since the implementation of custom error renderers (#39423)
404 errors don&#8217;t show any technical details to the user,
even in development context.</p>
<p>This change passes the exception to the fluid template which can
render it, if configured. Furthermore this adds default rendering
options and configures all exceptionHandlers to include technical
details in development context.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42135">#42135</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=be181ef7c6a4f46d3e2f753f3d55e74b8b773388">be181ef</a></li>
</ul>
</div>
<div class="section" id="task-documentation-fix-link-to-cgl-on-one-page-document">
<h3>[TASK] Documentation: Fix link to CGL on one page document</h3>
<p>The link was renamed during the FLOW3 to TYPO3 Flow replacement
but the site package is not yet renamed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cf4f0ee4676f238189532328a8343da4f80ff3b5">cf4f0ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-csrf-token-is-not-appended-for-actions-with-mixed-case-characters">
<h3>[BUGFIX] CSRF token is not appended for actions with mixed case characters</h3>
<p>The CrsfProtectionAspect no longer appends the CSRF token when the
target action contains uppercase characters (e.g. someSpecialAction).</p>
<p>This change fixes this by resolving the correctly cased method name
before checking for the SkipCsrfToken annotation in the aspect.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42083">#42083</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9ea304b4531e404112ae9c189554ef73057fa05b">9ea304b</a></li>
</ul>
</div>
<div class="section" id="bugfix-respect-explicit-empty-subpackage-in-urifor-with-subrequests">
<h3>[BUGFIX] Respect explicit empty subpackage in uriFor with subrequests</h3>
<p>This change just checks for the empty string in the routing arguments and
sets a controller argument for building the URL. That way no subpackage
argument will be overriden from the subrequest.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42082">#42082</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8ebb3f6ecb6cbbb2eae971acc240e7091f5b9b5e">8ebb3f6</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-path-to-database-error-template">
<h3>[BUGFIX] Fix path to database error template</h3>
<p>The Settings.yaml contained an outdated path for the
Fluid template which is supposed to display database
errors.</p>
<p>The message of the fatal error caused by this bug contained:
&#8216;Template file &#8220;resource://TYPO3.Flow/Private/Error/Default_Template.html&#8221;
could not be loaded&#8217;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39423">#39423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ec4d4225a2cddeabda6deb45357140989bc18293">ec4d422</a></li>
</ul>
</div>
<div class="section" id="task-check-for-unexpected-properties-in-policy-schema">
<h3>[TASK] Check for unexpected properties in Policy schema</h3>
<p>This change disables unknown properties for resources and
acl group keys to prevent mistakes. For example, the schema should fail
if an entry is directly added to &#8220;resources&#8221; without using the
&#8220;method&#8221; subkey.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=441957b92d32e2b3c3bfd3d6cbf15721c8cf16e4">441957b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-composer-manifest-loading-and-unit-tests">
<h3>[BUGFIX] Fix composer manifest loading and unit tests</h3>
<p>This change fixes 2 tests in PackageTest that failed when run from
a package directory, because the $package-&gt;getComposerManifest()
method did pick up the relative composer.json file inside that.</p>
<p>Additionally some minor CGL cleanups in PackageTest.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c85ccd700f01b5f218469ebddd3b500c134054d9">c85ccd7</a></li>
</ul>
</div>
<div class="section" id="bugfix-uribuilder-doesn-t-properly-handle-arguments-of-subrequests">
<h3>[BUGFIX] UriBuilder doesn&#8217;t properly handle arguments of SubRequests</h3>
<p>If you&#8217;re creating a link inside a SubRequest that link currently
doesn&#8217;t add/remember the Arguments, Controller, etc from the
parentRequest if it&#8217;s nested more than one level: MainRequest-&gt;SubRequest-&gt;SubRequest</p>
<p>This change fixes the mergeArgumentsWithRequestArguments
to properly add all of parentRequests for links inside SubRequests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41571">#41571</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3b43e2a9f19df8731af6c10655932694761a8932">3b43e2a</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-unnecessary-call-for-code-compilation">
<h3>[BUGFIX] Remove unnecessary call for code compilation</h3>
<p>This change removes the forced compile command subrequest
in a non Production context. Proxy classes are only
initialized if the code cache is not up to date or with
a special second check after file monitoring was run.</p>
<p>This speeds up the development context quite enormous
if no code was changed.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41818">#41818</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c9f04ee02f519bf480d1902662f593663d31e059">c9f04ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-tests-fail-when-run-from-package-path">
<h3>[BUGFIX] Tests fail when run from package path.</h3>
<p>Composer manifests missing in some tests, and not read properly by
package in others</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f442e2f516043d7e35dee6814272650000dab741">f442e2f</a></li>
</ul>
</div>
<div class="section" id="task-exclude-classes-with-broken-psr-0-in-domcrawler">
<h3>[TASK] Exclude classes with broken PSR-0 in DomCrawler</h3>
<p>See <a class="reference external" href="https://github.com/symfony/DomCrawler/pull/7">https://github.com/symfony/DomCrawler/pull/7</a></p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ee8f8e1d898c15549c22278e3fe80cd5702df182">ee8f8e1</a></li>
</ul>
</div>
<div class="section" id="bugfix-actionrequest-does-not-resolve-correctly-cased-package-key">
<h3>[BUGFIX] ActionRequest does not resolve correctly cased package key</h3>
<p>ActionRequest resolves lowercased package key by looking for
Package class instead of asking PackageManager. If no Package class
exists in the given Package, the request fails.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41657">#41657</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b744c359a9ff0373a5c22926cf3577468bbe952e">b744c35</a></li>
</ul>
</div>
<div class="section" id="task-small-code-cleanup-in-package">
<h3>[TASK] Small code cleanup in Package</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=94a43b695cb216c1654c21b3b824d1bbb7593f7c">94a43b6</a></li>
</ul>
</div>
<div class="section" id="bugfix-documentation-mentions-the-notemptyvalidator">
<h3>[BUGFIX] Documentation mentions the NotEmptyValidator</h3>
<p>The Part II (Getting Started), Validation chapter contains
a note about the requirement and purpose of the NotEmptyValidator.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41451">#41451</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d00e8767ac76b68a377153abca67523a8a69faa8">d00e876</a></li>
</ul>
</div>
<div class="section" id="bugfix-changed-f-form-textbox-to-f-form-textfield-in-documentation">
<h3>[BUGFIX] Changed f:form.textbox to f:form.textfield in Documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0a78fb8ab46d0b398354e02bdaf205f464fc387e">0a78fb8</a></li>
</ul>
</div>
<div class="section" id="task-make-exception-templates-more-configurable">
<h3>[TASK] Make exception templates more configurable</h3>
<p>At the moment only the file name can be set, but not
the format, partial &amp; layout paths are configurable.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=81c41cdf4892a406748368457748cc0e7f1a60fc">81c41cd</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-unit-test-for-yamlsource-to-changed-indentation">
<h3>[BUGFIX] Adjust unit test for YamlSource to changed indentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=50c3e1c2655b3cf9fbf8daebe964a44c3ddef9ea">50c3e1c</a></li>
</ul>
</div>
<div class="section" id="task-use-two-spaces-as-yaml-indentation-instead-of-four">
<h3>[TASK] Use two spaces as yaml indentation instead of four</h3>
<p>This was introduced when upgrading the Symfony Yaml package
to the latest source with the move to composer.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=41c63520d77a4184730c5abbe7433efa9f90f4cf">41c6352</a></li>
</ul>
</div>
<div class="section" id="task-make-package-getcomposermanifest-public">
<h3>[TASK] make Package::getComposerManifest() public</h3>
<p>This is needed for fixing the site import of setup</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4a53002a4666cb36ad2d10d63d30c0ac53f86ad5">4a53002</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unit-tests">
<h3>[BUGFIX] fix unit tests</h3>
<p>The test of Idc1d9d48998a0de0ecd07f834baa769ddf1e5ba4 was not adjusted
to the rename.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=01468684ebf40b4e47d29f2c05770e8e889619e3">0146868</a></li>
</ul>
</div>
<div class="section" id="bugfix-update-composer-type-in-migration">
<h3>[BUGFIX] Update composer type in migration</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8c73d8e59651f0923c5d32f60ed89bd97d3cd42a">8c73d8e</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-package-management-to-updated-composer-package-types">
<h3>[BUGFIX] Adjust Package Management to updated composer package types</h3>
<p>This fixes issues f.e. with functional test runs of Phoenix.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3f4b7342bc30f0acc0a43bce27c15f4f8c8d0fc9">3f4b734</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-monitoring-of-changed-class-files">
<h3>[BUGFIX] Fix monitoring of changed class files</h3>
<p>This change fixes the resolving of the class name from a changed file
since the PSR-0 changes caused some problems with the assumption of
the class name layout in that place. The change keeps the old
behavior for test files since these are not yet updated to a new
layout.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41499">#41499</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3d0a981f7c105641369793ae2eb847dafbd68d33">3d0a981</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-unnecessary-call-to-to-sortandsavepackagestates">
<h3>[BUGFIX] Remove unnecessary call to to sortAndSavePackageStates</h3>
<p>This change should fix the saving of a new PackageStates.php file on
every request which causes a rebuild of proxy classes and flushing of
other caches through file monitoring.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41497">#41497</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=14a788244e4be7b84907e576d758567942d0cf07">14a7882</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-proxy-blacklisting">
<h3>[BUGFIX] Fix Proxy Blacklisting</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f4b26dadd7db648c972e6fc185827769a6ac2b23">f4b26da</a></li>
</ul>
</div>
<div class="section" id="bugfix-try-to-fix-composer-loading-problem">
<h3>[BUGFIX] Try to fix composer loading problem</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=33acf04710f0dd7ef1209dac558b5fcaefd1dba6">33acf04</a></li>
</ul>
</div>
<div class="section" id="task-rename-flow3-to-typo3-flow">
<h3>[!!!][TASK] Rename FLOW3 to TYPO3 Flow</h3>
<p>Adjusts the code, comments, documentation as needed.</p>
<p>A code migration to adjust packages and schema migrations are added as
well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=57526b7fa57d82b08b64144214df9ffb1e475ffe">57526b7</a></li>
</ul>
</div>
<div class="section" id="task-rename-flow3-to-typo3-flow-move-files">
<h3>[!!!][TASK] Rename FLOW3 to TYPO3 Flow, move files</h3>
<p>Moves files so names match the FLOW3 to Flow change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=69d40a96d0795cab6414fa153e8cb586f48b988d">69d40a9</a></li>
</ul>
</div>
<div class="section" id="task-some-leftover-case-changes">
<h3>[TASK] Some leftover case changes</h3>
<p>This adjusts the case of some forgotten namespaces and classes.</p>
<p>Also it marks a number of migrations as (correctly) applied.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=569fcb8657b3c6521db122bef78f0717a98b1586">569fcb8</a></li>
</ul>
</div>
<div class="section" id="task-adjust-packagemanagertest-to-skip-unnamed-change">
<h3>[TASK] Adjust PackageManagerTest to &#8220;skip unnamed&#8221; change</h3>
<p>With I5e29317bbada2b6aed13fe26b50c1ae1ed9c2c80 a check was added that
lead to a failing unit test. So much for trivial stuff. :)</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=adc2fba0c4ecdee971bfbfacb99c49d5a69483f2">adc2fba</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-sure-generated-composermanifest-is-valid">
<h3>[BUGFIX] Make sure generated composermanifest is valid</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41449">#41449</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=17af2c03a747b3fc2bb07e81c6395ed3bbf60a67">17af2c0</a></li>
</ul>
</div>
<div class="section" id="task-skip-packages-without-name-in-manifest">
<h3>[TASK] Skip &#8220;packages&#8221; without name in manifest</h3>
<p>When using packages that have example &#8220;composer.json&#8221; files (like
Doctrine ORM 2.3 in source form) this will avoid errors.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d40e50a39f2a0cb4fcaf4837724b44af57e754a4">d40e50a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-package-manifest-detection">
<h3>[BUGFIX] Fix package / manifest detection</h3>
<p>In production context class loading fails because the classloader has a
wrong map for namespaces. This is caused by getNamespace() doing the
wrong thing - because it finds no composer manifest.</p>
<p>This change fixes this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41418">#41418</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d010f9205be95cde69d901070d5858a55f1ec9af">d010f92</a></li>
</ul>
</div>
<div class="section" id="task-copy-dotfiles-during-composer-install">
<h3>[TASK] Copy dotfiles during composer install</h3>
<p>Dotfiles like .htaccess need to be copied as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41421">#41421</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8feeaa3c2b630e32d00e0e647ccce59578b18550">8feeaa3</a></li>
</ul>
</div>
<div class="section" id="feature-allow-copy-of-dotfiles-in-copydirectoryrecursively">
<h3>[FEATURE] Allow copy of dotfiles in copyDirectoryRecursively()</h3>
<p>Adds a new parameter to copyDirectoryRecursively(), namely the boolean
$copyDotFiles.</p>
<p>To enable this, also readDirectoryRecursively() now knows a new
parameter named $returnDotFiles.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41421">#41421</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9b63414540d98a64e26f361f017bee3bedf9de1a">9b63414</a></li>
</ul>
</div>
<div class="section" id="task-remove-leftover-shortcuts-handling">
<h3>[TASK] Remove leftover .Shortcuts handling</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=196e37dbae8039f391f739ca2978ac7c95f81c55">196e37d</a></li>
</ul>
</div>
<div class="section" id="task-fix-flow3-commandline-script">
<h3>[TASK] Fix flow3 commandline script</h3>
<p>Shortens a docblock and removes define() left over from recent work.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1a417b66d4f96da7de00ddb9a154107b23985e8a">1a417b6</a></li>
</ul>
</div>
<div class="section" id="task-move-gitignore-to-composer-install-default">
<h3>[TASK] Move .gitignore to composer install default</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ee4d1f8c3d4bd4089588dcc7392838f90672c614">ee4d1f8</a></li>
</ul>
</div>
<div class="section" id="task-tweak-install-script-behavior-add-example-configuration">
<h3>[TASK] Tweak install script behavior, add (example) configuration</h3>
<p>With this change the composer post install/update script will discern
between &#8220;Essentials&#8221;, being files that will always be copied - even if
they already exist in their target location - and &#8220;Defaults&#8221;, being
files that will be copied only if not already existing.</p>
<p>This is used to add the example configuration files as essentials and a
Routes.yaml as default.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4179179dc14d11e2617125d50017a83beaae4114">4179179</a></li>
</ul>
</div>
<div class="section" id="feature-allow-keeping-files-in-copydirectoryrecursively">
<h3>[FEATURE] Allow keeping files in copyDirectoryRecursively()</h3>
<p>This change adds a flag $keepExistingFiles to copyDirectoryRecursively()
in Files. It defaults to FALSE and if set to TRUE allows to keep files
already present in the target location.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41378">#41378</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c7cce8d502c9b55fea3b823c6a7d3ade45f17db4">c7cce8d</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-htaccess-file-to-installed-files">
<h3>[BUGFIX] Add .htaccess file to installed files</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41369">#41369</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=987b91a89a4c1792ed5c7b88887147758f189a2c">987b91a</a></li>
</ul>
</div>
<div class="section" id="task-update-settings-to-new-name-of-installer-package">
<h3>[TASK] Update settings to new name of installer package</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d3039191d3f3b0edaa99280cc1da30b6bc89a64c">d303919</a></li>
</ul>
</div>
<div class="section" id="task-update-class-exclusion-to-changed-composer-installer-name">
<h3>[TASK] Update class exclusion to changed composer installer name</h3>
<p>The installer change it&#8217;s package key from christianjul.installers to
flow3.composerinstallers so the exclusion needs to be adjusted.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0ea33a38f2e5ab0b1a13e707d9c5715dec2c2cc2">0ea33a3</a></li>
</ul>
</div>
<div class="section" id="task-change-dependency-to-require-flow3-composer-installers">
<h3>[TASK] Change dependency to require flow3/composer-installers</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=125ff01663cbea7bba36a42e3bcfb76f5d598783">125ff01</a></li>
</ul>
</div>
<div class="section" id="task-use-composer-version-of-installer">
<h3>[TASK] Use composer version of installer</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=947608e4b8d6c9aef48e0418a1ce1bf313c605a7">947608e</a></li>
</ul>
</div>
<div class="section" id="task-require-christianjul-installers-directly">
<h3>[TASK] Require christianjul/installers directly</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9a68c0eb9c7e37b1286c23d8463031c71e832d6f">9a68c0e</a></li>
</ul>
</div>
<div class="section" id="task-test-commit-for-composer-install">
<h3>[TASK] Test commit for composer install</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=37492ff27740939f24a6a272c12a30c5aefd042e">37492ff</a></li>
</ul>
</div>
<div class="section" id="task-change-requirement-to-real-composer-installer">
<h3>[TASK] Change requirement to real composer installer</h3>
<p>Also drop require-dev - only valid for root manifests</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e3f9f13dcb1fde487741447f034c0a4c0150f526">e3f9f13</a></li>
</ul>
</div>
<div class="section" id="bugfix-handle-missing-composer-type-gracefully">
<h3>[BUGFIX] Handle missing composer type gracefully</h3>
<p>The type in a composer manifest is optional, so we need to check for it&#8217;s
existence before we use it.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41334">#41334</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cb870e17847dc8ef41d4928ed67bc5ed9706af2a">cb870e1</a></li>
</ul>
</div>
<div class="section" id="task-install-web-index-php-on-composer-install">
<h3>[TASK] Install &#8220;Web/index.php&#8221; on Composer install</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41310">#41310</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=0f8b4d2fff8b5dd44b227a885a8338b63722422d">0f8b4d2</a></li>
</ul>
</div>
<div class="section" id="task-add-utility-to-get-classes-namespace-entry-point">
<h3>[!!!][TASK] Add utility to get classes namespace entry-point</h3>
<p>With PSR-0 the entry-point of the classes files needs prefixing of the
pathified namespace. Add a getter, getClassesNamespaceEntryPath(), to
resolve this.</p>
<p>Also makes sure the namespace is only resolved once.</p>
<p>Renames getPackageNamespace() to getNamespace() - adjust your code as needed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1594a523c9a5950b249f1b04e221fac61e1ccbac">1594a52</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-excludeclasses-setting-for-non-installed-package">
<h3>[BUGFIX] Allow excludeClasses setting for non-installed package</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41157">#41157</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a952d97feb4ba2802a0f182184464271585b87cc">a952d97</a></li>
</ul>
</div>
<div class="section" id="bugfix-getclassespath-returns-path-without-trailing-slash">
<h3>[BUGFIX] getClassesPath() returns path without trailing slash</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41181">#41181</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1925ba316fda179e624f4dc1a0ba76848517c0cc">1925ba3</a></li>
</ul>
</div>
<div class="section" id="task-add-code-migration-to-composerify-a-package">
<h3>[TASK] Add code migration to &#8220;composerify&#8221; a package</h3>
<p>The migration moves all class files into a PSR-0 compatible directory
structure and adds a composer manifest; Package.xml is removed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=613025176356c63973da4db8635cb99eb0f00338">6130251</a></li>
</ul>
</div>
<div class="section" id="feature-isolate-migrations-and-provide-package-data">
<h3>[FEATURE] Isolate migrations and provide package data</h3>
<p>With this change migrations have access to the data of the target
package (the package currently being migrated) and can be sure that each
migration run is isolated from other runs (the internal state is reset
for each execution).</p>
<p>The command output is tweaked a little along the way.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2e2d98f69efcb5a7ef1ce7a61946ad30c13d5fc1">2e2d98f</a></li>
</ul>
</div>
<div class="section" id="feature-add-movefile-and-deletefile-operations-to-migrations">
<h3>[FEATURE] Add moveFile() and deleteFile() operations to migrations</h3>
<p>Code migrations now can use deleteFile() and moveFile() to work on
files.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5950a7640fcf0fd069a3bda6c91b05b4259b4145">5950a76</a></li>
</ul>
</div>
<div class="section" id="feature-make-metadata-available-to-migrations">
<h3>[FEATURE] Make metadata available to migrations</h3>
<p>This makes metadata from Package.xml and composer.json available
to migrations.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bdc5a0efa8062747dd8c5f006243b4da40651cea">bdc5a0e</a></li>
</ul>
</div>
<div class="section" id="task-fix-psr-0-compatibility-for-functional-tests">
<h3>[TASK] Fix PSR-0 compatibility for functional tests</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9b9e92b1c9100ae586d0d1c0ec217c38de64e94b">9b9e92b</a></li>
</ul>
</div>
<div class="section" id="task-update-unit-tests-to-vfsstream-1-0">
<h3>[TASK] Update unit tests to vfsStream &gt; 1.0</h3>
<p>This adds &#8220;mikey179/vfsStream&#8221; to composer.json and adjusts the unit
tests to the new vfsStream API.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37813">#37813</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ef3426147586ba421d32416fd74d9a840acdd10a">ef34261</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-failing-tests-in-package-management">
<h3>[BUGFIX] Fix failing tests in package management</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41092">#41092</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41093">#41093</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=91e1881846a9aef69a46cb7713927208b0d0b1ce">91e1881</a></li>
</ul>
</div>
<div class="section" id="bugfix-packagestates-php-does-not-contains-relative-paths">
<h3>[BUGFIX] PackageStates.php does not contains relative paths</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41088">#41088</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=94761514bd3fac7bd48884569ed538cc7b8f7139">9476151</a></li>
</ul>
</div>
<div class="section" id="task-make-package-management-use-composer">
<h3>[TASK] Make package management use Composer</h3>
<p>Refactor package management to use Composer, also relax constraints in order
to utilize 3rd party composer / PSR-0 components.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6fdd85536dbf8737bcec264e7e3b1b75b6c265d2">6fdd855</a></li>
</ul>
</div>
<div class="section" id="task-exclude-specific-classes-from-object-management">
<h3>[TASK] Exclude specific classes from object management</h3>
<p>In order to exclude classes from object management - either for performance
or compatibility reasons - create a configuration that allows specific
classes to be excluded. Most be configurable outside of package in question
to support 3rd party components</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6e88cac9924a260e9275e9e4ed26919571e97991">6e88cac</a></li>
</ul>
</div>
<div class="section" id="task-handle-exceptions-thrown-in-classreflection">
<h3>[TASK] Handle exceptions thrown in ClassReflection</h3>
<p>When a class cannot be loaded for reflection, it will be ignored and a message
is logged.</p>
<p>This makes sure that classes that are never used do not break the system. If
they are indeed used later, things will still break, but even at a more
helpful position.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b811e14723bf45c0c5ddcb8fbcccca2429a4fcd9">b811e14</a></li>
</ul>
</div>
<div class="section" id="task-add-composer-installer-script-and-resources">
<h3>[TASK] Add Composer installer script and resources</h3>
<p>Upon running &#8216;install&#8217; or &#8216;update&#8217; with composer, required paths
and files outside of TYPO3.FLOW3 package must be created.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f9b09a912bbe4f27cd0db982d3b58d2c18bfdf9c">f9b09a9</a></li>
</ul>
</div>
<div class="section" id="task-add-composer-manifest">
<h3>[TASK] Add composer manifest</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f227c3091edc3795b3b830782b512ddd2b366902">f227c30</a></li>
</ul>
</div>
<div class="section" id="task-update-referenced-paths-to-reflect-psr-0-paths">
<h3>[TASK] Update referenced paths to reflect PSR-0 paths</h3>
<p>See Idad621923ffccdb7b2742d9aba0ff22fdab3e192 for the files being moved.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5c1bde47804d8b182432d1d88776ae958cd30ed5">5c1bde4</a></li>
</ul>
</div>
<div class="section" id="task-move-all-classes-to-psr-0-compatible-path">
<h3>[!!!][TASK] Move all classes to PSR-0 compatible path</h3>
<p>In order to be fully PSR-0 compatible the path below the classes
directory should now be in a path identical to the namespace</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6a5d4d75284f2d35ab3f694f74fc588f6b2c4986">6a5d4d7</a></li>
</ul>
</div>
<div class="section" id="feature-provide-flag-for-disabling-link-protection-in-uribuilder">
<h3>[FEATURE] Provide flag for disabling link protection in UriBuilder</h3>
<p>This introduces a new flag for the UriBuilder which allows to configure
if a link built by the UriBuilder may be modified by some security
mechanism or not. FLOW3&#8217;s CSRF protection mechanism now considers this
flag.</p>
<p>By disabling link protection, it is now possible on a per-link basis,
to generate a link without CSRF protection tokens for cases when it&#8217;s
clear that links are public.</p>
<p>This patch also removes the CSRF protection of links used in ExtDirect
services. This needs to be re-implemented in the ExtJS package.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41137">#41137</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2058a64d73c74a6a647115af95112fa05039bfeb">2058a64</a></li>
</ul>
</div>
<div class="section" id="feature-convenience-function-for-registering-routes-in-functional-tests">
<h3>[FEATURE] Convenience function for registering routes in functional tests</h3>
<p>This adds a new convenience function registerRoute() to the functional
base testcase.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/41136">#41136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6562a48e802265d404f1d80c6154a2280b122aa9">6562a48</a></li>
</ul>
</div>
<div class="section" id="bugfix-debugger-now-respects-possible-occurence-of-closures">
<h3>[BUGFIX] Debugger now respects possible occurence of Closures</h3>
<p>A trial isset() call for a property of a Closure resulted in a PHP
error saying &#8220;Closure objects cannot have properties&#8221;. To avoid this,
the isset() statement has been replaced with a property_exists().</p>
<p>This is considered slower than isset(), like claimed in a User Contributed
Note [1], but obviously the only workaround for these cases [2]. And speed
is not an issue when the debugger is used…</p>
<p>[1] <a class="reference external" href="http://www.php.net/manual/en/function.property-exists.php#97538">http://www.php.net/manual/en/function.property-exists.php#97538</a>
[2] <a class="reference external" href="https://bugs.php.net/bug.php?id=50146">https://bugs.php.net/bug.php?id=50146</a></p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41046">#41046</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=15d38605eb1e2597357ef0705cf70bf8303f97bb">15d3860</a></li>
</ul>
</div>
<div class="section" id="task-adjust-csrfprotectionaspect-unit-test">
<h3>[TASK] Adjust CsrfProtectionAspect unit test</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/40984">#40984</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e1f227cb3341b6f12436c9928d8903e28a0b703f">e1f227c</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-sure-autoloader-is-always-unregistered">
<h3>[BUGFIX] Make sure autoloader is always unregistered</h3>
<p>ClassReflection adds an autoloader to catch cases of unresolved
classes. This autoloader needs to be unregistered reliably after
use.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40989">#40989</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=dfc34e543391eab3aad5fd210eefe27050f2393a">dfc34e5</a></li>
</ul>
</div>
<div class="section" id="bugfix-cleanup-csrf-protection-issues">
<h3>[BUGFIX] Cleanup CSRF protection issues</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40984">#40984</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4574114c6c3e56be84b214c7993da87f036b18b4">4574114</a></li>
</ul>
</div>
<div class="section" id="task-clarify-parent-request-type-in-docblocks">
<h3>[TASK] Clarify parent request type in docblocks</h3>
<p>Instead of just &#8220;object&#8221; this uses a more specific type in a few
docblocks (&#8220;ActionRequest|HttpRequest&#8221;).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a081efa618f57b7e582b8b6a0110e18775570840">a081efa</a></li>
</ul>
</div>
<div class="section" id="task-whitespace-fix-in-class-docblock">
<h3>[TASK] Whitespace fix in class docblock</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d9b71a6532240191cb37d84dbe5862ba1ea495e1">d9b71a6</a></li>
</ul>
</div>
<div class="section" id="bugfix-display-error-message-if-data-is-not-writeable">
<h3>[BUGFIX] Display error message if &#8220;Data/&#8221; is not writeable</h3>
<p>If the directory &#8220;Data/&#8221; or &#8220;Data/Persistent/&#8221; does not exist and could
not be created by the bootstrap, an error message is now displayed which
hints on using the setfilepermissions command.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40890">#40890</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=939181e9b8e78d8c8304c5d04cc275fb55d2c226">939181e</a></li>
</ul>
</div>
<div class="section" id="bugfix-parse-target-type-before-comparing-the-instance-with-it">
<h3>[BUGFIX] Parse target type before comparing the instance with it</h3>
<p>The PropertyMapper chokes on already converted Objects if the targetType
is a compositeType like Collection&lt;Entity&gt;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40661">#40661</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4168539bb817cf17d0a17bff562c4d2694ada3e6">4168539</a></li>
</ul>
</div>
<div class="section" id="task-small-code-cleanup-in-reflectionservice">
<h3>[TASK] Small code cleanup in ReflectionService</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5ea591536b41e99ff96b279e7878696274ce28d8">5ea5915</a></li>
</ul>
</div>
<div class="section" id="bug-fix-wrong-escape-sequence-in-yaml">
<h3>[BUG] Fix wrong escape sequence in yaml</h3>
<p>Backslash is not a valid escape-character in yaml for single-
quoted strings.</p>
<p>see: <a class="reference external" href="http://yaml.org/spec/current.html#id2534365">http://yaml.org/spec/current.html#id2534365</a></p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40840">#40840</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=604406e9908306b19f0725c257bc212e6188ea6e">604406e</a></li>
</ul>
</div>
<div class="section" id="task-custom-error-page-higher-priority-for-class-matches">
<h3>[TASK] Custom error page: higher priority for class matches</h3>
<p>All custom error rendering options should be evaluated for
matches of the exception class name before trying to match
against status code because the latter are often used as
fallback options (for example, 404 for anything not found).</p>
<p>The TYPO3.TYPO3 package wouldn&#8217;t be able to display a specific
&#8220;Missing Homepage&#8221; error message without this patch because
FLOW3&#8217;s 404 handling would kick in before.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39423">#39423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9b28224c55b04a88b545c5ee6732c63d6ffb591a">9b28224</a></li>
</ul>
</div>
<div class="section" id="task-handle-errors-in-subprocesses-properly">
<h3>[TASK] Handle errors in subprocesses properly</h3>
<p>To be able to properly handle missing class dependencies in ClassReflection
a ClassLoader should be added to end of the ClassLoader chain that throws
an exception if it&#8217;s reached, meaning the class couldn&#8217;t be loaded.</p>
<p>Make executeCommand throw an exception on errors, rather than just echo any
command output collected.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39599">#39599</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e590a18ea3b12b73e01fe890bb3df72d901325bb">e590a18</a></li>
</ul>
</div>
<div class="section" id="feature-custom-error-renderers">
<h3>[!!!][FEATURE] Custom Error Renderers</h3>
<p>This extends the exception handlers so that they can render arbitrary
templates based on the status code and/or class name of the thrown
exception.</p>
<p>The template to be used and variables that should be passed to the
template are configured in so called &#8220;renderingGroups&#8221; in the options
of the exception handler.</p>
<p>This is a breaking change because it deprecates the provided
NotFoundController &amp; NotFoundView.</p>
<p>This patch also contains the related documentation, including general
information about FLOW3&#8217;s error handling.</p>
<p>Also included in this patch is an update to the YAML schema definitions.</p>
<p>Furthermore, removed all hints on &#8220;FLOW3&#8221; from the production exception
handler.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39423">#39423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=20e41f38b36482eb3cd861463885e1a032111be4">20e41f3</a></li>
</ul>
</div>
<div class="section" id="feature-add-identifier-to-booting-sequence">
<h3>[FEATURE] Add identifier to Booting\Sequence</h3>
<p>The identifier is set in Bootstrap to &#8220;runtime&#8221; and &#8220;compiletime&#8221;
respectively.</p>
<p>If you wire a slot to the beforeInvokeStep and afterInvokeStep
signals, the identifier will be handed over as second parameter
after the step instance.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38424">#38424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e69479279c5aa98905cb603df4a907d48759b9a2">e694792</a></li>
</ul>
</div>
<div class="section" id="task-add-logging-to-importresource-and-createresource">
<h3>[TASK] Add logging to importResource() and createResource()</h3>
<p>When importing or creating a resource fails, the reason is
logged to the system log.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=228cb5486d0b3ab7c0fa97dea821c807a977857a">228cb54</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-failing-unittests-for-new-authenticationcontroller">
<h3>[BUGFIX] Fix failing UnitTests for new AuthenticationController</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40760">#40760</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6ba2ae145d740bb2d8333072d3fc23040c3f09b7">6ba2ae1</a></li>
</ul>
</div>
<div class="section" id="bugfix-always-add-csrf-token-if-authenticated">
<h3>[BUGFIX] Always add CSRF token, if authenticated</h3>
<p>This ensures that the CSRF token is also present
if the main request is not restricted, but if
the subrequests is.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=443d6f1ad3f9aa76e43f18700eb38a9363db4aa5">443d6f1</a></li>
</ul>
</div>
<div class="section" id="feature-provide-a-general-abstract-authentication-controller">
<h3>[FEATURE] Provide a general abstract authentication controller</h3>
<p>This can be used to be inherited from in a custom package,
to enable developers to quickly implement their own
authentication controller.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39839">#39839</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3eb7b5c080809497168ee36890c708ebc9a2e492">3eb7b5c</a></li>
</ul>
</div>
<div class="section" id="task-fix-return-type-documentation-of-createquery">
<h3>[TASK] Fix return type documentation of createQuery</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f7f467133705e2d86e98da4d6c35a432dbf40c7e">f7f4671</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-sql-logging-in-production-context">
<h3>[BUGFIX] Fix SQL logging in Production context</h3>
<p>The logger factory in Objects.yaml refers to a Setting directive which
with this change is present in Production context. Before, the Settings
could not be found, resulting in a NULL argument where an array is
expected as soon as query logging was enabled in Production.</p>
<p>Some cleanup to logging settings along the way.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40580">#40580</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=007e41ba3e8906661647579ecba37720be968f3b">007e41b</a></li>
</ul>
</div>
<div class="section" id="feature-improved-argument-type-watch-in-html-debug-backtrace">
<h3>[FEATURE] Improved argument type watch in HTML debug backtrace</h3>
<p>In the debug backtrace of method calls, this gives concrete
information about the actual argument values in case of being
boolean; and reveals the amount of array elements, if such.</p>
<p>An array is now presented as <tt class="docutils literal"><span class="pre">array|2|</span></tt> for example, if
it has two elements.</p>
<p>Boolean values are not longer only displayed as <tt class="docutils literal"><span class="pre">boolean</span></tt>,
but as their concrete TRUE or FALSE value accordingly. Since
the color scheme stays the same, it can still easily be
distinguished from string values.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39879">#39879</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d953765612a7a7f94cee46f77ceb94034be81e4c">d953765</a></li>
</ul>
</div>
<div class="section" id="bugfix-session-timeout-shouldn-t-be-changed-to-10-seconds">
<h3>[BUGFIX] Session Timeout shouldn&#8217;t be changed to 10 seconds</h3>
<p>This reverts the changed session timeout setting introduced
in If7d004c7.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40657">#40657</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3ef0662e1abcd80c530fc9386a629f96404fb983">3ef0662</a></li>
</ul>
</div>
<div class="section" id="bugfix-internalrequestengine-observes-exception-status-code">
<h3>[BUGFIX] InternalRequestEngine observes exception status code</h3>
<p>The InternalRequestEngine set the status code in case of an exception
to 500 in any case. With this change it will instead use the code
defined in an exception, if available.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40658">#40658</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4b479b2e5d13cec7eef8ba7184394d331d1eca31">4b479b2</a></li>
</ul>
</div>
<div class="section" id="bugfix-prevent-data-from-destroyed-session-from-being-loaded">
<h3>[BUGFIX] Prevent data from destroyed session from being loaded</h3>
<p>This fixes a problem with session data which is being unserialized
even though its session is about to be destroyed. Because the
time of the last activity was stored in the session and needs to be
retrieved in order to determine if the session is still valid, also all
other session data is being unserialized by PHP. This results in
session scope objects registering themselves at the Object Manager
due to their code in __wakeup().</p>
<p>Now the session time out is not stored in the session anymore but
in its own cookie. Therefore the session data is only unserialized
if the session is still valid.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37001">#37001</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1b409cc3eeb853ee6a733e627752839f6050ce62">1b409cc</a></li>
</ul>
</div>
<div class="section" id="bugfix-throw-exception-on-csrf-token-error">
<h3>[BUGFIX] Throw exception on CSRF token error</h3>
<p>Currently, if a required CSRF token is missing or invalid,
FLOW3 dies with a hard coded &#8220;Access denied!&#8221;.</p>
<p>This change disables the try/catch blocks in the
RequestDispatchingAspect so that the access denied
exception is actually rendered.</p>
<p>This shouldn&#8217;t pose a security issue as details are hidden
in production context.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27798">#27798</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1b3a9e25b1ee2738ea30547d395e9f6b576af4fa">1b3a9e2</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-request-injection-in-security-context">
<h3>[BUGFIX] Fix request injection in security context</h3>
<p>As inject* methods are excluded from the session
lazy loading proxy mechanism, the injectRequest
method of the security context didn&#8217;t work correctly
in requests with a session timeout. Renaming the
method to setRequest solves the problem.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37001">#37001</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d1c1372ce0e69abfac9716b493ed878e4a16baa">8d1c137</a></li>
</ul>
</div>
<div class="section" id="feature-enable-functional-tests-to-be-executed-by-non-cli-sapi">
<h3>[FEATURE] Enable functional tests to be executed by non CLI SAPI</h3>
<p>The FunctionalTestRequestHandler should be executable by non CLI requests to
enable TestRunners like VisualPHPUnit.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40273">#40273</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d01cdf42987f9d1104f93ca785a69a69eebbd7e">8d01cdf</a></li>
</ul>
</div>
<div class="section" id="feature-curl-request-engine-for-http-browser">
<h3>[FEATURE] cURL request engine for HTTP browser</h3>
<p>This provides a new request engine, based on cURL,
which can be used with the virtual browser contained
in FLOW3&#8217;s HTTP foundation. It can be used to send
requests and receive responses via HTTP.</p>
<p>This patch also contains a few minor modifications in
the RequestEngineInterface and InternalRequestEngine
class.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40414">#40414</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=20a8c74c3b5db0ce787c72cfdc44249a806690a1">20a8c74</a></li>
</ul>
</div>
<div class="section" id="bugfix-misused-joincolumns-in-manytomany">
<h3>[!!!][BUGFIX] Misused JoinColumns in ManyToMany</h3>
<p>With this fix the JoinColumns are created and used in the same
way regardless if you have a JoinTable annotation.</p>
<p>This is (almost) a cosmetic fix as it works without, but can lead
to confusion if looking at the database.</p>
<p>Breaking change as the JoinColumns could change if you annotated
with JoinTable.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33397">#33397</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f8b0bb7ac110f0e3c5d9fae6e252fc9e326b4da9">f8b0bb7</a></li>
</ul>
</div>
<div class="section" id="bugfix-don-t-override-orphanremoval-setting-from-doctrine">
<h3>[!!!][BUGFIX] Don&#8217;t override orphanRemoval setting from Doctrine</h3>
<p>In Doctrine 2 ORM, orphanRemoval is disabled by default. In FLOW3 we want
orphanRemoval to happen, if the target is not an aggregate root, changing
the default Doctrine behavior.</p>
<p>Because we want developers to be able to override that override, we had a
check in place, to favor the setting coming from the annotation. But since
there is no way to check if the FALSE in the orphanRemoval of an annotation
is the default or has been explitly set, this would fail to allow an
override with FALSE.</p>
<p>For many-to-many we thus assume that orphanRemoval is very rarely a
useful thing, and thus skip our own default handling.</p>
<p>If you want orphanRemoval on many-to-many associations, you now must
explicitly enable it with the annotation option!</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40389">#40389</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ca60d48ec5f7fc4e39c5a833c429ea83411e1fa5">ca60d48</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-headers-has-for-cache-control">
<h3>[BUGFIX] Fix Headers::has() for Cache-Control</h3>
<p>The Http\Headers::get() method now correctly returns
TRUE if a cache control header exists.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40372">#40372</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=28fc7e7b717218ee69516112373bd5b6a7c9237a">28fc7e7</a></li>
</ul>
</div>
<div class="section" id="task-add-windows-version-hint-to-documentation">
<h3>[TASK] Add Windows version hint to documentation</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38038">#38038</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fe8c0786c1421d1ac379eb2ce619b66b018cc85c">fe8c078</a></li>
</ul>
</div>
<div class="section" id="task-detect-inject-methods-more-strictly">
<h3>[TASK] Detect inject methods more strictly</h3>
<p>Currently every method starting with &#8220;inject&#8221; is considered
for property injection by the ConfigurationManager.
That includes methods named &#8220;inject&#8221; or &#8220;injectionFoo&#8221;.</p>
<p>This change makes the detection more strict to only accept
methods that start with &#8220;inject&#8221; followed by an upper case
character.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39681">#39681</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=45f872a57b3a07b7d08e3136f42effa3ebb15072">45f872a</a></li>
</ul>
</div>
<div class="section" id="feature-make-webredirect-entrypoint-less-routing-dependent">
<h3>[FEATURE] Make WebRedirect EntryPoint less Routing dependent</h3>
<p>The WebRedirect currently expects an option uri that points
to a relative or absolute URI to redirect when trying to access
a protected action.</p>
<p>This change makes it possible to specify route values instead
so that the Routing framework can determine the correct target
URI depending on the Routes.yaml configuration.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39837">#39837</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=94c0c7bb26561a09a7df527a76572188ab8e06a9">94c0c7b</a></li>
</ul>
</div>
<div class="section" id="bugfix-loop-confuses-variable-check-on-migrating">
<h3>[BUGFIX] Loop confuses variable check on migrating</h3>
<p>When migrating code and not specifying a package to work on, the code
would get confused after the first available migration, because the
internal loop used $packageKey as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/40263">#40263</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d8d6fee4ae3e177c5b4f4509126c266f5410ef68">d8d6fee</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0">
<h3>[TASK] Add changelog for FLOW3 1.1.0</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a47ccbf01bc7924571cb20497c47ec857525bec0">a47ccbf</a></li>
</ul>
</div>
<div class="section" id="feature-allow-mapping-of-indexed-property-names-with-placeholder">
<h3>[FEATURE] Allow mapping of indexed property names with placeholder</h3>
<p>For multi-valued property types (Doctrine\Common\Collections\Collection or
array) the property mapper uses indexes as property names. To match the
property mapping configuration for any index, the path syntax supports an
asterisk as a placeholder:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$propertyMappingConfiguration</span>
        <span class="o">-&gt;</span><span class="na">forProperty</span><span class="p">(</span><span class="s1">&#39;items.*&#39;</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setTypeConverterOption</span><span class="p">(</span>
                <span class="s1">&#39;TYPO3\\FLOW3\\Property\\TypeConverter\\PersistentObjectConverter&#39;</span><span class="p">,</span>
                <span class="nx">\\TYPO3\\FLOW3\\Property\\TypeConverter\\PersistentObjectConverter</span><span class="o">::</span><span class="na">CONFIGURATION_CREATION_ALLOWED</span><span class="p">,</span>
                <span class="k">TRUE</span>
        <span class="p">);</span>
</pre></div>
</div>
<p>This also works recursively, as in &#8216;items.*.author&#8217;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37436">#37436</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=faaee920c10087dad46980131ea01f41d40071bd">faaee92</a></li>
</ul>
</div>
<div class="section" id="add-changelog-for-flow3-1-0-6">
<h3>Add changelog for FLOW3 1.0.6</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4fcbba8108b5e9911a97827a684b9feeb6ac8c27">4fcbba8</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-reflection-on-php-5-3-16">
<h3>[BUGFIX] Fix reflection on PHP 5.3.16</h3>
<p>The fix for <a class="reference external" href="https://bugs.php.net/62715">https://bugs.php.net/62715</a> landed in PHP 5.3.16, and because of
<a class="reference external" href="https://bugs.php.net/62874">https://bugs.php.net/62874</a> reflection fails (in Production context) with a
pretty unhelpful exception:</p>
<blockquote>
<div>Fatal error: Uncaught exception … with message &#8216;Parameter is not optional&#8217; in …</div></blockquote>
<p>This change adds an additional check with isOptional() to the relevant code
part.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40003">#40003</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2dbfd8fe92a617e5f01339d8acae1a1287de2c5c">2dbfd8f</a></li>
</ul>
</div>
<div class="section" id="bugfix-alphanumeric-validator-fails-on-umlauts">
<h3>[BUGFIX] Alphanumeric-Validator fails on umlauts</h3>
<p>This change adds support for umlauts in the AlphanumericValidator,
by changing the regex pattern to [:alnum:] and adding utf-8 mode flag.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35295">#35295</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f1fa75067c1b58424b0be2d319696b9c01c34605">f1fa750</a></li>
</ul>
</div>
<div class="section" id="feature-control-validation-groups-via-annotations">
<h3>[FEATURE] Control Validation Groups via annotations</h3>
<p>This feature adds support for overriding validation groups in actions through
&#64;FLOW\ValidationGroups annotation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36695">#36695</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=46ea9e11c74db201fd7dc127e618f657f8784d12">46ea9e1</a></li>
</ul>
</div>
<div class="section" id="cleanup-some-cgl-fixes">
<h3>[CLEANUP] Some CGL fixes</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d554ec231394c737dce09c4d672ef34ba03a92e5">d554ec2</a></li>
</ul>
</div>
<div class="section" id="task-increase-branch-version-number-to-1-2">
<h3>[TASK] Increase branch version number to 1.2</h3>
<p>This updates the constant in Bootstrap.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f7c29db8d4186d06a0f19b1214249c8ad89843c4">f7c29db</a></li>
</ul>
</div>
<div class="section" id="task-get-rid-of-strtolower-in-foreach-loop">
<h3>[TASK] Get rid of strtolower() in foreach loop</h3>
<p>A tiny optimization I could not resist.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=41267d166924f51b770cf8de360a8bb74484b0c2">41267d1</a></li>
</ul>
</div>
<div class="section" id="task-fix-markup-errors-on-documentation">
<h3>[TASK] Fix markup errors on documentation</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=522057e5fbab87ee606039023c93cad3a1b7dfbf">522057e</a></li>
</ul>
</div>
<div class="section" id="feature-cookie-management-support">
<h3>[FEATURE] Cookie management support</h3>
<p>This implements the cookie management feature
which previously only existed as a stub in the
HTTP foundation.</p>
<p>This patch also contains the corresponding tests
and documentation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39836">#39836</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ea08462aeba9427b7bfe128ea15e1b67dc1542b2">ea08462</a></li>
</ul>
</div>
<div class="section" id="wip-task-new-chapter-mvc">
<h3>[WIP][TASK] New chapter: MVC</h3>
<p>This adds a new chapter to The Definitive Guide.</p>
<p>Also adjust some mentions of &#8220;DocComment&#8221; in other chapters
and adds a stub for a section about HMAC to the security chapter.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/3881">#3881</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d96192477241d8d04a00db0089b04b8dab911fe1">d961924</a></li>
</ul>
</div>
<div class="section" id="feature-validate-email-addresses-with-filter-var">
<h3>[FEATURE] Validate email addresses with filter_var()</h3>
<p>This change makes FLOW3 use filter_var instead of a regex check
to validate email addresses.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39714">#39714</a></li>
<li>Extbase Issue: <a class="reference external" href="http://forge.typo3.org/issues/6970">#6970</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bf268108c0bcad6559a52918810dcba92bcc3fb4">bf26810</a></li>
</ul>
</div>
<div class="section" id="bugfix-propertymapper-should-be-able-to-work-with-recursive-already-converted-objects">
<h3>[BUGFIX] PropertyMapper should be able to work with recursive already-converted objects</h3>
<p>If f.e. an array of already converted objects is passed into the PropertyMapper, a fatal error
will be thrown.</p>
<p>Thus, we move the check from convert() to doMapping() such that it works recursively.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39445">#39445</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8ac03660b9c5835d67f9f514b3035fa2e9eb2dd5">8ac0366</a></li>
</ul>
</div>
<div class="section" id="feature-added-some-signals-for-the-debug-toolbar">
<h3>[FEATURE] Added some Signals for the Debug.Toolbar</h3>
<ul class="simple">
<li>added an Signal to AbstractAdvice on Advice invocation</li>
<li>added an Signal to ActionRequest when it&#8217;s dispatched</li>
<li>added getSignals to the SignalSlot\Dispatcher to get all configured Signals
with it&#8217;s slots</li>
</ul>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37879">#37879</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=713ca78986cc5d2c1b486a4a8a8ef84e5ee59c65">713ca78</a></li>
</ul>
</div>
<div class="section" id="feature-configurable-cli-subrequest-environment-variables">
<h3>[FEATURE] Configurable CLI Subrequest environment variables</h3>
<p>When debugging with xdebug, a major difficulty is that in development
and functional tests, there are always two requests being executed:
The main request and a CLI request inside.</p>
<p>Now, most IDEs do not support the (optional) feature of multi-threaded
PHP debugging, effectively stopping the sub-request and also the main
request in this case.</p>
<p>With this change it&#8217;s possible to change xdebug configuration settings
for the CLI subrequests making it possible to debug them individually.
By default the remote port is now changed from 9000 to 9001 in
Development and Testing context. So you can debug the subrequest by
configuring your IDE to listen on port 9001.</p>
<p>Apart from that, this change allows you to set arbitrary environment
variables by adding entries to the
TYPO3.FLOW3.core.subRequestEnvironmentVariables setting.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39648">#39648</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cfa70692f78516d136d180598d0b689848ee0b4f">cfa7069</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-warning-about-property-injection-in-test">
<h3>[BUGFIX] Fix warning about property injection in test</h3>
<p>The DependencyInjectionTest testcase has a test called
injectionInParentClassIsDoneOnlyOnceOnCreationOfObject, leading to FLOW3
trying to use the inject method for the property
&#8220;ionInParentClassIsDoneOnlyOnceOnCreationOfObject&#8221;…</p>
<p>This change renames the test method to fix this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39681">#39681</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a7fdef8459cee547770e3cf5611bd79b4fc169fc">a7fdef8</a></li>
</ul>
</div>
<div class="section" id="task-support-literal-strings-in-boolean-arguments">
<h3>[TASK] Support literal strings in boolean arguments</h3>
<p>This change adds support for string literals in boolean comparisons.
String literals have to be surrounded by single or double quotes and
may contain escaped single or double quotes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/6757">#6757</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3b47daf59e958b06eb6ae21b7986b3170dc17547">3b47daf</a></li>
</ul>
</div>
<div class="section" id="task-add-section-about-uri-class-in-http-chapter">
<h3>[TASK] Add section about Uri class in HTTP chapter</h3>
<p>This adds some explanation for the use of the Uri class.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39424">#39424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=68d19d7f323eeae42de93be85326ad8d0321a061">68d19d7</a></li>
</ul>
</div>
<div class="section" id="task-new-chapter-http">
<h3>[TASK] New chapter: HTTP</h3>
<p>This adds a new chapter to The Definitive Guide</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39424">#39424</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a0db61b7c70c9d88845894d00181ccb2b4486d7b">a0db61b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-some-outdated-code-examples-in-part-ii">
<h3>[BUGFIX] Fix some outdated code (examples) in Part II</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39374">#39374</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=aafcbb696c90d9e8b81f6428ed7cd08be4be20bd">aafcbb6</a></li>
</ul>
</div>
<div class="section" id="bugfix-disable-proxy-building-for-http-classes">
<h3>[BUGFIX] Disable proxy building for Http classes</h3>
<p>This disables proxy building for (most of) the classes in
the Http part of FLOW3.</p>
<p>They are not needing it and some would circumvent the built
proxy because they are instantiated statically.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39005">#39005</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=868e073b9877d562c6ed65a5158c1c67b3a501a8">868e073</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-arguments-rendering-for-dumped-backtraces">
<h3>[BUGFIX] Fix arguments rendering for dumped backtraces</h3>
<p>When an exception was dumped to Data/Logs/Exceptions/…txt all
arguments were doubled, once with parenthesis around them, once
without. This change fixes this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38625">#38625</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=09d4a7203cf84ba031d1ea27e9318e5c1cf16b2c">09d4a72</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow3-s-var-dump-still-chokes-on-doctrine-collections">
<h3>[BUGFIX] FLOW3&#8217;s var_dump() still chokes on Doctrine collections</h3>
<p>Using Doctrine\Common\Util\Debug::export() to render doctrine
collections leads to an exception because our Debugger expects
a string and doctrine&#8217;s debugger returns an array.
This change fixes this by post processing the result.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39286">#39286</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37481">#37481</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fd3eaff01fa0f8ce6ee3c3c4817db4d67d252089">fd3eaff</a></li>
</ul>
</div>
<div class="section" id="bugfix-corrected-annotation-of-assign-method-in-viewinterface">
<h3>[BUGFIX] Corrected annotation of assign method in ViewInterface</h3>
<p>A view is basically intended to be able to get arbitrary values,
hence data types assigned, so the annotation gets corrected to
accomodate for this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39293">#39293</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9ede9cc9fedde3ac39d53e06556f70d333e1371a">9ede9cc</a></li>
</ul>
</div>
<div class="section" id="task-new-chapter-command-line">
<h3>[TASK] New chapter: Command Line</h3>
<p>This is a new chapter for The Definitive Guide.
Also marked the executeCommand() method in the
Scripts class as an &#64;api function.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38944">#38944</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8f9b4491bfeff21fe1e156366bd2a31a0874e772">8f9b449</a></li>
</ul>
</div>
<div class="section" id="bugfix-rsawalletservice-save-keys-only-if-modified">
<h3>[BUGFIX] RsaWalletService: Save keys only if modified</h3>
<p>This patch adds a check to the shutdown() method of the
RsaWalletServicePhp to make sure that the keys are only
saved to disk if they were actually modified.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39267">#39267</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=752e4a6dc404667071261e9c210b867068cc7e01">752e4a6</a></li>
</ul>
</div>
<div class="section" id="bugfix-missing-setting-namespace-in-error-message">
<h3>[BUGFIX] Missing setting namespace in error message</h3>
<p>When an invalid PHP binary is found, the error message hint at setting
the path in settings misses the setting namespace TYPO3 in the beginning.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39142">#39142</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=32c8a20b3f512831ffc05402f1b72344df529e65">32c8a20</a></li>
</ul>
</div>
<div class="section" id="task-fix-partial-validation-example">
<h3>[TASK] Fix partial validation example</h3>
<p>The partial validation example was flawed. This change updates the
example to an actual working usecase.</p>
<p>Credits to Ruud Alberts for finding.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c95d732a3343e09c6b6903174214a57676de9cff">c95d732</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-rc2">
<h3>[TASK] Add changelog for FLOW3 1.1.0-rc2</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2f1a4ef8f6ef96b8613efe9ff3fb4a1db9449cb0">2f1a4ef</a></li>
</ul>
</div>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>This updates command, type converter and Fluid VH references.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=76c814b7bed7118bf2bab04e043ff3b15765f3b1">76c814b</a></li>
</ul>
</div>
<div class="section" id="feature-catch-pdoexceptions-to-prevent-database-information-in-debug-backtrace">
<h3>[FEATURE] Catch PDOExceptions to prevent database information in debug backtrace</h3>
<p>Add catching of \PDOExceptions to the Doctrine Query class, and output the
exception message &amp; code, but prevent the debug backtrace leading up to
it, since it contains the database information in the method calls.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37360">#37360</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4df796af78cca60f1fddb5ea09cec0081908dd86">4df796a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-broken-links-standardview-template">
<h3>[BUGFIX] Fix broken links StandardView template</h3>
<p>The links pointed to URLs no longer working.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39062">#39062</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2b2fcaab6f34eb6bb2ad4cfc01770bd3d492d9ec">2b2fcaa</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-functional-tests-after-floatconverter-change">
<h3>[BUGFIX] Fix functional tests after FloatConverter change</h3>
<p>Somehow two failing functional tests went unnoticed so far,
broken with Ib95c52d958d765eb0a9cd20e415642186e25ee57.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36333">#36333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b83b9b43d5872829e60b36fb2b554669755453e3">b83b9b4</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-repositoryinterface">
<h3>[!!!][BUGFIX] Correct RepositoryInterface</h3>
<p>Fixes a docblock and adds __call() to the interface (thus the breaking
change flag), because everyone probably would expect it to be there.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38840">#38840</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f305aee0395b20a1a3de6d91dd9aed3cc7ecec98">f305aee</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-return-values-of-doctrine-repository-magic-methods">
<h3>[!!!][BUGFIX] Fix return values of Doctrine\Repository magic methods</h3>
<p>Overrides __call from EntityRepository to make the methods return
the expected QueryResultInterface. Also adds support for countBy().</p>
<p>This is marked as a breaking change because if you relied on the
specific return values before, you need to adjust your code.</p>
<p>Along the way the code inside __call() is simplified.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38841">#38841</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=934c2c425de2f0eb71c8df18a7dda1860445239f">934c2c4</a></li>
</ul>
</div>
<div class="section" id="feature-floatconverter-uses-locale-parser">
<h3>[FEATURE] FloatConverter uses Locale parser</h3>
<p>If configured using the Property Mapping Configuration,
the FloatConverter now can also use the Locale parser
to get the intended <cite>float</cite> value from a string input.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36333">#36333</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d10d076b3116d5eea2c124ad8a3a0ede4da6ee6c">d10d076</a></li>
</ul>
</div>
<div class="section" id="task-correct-typos-in-coding-guidelines">
<h3>[TASK] Correct typos in Coding Guidelines</h3>
<p>This corrects some typos in PartV/CodingGuidelines of the
documentation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d743972f5f5ed2f8d9736faeaa40df90c06d0279">d743972</a></li>
</ul>
</div>
<div class="section" id="task-minor-typo-corrections-in-code">
<h3>[!!!][TASK] Minor typo corrections in code</h3>
<p>This trivially corrects some typos in code.</p>
<p>As a consequence, the DataNotSerializeableException was renamed
to DataNotSerializableException.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c86356cca0346dcfa1327f47a0c24f5ea01fb7e8">c86356c</a></li>
</ul>
</div>
<div class="section" id="task-document-configuration-validation">
<h3>[TASK] Document configuration validation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38680">#38680</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9f4dba0552745df3e384da4f69ee5068b597263e">9f4dba0</a></li>
</ul>
</div>
<div class="section" id="bugfix-injections-only-on-last-level-of-class-hierarchy">
<h3>[BUGFIX] Injections only on last level of class hierarchy</h3>
<p>Property injections are no longer called for every level of your
class hierarchy, which means they are only executed once now.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31179">#31179</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f9330b400d4fe8cac7e486becef043a9f82e1dca">f9330b4</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-order-of-monitoring-and-proxy-building">
<h3>[BUGFIX] Fix order of monitoring and proxy building</h3>
<p>During bootstrap file monitoring would be run too late,
so that while change detection worked fine, the results
were not used correctly: Reflection data was updated,
but that happened after DI proxy building, so that e.g.
added Inject annotations would not have the expected
effect.</p>
<p>This change moves file monitoring before reflection
initialization to fix this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37574">#37574</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d35532647cd6c6279ff1c5e7cc9123371778c1f1">d355326</a></li>
</ul>
</div>
<div class="section" id="task-add-typeconverter-reference">
<h3>[TASK] Add TypeConverter reference</h3>
<p>Tweaks the DateTimeConverter docblock to be proper reST.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38646">#38646</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=16e149351ab162cfe613b707461ac6eef6707e3f">16e1493</a></li>
</ul>
</div>
<div class="section" id="task-add-http-status-code-to-exceptions">
<h3>[TASK] Add HTTP status code to exceptions</h3>
<p>Currently if an exception is rendered with either Debug-
or ProductionExceptionHandler the HTTP status is set to
&#8220;500 Internal Server Error&#8221;.</p>
<p>This change adds a property &#8220;statusCode&#8221; to the FLOW3
base Exception allowing to set a custom HTTP status code.</p>
<p>This also sets status codes for some of the FLOW3 exceptions</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27798">#27798</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2a3bfd1e3ff6d07f7a79f245e1c61dfa9e182de1">2a3bfd1</a></li>
</ul>
</div>
<div class="section" id="task-create-reflection-manual-page">
<h3>[TASK] Create Reflection manual page</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38561">#38561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=205d209a4f0c998665cfa89d5349b1a32fcd0d46">205d209</a></li>
</ul>
</div>
<div class="section" id="task-tweak-typeconverter-extends-statements">
<h3>[TASK] Tweak TypeConverter extends statements</h3>
<p>Use short class names for extends in TypeConverters.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38646">#38646</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=69d2705ca5012994cc66d86370521c5488f4dba0">69d2705</a></li>
</ul>
</div>
<div class="section" id="task-remove-flow3-s-magic-timezone-setting-behavior">
<h3>[!!!][TASK] Remove FLOW3&#8217;s magic timezone setting behavior</h3>
<p>FLOW3 used to magically set a default timezone if there&#8217;s none set
(in order to avoid the PHP notice being thrown, resulting in an
exception).</p>
<p>Because every default time zone will be the wrong one for most people;
and to raise awareness of having to care about the system&#8217;s time zone,
this behavior is dropped.</p>
<p>This change is marked breaking because in cases where no timezone
is set in PHP configuration, FLOW3 will no longer work.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37438">#37438</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3f3b1e0034af0fd20533a1bdbdca8f20588d87ec">3f3b1e0</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-publishingconfiguration-to-be-persisted">
<h3>[BUGFIX] Allow PublishingConfiguration to be persisted</h3>
<p>Any resource publishing configuration attached to a resource could
not be persisted, because the needed mapping information for
Doctrine was missing and the target type of the relation was an
interface.</p>
<p>This change adds an AbstractPublishingConfiguration and the needed
annotations, plus a schema migration.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32826">#32826</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9dd8a61234837658af6168f49237a9bab0890e85">9dd8a61</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-indentation-in-contributing-to-flow3">
<h3>[BUGFIX] Fix indentation in &#8220;Contributing to FLOW3&#8221;</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38884">#38884</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=91cb31125ea1e5cab6bb96ccc705f33e64d244d3">91cb311</a></li>
</ul>
</div>
<div class="section" id="feature-add-flushconfigurationcache-to-configurationmanager">
<h3>[FEATURE] Add flushConfigurationCache to ConfigurationManager</h3>
<p>This allows to remove the cached configuration in Production context.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38859">#38859</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=42702acc149b25756d6de32d424747a4ef274de7">42702ac</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-execute-bit-on-some-files">
<h3>[BUGFIX] Adjust execute bit on some files</h3>
<p>This fixes the execute bit (and setfilepermissions.sh) so that
no differences are created when setting permissions on a fresh
clone.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36049">#36049</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f91996c6117d2e095dac9dc68829805163f31778">f91996c</a></li>
</ul>
</div>
<div class="section" id="task-some-code-cleanup-csrf-settings-documentation">
<h3>[TASK] Some code cleanup, CSRF settings documentation</h3>
<p>Does some code (style) cleanup and adds descriptions for CSRF
options in Settings.yaml.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f406f7c96d9877fe1ffb1ed2f9c0162538665b68">f406f7c</a></li>
</ul>
</div>
<div class="section" id="bugfix-have-doctrine-repository-findall-return-a-queryresult">
<h3>[BUGFIX] Have Doctrine\Repository::findAll() return a QueryResult</h3>
<p>This makes the behavior of Doctrine\Repository consistent and
allows the use of findAll() e.g. in combination with widgets.</p>
<p>With this change, findAll() also observes the default ordering
of a repository.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35035">#35035</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38381">#38381</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9825cdbf68efafe86c8118e7b44e4d92a25470bf">9825cdb</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-timezone-override-side-effect-in-datetimeconverter">
<h3>[BUGFIX] Fix timezone override side effect in DateTimeConverter</h3>
<p>Specifying a timezone override in DateTimeConverter would lead to
wrong times due to the timezone being applied to the finished date
instance, not upon creation.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35369">#35369</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=49196a7cf539ce4eafb68e81d79fbfbfd265812a">49196a7</a></li>
</ul>
</div>
<div class="section" id="feature-support-teardown-for-functional-tests-in-generic-persistence">
<h3>[FEATURE] Support tearDown for functional tests in generic persistence</h3>
<p>Implement a tearDown method in the generic persistence according to the
Doctrine PersistenceManager. The call is delegated to the underlying
backend.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38785">#38785</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=af46cd9cbf1c8f6e7bb0dabd6142571ad8a7e04f">af46cd9</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-some-code">
<h3>[TASK] Clean up some code</h3>
<p>Fixes some comments, style issues and API usage.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37574">#37574</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d57781ab6fc326571d14c7722b472623797c6cf3">d57781a</a></li>
</ul>
</div>
<div class="section" id="bugfix-memcachedbackendtest-fail">
<h3>[BUGFIX] MemcachedBackendTest fail</h3>
<p>MemcachedBackendTest doesn&#8217;t use TYPO3\FLOW3\Core\ApplicationContext
to initialize MemcacheBackend.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38713">#38713</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b9f907d8c9f17251af0fd5522b221be6926ada42">b9f907d</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-f-uri-resource-title-parameter-in-guide">
<h3>[BUGFIX] Remove f:uri.resource title parameter in Guide</h3>
<p>The resource management documentation described a title parameter
for the ResourceViewHelper that ceased to exist a long time ago.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38382">#38382</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d799913e3e24caba4977b317a712aea57b5b0982">d799913</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-internalrequestengine-for-each-functional-test">
<h3>[BUGFIX] Reset InternalRequestEngine for each functional test</h3>
<p>Currently all functional tests share the same instance of
\TYPO3\FLOW3\Mvc\Routing\Router because the InternalRequestEngine
is of scope singleton.
This leads to unexpected results and failing tests if tests add
custom routes.</p>
<p>This change fixes this by making the ObjectManager forget the
singleton instance of the request engine after each testrun.
This also reverts the changes that were introduced with
I5a5bf17d00c5be05748a18122dae42989f429221 as they did not
have the expected effect.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38435">#38435</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cff94d79b2146f315f1a1aff5fc8be4b30ff55ae">cff94d7</a></li>
</ul>
</div>
<div class="section" id="task-add-annotation-reference-to-documentation">
<h3>[TASK] Add annotation reference to documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38669">#38669</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=086ee1ec27a228bd4570238c5113414100a05387">086ee1e</a></li>
</ul>
</div>
<div class="section" id="task-add-documentation-to-annotation-classes">
<h3>[TASK] Add documentation to annotation classes</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38669">#38669</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e4fbaad0b5217b3383eb04bb45efe63b7d1c7dbe">e4fbaad</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-use-of-target-in-annotation-classes">
<h3>[BUGFIX] Fix use of Target in annotation classes</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38667">#38667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fbe64c7c65436af5b0b6fc5c7196322a69ecc757">fbe64c7</a></li>
</ul>
</div>
<div class="section" id="feature-extract-authenticateaccount-functionality">
<h3>[FEATURE] Extract authenticateAccount functionality</h3>
<p>This extracts the portion that is responsible for the actual account
authentication in order to use this exclusively in own tests.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37470">#37470</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6bbe20c397c81444422bf1345a499244d88f7481">6bbe20c</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-abstract-classes-in-ensureaggregaterootinheritancechainconsistency">
<h3>[BUGFIX] Skip abstract classes in ensureAggregateRootInheritanceChainConsistency</h3>
<p>When using an abstract base class for domain models, the checks done in
ensureAggregateRootInheritanceChainConsistency() would fail, even though
it is fine to have an abstract base class not being aggregate root.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31522">#31522</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2d62b1e83ec1cdc3878c79ca6b4a2b08e8d44d40">2d62b1e</a></li>
</ul>
</div>
<div class="section" id="task-use-inject-annotation-instead-of-tag">
<h3>[TASK] Use Inject annotation instead of tag</h3>
<p>The ConfigurationBuilder still used getPropertyNamesByTag(),
this change replaces that with getPropertyNamesByAnnotation().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38622">#38622</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=761e2876dbefe59e4fae759d7589b6505acbb2ec">761e287</a></li>
</ul>
</div>
<div class="section" id="task-functional-tests-for-routing-framework">
<h3>[TASK] Functional tests for Routing Framework</h3>
<p>Adds testing routes to the provided Testing/Routes.yaml
file and adds tests covering mathing and resolving of
arbitrary routes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37608">#37608</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6c9633fac3e563480f15e242e736b0cac827895e">6c9633f</a></li>
</ul>
</div>
<div class="section" id="bugfix-reset-the-router-for-each-functional-test">
<h3>[BUGFIX] Reset the router for each functional test</h3>
<p>Currently all functional tests share the same instance of
\TYPO3\FLOW3\Mvc\Routing\Router because the InternalRequestEngine
is of scope singleton.
This leads to unexpected results and failing tests if tests add
custom routes.</p>
<p>This change fixes this by reinitializing the request engine for
each test case that has testableHttpEnabled set to TRUE.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38435">#38435</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3bb66040c0c55d7ae5ded62d7df0878d61fe6b58">3bb6604</a></li>
</ul>
</div>
<div class="section" id="bugfix-baseuri-contains-default-https-port">
<h3>[BUGFIX] BaseUri contains default HTTPS port</h3>
<p>By resolving #37770 now the BaseUri and thus the base tag when
using &lt;f:base /&gt; contains the HTTP port if it&#8217;s not equal to 80.</p>
<p>This adjusts Request and Uri to omit the port if it is equal to
443 and the request scheme is https.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38547">#38547</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37770">#37770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=58354078b93ed5678abf205bb6563afdb4775d5a">5835407</a></li>
</ul>
</div>
<div class="section" id="task-add-introduction-to-the-guide">
<h3>[TASK] Add &#8220;Introduction&#8221; to the guide</h3>
<p>Added introduction section for the guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=439702c189fa864ff26668986e6fbf5f04616aa4">439702c</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-rc1">
<h3>[TASK] Add changelog for FLOW3 1.1.0-rc1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=291cb179bd8e0f6d535607227bc36226502e3f8d">291cb17</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-check-in-atomic-writes-code">
<h3>[BUGFIX] Fix wrong check in atomic writes code</h3>
<p>Fixes a wrong check in Cache\FileBackend and RsaWalletServicePhp
as well as a bunch of one-line if blocks.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/27989">#27989</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1355fcd72db319e90fdd06dd8b78abcfbe069c8a">1355fcd</a></li>
</ul>
</div>
<div class="section" id="feature-inform-about-lock-expiry-in-cli">
<h3>[FEATURE] Inform about lock expiry in CLI</h3>
<p>When a CLI command is not executed because the FLOW3 system
is locked, the time remaining until lock expiry is shown in
the message to the user.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38419">#38419</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=849e9e1c3d1e6bd7e918274eb95ad70c81056615">849e9e1</a></li>
</ul>
</div>
<div class="section" id="task-add-essential-design-patterns-to-the-guide">
<h3>[TASK] Add &#8220;Essential Design Patterns&#8221; to the guide</h3>
<p>Re-uses some AOP verbage from part III of the guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27561">#27561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=90cad6b682060a57d2c50bf06121a38ac378f0af">90cad6b</a></li>
</ul>
</div>
<div class="section" id="task-document-routing-feature-appendexceedingarguments">
<h3>[TASK] Document Routing feature &#8220;appendExceedingArguments&#8221;</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35394">#35394</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8dde9f2b624b49c93cbc7f84ab73f4dee5d4194a">8dde9f2</a></li>
</ul>
</div>
<div class="section" id="bugfix-identityroutepart-should-accept-identity-array">
<h3>[BUGFIX] IdentityRoutePart should accept identity array</h3>
<p>IdentityRoutePart::matchValue() returns an identity array in
the format array(&#8216;__identity&#8217; =&gt; &#8216;&lt;Identifier&gt;&#8217;) (see #37403).</p>
<p>This change ajusts resolveValue() to accept arrays in that
format, too.
This is required for widgets that fetch arguments from the
current request and pass them to the UriBuilder.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38404">#38404</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=23a2b37d218ad04c90957e4fe49fd3791e22f93d">23a2b37</a></li>
</ul>
</div>
<div class="section" id="task-adjust-filename-spelling-to-match-rest-of-package">
<h3>[TASK] Adjust filename spelling to match rest of package</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35298">#35298</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=91141a35001fc9f1a77c888bfdf906b42daac337">91141a3</a></li>
</ul>
</div>
<div class="section" id="task-remove-trailing-colon-from-example-headlines">
<h3>[TASK] Remove trailing colon from example headlines</h3>
<p>It just looked weird this way…</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=63421e014ec3b9d687a2f9f19f85b98b6443b3e4">63421e0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-objects-yaml-classname-example-in-guide">
<h3>[BUGFIX] Fix Objects.yaml className example in guide</h3>
<p>The guide still stated that setting className in Objects.yaml
was possible for classes, but it works only for interfaces.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37648">#37648</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=dc396d0b5a4fb64b99e3ed95613b2c96756a9dc5">dc396d0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-code-documentation-of-datetimeparser">
<h3>[BUGFIX] Fix code documentation of DatetimeParser</h3>
<p>The parser code documentation would state the parse methods
expect \DateTime instances, but in fact strings are expected.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34050">#34050</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7024268cd8cd45394aa764ba9f45a759f0629b2d">7024268</a></li>
</ul>
</div>
<div class="section" id="task-provide-conventions-for-ids-in-xliff-files">
<h3>[TASK] Provide conventions for ids in XLIFF files</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32606">#32606</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f4f841bdbd32eb8a7a5f66e79e2d7108b85aa4ad">f4f841b</a></li>
</ul>
</div>
<div class="section" id="task-update-and-link-cgl-on-one-page">
<h3>[TASK] Update and link CGL on one page</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36651">#36651</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=20f273f4389698d3c9c40e1c0b831dc17f503da8">20f273f</a></li>
</ul>
</div>
<div class="section" id="task-show-up-hints-for-nesting-inline-viewhelpers">
<h3>[TASK] Show up hints for nesting inline ViewHelpers</h3>
<p>This adds a section with some examples about how to nest
and use inline ViewHelpers.
Besides, it does some minor typo and formatting corrections.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34749">#34749</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=28ab103142b0567498c4fc7ed744a72209f647bb">28ab103</a></li>
</ul>
</div>
<div class="section" id="bugfix-log-route-values-if-a-route-can-t-be-resolved">
<h3>[BUGFIX] Log route values if a route can&#8217;t be resolved</h3>
<p>This re-introduces logging if a route could not be resolved.
This behaviour was lost with I9605731f78cb1be9b0fb5c439d7149a676b6ccb7</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38172">#38172</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c11036150d7814762dd9de67a0ed641c960d94a9">c110361</a></li>
</ul>
</div>
<div class="section" id="task-update-cgl-on-one-page">
<h3>[TASK] Update &#8220;CGL on one page&#8221;</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36651">#36651</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3633f65053ad7f072d6aa7a29754d62e0eebd37b">3633f65</a></li>
</ul>
</div>
<div class="section" id="id250">
<h3>[TASK] Code cleanup</h3>
<p>Does code cleanup, mostly to documentation, but also tweaks
unused variables, missing return statements and similar things.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=3128201c0435a028d5a57aa0a9e1755c4e478495">3128201</a></li>
</ul>
</div>
<div class="section" id="task-add-architectural-overview-to-the-guide">
<h3>[TASK] Add &#8220;Architectural Overview&#8221; to the guide</h3>
<p>Based on the introduction from the old DocBook manual,
tweaked and amended.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29266">#29266</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fd62a028e424a14c117c36340c2e88f35369cb81">fd62a02</a></li>
</ul>
</div>
<div class="section" id="task-some-tiny-tweaks-to-the-1-1-0b3-changelog">
<h3>[TASK] Some tiny tweaks to the 1.1.0b3 changelog</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4ae9c667d38e571a279d84e13a0de6cfd6dbb31f">4ae9c66</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-beta3">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta3</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=38e6e22486b3e5c08076c6ddfadc32ea50148360">38e6e22</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-map-file-uploads-to-arguments-if-not-empty">
<h3>[BUGFIX] Only map file uploads to arguments if not empty</h3>
<p>Currently the HTTP request converts the FILES superglobal
to request arguments even if no file has been uploaded.
This leads to an exception when submitting a form without
uploading a file because the property mapper receives a
corrupt source array in that case.</p>
<p>This adjust the HTTP request to only map values from the
FILES superglobal to arguments if a file has been uploaded.</p>
<p>This also tweaks the ResourceTypeConverter to accept
an empty source. Besides the converter now only outputs
filer errors (for too large or corrupt files) to the user.
Server errors (e.g. non-existing/read-only tmp directory)
are logged to the systemLogger.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38184">#38184</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=38fcda543a3c4ad0600fdba19c6fbd31da895e20">38fcda5</a></li>
</ul>
</div>
<div class="section" id="bugfix-inform-about-possible-cause-for-no-class-schema-found">
<h3>[BUGFIX] Inform about possible cause for &#8220;No class schema found&#8221;</h3>
<p>When mapping meta data for Doctrine an error about &#8220;No class schema
found for …&#8221; could occur. It would not tell in what model the mapping
was taking place, leaving the user to guesswork. This adds output
of the currently examined class to the exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37547">#37547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a88b400cee51f51e032de71d42d8c03eec545d26">a88b400</a></li>
</ul>
</div>
<div class="section" id="task-add-context-information-to-cache-clearing-commands">
<h3>[TASK] Add context information to cache clearing commands</h3>
<p>When using the flow3:cache:flush commands only the current
cli context is cleared. This is not clear when using the
commands and this change add the context information
to the command output.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38221">#38221</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=44e04bfc8ca04f3fcc14b3dd5f3087388f8aad99">44e04bf</a></li>
</ul>
</div>
<div class="section" id="task-fix-section-about-resources-in-flow3-manual">
<h3>[TASK] Fix section about Resources in FLOW3 manual</h3>
<p>This fixes the Fluid code snippet of the resource upload example
in the Resource Management section.
Besides this adds a sample domain model to make this easier to
understand.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=e444f6a9c5a12d53f983d0b9a7d7e368e2d0dbb7">e444f6a</a></li>
</ul>
</div>
<div class="section" id="task-documentation-corrections-each-minor">
<h3>[TASK] Documentation corrections, each minor</h3>
<p>Some additional corrections, basically typo corrections,
for the manual.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=13b891d201ec9605503b2c2be06db19efa04cbd6">13b891d</a></li>
</ul>
</div>
<div class="section" id="bugfix-routing-cache-only-works-for-one-request">
<h3>[BUGFIX] Routing cache only works for one request</h3>
<p>Currently the routing uses a TransientMemory cache backend by
default. Besides, objects in the routing values are converted
to hashes using spl_object_hash() - which generates a new hash
for every request.</p>
<p>This change configures the RouterCachingAspect to use a
SimpleFile cache backend and adjusts the aspect to use the
persistence manager in order to convert objects to their
identifiers before creating cache entries.</p>
<p>This also adds a signal to the FunctionalTestCase base
class that flushes the routing caches on teardown.</p>
<p>Furthermore this adds two convenience methods
getLastMatchedRoute() and getLastResolvedRoute() to the router
which should make debugging and testing easier.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38172">#38172</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c7386f4a917276f4f2fe65ca50fb8f6745a6bba8">c7386f4</a></li>
</ul>
</div>
<div class="section" id="task-update-fluid-viewhelper-reference">
<h3>[TASK] Update Fluid ViewHelper reference</h3>
<p>This adds format.identifier documentation and a depreciation
notice for identity.json to the Fluid VH reference.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a96ea73b410f06df2a542ed6b300c9f969579ec4">a96ea73</a></li>
</ul>
</div>
<div class="section" id="bugfix-non-standard-ports-are-now-considered-by-httprequest">
<h3>[BUGFIX] Non-standard ports are now considered by HttpRequest</h3>
<p>Ports that are not 80 for HTTP or 443 for HTTPS were simply not
passed through to the Request when being created by the create()
method.</p>
<p>Also Uri will now set the port to 443 for HTTPS if no port is
given in the string handed to the constructor.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37770">#37770</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d7106f99e8500fc8e1cdf88a114cd77d1368e100">d7106f9</a></li>
</ul>
</div>
<div class="section" id="task-comment-fixes-for-accuracy-and-grammar">
<h3>[TASK] Comment fixes for accuracy and grammar</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c2e90adf6c487d1e1a7f614fbe039139182c5a6a">c2e90ad</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-phpsession-read-settings-from-phpsession">
<h3>[BUGFIX] Make PhpSession read settings from &#8220;PhpSession&#8221;</h3>
<p>The settings for the PhpSession are read from the key &#8220;PhpSession&#8221; now,
to ensure consistency. Before that they were read from &#8220;PHPSession&#8221;.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37993">#37993</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=96de170837473596138e42112839c14d75e6c17f">96de170</a></li>
</ul>
</div>
<div class="section" id="bugfix-uri-respects-query-and-fragment-even-without-path">
<h3>[BUGFIX] Uri respects query and fragment even without path</h3>
<p>Corresponding to the appropriate RFC 3986, section 3.3
the query and fragment indeed may be present also if no
path is given.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37903">#37903</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=75d98528be52c83c6226b2eca162e166d4c98cc3">75d9852</a></li>
</ul>
</div>
<div class="section" id="task-make-extending-genericobjectvalidator-easier">
<h3>[TASK] Make extending GenericObjectValidator easier</h3>
<p>This change moves the check for already validated objects out
of the isValid() method and into validate() instead. Since in
custom validators isValid() is the method to implement, this
makes correct implementation less error-prone.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37363">#37363</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ed3788b39662247d03fec6e7f45f99ad2ccc3f9f">ed3788b</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-mapper-chokes-on-already-converted-objects">
<h3>[BUGFIX] Property Mapper chokes on already-converted objects</h3>
<p>This happens for example when using the TYPO3.Form Project with a DatePicker,
which already transforms the value to the correct data type.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36988">#36988</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6695a4cb88c1d7cb9cc351bb99ce2322b9a73486">6695a4c</a></li>
</ul>
</div>
<div class="section" id="bugfix-correctly-implement-validator-resolver-short-notation">
<h3>[BUGFIX] Correctly implement validator resolver short notation</h3>
<p>Currently, the short notation for validators which has been introduced
with Id807dbfa78ae1388aa8cd53bfc578893eade427c does only support syntax
like TYPO3\FLOW3:EmailAddress; but we should rather support TYPO3.FLOW3:EmailAddress
as this is how we use package keys at all other places which are not PHP code.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38154">#38154</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33862">#33862</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fdfca9eb878fda281fc777afadb911b0bf26d6e9">fdfca9e</a></li>
</ul>
</div>
<div class="section" id="task-add-note-to-view-chapter-about-default-model-properties">
<h3>[TASK] Add note to View chapter about default model properties</h3>
<p>This note should be made seen the confusion around fixing #35894</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35894">#35894</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a785bb6813f5d2131aecb529c03a10e2017a05bc">a785bb6</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-baseuri-setting-work-for-resource-publishing">
<h3>[BUGFIX] Make baseUri setting work for resource publishing</h3>
<p>The baseUri setting was not observed in the filesystem resource
publisher.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37550">#37550</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=92b4d9950e1ed0950062eebf01308c08dea907d7">92b4d99</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-exception-handling-framework-for-commandcontroller">
<h3>[BUGFIX] Use exception handling framework for CommandController</h3>
<p>The CommandRequestHandler brought its own tiny exception handling
with the main drawback exceptions not being logged anymore, unlike
the Error\AbstractExceptionHandler features.</p>
<p>When handling a CommandRequest, a dedicated CommandExceptionHandler
is involved, taking care of occuring exceptions.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37995">#37995</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f0eaa57a8de45a941fefaadfc2cd9a44a9d4cbd5">f0eaa57</a></li>
</ul>
</div>
<div class="section" id="feature-configuration-validation-through-adapted-json-schema">
<h3>[FEATURE] Configuration validation through (adapted) JSON Schema</h3>
<p>Implementation of a PHP array schema validator modeled using the
JSON Schema specification as guideline.</p>
<p>The following CLI commands which utilize the validator are provided:</p>
<ul class="simple">
<li>configuration:validate validates the configuration of a certain type
with respect to the provided schemata. The schema files are searched
for in Resources/Private/Schema of all active packages.</li>
<li>configuration:generateschema is a kickstarter which generates a basic
schema to be used as a starting point for further adjustments</li>
</ul>
<p>Furthermore, this change includes schemata for all FLOW3 settings and the other
configuration types (Caches, Objects, Policy and Routes).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/31277">#31277</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1c8a80de60bff7ad0f878ade7e1cedc0f28ee365">1c8a80d</a></li>
</ul>
</div>
<div class="section" id="bugfix-internal-request-engine-needs-to-clear-security-context">
<h3>[BUGFIX] Internal Request Engine needs to clear security context</h3>
<p>In order to get the security tokens matching the new request created
in the internal request engine, the security context should be cleared
using the &#8220;clearContext&#8221; method. This means that the tokens will be
matched with the configuration from the routing based on the new request
and not the parent request.</p>
<p>This patch also contains a small enhancement which adds two additional
headers to the virtual browser&#8217;s response containing the code and message
of a possible exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37377">#37377</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f67078cb7d88cc8c1c058244c63239fbd3616d92">f67078c</a></li>
</ul>
</div>
<div class="section" id="task-fix-markup-errors-in-flow3-manual">
<h3>[TASK] Fix markup errors in FLOW3 manual</h3>
<p>This change fixes another markup issue resulting in rendering
glitches.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=70e012aa0dadea833484e52617f2c07e18c39e61">70e012a</a></li>
</ul>
</div>
<div class="section" id="id274">
<h3>[TASK] Fix markup errors in FLOW3 manual</h3>
<p>This change fixes a number of markup issues resulting in rendering
glitches.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2ce7ec8e5733d6e0c272cf1288058b57a53912bb">2ce7ec8</a></li>
</ul>
</div>
<div class="section" id="task-update-templating-chapter">
<h3>[TASK] Update templating chapter</h3>
<p>Along with some style and markup tweaks this adds details
on XML namespace declaration and XSD generation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ad55bfbef4af6112a5a1a33e292bad0fb68444ab">ad55bfb</a></li>
</ul>
</div>
<div class="section" id="task-update-validation-chapter">
<h3>[TASK] Update validation chapter</h3>
<p>Along with some style and markup tweaks this moves some sections
around and adds details on avoiding recursive/duplicate validation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ffa7f5633c6c8719297c023be9963295dd838310">ffa7f56</a></li>
</ul>
</div>
<div class="section" id="task-update-object-management-chapter">
<h3>[TASK] Update object management chapter</h3>
<p>This updates the section on custom factories.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=70cf2d80347bc1fa2b4f3bfaf49125e51af22708">70cf2d8</a></li>
</ul>
</div>
<div class="section" id="task-update-persistence-chapter">
<h3>[TASK] Update persistence chapter</h3>
<p>Some layout/markup tweaks and removed some outdated parts about
the generic PDO persistence we had earlier. Also explain identity
and value object handling in more detail.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9ba651114b766d7ecac17ba67e4f9dd31d0747f6">9ba6511</a></li>
</ul>
</div>
<div class="section" id="task-update-flow3-manual">
<h3>[TASK] Update FLOW3 manual</h3>
<p>This change removes the glossary and colophon from the guide
and applies mostly markup changes to various parts.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38037">#38037</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=f951e298d6a669b32a9bcf220ebbb4e2f8995454">f951e29</a></li>
</ul>
</div>
<div class="section" id="bugfix-discourage-people-to-expose-anything-but-the-web-folder">
<h3>[BUGFIX] Discourage people to expose anything but the Web folder</h3>
<p>This updates the Quickstart to explicitly push people into using Web
as the document root for their web server.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38016">#38016</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6545e477153fd3d6026ab3673056e292bd5ded9e">6545e47</a></li>
</ul>
</div>
<div class="section" id="task-refactor-constructor-argument-of-exceptionhandler-implementors">
<h3>[TASK] Refactor constructor argument of ExceptionHandler implementors</h3>
<p>Moves the redundant constructor method of each AbstractExceptionHandler
implementor to the AbstractExceptionHandler itself.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/38002">#38002</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=62df179937f5ebdd120ce644787232ae4a349737">62df179</a></li>
</ul>
</div>
<div class="section" id="task-session-handling-documentation">
<h3>[TASK] Session handling documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37668">#37668</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d7f0f38d125459e8a53d4b447d339d4d7baff24">8d7f0f3</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-recursion-detection-in-instantiateclass">
<h3>[BUGFIX] Fix recursion detection in instantiateClass</h3>
<p>When in ObjectManager-&gt;instantiateClass() the speedup case was
used, recursion detection would potentially fail, as it returns
early without removing the class name from the list of classes
currently being instantiated.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37997">#37997</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=88988c587cb1fd45597f46766ae79f76cee4ac5e">88988c5</a></li>
</ul>
</div>
<div class="section" id="task-code-cleanup-without-functional-changes">
<h3>[TASK] Code cleanup without functional changes</h3>
<p>This change fixes some comments, shuffles the order of things a
little and adds some empty lines.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=6584400ca883ed991c123784d650a649cf6c0308">6584400</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-unused-configuration-option-from-settings">
<h3>[BUGFIX] Remove unused configuration option from settings</h3>
<p>This change removes a no longer used/supported option from the
shipped Development configuration.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37966">#37966</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9d72dba06a5801d542b3c8f812ec2ea8d76b62c6">9d72dba</a></li>
</ul>
</div>
<div class="section" id="task-update-validator-reference-with-correct-option-types">
<h3>[TASK] Update validator reference with correct option types</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8ad03883fdf96e350732d1832187985b9a8d4918">8ad0388</a></li>
</ul>
</div>
<div class="section" id="task-add-validator-reference-to-the-flow3-guide">
<h3>[TASK] Add validator reference to the FLOW3 guide</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ad190d453b430ca658a10267d33b7dc8c5f3a1f4">ad190d4</a></li>
</ul>
</div>
<div class="section" id="task-add-cli-command-reference-to-guide">
<h3>[TASK] Add CLI command reference to guide</h3>
<p>Adds a reference for the CLI commands in the FLOW3
base distribution.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=51ff07dfa7915d00943b986a9cfd1126451220ec">51ff07d</a></li>
</ul>
</div>
<div class="section" id="task-add-contributors-list">
<h3>[TASK] Add contributors list</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=de0a19623de02e96f8f08f0bd6828038c72ddf29">de0a196</a></li>
</ul>
</div>
<div class="section" id="id287">
<h3>[TASK] Update Fluid ViewHelper reference</h3>
<p>This change updates the Fluid VH reference and does some tiny
tweaks along the way.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=594b122e7f7e8e558e07bdbe0cf5b7bb68af5380">594b122</a></li>
</ul>
</div>
<div class="section" id="task-tiny-docblock-fix-in-doctrinecommandcontroller">
<h3>[TASK] Tiny docblock fix in DoctrineCommandController</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a915d023260a43bdba5caeecccf0ee874244e75f">a915d02</a></li>
</ul>
</div>
<div class="section" id="bugfix-corrected-uri-host-regular-expression">
<h3>[BUGFIX] Corrected &#8220;Uri host&#8221; regular expression</h3>
<p>The regular expression verifying the validity of
a host name in Uri&#8217;s setHost method was of an incorrect
syntax leading to a PHP error message.
Besides correcting that, this patch adds a Test to
proof the intended functionality.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37554">#37554</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9b047552c5a560268fbe588d5d0f2d19605f4dbe">9b04755</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-0-5">
<h3>[TASK] Add changelog for FLOW3 1.0.5</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=083e453522432b271f909baf82f2cf3ee9f37567">083e453</a></li>
</ul>
</div>
<div class="section" id="task-update-code-migration-to-do-two-more-fixes">
<h3>[TASK] Update code migration to do two more fixes</h3>
<p>This adds adjustments for getOriginalRequestMappingResults() and
getOriginalRequest()-&gt;getArguments().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37762">#37762</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=65a3e7b65f0bebe162ba68cc7adbf40770da336a">65a3e7b</a></li>
</ul>
</div>
<div class="section" id="bugfix-packages-can-be-frozen-in-development-only">
<h3>[BUGFIX] Packages can be frozen in Development only</h3>
<p>Freezing packages was not possible in other contexts than Development
with the related commands. But if a package was frozen according to
PackageStates.php, it would advertise itself as frozen in all contexts.</p>
<p>While this did not seem to have any real effects, it caused confusing
output with the cache:flush command in Production context.</p>
<p>This change makes the Package class ignore the frozen state in any
context except Development and adds a check in the freezePackage()
method of the PackageManager.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37223">#37223</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=4bff5587d71a10fab4bb6d4b83e881141959e389">4bff558</a></li>
</ul>
</div>
<div class="section" id="bugfix-purge-doctrine-proxies-that-are-no-longer-needed">
<h3>[BUGFIX] Purge Doctrine proxies that are no longer needed</h3>
<p>With this change the proxy target directory is emptied before
Doctrine proxies are (re)built, removing outdated proxy classes.</p>
<p>This solves fatal errors when (proxied) classes are removed, and
thus can no longer be found when referenced from their heirs.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/26903">#26903</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2f2e3fc0d236a68485f6fc5c682c7d460549f0c6">2f2e3fc</a></li>
</ul>
</div>
<div class="section" id="task-no-longer-freeze-packages-by-default">
<h3>[TASK] No longer freeze packages by default</h3>
<p>Due to the possible pitfalls with frozen packages, no packages will be frozen
by default. This way a developer has to learn about frozen packages before he
can be confronted with them (and their pitfalls).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37726">#37726</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cadcb6127fd1ae2eef6d08c48680428d0361c8a1">cadcb61</a></li>
</ul>
</div>
<div class="section" id="bugfix-integrity-constraint-violation-deleting-resources">
<h3>[BUGFIX] Integrity constraint violation deleting resources</h3>
<p>If you have two resources using the same resource pointer,
deleting a Resource will trigger deletion of the
connected ResourcePointer which then leads to an integrity
constraint violation.</p>
<p>This patch tells doctrine NOT to cascade delete operations.
This will lead to orphan resource-pointers which have to
be deleted manually or on a regular base.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34448">#34448</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=02a7d844e21f2481094a1dacc86ce51484a8d051">02a7d84</a></li>
</ul>
</div>
<div class="section" id="task-update-security-framework-chapter">
<h3>[TASK] Update Security Framework chapter</h3>
<p>Quick update of the Security Framework chapter to reflect recent
changes in FLOW3. Also some minor spelling error fixes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37672">#37672</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=df033b0d9586b2734e93cabb780b97971734010a">df033b0</a></li>
</ul>
</div>
<div class="section" id="task-document-utility-functions">
<h3>[TASK] document utility functions</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37669">#37669</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2ef191c942b7178e27e64e27dd86bdcc1d9b939d">2ef191c</a></li>
</ul>
</div>
<div class="section" id="task-documentation-of-validation">
<h3>[TASK] Documentation of Validation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37666">#37666</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d40ad114b615d854b13384c03b8eadfa38f71f9">8d40ad1</a></li>
</ul>
</div>
<div class="section" id="task-make-validator-resolver-public-api">
<h3>[TASK] Make validator resolver public API</h3>
<p>People should use it when validation is used in custom code instead of
creating validators using new; thus the ValidatorResolver must be marked
as public API.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37665">#37665</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8182c526ce6ee0c40f5845b4ac1d8df26cf87465">8182c52</a></li>
</ul>
</div>
<div class="section" id="task-improve-property-mapping-documentation">
<h3>[TASK] improve Property Mapping Documentation</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37664">#37664</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=9be5bb0b2b179dd7b3d24340be59cdcf61a19431">9be5bb0</a></li>
</ul>
</div>
<div class="section" id="task-update-package-xml-with-new-version-number">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cab86deb8830734db32da86dac3e662ff321fb1a">cab86de</a></li>
</ul>
</div>
<div class="section" id="task-some-tiny-tweaks-to-the-1-1-0b2-changelog">
<h3>[TASK] Some tiny tweaks to the 1.1.0b2 changelog</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=57bbe6571b25a52ee413c98cc29812b2ab1780f0">57bbe65</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-flow3-1-1-0-beta2">
<h3>[TASK] Add changelog for FLOW3 1.1.0-beta2</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=82590ff253c61a6daf82241a69de467ad0c0e193">82590ff</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-inconsistent-validate-and-ignorevalidation-behavior">
<h3>[BUGFIX] Fix inconsistent Validate and IgnoreValidation behavior</h3>
<p>The Validate annotation does an ltrim of &#8220;$&#8221; on the argument which the
IgnoreValidation annotation did not do. This change makes the two behave
the same by adding that trim to IgnoreValidation as well.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37385">#37385</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=24485a773ddc75867133d58d5980bda07885b0ab">24485a7</a></li>
</ul>
</div>
<div class="section" id="task-make-all-parameter-optional-in-package-refreeze">
<h3>[TASK] Make &#8220;all&#8221; parameter optional in package:refreeze</h3>
<p>For freeze, unfreeze and refreeze the default value for
the packageKey is now &#8220;all&#8221;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37358">#37358</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bc84ef1d18b3bacc4443c3b52ae76c09b2f1f44c">bc84ef1</a></li>
</ul>
</div>
<div class="section" id="bugfix-persistencemanager-add-now-requires-objects-being-new">
<h3>[BUGFIX] PersistenceManager-&gt;add() now requires objects being new</h3>
<p>The add method in repositories did also update existing entities,
this can be dangerous, as it allows an attacker to misuse creation
forms (i.e. a register form) and change existing entities.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34527">#34527</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=8d4b3c7099b597525ebb3406dbef0b9f204d67d2">8d4b3c7</a></li>
</ul>
</div>
<div class="section" id="task-log-skipped-persistall-due-to-closed-entitymanager">
<h3>[TASK] Log skipped persistAll() due to closed EntityManager</h3>
<p>To avoid exceptions we only flush the EM if it is still open. To be
able to spot errors more easily, this adds a log entry if the EM
was closed and flushing was skipped.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/30934">#30934</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=660ee7e9909766a4a93cb73263a2ca9f73295e66">660ee7e</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-some-coding-style-issues">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add space to &#8220;foreach(&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1ff13c47bb21555d2169bef0d534b55716f48149">1ff13c4</a></li>
</ul>
</div>
<div class="section" id="id306">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add spaces to &#8221;){&#8220;</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=bb514fda56fb8bd7a6cd723babc7ad1204aa0824">bb514fd</a></li>
</ul>
</div>
<div class="section" id="task-create-configuration-directories-only-on-save">
<h3>[TASK] Create configuration directories only on save</h3>
<p>The configuration directories for cached configuration were created
inside the constructor of the ConfigurationManager. This caused the
unit test to create directories outside the VFS. Moving the creation
to the saveConfigurationCache method fixes that. Additionally cleans
up some unit tests related to ApplicationContext and
ConfigurationManager.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33581">#33581</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cb141c73e994e84e4efd03d5e4228add6a3ec642">cb141c7</a></li>
</ul>
</div>
<div class="section" id="bugfix-keep-existing-packagestates-php">
<h3>[BUGFIX] Keep existing PackageStates.php</h3>
<p>A wrong check for the existence of the configured &#8220;packagePath&#8221; caused
the loss of custom package states configuration on every request in
development mode or initially in production.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37607">#37607</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=166b44e139b7d93dd001ff9bd6502ce43a88cb06">166b44e</a></li>
</ul>
</div>
<div class="section" id="bugfix-router-overrides-request-arguments">
<h3>[BUGFIX] Router overrides request arguments</h3>
<p>With the reworked Request stack, the router kicks in after
the action request have been built, overriding all arguments
the respective route specifies.</p>
<p>This works for the most cases, but leads to issues when you
try to specify part of a complex target argument via the route
and part via request.</p>
<p>For example if you update a domain model via request body but
specify the model itself through the URI like
<a class="reference external" href="http://domain/products/product-1">http://domain/products/product-1</a> - now the Identity-RoutePart
detects &#8220;product-1&#8221; and turns it into the corresponding
__identity-array but then the Router kicks in and overrides
the &#8220;product&#8221; argument completely resulting in a new object
to be created by the property mapper.</p>
<p>This change adjusts the Router to recursively merge arguments
with the route values instead, with precedence to the route
values.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37445">#37445</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=170733fb8d83ab208b74fc56e6e9894f80276362">170733f</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-validating-instances-more-often-than-needed">
<h3>[BUGFIX] Avoid validating instances more often than needed</h3>
<p>The GenericObjectValidator uses a static variable to store objects being
validated. Objects were still validated over and over because at the
end of isValid() they were detached again.</p>
<p>This change replaces that detach() call with another concept. Now
any validator implementing the new ObjectValidatorInterface can be
given an SplObjectStorage to keep track of instances already
validated.</p>
<p>If you reset that container when it makes sense (before you
actively validate objects) you can avoid validating single instances
more than once in one validation run but still validate at various
points on your logic flow.</p>
<p>If you have implemented your own object validator you should
implement the new ObjectValidatorInterface - the easiest way is
to extend the GenericObjectValidator, if you haven&#8217;t done that
so far.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37363">#37363</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34154">#34154</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=26e4b3fa846c50fdbdc7908c11eda0756ed85f2c">26e4b3f</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-ip-address-validation">
<h3>[BUGFIX] Fix IP address validation</h3>
<p>The IP address validation done with filter_var() worked
on the development machine running PHP 5.3.12, however,
it failed on the integration server running PHP 5.3.5.
Apparently, the filter_var options for FILTER_VALIDATE_IP
behave differently in these versions.</p>
<p>This patch removes the validation for IPv4 / IPv6 addresses
because they didn&#8217;t make sense anyway.</p>
<p>In that regard: hooray for PHP behavior changes. They actually
exploit bad application code. Sometimes.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37584">#37584</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=744c7593aaf2faab82a2415a8e17015fd3bc60d0">744c759</a></li>
</ul>
</div>
<div class="section" id="feature-provide-way-to-determine-client-ip-address">
<h3>[FEATURE] Provide way to determine client IP address</h3>
<p>This adds a method getClientIpAddress() to the HTTP Request
class. It considers various kinds of environment variables
which are present when using proxies or certain server setups
for determining the actual client IP address.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37584">#37584</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=66bcdf54a158a4731259bad05a5eee39ae6f5dcb">66bcdf5</a></li>
</ul>
</div>
<div class="section" id="feature-content-negotiation-for-media-types">
<h3>[!!!][FEATURE] Content Negotiation for Media Types</h3>
<p>This improves the support for detecting the Media
Type (that is, &#8220;format&#8221; in an ActionRequest context)
based on the request&#8217;s Accept header.</p>
<p>This implementation supports Quality Values and Media
Ranges as specified in RFC 2616.</p>
<p>The way to define the supported formats of a controller
has changed: Previously a class property $supportedFormats
contained a list of filename extensions which would be
supported. This property is not supported anymore.
Instead, controllers may now specify a list of IANA
Internet Media Types in a property $supportedMediaTypes.</p>
<p>The default setting for these supported media types
in ActionController is &#8220;text/html&#8221;. You&#8217;ll need to adjust
your controllers accordingly if you relied on the
$supportedFormats feature.</p>
<p>Also note that the format in ActionRequest is now NULL
by default. The ActionController makes sure to set the
correct format, but if you created your own ActionRequest
for a special purpose, you need to take care of setting
it yourself.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37561">#37561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=03b6d85916e46ed8b2e99bc549d7248957dca935">03b6d85</a></li>
</ul>
</div>
<div class="section" id="bugfix-save-relative-package-path-in-packagestates-php">
<h3>[BUGFIX] Save relative package path in PackageStates.php</h3>
<p>Using absolute paths in the PackageStates.php causes problems in a
chroot environment where the absolute path is different in CLI then
in the HTTPD process.</p>
<p>Also relative paths allow to put PackageStates.php under version
control to maintain a specific state even when paths differ
on development and production systems.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37220">#37220</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33719">#33719</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=531178a24edaa3e23e0d6dee53a5ff69f03a7b9c">531178a</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-mapper-should-distinguish-between-error-and-null">
<h3>[Bugfix] Property mapper should distinguish between error and NULL</h3>
<p>currently, when a nested type converter returns NULL, this is silently
caught by the property mapper. Thus, it is not possible to reset f.e.
an integer value to NULL again.</p>
<p>This change fixes that behavior, and adds a functional test for it.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35136">#35136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5badcdb095b688e96460f579ec131fbaaa3c6e3f">5badcdb</a></li>
</ul>
</div>
<div class="section" id="task-switch-from-mime-to-media-types">
<h3>[!!!][TASK] Switch from MIME to Media Types</h3>
<p>The term MIME type is outdated, at least if used in a web context. The correct
term is &#8220;Internet Media Type&#8221;. Furthermore, our list of MIME types (or media
types) was not up to date.</p>
<p>This patch introduces a new utility class &#8220;MediaTypes&#8221; which replaces
&#8220;FileTypes&#8221;. Along with the new class comes a script which allows the core team
to conveniently update the list of Media Types and filename extensions.</p>
<p>This is a breaking change as the FileTypes class is deprecated with it. The old
methods are still available but should not be used anymore. A code migration to
use the new ones instead is shipped with the change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=ef3e8fbbae550efc12af8fa69e1b39eafeddab6f">ef3e8fb</a></li>
</ul>
</div>
<div class="section" id="bugfix-float-and-integer-converters-do-not-correctly-handle-errors-and-empty-values">
<h3>[!!!][BUGFIX] Float and Integer converters do not correctly handle errors and empty values</h3>
<p>When an argument of a controller action is annotated with
&#64;param integer $var, the validation never fails if a string
is passed to the argument.
This is because the IntegerConverter implicitly casts the
string to an integer. The same problem exists with floats.</p>
<p>This change fixes this by checking the value and returning
an error object if it is not numeric. Besides this tweaks
the FloatConverter to accept float and integer values as
input and it adds a bunch of unit &amp; functional tests.</p>
<p>Furthermore, empty strings are now correctly converted as NULL values.
This is a breaking change if you relied upon the old behavior that
empty values are converted to the number 0.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35136">#35136</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a915647549a52621d1b23b7787f0bd2e03a91261">a915647</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-our-var-dump-usable-with-doctrine-collections">
<h3>[BUGFIX] Make our var_dump() usable with Doctrine collections</h3>
<p>For Doctrine\Collection instances we use Doctrine&#8217;s export()
method now to render the dump.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37481">#37481</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=c5497de779450b06de1f1f850b21d683d22b7b40">c5497de</a></li>
</ul>
</div>
<div class="section" id="task-remove-debug-output-in-log-on-configuration-changes">
<h3>[TASK] Remove debug output in log on configuration changes</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=cec2133bb7916bf06af0ea97a0e09d84b87e046e">cec2133</a></li>
</ul>
</div>
<div class="section" id="feature-add-gethttpresponse-to-httprequesthandler">
<h3>[FEATURE] Add getHttpResponse() to HttpRequestHandler</h3>
<p>This adds a getter method to the HTTP request handler
which allows for retrieving the response corresponding
to the currently handled request.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36696">#36696</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7e1087a99a5f56bdf458cfd23f61a31f9e3749e4">7e1087a</a></li>
</ul>
</div>
<div class="section" id="feature-make-http-responses-standards-compliant">
<h3>[FEATURE] Make HTTP responses standards compliant</h3>
<p>This adds a new API method to the HTTP response which
is called by a request handler to assure conformity
with RFC 2616 and other related specifications.</p>
<p>While there are a lot of rules to consider, this patch
only introduces a first set of important checks which
are all explained by a corresponding test.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=63283d92fa34cff7ce5b3dcd244b1aae1711e652">63283d9</a></li>
</ul>
</div>
<div class="section" id="bugfix-set-property-mapping-configuration-in-restcontroller">
<h3>[BUGFIX] Set property mapping configuration in RestController</h3>
<p>Since Iac7bbb2a58ad890701fff2b0ad6b16a0e0b15bba we use a
whitelist-based approach to configure property mapping.
This change hooks into the create/update action of the
RestController and sets the required property mapping
configuration.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/36776">#36776</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=94d958a57f662a27c5411df52707778e6c077301">94d958a</a></li>
</ul>
</div>
<div class="section" id="feature-allow-configurable-identity-key-in-jsonview">
<h3>[FEATURE] Allow configurable identity key in JsonView</h3>
<p>Providing _exposeObjectIdentifier option is
not restricted to result in __identity anymore,
but is configurable to be an arbitrary string.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34414">#34414</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=29ffc635275a68fa84c76d4b3a30d4086255f0b5">29ffc63</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-hint-on-validator-empty-handling-to-migration">
<h3>[BUGFIX] Add hint on validator empty handling to migration</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37231">#37231</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d511b04e01e96f7919fc804487b7e03f839313f7">d511b04</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-exception-message-in-repository-remove">
<h3>[BUGFIX] Fix Wrong exception message in Repository-&gt;remove()</h3>
<p>The message would say add() was involved, which is wrong.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37448">#37448</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=57e1e955e4494f4fb506c753c9560cfe90234c03">57e1e95</a></li>
</ul>
</div>
<div class="section" id="feature-response-setexpires-getexpires">
<h3>[FEATURE] Response setExpires() / getExpires()</h3>
<p>This adds two new convenience methods to the Response
API which allow for setting and retrieving the Expires
HTTP header.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=60c22ce6a6eb8ede184069ad52573ad3b4163c3a">60c22ce</a></li>
</ul>
</div>
<div class="section" id="feature-make-message-response-setters-chainable">
<h3>[FEATURE] Make Message / Response setters chainable</h3>
<p>This makes the setter methods of the Message and the
Response class chainable.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=149a012ea5afbc6e02014d6ec564ae7f0788a767">149a012</a></li>
</ul>
</div>
<div class="section" id="feature-more-convenience-methods-in-response">
<h3>[FEATURE] More convenience methods in Response</h3>
<p>This adds a few more convenience methods for setting
headers and cache control directives in the Response
object:</p>
<ul class="simple">
<li>setDate() / getDate()</li>
<li>setLastmodified() / getLastModified()</li>
<li>setMaximumAge() / getMaximumAge()</li>
<li>setSharedMaximumAge() / getSharedMaximumAge()</li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=b18a9a51db14f3f45e17c1f36323b54b8428af90">b18a9a5</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-cache-control-headers">
<h3>[FEATURE] Support for HTTP Cache-Control headers</h3>
<p>This adds support for the Cache-Control header.
The &#8220;Headers&#8221; object now handles the Cache-Control
header in a special way by keeping track of the
various cache directives separately. Those can
be set through the method setCacheControlDirective()
and get(&#8216;Cache-Control&#8217;) returns a rendered version
based on the previously set directives.</p>
<p>Alternatively, a whole Cache-Control header can also
be set through set() / setHeader(). The given field
value will then be parsed and the individual cache
directives are stored internally.</p>
<p>This patch also corrects the behavior of set() and
get() to convert date / time values always to GMT.
Also added a related note in the comments of the
respective API methods.</p>
<p>This patch also adds the new API methods setPrivate()
and setPublic() to the Response class.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=fb8b06479e34efb38e610d4ad2684569d6092004">fb8b064</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-error-message-about-command-controller-classes">
<h3>[BUGFIX] Fix error message about command controller classes</h3>
<p>If you create a CommandController which is not in the &#8220;Controller&#8221; directory
of a package or where the name does not end in &#8220;CommandController&#8221; you will
get an error saying &#8220;Invalid controller class name [...] 1305100019&#8221;.</p>
<p>This change makes the error message a little more helpful.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33139">#33139</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=575650915f69773733108052ba7da3e0e82e5c11">5756509</a></li>
</ul>
</div>
<div class="section" id="feature-add-depends-annotation-to-ignored-ones">
<h3>[FEATURE] Add &#64;depends annotation to ignored ones</h3>
<p>To allow test dependencies in Unit Tests, the &#64;depends
annotation is added to the ignored annotation array.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37475">#37475</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d84ffe233f56dcd6265b5eaac1f5884380ecafe5">d84ffe2</a></li>
</ul>
</div>
<div class="section" id="feature-add-hasrole-method-to-account-entity">
<h3>[FEATURE] Add hasRole() method to Account entity</h3>
<p>At the moment the roles still have to be persisted as
strings in the serialized roles property in the database.
Already converting all roles to objects would require
some more refactoring.
This change is tested on already existing, and on new
users.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37451">#37451</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a79904d9c67634f6562632db0bc4cbc45465504a">a79904d</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-put-delete-arguments">
<h3>[FEATURE] Support for HTTP PUT/DELETE arguments</h3>
<p>This adds transparent argument support for arguments
in PUT and DELETE requests which are passed through
the request body. Depending on the content type of
the request, the message body is parsed and then
mapped into arguments for further use in controllers.</p>
<p>The following content content types are currently
supported:</p>
<ul class="simple">
<li>application/x-www-form-urlencoded</li>
<li>application/json</li>
<li>xml</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36913">#36913</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=26f83dd314e9b38d7d7bca10ec3d4b27e467ab5e">26f83dd</a></li>
</ul>
</div>
<div class="section" id="task-common-base-class-message-for-request-response">
<h3>[TASK] Common base class Message for Request / Response</h3>
<p>This introduces a new class &#8220;Message&#8221; which acts as a
common parent class for the HTTP Request and Response.
It provides shared functionality such as setting and
getting headers, charset handling and more.</p>
<p>It is in line with the terminology in RFC 2616.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7ac583ff633d7653ae45a84e4c36a280da6eba93">7ac583f</a></li>
</ul>
</div>
<div class="section" id="task-temporarily-remove-nested-response-code">
<h3>[TASK] Temporarily remove nested response code</h3>
<p>This temporarily removes the code in HTTP Response which
tackles support of nested responses. This feature needs
to be implemented only when most of the other features,
including Cache Control, are in place.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33371">#33371</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=238efb0698735cf49457da7f9fe01671b757a905">238efb0</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-http-age-and-date-header">
<h3>[FEATURE] Support for HTTP Age and Date header</h3>
<p>This patch adds API methods and internal handling of
the HTTP &#8220;Date&#8221; and &#8220;Age&#8221; headers, according to
RFC 2616. It also introduces the use of the &#8220;Now&#8221;
singleton as a time reference for age calculations.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a1c37e38dd6f015a53f087b6d8c398db5bbcdfeb">a1c37e3</a></li>
</ul>
</div>
<div class="section" id="task-annotation-cleanup-for-http-response-tostring-method">
<h3>[TASK] Annotation cleanup for http response __toString method</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=a2e8c4559231edcc02cdf79d37fc825e5ca2daf6">a2e8c45</a></li>
</ul>
</div>
<div class="section" id="task-identityroutepart-should-return-identity-array">
<h3>[TASK] IdentityRoutePart should return __identity array</h3>
<p>IdentityRoutePart::matchValue() currently returns the identifier
of the ObjectPathMapping record directly.
This makes it difficult to merge arguments with data from the
requestBody (e.g. for PUT requests).</p>
<p>This change adjusts the route part so that it sets $this-&gt;value
to an array in the format array(&#8216;__identity&#8217; =&gt; &#8216;&lt;Identifier&gt;&#8217;)</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37403">#37403</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37402">#37402</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=02fc35beae76ab7488245e92ffdb2489a17c1b01">02fc35b</a></li>
</ul>
</div>
<div class="section" id="feature-fluent-interface-for-propertymappingconfiguration-methods">
<h3>[FEATURE] Fluent Interface for PropertyMappingConfiguration methods</h3>
<p>Setter and other methods not intended to return particular
values now return $this in order to provide a Fluent Interface
that allows chaining of multiple calls to the same object.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/34866">#34866</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=2eeca51fe0feb8442da9832e6eb1e73bc9fa0291">2eeca51</a></li>
</ul>
</div>
<div class="section" id="bugfix-http-response-can-be-cast-to-string-again">
<h3>[BUGFIX] Http Response can be cast to string again</h3>
<p>This reverts the removal of the __toString() method for the
Http Response. We currently rely on this behavior in the
ActionController which combines response content by simple
string concatenation.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=aa303c35b427f35c6ffedb91e5e74c9d52b6a937">aa303c3</a></li>
</ul>
</div>
<div class="section" id="task-http-response-status-code-and-content-type">
<h3>[TASK] HTTP Response: Status Code and Content Type</h3>
<p>This adds a few new methods to the HTTP Response
class - including the related unit tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37259">#37259</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=1bf8bbd678c6f4ca76d087b83c6cb5fbbbb65cf7">1bf8bbd</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-now-as-unique-time-reference">
<h3>[FEATURE] Introduce &#8220;Now&#8221; as unique time reference</h3>
<p>This patch introduces a new class called &#8220;Now&#8221; which
inherits DateTime and has the scope Singleton. It can
be used in all cases where a reliably comparable value
of &#8220;now&#8221; is needed or where time needs to be mocked
in related tests.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37376">#37376</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=7f9fb7db5a624cc6b545057e98a4a35540b64db2">7f9fb7d</a></li>
</ul>
</div>
<div class="section" id="bugfix-nested-arrays-in-annotation-options-are-no-longer-dropped">
<h3>[BUGFIX] Nested arrays in Annotation options are no longer dropped</h3>
<p>When giving a nested array of options to an annotation the rendered
form in proxy classes was cut off.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37193">#37193</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5a2cbd05f001479e6bf2b9363a7f01e07b511c4e">5a2cbd0</a></li>
</ul>
</div>
<div class="section" id="bugfix-credentialssource-in-account-should-be-nullable">
<h3>[BUGFIX] credentialsSource in Account should be nullable</h3>
<p>Not all authentication mechanisms need a &#8220;credentials source&#8221; (e.g. the
typo3.org SSO provider), so the column for the property should be nullable.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37341">#37341</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=d3e991d4bce23f46c4bd3d3287c4c67d3abcba16">d3e991d</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-hint-in-code-migration">
<h3>[BUGFIX] Fix wrong hint in code migration</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37224">#37224</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=5d3a102e22783b9293b2ac8834a00d8698539365">5d3a102</a></li>
</ul>
</div>
<div class="section" id="feature-day-month-year-keys-in-datetimeconverter-source-array">
<h3>[FEATURE] Day, month, year keys in DateTimeConverter source array</h3>
<p>This patch introduces additional possible array keys for the
source array of the DateTimeConverter. Now not only a string
representing the DateTime can be passed, but array keys
of the single day, month and year.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35195">#35195</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.FLOW3.git?a=commit;h=01d918d0b648374d88740caa5e1429f7f72727c5">01d918d</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id356">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=8ad378a9ccfd88d09da62b4cd8761f2316caac01">8ad378a</a></li>
</ul>
</div>
<div class="section" id="id357">
<h3>[TASK] Remove API annotation from View::canRender()</h3>
<p>With #40888 View::canRender() is no longer called from within
ActionController::resolveView().
As the framework no longer relies on that method to exist the
&#64;api annotation is removed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/40888">#40888</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42176">#42176</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=06ac5bce073785de32bec004a2c98c53726e8057">06ac5bc</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-one-of-action-and-actionuri-to-be-omitted-in-form-viewhelper">
<h3>[BUGFIX] Allow one of action and actionUri to be omitted in Form ViewHelper</h3>
<p>With I03fa30be2522ee53d5a8f184b57afe539ed4f991 the action argument
of the Form ViewHelper was made required. But in fact you can override the
action attribute by specifying the &#8220;actionUri&#8221; argument. In that case the
&#8220;action&#8221; argument should not be required.</p>
<p>This removes this requirement again. But if neither &#8220;action&#8221; nor &#8220;actionUri&#8221;
is specified, an exception will be thrown.</p>
<p>This also removes the obsolete method setFormActionUri()</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=8bc51f201aa416478710e0642007ccf1ad19e4ce">8bc51f2</a></li>
</ul>
</div>
<div class="section" id="id361">
<h3>[TASK] Prepare composer manifest for release</h3>
<p>Remove the version field, so versions can be read from tags in git
instead. Fixes the description slightly.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=af166567a6ae252606202b6e1cd29ee2ef13547b">af16656</a></li>
</ul>
</div>
<div class="section" id="bugfix-mark-action-argument-required-in-routing-related-viewhelpers">
<h3>[!!!][BUGFIX] Mark action argument required in routing related ViewHelpers</h3>
<p>Currently you can omit the action attribute when creating a link/URI in
Fluid. If no action was specified the default action of the matching route
was assumed. With #43589 the behavior changed and you&#8217;ll have to specify
all defaults of a route.</p>
<p>This change makes the action argument of follwing ViewHelpers required:</p>
<ul class="simple">
<li>f:link.action</li>
<li>f:uri.action</li>
<li>f:form</li>
</ul>
<p>This is a breaking change if you created a link without specifying the action.
In this case change your Fluid code from
&lt;f:action&gt; to &lt;f:action action=&#8221;index&#8221;&gt; (or whatever action is the default
of the target controller).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=c9d4c4a269edf8652c83d64a32648bfabf49678c">c9d4c4a</a></li>
</ul>
</div>
<div class="section" id="task-avoid-use-of-getpropertyinternal">
<h3>[TASK] Avoid use of getPropertyInternal()</h3>
<p>The getPropertyInternal() method obviously is intended for internal use
in the ObjectAccess class. This change replaces it&#8217;s use with a call to
getProperty().</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43617">#43617</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=c06652a11bdf3643a81fe5c9c62aa700daa1a8ae">c06652a</a></li>
</ul>
</div>
<div class="section" id="task-removed-testable-http-flag-from-tests">
<h3>[TASK] Removed testable HTTP flag from tests</h3>
<p>Testable HTTP is now always enabled, thus the flag to switch it on can
be removed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43590">#43590</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=2a188cb0aabbbecbec8b644b982d96e4db21b8c1">2a188cb</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-name-attribute-of-layoutviewhelper-optional">
<h3>[BUGFIX] Make name attribute of LayoutViewHelper optional</h3>
<p>This change removes the required = TRUE from the registerArgument()
call for the name attribute of LayoutViewHelper. This matches the
fallback behavior in the postParseEvent() method.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43579">#43579</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=5ce7ad51c1ce96b2376bb4a8b5a89cf6e1a4faee">5ce7ad5</a></li>
</ul>
</div>
<div class="section" id="feature-allow-fluid-arrays-only-in-viewhelper-arguments">
<h3>[!!!][FEATURE] Allow Fluid arrays only in ViewHelper arguments</h3>
<p>This change greatly enhances the JavaScript compatibility of Fluid.</p>
<p>Fluid Arrays are a subset of the JavaScript object syntax, making it
hard to work with them in mixed HTML/JavaScript documents. For example
before this change, the following JavaScript Object was parsed by Fluid:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">var</span> <span class="nx">uris</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">endPoint1</span><span class="o">:</span> <span class="s1">&#39;{f:uri.action(…)}&#39;</span><span class="p">,</span>
  <span class="nx">endPoint2</span><span class="o">:</span> <span class="s1">&#39;{f:uri.action(…)}&#39;</span><span class="p">,</span>
<span class="p">};</span>
</pre></div>
</div>
<p>Before this change, the above snippet resulted in the following template,
as the generated array was casted to a string:</p>
<blockquote>
<div>var uris = Array</div></blockquote>
<p>With this change, Fluid only parses arrays which are used inside
ViewHelper arguments, such that an array inside normal text is not
converted anymore.</p>
<div class="section" id="breaking-change">
<h4>Breaking Change</h4>
<p>This change is only breaking in very rare cases where one relied on
the inner contents of the ViewHelper being an array, f.e. if one used
the debug ViewHelper as follows:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">debug</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">key1</span><span class="o">:</span> <span class="s1">&#39;value1&#39;</span><span class="p">,</span> <span class="nx">key2</span><span class="o">:</span> <span class="s1">&#39;value2&#39;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">debug</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>… or if anybody wrote custom ViewHelpers which use this convention.</p>
<p>Relying on that would be very fragile anyways, as the insertion of a
single space character before the opening curly bracket or after the
closing one would cast the array back to a string.</p>
<p>ViewHelpers which were written like this should be re-written to take
the array as ViewHelper argument:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">debug</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;{key1: &#39;value1&#39;, key2: &#39;value2&#39;}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43356">#43356</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=ba09ec53d0fc932e4d65a4acfd925398e058b37e">ba09ec5</a></li>
</ul>
</div>
</div>
<div class="section" id="feature-allow-resourceviewhelper-to-accept-resource-paths">
<h3>[!!!][FEATURE] Allow ResourceViewHelper to accept resource:// paths</h3>
<p>This enables the path argument of the Uri.ResourceViewHelper
to accept also resource URIs in the format &#8220;resource://Package.Name/Public/...&#8221;.
This functionality used to be achievable with the former uri
argument but was removed with I92dccba6b5acd623ff33eb538e62d0682f00b95e.</p>
<p>This is marked breaking because it introduces Exceptions in case
of incorrect argument usage or values.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=5504beef578d5ef2e6c0f394fbed1a6e240d70c5">5504bee</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-doc-comment-in-link-email-viewhelper">
<h3>[BUGFIX] Fix Doc comment in link.email ViewHelper</h3>
<p>Fixes the code example in the classes doc comment
and replaces a minor whitespace issue</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43121">#43121</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=d21bd9e0629db33040b59df2f341b366bc79c07f">d21bd9e</a></li>
</ul>
</div>
<div class="section" id="task-add-member-for-paginatecontroller-objects">
<h3>[TASK] Add member for PaginateController::objects</h3>
<p>Adds declaration for the $objects member in the controller of the
pagination widget.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=56956519d46f1a3bdeb1ecb8c5dfcf54b9e3952f">5695651</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-broken-widgettest">
<h3>[BUGFIX] Fix broken WidgetTest</h3>
<p>The fix for #42511 broke the functional WidgetTest in Fluid, because
it relied on &#8220;broken&#8221; URIs being accepted. The AJAX URI is now prefixed
with &#8220;<a class="reference external" href="http://localhost/">http://localhost/</a>&#8221; to make the test work again.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42746">#42746</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42511">#42511</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=65ea61e4c17f6d635ef828afd90f2e01b3795e52">65ea61e</a></li>
</ul>
</div>
<div class="section" id="feature-i18n-support-for-uri-resource-vh-in-fluid">
<h3>[!!!][FEATURE] I18n support for uri.resource VH in Fluid</h3>
<p>This adds the (already documented) localization of resources to the
uri.resource VH. Any path will be localized if possible, unless the
feature is switched off using the &#8220;localize&#8221; argument.</p>
<p>The change is marked as breaking because it removed the &#8220;uri&#8221;
argument formerly available to the VH.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/32339">#32339</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39792">#39792</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=e9a21a49bf1e6c72ccde995a582857c8bcac4609">e9a21a4</a></li>
</ul>
</div>
<div class="section" id="bugfix-fluid-should-depend-on-the-composer-installer">
<h3>[BUGFIX] Fluid should depend on the composer installer</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=913272d4260fd75610a195192969a926af48e94d">913272d</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-flow3-renamed-to-typo3-flow">
<h3>[TASK] Adjust to FLOW3 renamed to TYPO3 Flow</h3>
<p>Adjusts the code, comments, documentation as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=284e8f86439b3c8e0eb9abb4933ab78841d2f4bb">284e8f8</a></li>
</ul>
</div>
<div class="section" id="task-update-composer-type-to-new-naming-scheme">
<h3>[TASK] Update composer type to new naming scheme</h3>
<p>In accordance with the rename to TYPO3 Flow, the
composer-type is now <tt class="docutils literal"><span class="pre">typo3-flow-*</span></tt></p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=45a3117dc1c800f226c658757bdfa2d3738846ce">45a3117</a></li>
</ul>
</div>
<div class="section" id="id376">
<h3>[TASK] Change dependency to require flow3/composer-installers</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=56822145986c86b490a178b48f9e72ff02280570">5682214</a></li>
</ul>
</div>
<div class="section" id="task-use-composer-version-of-installers">
<h3>[TASK] Use composer version of installers</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=8061eeb300cb891dee2353f43c8731097e7e1447">8061eeb</a></li>
</ul>
</div>
<div class="section" id="task-add-christianjul-installers-dependency">
<h3>[TASK] Add christianjul/installers dependency</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=4449c2aa41c378f06e17b2faa879b880b3ef8bcf">4449c2a</a></li>
</ul>
</div>
<div class="section" id="id379">
<h3>[TASK] Update unit tests to vfsStream &gt; 1.0</h3>
<p>This adjusts the unit tests to the new vfsStream API.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37813">#37813</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=e42dfb079f34d017837358764e5c71fe898675af">e42dfb0</a></li>
</ul>
</div>
<div class="section" id="task-make-psr-0-and-composer-compatible">
<h3>[TASK] Make PSR-0 and composer compatible</h3>
<p>Moves all classes into a PSR-0 directory structure and adds a composer
manifest instead of Package.xml.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=dfab7ff48b4c29c65c0eab1bc4e63c121a28bb38">dfab7ff</a></li>
</ul>
</div>
<div class="section" id="feature-allow-using-locale-in-currency-and-date-viewhelper">
<h3>[FEATURE] Allow using Locale in Currency and Date ViewHelper</h3>
<p>This enables switching the use of the current active Locale
in Format.Currency and Format.Date ViewHelper.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33143">#33143</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=afdbc774a68af9e1a9aaf72a61680078b510d7c0">afdbc77</a></li>
</ul>
</div>
<div class="section" id="id383">
<h3>[TASK] Whitespace fix in class docblock</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=f20e61d31917e74d19e2b7fdd84a4dbf95c85d38">f20e61d</a></li>
</ul>
</div>
<div class="section" id="task-code-documentation-fix-on-return-types">
<h3>[TASK] Code documentation fix on return types</h3>
<p>The variable container accepts any type, not only objects.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=bbb99516cdb8f0252ad426f65b469bd55556a593">bbb9951</a></li>
</ul>
</div>
<div class="section" id="task-enhance-exception-for-duplicate-variables">
<h3>[TASK] Enhance exception for duplicate variables</h3>
<p>The exception message for &#8216;Duplicate variable declarations!&#8217; now
contains the variablename which is doubled.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40828">#40828</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=438da61f6f460dd84079223c3b936c4df6e435fb">438da61</a></li>
</ul>
</div>
<div class="section" id="feature-format-jsonviewhelper-escapes-tag-characters-per-default">
<h3>[FEATURE] Format.JsonViewHelper escapes tag characters per default</h3>
<p>Since occuring plain greater-than or less-than characters in HTML
context could be dangerous (even CDATA sequences can be stopped with
this), the tags are now converted to their hexadecimal representation.
Since this is standard JSON syntax, this is considered not to be a
breaking change.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39886">#39886</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=3d6a9326a0f1d28127a09c339c7a3da7743af33a">3d6a932</a></li>
</ul>
</div>
<div class="section" id="id386">
<h3>[TASK] Support literal strings in boolean arguments</h3>
<p>This change adds support for string literals in boolean comparisons.
String literals have to be surrounded by single or double quotes and
may contain escaped single or double quotes.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/6757">#6757</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=125413ca638696bb4eef9b5c26eceed51acdcf4e">125413c</a></li>
</ul>
</div>
<div class="section" id="bugfix-templateparser-unquotestring-does-not-trim-escaped-quotes-correctly">
<h3>[BUGFIX] TemplateParser unquoteString does not trim escaped quotes correctly</h3>
<p>This change fixes wrong trimming of trailing quotes in escaped sequences
by replacing trim() calls with a preg_replace() alternative.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39604">#39604</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=009b1fc60ca13edc8aa95a2716a8b07c479ca169">009b1fc</a></li>
</ul>
</div>
<div class="section" id="feature-reserved-variables-represent-their-meaning-when-accessing">
<h3>[FEATURE] Reserved variables represent their meaning when accessing</h3>
<p>All reserved variables, ie true, false, on, off etc. now represent
their intended value when accessing them.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39410">#39410</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=3000719576da649017a4cbed51da2c2c058737f6">3000719</a></li>
</ul>
</div>
<div class="section" id="bugfix-action-uri-of-the-form-viewhelper-is-not-reset">
<h3>[BUGFIX] Action URI of the form ViewHelper is not reset</h3>
<p>Form ViewHelpers store the action URI attribute for performance
reasons.
But because instances of ViewHelpers are reused, this value needs
to be reset.
Besides this removes an obsolete property &#8220;formActionUriArguments&#8221;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39456">#39456</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/11636">#11636</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=694538964346bc39f0dbf90725fd5474c6c5ee08">6945389</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-textareaviewhelper-html5-aware">
<h3>[BUGFIX] Make TextareaViewHelper HTML5 aware</h3>
<p>This makes the arguments &#8220;rows&#8221; and &#8220;cols&#8221; of the form.textarea
ViewHelper optional.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31189">#31189</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=2ed20916d219fa7a885ba6f9b65ae7265ed59dda">2ed2091</a></li>
</ul>
</div>
<div class="section" id="task-make-reflectionservice-property-in-abstractviewhelper-protected">
<h3>[TASK] Make reflectionService property in AbstractViewHelper protected</h3>
<p>The property &#8220;reflectionService&#8221; in the AbstractViewHelper should be
protected instead of private to allow usage of the reflection service in
view helpers without having to inject again with another property name.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39255">#39255</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=4b3c0967b73ebe13e044dab061192999c016b60b">4b3c096</a></li>
</ul>
</div>
<div class="section" id="task-correct-striptags-test-because-of-unintended-incompletion-result">
<h3>[TASK] Correct StripTags test because of unintended incompletion result</h3>
<p>A test&#8217;s data provider&#8217;s method name began with the character sequence
&#8216;test&#8217;, was hence regarded as test to be executed.
This resulted into an &#8220;Incomplete&#8221; result when running the tests.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=96f77ee3b32cdfe802b18792931e5b73cdbda831">96f77ee</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-use-of-dashes-in-attribute-names-possible">
<h3>[BUGFIX] Make use of dashes in attribute names possible</h3>
<p>When using e.g. data-foo in VH tags, the parser would choke. This
change fixes this.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38592">#38592</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=88d7486d961daa35af376559675e93bcffe7756c">88d7486</a></li>
</ul>
</div>
<div class="section" id="bugfix-move-functional-test-configuration-to-testing">
<h3>[BUGFIX] Move functional test configuration to Testing</h3>
<p>This moves the functional test configuration to the
Testing context, to avoid errors in other contexts.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38873">#38873</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=50370f1ae6080b77502457d26245d5ad1cb271bf">50370f1</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-eval-from-standaloneviewtest">
<h3>[BUGFIX] Remove eval from StandaloneViewTest</h3>
<p>Removes the use of eval from the StandaloneViewTest so that
now a Fixture class is used that extends the StandaloneView.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38873">#38873</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31179">#31179</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=ec1b90495f25053418661025a311c8456b0c2cf3">ec1b904</a></li>
</ul>
</div>
<div class="section" id="bugfix-replace-placeholders-in-fallback-for-id-translation">
<h3>[BUGFIX] Replace placeholders in fallback for id translation</h3>
<p>When using id based translation and no translation is defined in XLIFF,
the tag value is used as a fallback in TranslateViewHelper.</p>
<p>With this change, the fallback is passed to label based translation,
making placeholder replacement work also if no translation does exist
yet.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37387">#37387</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=96189df3951e77ed115c33d4a12603e0571c3f7a">96189df</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-wrong-use-of-internal-annotation">
<h3>[BUGFIX] Remove (wrong) use of Internal annotation</h3>
<p>The internal annotation is used to declare command methods
as internal, not to mark things as not being public API.</p>
<p>Furthermore, it is not allowed to be used on properties
and with #38667 fixed Fluid would cause exceptions.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38667">#38667</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=55e055c0f3bd3c48f5bce02eba9ddd8661fd7cb4">55e055c</a></li>
</ul>
</div>
<div class="section" id="id403">
<h3>[TASK] Code cleanup</h3>
<p>Does code cleanup, mostly to documentation, but also tweaks
unused variables, missing return statements and similar things.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=edd10b4d737b3d21fc7e6b3d5b3a5dc69aa60cfb">edd10b4</a></li>
</ul>
</div>
<div class="section" id="bugfix-only-render-hidden-upload-fields-if-a-resource-is-available">
<h3>[BUGFIX] Only render hidden upload fields if a resource is available</h3>
<p>The UploadViewHelper always creates hidden fields for filename and
resource pointer so that previously uploaded files are not lost
if validation errors occur.</p>
<p>This change makes sure that those hidden fields are only rendered
if a file has been uploaded before because otherwise the property
mapper tries to create a Resource object and fails with an
exception (see #38184).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38184">#38184</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=630992b7378e53ae51e2aa341837a4010dbe4bd2">630992b</a></li>
</ul>
</div>
<div class="section" id="task-add-query-parameters-for-form-action-as-hidden-fields">
<h3>[TASK] Add query parameters for form action as hidden fields</h3>
<p>This change makes the form viewhelper usable with method GET by adding
query parameters of the action as hidden fields to the form. Otherwise
the browser would replace them by the form values
(<a class="reference external" href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.4">http://www.w3.org/TR/html401/interact/forms.html#h-17.13.3.4</a>).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/11636">#11636</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=488b238d9436d73df7e06679a6e76e83515f0fb7">488b238</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unusable-checkbox-radio-if-formobject-is-null">
<h3>[BUGFIX] Fix unusable checkbox/radio if formObject is NULL</h3>
<p>When using a form object inside of a form view helper inside an index
action template and a checkbox is referring to a property $sth of
$someFormObject, the form object can be NULL with code like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">indexAction</span><span class="p">(</span><span class="nx">\\Some\\Type</span> <span class="nv">$someFormObject</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">){</span> <span class="o">...</span> <span class="p">}</span>

<span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span> <span class="o">...</span> <span class="nx">object</span><span class="o">=</span><span class="s2">&quot;{someFormObject}&quot;</span><span class="o">&gt;</span>
 <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">checkbox</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;{sth}&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span> <span class="nx">checked</span><span class="o">=</span><span class="s2">&quot;{sth.value} == yes&quot;</span><span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Initially calling the index action makes someFormObject NULL. If the submitted
form had validation errors someFormObject is NULL, too. This possibility
was ignored in a call for the formObject from within the CheckboxViewHelper as
well as from the RadioViewHelper.</p>
<dl class="docutils">
<dt>So you would get an exception telling you</dt>
<dd>No value found for key &#8220;TYPO3\Fluid\ViewHelpers\FormViewHelper-&gt;formObject&#8221;</dd>
</dl>
<p>This change fixes that bug and thus also sets the checkbox and radio
&#8220;checked&#8221; attribute properly when a validation error occurred.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35894">#35894</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=cbe93048c094cdc1eec2feafc70bd1ee1d99c47b">cbe9304</a></li>
</ul>
</div>
<div class="section" id="feature-add-a-viewhelper-for-entity-identifier-retrieval">
<h3>[FEATURE] Add a ViewHelper for entity identifier retrieval</h3>
<p>This adds a ViewHelper &#8220;format.identifier&#8221; that returns
the plain identifier for a given entity.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33494">#33494</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=c8d53e983c5a387b80560fd2bd62556a4c91833a">c8d53e9</a></li>
</ul>
</div>
<div class="section" id="bugfix-viewhelper-exceptions-should-not-be-caught-in-testing-context">
<h3>[BUGFIX] ViewHelper exceptions should not be caught in testing context</h3>
<p>While it is correct that ViewHelper exceptions are silently logged in
production context, they should be displayed in development and testing
context; and not only in development context.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37671">#37671</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=166e7e54a8ff03e44cd5e692e273894280594b32">166e7e5</a></li>
</ul>
</div>
<div class="section" id="id411">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=575adc243a7a820104d0d5506eb0377c2a38150b">575adc2</a></li>
</ul>
</div>
<div class="section" id="task-standalone-view-set-default-format-html">
<h3>[TASK] Standalone View: set default format &#8220;html&#8221;</h3>
<p>Since the introduction of Content Negotiation to FLOW3
(I7d753155aa72f41e3df85b076e8067bcbfe7ac04), the default
Format of the ActionRequest is not &#8220;html&#8221; but undefined.
The Standalone View relied on the default &#8220;html&#8221; format
and thus now needs to set it itself.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37561">#37561</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=db77eca6d3f97471fc0970e634a9d3ccf30b2abc">db77eca</a></li>
</ul>
</div>
<div class="section" id="bugfix-hidden-fields-should-be-rendered-in-extra-section">
<h3>[BUGFIX] hidden fields should be rendered in extra section</h3>
<p>Currently form.select and form.checkbox ViewHelpers render
hidden fields before the actual input field in order to
force submission of a value.
This leads to the situation that labels wrapped around the
field do not correspond to the actual form field, but to
the hidden field.
This is fixed by letting the form ViewHelper taking care of
rendering the requried hidden fields in the already existing
section on top of the form.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/26481">#26481</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/13342">#13342</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=f25fa5fbc2ce1eea24e6b5434ed82ead412149c7">f25fa5f</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-empty-output-of-translateviewhelper">
<h3>[BUGFIX] Avoid empty output of TranslateViewHelper</h3>
<p>If translation by ID is used but no translation is found, the ID will now be
returned if the view helper tag has no content. Before this change it would
just return nothing (printable, at least).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35041">#35041</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=68e3bad56dfc67911d8c968f792b90bc8d55579f">68e3bad</a></li>
</ul>
</div>
<div class="section" id="feature-allow-access-to-attributes-in-tagbuilder">
<h3>[FEATURE] Allow access to attributes in TagBuilder</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37460">#37460</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=afaacebed16d6b9ab2cb320fecc32be6a9d7d69a">afaaceb</a></li>
</ul>
</div>
<div class="section" id="task-disable-escapinginterceptor-in-format-json-viewhelper">
<h3>[TASK] Disable escapingInterceptor in Format.Json ViewHelper</h3>
<p>Because the provided ViewHelper children will never be put
through to the template but only be used for source value
retrieval, the escapingInterceptor gets disabled.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/12442">#12442</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=50dcde38eeac969241e5b148e4610e4c1c4edb72">50dcde3</a></li>
</ul>
</div>
<div class="section" id="feature-adds-a-format-json-viewhelper">
<h3>[FEATURE] Adds a format.json ViewHelper</h3>
<p>Provide a ViewHelper that enables putting JSON out of an array or
object. Basically wraps PHP&#8217;s native json_encode() method.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/12442">#12442</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=87ea437e05eb0838afa45c24722785f7c0630240">87ea437</a></li>
</ul>
</div>
<div class="section" id="id419">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add spaces to &#8221;){&#8221; and to &#8220;foreach(&#8221;, fixes some docblocks and
indentation. Also avoids a possible uninitialised variable warning.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Fluid.git?a=commit;h=1a688404901cc77d75807d798df8db9fdef96718">1a68840</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id421">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=587018d705b5b023699cf1ab10635a79475f2ab3">587018d</a></li>
</ul>
</div>
<div class="section" id="id423">
<h3>[TASK] Prepare composer manifest for release</h3>
<p>Remove the version field, so versions can be read from tags in git
instead.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=e15b0c2ec34aee7f2e677920f9236b2964d119cd">e15b0c2</a></li>
</ul>
</div>
<div class="section" id="id425">
<h3>[TASK] Cleanup use statements with leading backslash</h3>
<p>An almost purely cosmetic issue, but still: use always takes fully
qualified class names, thus no leading backslash should be used.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=aae5f6ee2cbf6adb1728bf23a04707347785f4a9">aae5f6e</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-down-migration-for-mysql-version20120429213446">
<h3>[BUGFIX] Fix down migration for Mysql, Version20120429213446</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41482">#41482</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=930a1d41535f8fbe771e215d04eba5f71ccdb5bc">930a1d4</a></li>
</ul>
</div>
<div class="section" id="bugfix-party-should-depend-on-the-composer-installer">
<h3>[BUGFIX] Party should depend on the composer installer</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=4f814fe1ed1a3d29504e2b67babc63ae8630a9ad">4f814fe</a></li>
</ul>
</div>
<div class="section" id="id427">
<h3>[TASK] Adjust to FLOW3 renamed to TYPO3 Flow</h3>
<p>Adjusts the code, comments, documentation as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=483d978a7771a0e4f1fe6080ba34de7e17e2fa62">483d978</a></li>
</ul>
</div>
<div class="section" id="id429">
<h3>[TASK] Update composer type to new naming scheme</h3>
<p>In accordance with the rename to TYPO3 Flow, the
composer-type is now <tt class="docutils literal"><span class="pre">typo3-flow-*</span></tt></p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=4e0c4b342c2912e2edd52450b0e8ac4f32ade817">4e0c4b3</a></li>
</ul>
</div>
<div class="section" id="task-adjust-composer-manifest">
<h3>[TASK] Adjust composer manifest</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=1b33e6977b3e804e36b339d9d812e6ea87c46e0e">1b33e69</a></li>
</ul>
</div>
<div class="section" id="id432">
<h3>[TASK] Change dependency to require flow3/composer-installers</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=9ef4f5f730ddcb0310766fdc051bd14f8c11fee7">9ef4f5f</a></li>
</ul>
</div>
<div class="section" id="id433">
<h3>[TASK] Add christianjul/installers dependency</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=1961f20b9375ea1bca90d6412846e12ef771c8e1">1961f20</a></li>
</ul>
</div>
<div class="section" id="id435">
<h3>[TASK] Make PSR-0 and composer compatible</h3>
<p>Moves all classes into a PSR-0 directory structure and adds a composer
manifest instead of Package.xml.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=cbe85f30a830a0625e106b815447a76eefc557e7">cbe85f3</a></li>
</ul>
</div>
<div class="section" id="taks-whitespace-fix-in-class-docblock">
<h3>[TAKS] Whitespace fix in class docblock</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=6201a388d9d20ac3a4e73358d19127c10277288a">6201a38</a></li>
</ul>
</div>
<div class="section" id="id437">
<h3>[TASK] Code cleanup</h3>
<p>Tweaks a single constructor docblock.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=ac08ac51415e1eef0da77f0d85be39e1597ee0e4">ac08ac5</a></li>
</ul>
</div>
<div class="section" id="task-adjust-validators-to-avoid-validating-more-than-needed">
<h3>[TASK] Adjust validators to avoid validating more than needed</h3>
<p>Corresponds to If2975bb2e4b79fd7227bda9c7c65b32a7f210e8e.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34154">#34154</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=356939cec24a0194d4d6e5bff09cea8db6e60631">356939c</a></li>
</ul>
</div>
<div class="section" id="id441">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=ed0a6052819f303caec2deba1133f5f5a8510a8e">ed0a605</a></li>
</ul>
</div>
<div class="section" id="task-make-usagetype-on-electronicaddress-nullable">
<h3>[TASK] Make usagetype on ElectronicAddress nullable</h3>
<p>The usage property has no default value and thus should be
nullable to make &#8220;any&#8221; usage possible.</p>
<p>Adds a functional test (thanks Adrian Föder) as well.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/35059">#35059</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=e1d0e7bd46afb82b58a484122b0b9fcb0d5edc29">e1d0e7b</a></li>
</ul>
</div>
<div class="section" id="id443">
<h3>[TASK] Adjust validators to avoid validating more than needed</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34145">#34145</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=eece55844a51c5cf8eba9229d66bccfd128df0b8">eece558</a></li>
</ul>
</div>
<div class="section" id="bugfix-duplicate-email-address-throws-exception">
<h3>[BUGFIX] Duplicate email address throws exception</h3>
<p>Since #29547 is resolved, trying to store an email address that
already exists throws an exception.
This change drops the unique indexes for &#8220;identifier&#8221;, &#8220;type&#8221; and
&#8220;usagetype&#8221; from the ElectronicAddress domain model.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/37266">#37266</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29547">#29547</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=ed1f4b8b69706db4f1d3dcab7e7283566711aaec">ed1f4b8</a></li>
</ul>
</div>
<div class="section" id="id447">
<h3>[TASK] Clean up some coding style issues</h3>
<p>Add space to &#8220;foreach(&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Party.git?a=commit;h=6445053e14cc7ad45cf7fc486dec9f3c8fe4ee9c">6445053</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id450">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=c2c556abeb379b3f17235399d02b44af36550cb8">c2c556a</a></li>
</ul>
</div>
<div class="section" id="id451">
<h3>[TASK] Prepare composer manifest for release</h3>
<p>Remove the version field, so versions can be read from tags in git
instead.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=3c7e9c54b2eb2b4cdf91bd9da86755bc1c89b1c8">3c7e9c5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-strpos-parameters-in-controller-kickstart">
<h3>[BUGFIX] Fix strpos() parameters in controller kickstart</h3>
<p>strpos() parameters were specified in reverse order which broke creation
of controllers for subpackages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43423">#43423</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=97c03c55dbf1a213b95b43cdae064752c91eb420">97c03c5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-type-hint-of-collections-in-generated-model-classes">
<h3>[BUGFIX] Fix type hint of collections in generated model classes</h3>
<p>This makes sure that, when using collections with element type hints,
only the collection class name ends up in the type hint of the generated setter.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29791">#29791</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=3060ff79b14ea8ff7ca3fefb54dad911b625bc2f">3060ff7</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-error-message-about-invalid-package-key">
<h3>[BUGFIX] Fix error message about invalid package key</h3>
<p>When specifying an invalid package key in the kickstart
commands, the error message now includes a note about the
vendor namespace that has to be added.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43194">#43194</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=7a4886a83d696a9e2db3f10286875b2cac9be723">7a4886a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-case-of-class-names-to-generate">
<h3>[BUGFIX] Fix case of class names to generate</h3>
<p>This makes sure the created controller class names and
references are upper cased in order to avoid misleading
exceptions if the controller was specified lower cased.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43144">#43144</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=ee5f02611f1a4ddc9b5e0db338ef7c47e1d85246">ee5f026</a></li>
</ul>
</div>
<div class="section" id="id457">
<h3>[TASK] Update composer type to new naming scheme</h3>
<p>In accordance with the rename to TYPO3 Flow, the
composer-type is now <tt class="docutils literal"><span class="pre">typo3-flow-*</span></tt></p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=4280efb254988ba03c6c1d2013377fd026cd1e29">4280efb</a></li>
</ul>
</div>
<div class="section" id="id459">
<h3>[TASK] Adjust to FLOW3 renamed to TYPO3 Flow</h3>
<p>Adjusts the code, comments, documentation as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=5ee2ca0cab7a85f7ce804d1b80c527e017b9d48c">5ee2ca0</a></li>
</ul>
</div>
<div class="section" id="task-add-dependency-to-require-flow3-composer-installers">
<h3>[TASK] Add dependency to require flow3/composer-installers</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=c86dcb772cd884eb2283aa44e431d016c45a1742">c86dcb7</a></li>
</ul>
</div>
<div class="section" id="task-update-to-write-in-psr-0-compatible-path">
<h3>[TASK] Update to write in PSR-0 compatible path</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/41180">#41180</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=3cd555a208e7098c23af28bfd4e783b0bb7248bc">3cd555a</a></li>
</ul>
</div>
<div class="section" id="id462">
<h3>[TASK] Make PSR-0 and composer compatible</h3>
<p>Moves all classes into a PSR-0 directory structure and adds a composer
manifest instead of Package.xml.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=e23e727e87ae59124966093b8518e692bb617abb">e23e727</a></li>
</ul>
</div>
<div class="section" id="id464">
<h3>[TAKS] Whitespace fix in class docblock</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=e7c7a489cdd95e6e55a7da3c5f0f11ba9582375c">e7c7a48</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstart-package-gives-wrong-hint-for-valid-package-key">
<h3>[BUGFIX] kickstart:package gives wrong hint for valid package key</h3>
<p>The kickstarter wrongly claims that a valid package key
may contain underscores. This patch corrects the respective
messages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/38999">#38999</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=211dcabe868d9679ba20be862acc843258b05cd2">211dcab</a></li>
</ul>
</div>
<div class="section" id="id466">
<h3>[TASK] Code cleanup</h3>
<p>Does cleanup to code documentation.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/34875">#34875</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=d6228bac6220e6c551dc9b1a7cbedacdd0e947eb">d6228ba</a></li>
</ul>
</div>
<div class="section" id="id468">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Kickstart.git?a=commit;h=ed26ddf4131a0479a8e73dbaa2bad05160bbcdc8">ed26ddf</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id469">
<h3>[TASK] Update composer.json with new dependencies</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=662a7beba0ae2a439a3482b567bd9fa80ba3fe6e">662a7be</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-tests-to-required-action-arguments">
<h3>[BUGFIX] Adjust tests to required action arguments</h3>
<p>Adjusts tests to changed requirements introduced with
I03fa30be2522ee53d5a8f184b57afe539ed4f991</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=7ad7b6c53a550f433415e433b095cc3623dfe1b2">7ad7b6c</a></li>
</ul>
</div>
<div class="section" id="id471">
<h3>[TASK] Prepare composer manifest for release</h3>
<p>Remove the version field, so versions can be read from tags in git
instead. Fixes the description slightly.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43822">#43822</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=c7697af4ecb646412e338d2bbe6780c0424d8cc0">c7697af</a></li>
</ul>
</div>
<div class="section" id="task-update-logo-to-typo3-flow">
<h3>[TASK] Update logo to TYPO3 Flow</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42766">#42766</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=f05652e2215e3dfad89984bc4f1468e2546186f8">f05652e</a></li>
</ul>
</div>
<div class="section" id="id474">
<h3>[TASK] Update composer type to new naming scheme</h3>
<p>In accordance with the rename to TYPO3 Flow, the
composer-type is now <tt class="docutils literal"><span class="pre">typo3-flow-*</span></tt></p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=44a146a59598a2e7e334372af0d480d4b9db5b5e">44a146a</a></li>
</ul>
</div>
<div class="section" id="id476">
<h3>[TASK] Adjust to FLOW3 renamed to TYPO3 Flow</h3>
<p>Adjusts the code, comments, documentation as needed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41466">#41466</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=9a041821dea0484f321a2a22dad79ec77046eefd">9a04182</a></li>
</ul>
</div>
<div class="section" id="id478">
<h3>[TASK] Adjust composer manifest</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=79fade8bbbcee5dabcb3c20d7b97b71c9457e039">79fade8</a></li>
</ul>
</div>
<div class="section" id="id480">
<h3>[TASK] Make PSR-0 and composer compatible</h3>
<p>Moves all classes into a PSR-0 directory structure and adds a composer
manifest instead of Package.xml.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/41031">#41031</a></li>
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=a18695b540cb664c41ad04f83deb2c2d972cdf6e">a18695b</a></li>
</ul>
</div>
<div class="section" id="id482">
<h3>[TASK] Update Package.xml with new version number</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="http://git.typo3.org/FLOW3/Packages/TYPO3.Welcome.git?a=commit;h=f889660f45eced95d9585a151ee57f2ead6d55f7">f889660</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="5c8ae7cb-cf7e-ce92-9856-f0ba0a567a48" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="506a4a4a-e61c-8b45-a862-a9ebf6ba635a" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="201" locale="">
        <properties>
         <title>2.0.1</title>
        </properties>
        <node identifier="ef7eaee0-be8f-27f3-3ff7-ee9a9348d610" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="7fd09408-956e-543b-3c3c-90fa97635ecd" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>2.0.1</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-fix-create-branch-dependency-handling">
<h3>[TASK] Fix create-branch dependency handling</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/7bdf476d1eb25b72457c32213af609291cfcc319">7bdf476</a></li>
</ul>
</div>
<div class="section" id="task-some-tweaks-to-the-release-scripts">
<h3>[TASK] Some tweaks to the release scripts</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/ef4373b77ecdb0db23afd0f087eb0134e09ee7f5">ef4373b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-commit-links-in-create-changelog-sh-script">
<h3>[BUGFIX] Fix commit links in create-changelog.sh script</h3>
<p>Link to correct URI for git.typo3.org commit details.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/d7d0522cbe54e378d9972b6175edd63bd8255bca">d7d0522</a></li>
</ul>
</div>
<div class="section" id="task-tweak-to-create-changelog-sh-script">
<h3>[TASK] Tweak to create-changelog.sh script</h3>
<p>Also link FLOW-SA-… bulletins</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/5fc162780c915d3c7d79d01e7d3653cb9a11064d">5fc1627</a></li>
</ul>
</div>
<div class="section" id="task-add-suggestion-for-pdo-sqlite-to-composer-manifest">
<h3>[TASK] Add suggestion for pdo_sqlite to composer manifest</h3>
<p>For running the functional tests out-of-the-box pdo_sqlite is required,
so inform about that during installation.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/b44f1fbf0d17083ccb7d7626494b8524799e2329">b44f1fb</a></li>
</ul>
</div>
<div class="section" id="task-update-vfsstream-requirement-to-1-2">
<h3>[TASK] Update vfsstream requirement to 1.2.*</h3>
<p>This updates the requirement for mikey179/vfsstream from 1.1.* to 1.2.*.
* Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/e8448da664d89ddb37bf5c6567d7a2f60b73d8bd">e8448da</a></p>
</div>
<div class="section" id="task-tweak-scripts-to-help-with-releases-and-branching">
<h3>[TASK] Tweak scripts to help with releases and branching</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/5c6251e5f8d011c16d0be823663b35d9326dbbcb">5c6251e</a></li>
</ul>
</div>
<div class="section" id="task-add-scripts-to-help-with-releases-and-branching">
<h3>[TASK] Add scripts to help with releases and branching</h3>
<p>This adds a number of scripts specific to the Flow distribution to aid
with creating new branches and for releasing new versions.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/88d267630ae6ee8f9399a36442800ab5754e8ff2">88d2676</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-release/7/">http://ci.typo3.robertlemke.net/job/typo3-flow-release/7/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/32fb9ef3b6ea75c95ec6ad8926956d4e7e467f15">32fb9ef</a></li>
</ul>
</div>
<div class="section" id="security-remove-possible-xss-from-actioncontroller-error-output">
<h3>[SECURITY] Remove possible XSS from ActionController Error output</h3>
<p>The errorAction method in the ActionController base class of Flow
returns error messages without properly encoding them. Because these
error messages can contain user input, this could lead to a Cross-Site
Scripting vulnerability in Flow driven applications.</p>
<p>The offending output has been removed without substitution.</p>
<p>Hint: If you have customized the error action in your Flow application,
we advise you to check that the error messages returned in these actions
only contain static strings and are not derived from any kind of user
input. If you are not sure whether your code is fine in that regard,
feel free to ask on a public mailing list or the forum.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31206">#31206</a></li>
</ul>
<p>Security-Bulletin: TYPO3-FLOW-SA-2013-001</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/170b2b115ef91bc586fac8742429311523a4fdb8">170b2b1</a></li>
</ul>
</div>
<div class="section" id="task-update-contributors-list-in-guide">
<h3>[TASK] Update contributors list in guide</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4e3b3c7c97cf0597699bad9f67a3658e3d6b7b41">4e3b3c7</a></li>
</ul>
</div>
<div class="section" id="task-improve-documentation-for-excludeclasses-setting">
<h3>[TASK] Improve documentation for excludeClasses setting</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e5073a3fbe2ec837e7a3743f740cc8d8fcd72ddd">e5073a3</a></li>
</ul>
</div>
<div class="section" id="task-mention-php-closing-tag-omission-in-cgl">
<h3>[TASK] Mention PHP closing tag omission in CGL</h3>
<p>This updates the Coding Guidelines to omit the PHP closing tag.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/843cae1fbd5fdd1460ec84dca9750cb65c4fc477">843cae1</a></li>
</ul>
</div>
<div class="section" id="task-replace-some-leftover-flow3-in-tests">
<h3>[TASK]  Replace some leftover FLOW3 in tests</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/eac16e7f633fbb745a69c3764a252ca4e11a742d">eac16e7</a></li>
</ul>
</div>
<div class="section" id="bugfix-uuid-validator-rejects-too-long-uuids">
<h3>[BUGFIX] UUID Validator rejects too long UUIDs</h3>
<p>Now the validation regex has start- and end of string
boundaries, hence rejecting strings which only
contain a valid UUID, but having extraordinary strings
before or behind.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52311">#52311</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0b91dd2c92743a6737d637ca66a4849511b1cc45">0b91dd2</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-csrf-protection-for-authenticate-action">
<h3>[BUGFIX] Skip csrf protection for authenticate action</h3>
<p>As the authenticate action is usually called by a
POST request, this request is considered a non safe
request. However, as you are most likely not logged in
when calling authenticate, csrf protection is neither
working nor needed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/dac79bb0f97ebb330b07d4c396f0ba126e36671f">dac79bb</a></li>
</ul>
</div>
<div class="section" id="bugfix-filebasedsimplekeyprovider-has-to-authenticate-an-account-with-roles">
<h3>[BUGFIX] FileBasedSimpleKeyProvider has to authenticate an account with roles</h3>
<p>To be able to use real role based authorization with the
FileBasedSimpleKeyProvider, we have to authenticate an
account which holds existing roles.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d56e646aa59b7a9c5904ab4faa06a782a3a99144">d56e646</a></li>
</ul>
</div>
<div class="section" id="bugfix-transient-properties-should-not-be-serialized">
<h3>[BUGFIX] Transient Properties should not be serialized</h3>
<p>Properties annotated with the \TYPO3\Flow\Annotations\Transient
annotation should not be serialized in the autogenerated __sleep
method.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52448">#52448</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/26ee5d83293a022eb4b1ee7048ba3bd1c6cd4ccc">26ee5d8</a></li>
</ul>
</div>
<div class="section" id="task-make-code-migration-checking-roles-in-policies-more-robust">
<h3>[TASK] Make code migration checking roles in policies more robust</h3>
<p>The migration checking for the use of globally defined roles identifier
was a bit too eager in working on packages without Policy.yaml and/or
role definitions, plus it did not skip local roles in ACLs.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/85556d0db1691166e86f667aa4768d445f943329">85556d0</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-access-to-resources-granted-to-everybody">
<h3>[BUGFIX] Allow access to resources GRANTED to &#8220;Everybody&#8221;</h3>
<p>PolicyEnforcement does no longer throw an AccessDenied exception
if not logged in before checking the actual ACLs for the
resource in question. This allows creating resources and
granting access to them for &#8220;Everybody&#8221; which was not possible
before.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46036">#46036</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b6768ccfb736ef8b536f420cd2d8068edc44267b">b6768cc</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-tests-and-fix-for-phpunit-3-8">
<h3>[TASK] Clean up tests and fix for PHPUnit 3.8</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/10b33e8c569f46e2d87a669c3126eb80390aedb0">10b33e8</a></li>
</ul>
</div>
<div class="section" id="task-fix-typo-in-name-of-joel-on-software">
<h3>[TASK] Fix typo in name of &#8220;Joel on Software&#8221;</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/888054812757f580464e238439c2b93547c37720">8880548</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-race-condition-when-setting-cache-entries">
<h3>[BUGFIX] Fix race condition when setting cache entries</h3>
<p>This change adds the uniqid() to the temporary filename again and adds
the process id (if the function &#8220;posix_getpid&#8221; is present) as another
unique identifier.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/33621">#33621</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/54486a0145c77eb95d1e8cdb34b8adff66d4b8eb">54486a0</a></li>
</ul>
</div>
<div class="section" id="task-update-and-fix-cgl-add-pdf-to-flow-package">
<h3>[TASK] Update and fix CGL, add PDF to Flow package</h3>
<p>Updates and fixes the CGL to be on par with the master version, only
the namespace handling is omitted as it is not supported in 2.0.</p>
<p>Includes the &#8220;TYPO3 Flow Coding Guidelines on one page&#8221; PDF
as asset to the Flow documentation, fixing the download.</p>
<p>This also links the CGL thumbnail with the PDF and moves images
two levels up in the directory structure.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c50e02fba80a58705e1c47512df733c2877ddfb0">c50e02f</a></li>
</ul>
</div>
<div class="section" id="task-fix-license-in-file-level-docblocks">
<h3>[TASK] Fix license in file level docblocks</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/50835">#50835</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a0af24058ac2bd285f4ad52ef4bcd6ec63eed1ba">a0af240</a></li>
</ul>
</div>
<div class="section" id="task-use-note-to-make-statement-more-catching">
<h3>[TASK] use &#8216;note&#8217; to make statement more catching</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/cedb88ec37f4a2350ef9180e29a322706693179e">cedb88e</a></li>
</ul>
</div>
<div class="section" id="bugfix-broken-annotation-in-documentation">
<h3>[BUGFIX] Broken annotation in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2a9d929016ad1d857135b0a7b21ab883a790393a">2a9d929</a></li>
</ul>
</div>
<div class="section" id="bugfix-replace-wrong-keyword-in-documentation">
<h3>[BUGFIX] Replace wrong keyword in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/deef4373d3d23bcc3260e0504c2da85c6745ee77">deef437</a></li>
</ul>
</div>
<div class="section" id="bugfix-controllercontext-constructor-has-4-arguments">
<h3>[BUGFIX] ControllerContext constructor has 4 arguments</h3>
<p>ControllerContext constructor has no flashMessageContainer
argument, 5th argument.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/49923">#49923</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5829189b8141fa4a252840411055ad5cfd4e19c3">5829189</a></li>
</ul>
</div>
<div class="section" id="bugfix-cache-management-exception-when-files-changed-but-no-classes">
<h3>[BUGFIX] Cache Management Exception when files changed but no classes</h3>
<p>When classes did not change, but other files did, an exception occurs
because $modifiedClassNamesWithUnderscores does not exist, as it can
be seen when reading the source code.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49571">#49571</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/79486985e6032381bdae2634156e5e74f5224cfb">7948698</a></li>
</ul>
</div>
<div class="section" id="task-document-translated-validation-error-messages">
<h3>[TASK] Document translated validation error messages</h3>
<p>This adds documentation on how to use translated validation error
messages.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48251">#48251</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/405cf6d001dbf1268b74ebf9ac2b924a394788c2">405cf6d</a></li>
</ul>
</div>
<div class="section" id="task-add-german-translation-for-validation-error-messages">
<h3>[TASK] Add german translation for validation error messages</h3>
<p>This adds german translatsions for bundled validation error messages.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48254">#48254</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/45279">#45279</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/205a369d3015c14540c98545934afe7d3d1565d8">205a369</a></li>
</ul>
</div>
<div class="section" id="bugfix-comment-now-references-to-the-correct-method-name">
<h3>[BUGFIX] Comment now references to the correct method name</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48557">#48557</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0c04d16f07cda8d0530e0ee48e54d9db06a6f882">0c04d16</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-deterministic-join-aliases">
<h3>[BUGFIX] Use deterministic join aliases</h3>
<p>Before this change, we used uniqid() for building join aliases. This prevented
the doctrine DQL cache to work correctly.</p>
<p>We found this change during profiling TYPO3 Neos, where it led to about
10% performance increase in frontend rendering.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49569">#49569</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/95032c6a66b5330229654a9fb0cfad4eb7513f45">95032c6</a></li>
</ul>
</div>
<div class="section" id="bugfix-behave-silently-if-no-translation-unit-elements-are-present">
<h3>[BUGFIX] Behave silently if no translation unit elements are present</h3>
<p>If a translation source does not contain any translationUnit elements,
which is allowed in XLIFF for &lt;trans-unit&gt; elements inside //file/body,
now there is no Undefined Index error anymore, but the incident is
silently logged to the system logger as every other translation-related
incident.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47058">#47058</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/850bd551b6fae19cf3b243652165cde6e9b05900">850bd55</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id19">
<h3>[TASK] Fix license in file level docblocks</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/50835">#50835</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/b7c8a2926d3209a76223c4077b5a54b201f8552e">b7c8a29</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id21">
<h3>[TASK] Fix license in file level docblocks</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/50835">#50835</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/7eeeb6dd3ebc2ea09b0fb33219b25c017b41d3fb">7eeeb6d</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<p>No changes</p>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="431656f9-bbf8-fac3-0735-382701a72ca5" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="81ce862a-46b5-7a74-6370-f433d60bb824" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="202" locale="">
        <properties>
         <title>2.0.2</title>
        </properties>
        <node identifier="56a204d8-8b03-8c61-736d-5e70908b8a8f" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="d3edcd3a-42da-9bc4-b79a-e80b3a79172e" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>2.0.2</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-release/10/">http://ci.typo3.robertlemke.net/job/typo3-flow-release/10/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/786fdf424daf02251a0754b238a296ecc0dfa1c6">786fdf4</a></li>
</ul>
</div>
<div class="section" id="bugfix-set-max-age-for-cookies">
<h3>[BUGFIX] Set Max-Age for Cookies</h3>
<p>If the configured session cookie lifetime is &gt; 0, the Max-Age property of the
cookie is set accordingly in the response header.</p>
<p>Before this change the lifetime would be used as the expiry time, leading to
cookies having session lifetime only.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/55369">#55369</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/cb283972ff79142d865a9e9cfa891038aff68254">cb28397</a></li>
</ul>
</div>
<div class="section" id="bugfix-object-route-parts-fall-back-to-technical-identifier">
<h3>[BUGFIX] Object Route Parts fall back to technical identifier</h3>
<p>As described in the routing section of the documentation, the
<cite>Object Route Parts`</cite> should use the technical identifier to
represent an object if no uriPattern is specified and the
specified object does not contain any identity properties.</p>
<p>Instead an exception was thrown if no uriPattern could be
determined because <tt class="docutils literal"><span class="pre">ClassSchema::getIdentityProperties()</span></tt>
doesn&#8217;t return the property name of the technical identifier.</p>
<p>This change fixes this by falling back by skipping the
ObjectPathMapping if no uriPattern is defined.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/51082">#51082</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f81d39fe5a2a8b636e2c7e51643c6cb5df9931ca">f81d39f</a></li>
</ul>
</div>
<div class="section" id="bugfix-respect-case-sensitivity-in-object-routing">
<h3>[BUGFIX] Respect case-sensitivity in object routing</h3>
<p>By default dynamic route parts are lower-cased unless the
&#8220;toLowerCase&#8221; flag is set to TRUE for the route or a single
route part.
This change makes sure that this flag is actually taken into
account for routes using the ObjectPathMapping.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44521">#44521</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/56c372045e97248a487d30867fe431d7a53dc6cc">56c3720</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-fully-qualified-classname-in-fixture-entity">
<h3>[BUGFIX] Use fully qualified classname in fixture entity</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4dad7862c6ceb966ec70d6b5c29a1a85903282bf">4dad786</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-configuration-schema-for-routes">
<h3>[BUGFIX] Fix configuration schema for Routes</h3>
<p>This adjusts the Routes.schema.yaml to the &#8220;httpMethods&#8221;
setting introduced with #27117</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27117">#27117</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f69ebd44a9a2dcf0b9dc58106264a8ad7b0e6e96">f69ebd4</a></li>
</ul>
</div>
<div class="section" id="task-tweak-documentation-rendering">
<h3>[TASK] Tweak documentation rendering</h3>
<ul class="simple">
<li>fix broken TOC</li>
<li>exclude change logs from PDF</li>
<li>use parts for PDF rendering</li>
</ul>
<p>All changes have been merged for master already and are consolidated
here for the branch.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6d5bd05d3606bb66104de494ea583161509967c4">6d5bd05</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-getpackageofobject-work-for-proxy-objects">
<h3>[BUGFIX] Make getPackageOfObject() work for proxy objects</h3>
<p>The method <tt class="docutils literal"><span class="pre">PackageManager::getPackageOfObject()</span></tt> failed to
resolve the package of a given object if it was a proxy.</p>
<p>This change fixes this by comparing the namespace of the object
with the package namespaces rather than the file locations.</p>
<p>Background:</p>
<p>The Flow/Doctrine proxy classes usually reside in a folder underneath
<tt class="docutils literal"><span class="pre">Data/Temporary</span></tt>. Comparing those paths with the package root paths
led to invalid results.</p>
<p>In addition this adjusts the <tt class="docutils literal"><span class="pre">getPackageKeyFromMigrationVersion()</span></tt>
of the <tt class="docutils literal"><span class="pre">Doctrine\\Service</span></tt> not to rely on <tt class="docutils literal"><span class="pre">getPackageOfObject()</span></tt>
as all doctrine migrations reside in the <tt class="docutils literal"><span class="pre">TYPO3\\Flow</span></tt> namespace.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/55309">#55309</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/844ea8ecbf4dcfaeaa50b24d60726f2ac5f08493">844ea8e</a></li>
</ul>
</div>
<div class="section" id="feature-documentation-of-the-authentication-process">
<h3>[FEATURE] documentation of the authentication process</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/fc57a00d54b3f16d0bb49564d7a3ce3a9c61d72e">fc57a00</a></li>
</ul>
</div>
<div class="section" id="bugfix-don-t-catch-security-exceptions-during-property-mapping">
<h3>[BUGFIX] Don&#8217;t catch security exceptions during property mapping</h3>
<p>As security exceptions will be handled by the security
framework, we have to let them bubble up instead of
converting them into an property mapping exception.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7f38ddcaec39fd20c9314f93a1f5aabfd79abf66">7f38ddc</a></li>
</ul>
</div>
<div class="section" id="bugfix-injected-properties-are-not-available-in-initializeobject">
<h3>[BUGFIX] Injected properties are not available in initializeObject()</h3>
<p>This fixes an issue where properties injected to the parent class A
were not available when the initializeObject() method of sub class B
was called.</p>
<p>The root cause of this bug was that, in order to avoid double injection,
injectProperties() was only called in the constructor of sub class B
and not in the constructor of parent class A. The initializeObject()
methods however, were still executed in both constructors.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43659">#43659</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/8a28ec3bb417ce757191af5658474d8da06042c4">8a28ec3</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-media-type-on-non-lower-case-filenames">
<h3>[BUGFIX] Wrong media type on non-lower case filenames</h3>
<p>This fixes an issue in the getMediaTypeFromFilename() function which
returned application/octet-stream on any filename specified which
contained a non-lowercase file extension.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/764f3a3adf79041bc44a2fed8382ecc6602a10ee">764f3a3</a></li>
</ul>
</div>
<div class="section" id="bugfix-ignore-unreflectable-classes">
<h3>[BUGFIX] Ignore unreflectable classes</h3>
<p>Classes that cannot be reflected will make the automatic configuration choke.
This happens quite often when using 3rd party components.</p>
<p>Make the reflection system mark the class unconfigurable, to allow the configurator
to ignore the class.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/fa743dbfffced64cdfb9abefe5230d26f0a12cb9">fa743db</a></li>
</ul>
</div>
<div class="section" id="bugfix-booleanconverter-considers-false-true">
<h3>[BUGFIX] BooleanConverter considers &#8220;false&#8221; TRUE</h3>
<p>The BooleanConverter provided by Flow simply casts the $source
to a boolean using boxing.
With this change a string &#8220;false&#8221; (case insensitive) is considered FALSE.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/51255">#51255</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/51385">#51385</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/90d745a04e7583fc22816c4337939d329abafd29">90d745a</a></li>
</ul>
</div>
<div class="section" id="task-fix-broken-links-in-documentation">
<h3>[TASK] Fix broken links in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/253ff119239646b387ca1996d3f725c289acf93b">253ff11</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-arbitrary-setters-in-persistentobjectconverter">
<h3>[BUGFIX] Allow arbitrary setters in PersistentObjectConverter</h3>
<p>This change supports additional setters in entities by implementing a
fallback to the reflection service if the class schema does not contain
a property.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49815">#49815</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4d68da2cc48a80eab3f6526d880bce6ff6cef0a3">4d68da2</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-consistent-spelling-of-dependency-to-avoid-confusion">
<h3>[BUGFIX] Use consistent spelling of dependency to avoid confusion</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/59d02f5283ce2f0363465234dc02219ea6a25be1">59d02f5</a></li>
</ul>
</div>
<div class="section" id="bugfix-write-typo3-cms-instead-of-just-typo3-in-documentation">
<h3>[BUGFIX] Write TYPO3 CMS instead of just TYPO3 in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3cef756db8877011395f0f94b381c7d6855b567c">3cef756</a></li>
</ul>
</div>
<div class="section" id="bugfix-roles-are-not-synchronized-after-database-migrate">
<h3>[BUGFIX] Roles are not synchronized after database migrate</h3>
<p>The roles are not synchronized from the Policy.yaml files to the
database after the database migration, but only after rebuilding
the cache. This causes problems in the setup package where the
database migration is run and the next step fails in reading the
roles from the database.</p>
<p>By adding a signal to the doctrine migration command we can run
the synchronization after database migration so the roles in the
database will always be up to date after migration.</p>
<p>This change makes the initializeRolesFromPolicy method public
which does not cause issues as the method won&#8217;t perform any
actions if the rolesFromPolicyUpToDate flag in the cache is set.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f761fd3d308b97ace9554653e6b7c66846684232">f761fd3</a></li>
</ul>
</div>
<div class="section" id="bugfix-support-bcrypt-validation-of-hashes-with-different-cost">
<h3>[BUGFIX] Support BCrypt validation of hashes with different cost</h3>
<p>In the current implementation of the BCryptHashingStrategy a password is
hashed with crypt and the hash contains the algorithm and parameters
with the salt that was used to hash the password.</p>
<p>This change updates the validation to also take the cost from the stored
hash and allow changes to the cost setting.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47725">#47725</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/269b258218b934570599bcaf00f55f65e43bb63e">269b258</a></li>
</ul>
</div>
<div class="section" id="task-cleaned-up-configuration-validate-command">
<h3>[TASK] Cleaned up configuration:validate command</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/44990">#44990</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/dbec6d6554196c13e289c26c8e87e50a6eae562f">dbec6d6</a></li>
</ul>
</div>
<div class="section" id="bugfix-package-manager-needs-to-sort-active-packages-in-dependency-order">
<h3>[BUGFIX]&nbsp;Package Manager needs to sort active packages in dependency order</h3>
<p>Problem: If being in production context and the configuration cache is still empty,
it might happen that $this-&gt;activePackages is not sorted in the correct order of
package dependencies, but $this-&gt;packages is. This leads to wrongly merged configuration,
which is then cached.</p>
<p>This problem might also occur in development context, but only on first hit. After
a reload it is gone.</p>
<p>This change is a fix which makes sure the order in activePackages is the same
as in packages.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0dd558f9919b5de8f3ada7049f0232a09c13b7b8">0dd558f</a></li>
</ul>
</div>
<div class="section" id="task-tweak-documentation-settings-enable-pdf">
<h3>[TASK] Tweak documentation settings, enable PDF</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9b0142c7999d75c2b4e03ad7a7c4f9636ad42601">9b0142c</a></li>
</ul>
</div>
<div class="section" id="task-fix-and-tweak-rst-markup">
<h3>[TASK] Fix and tweak rST markup</h3>
<p>Note especially the changes to Förthner and Föder! :)</p>
<p>Yes, they fix PDF rendering of the documentation.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/614d8c99635745017e01dce0ce03564f27b4c27c">614d8c9</a></li>
</ul>
</div>
<div class="section" id="task-fix-tables-in-rst-documents">
<h3>[TASK] Fix tables in rST documents</h3>
<p>Although working for HTML rendering the syntax was wrong, breaking PDF
rendering.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3a9237b7cd090afa0013aebb68cd8fc3712a5d54">3a9237b</a></li>
</ul>
</div>
<div class="section" id="bugfix-classes-without-namespace-create-invalid-proxy-code">
<h3>[BUGFIX] Classes without namespace create invalid proxy code</h3>
<p>This change makes classes without namespace create proper proxy
class code, by optionally skipping the namespace declaration.
Before such classes would create an empty namespace statement,
which resulted in syntax errors, i.e.:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="p">;</span>
</pre></div>
</div>
<p>=&gt; &#8220;syntax error, unexpected &#8216;;&#8217;, expecting T_STRING or
T_NS_SEPARATOR or &#8216;{&#8216; in [filename]&#8221;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52944">#52944</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/649c3fa310aa6dad60e6d4a14b36532ac4772f42">649c3fa</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-validation-if-nested-properties-of-same-type-are-present">
<h3>[BUGFIX] Fix validation if nested properties of same type are present</h3>
<p>The performance optimization in #46340
changed the isValid() method of the
GenericObjectValidator to use the result
property while recursing through the properties
of the to be validated object.</p>
<p>Since GenericObjectValidator is reused, it could
be the case that this result set is reset to
empty value.</p>
<p>Revert this change and set the result property
after all properties of the to be validated
object are validated.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/50585">#50585</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46340">#46340</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a6e5f720a486e1af61f9027b5bd13b05174c4ac9">a6e5f72</a></li>
</ul>
</div>
<div class="section" id="task-remove-persistall-from-identityroutepart">
<h3>[TASK] Remove persistAll() from IdentityRoutePart</h3>
<p>Having IdentityRoutePart call persistAll() could have very weird and
unexpected side effects, not even mentioning “safe request”.</p>
<p>This change limits the persist operation to the items managed by the
ObjectPathMappingRepository.</p>
<p>The fix for the failing unit tests in master, done in change with
id I699d47f3cc2d9ad1eaee19e95896e74246c50c38 has been merged into
this one.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1decdd7929d96e0f65b1586ded0645250b99d8a0">1decdd7</a></li>
</ul>
</div>
<div class="section" id="bugfix-browser-must-not-directly-handle-cookie">
<h3>[BUGFIX] Browser must not directly handle cookie</h3>
<p>Request::create() doesn&#8217;t support &#8220;cookies&#8221; parameter.</p>
<p>Cookie argument has been removed from Request::create
with change Icdf7fea74d8331abcf95f1ec361abc78e31bfb8c.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48290">#48290</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/bb9161f46ef404dc43676e1e23299bceff3766dc">bb9161f</a></li>
</ul>
</div>
<div class="section" id="bugfix-actionrequest-should-not-serialize-parent-http-request">
<h3>[BUGFIX] ActionRequest should not serialize parent HTTP request</h3>
<p>When working with WebRedirects and authentication, the intercepted
request is serialized with the security context. While it makes sense
to do so, we should not include the reference to the base HTTP request
in this case, as this includes lots of cruft like $_SERVER etc.</p>
<p>In order to test this, just look at the serialized session files
when a web redirect is taking place.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/53931">#53931</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/896a47d5185f48297a61455c33a11b565d81b53c">896a47d</a></li>
</ul>
</div>
<div class="section" id="bugfix-expose-more-details-in-mappingexceptions">
<h3>[BUGFIX] Expose more details in MappingExceptions</h3>
<p>This adds a try/catch block to the FlowAnnotationDriver adding the
affected class name to the message of the thrown exception.</p>
<p>Before if <tt class="docutils literal"><span class="pre">evaluatePropertyAnnotations</span></tt> threw an exception during
the <tt class="docutils literal"><span class="pre">flow:doctrine:compileproxies</span></tt> command the exception did not
contain details about the affected class (see #52907).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52907">#52907</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/86c578afa474b3cda83569ac23c90d1d82a9559d">86c578a</a></li>
</ul>
</div>
<div class="section" id="bugfix-required-option-flag-in-abstractvalidator-works-correct">
<h3>[BUGFIX] &#8220;Required option&#8221; flag in AbstractValidator works correct</h3>
<p>This fix adds a boolean condition to the &#8220;Required option&#8221; flag
condition. With this fix the flag can also be FALSE.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52425">#52425</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/de5ed46793fe07c5d37362dcccde79df44f124f8">de5ed46</a></li>
</ul>
</div>
<div class="section" id="task-warn-that-a-package-is-not-available-on-de-activate">
<h3>[TASK] Warn that a package is not available on (de)activate</h3>
<p>Flow now specifically warns about a package not being available
when the activate or deactivate command for a package is called.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/308e09da93c64d1d16247fe4195e1174558f6773">308e09d</a></li>
</ul>
</div>
<div class="section" id="task-remove-arbitrary-limit-on-resource-filename-extension">
<h3>[TASK] Remove arbitrary limit on Resource filename/extension</h3>
<p>The DB columns for those properties are VARCHAR(255), so the validation
limit of 100 makes no sense.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3f314f47737ced1463792903cea01613edc4921f">3f314f4</a></li>
</ul>
</div>
<div class="section" id="bugfix-unpublishpersistentresource-deletes-only-intended-resource">
<h3>[BUGFIX] unpublishPersistentResource deletes only intended Resource</h3>
<p>When calling <tt class="docutils literal"><span class="pre">unpublishPersistentResource</span></tt>, now only the actually
intended Resource gets deleted, rather than the whole publishing
target directory.</p>
<p>Since vfsStream does not support the necessary glob() operation,
the appropriate UnitTest is rebuilt to use the real filesystem.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d06901fd9b832accb179c001f43c4e57d90a8274">d06901f</a></li>
</ul>
</div>
<div class="section" id="bugfix-reflectionservice-works-for-non-entity-inheritance-members">
<h3>[BUGFIX] ReflectionService works for non-Entity inheritance members</h3>
<p>As soon as a class which is not an entity was present as an
ancestor of an Entity (with at least one Entity descendant in
between), there was an Undefined Index error because the
ReflectionService proceeded on the assumption that everything
was an Entity, hence present in the -&gt;classSchemata array.</p>
<p>This adds an additional check for the actual presence of
such an array index and proofs this behavior with a
Functional Test Fixture.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47809">#47809</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/be7b184a07fff9b4b1f15fe6d189a34abf5be5e6">be7b184</a></li>
</ul>
</div>
<div class="section" id="bugfix-dynamic-routeparts-should-be-urldecoded">
<h3>[BUGFIX] Dynamic RouteParts should be urldecoded</h3>
<p>This makes sure that request path segments are urldecoded
during matching and urlencoded during resolving of Routes.</p>
<p>Previously An URI <tt class="docutils literal"><span class="pre">/some.package/sub%5Csomecontroller</span></tt> was
not decoded correctly leading to a 404.
Now the value is correctly decoded to &#8220;sub\somecontroller&#8221;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46449">#46449</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ebd661254bb6d5f18fa2f4e0ab27cebe096de62c">ebd6612</a></li>
</ul>
</div>
<div class="section" id="bugfix-treat-namespaces-with-underscores-correctly">
<h3>[BUGFIX] Treat namespaces with underscores correctly</h3>
<p>The actual classloading does not handle the presence of underscores in namespaces
correctly.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/49847">#49847</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/eca1d1eb7721ebb2749133b35a810141deafe21c">eca1d1e</a></li>
</ul>
</div>
<div class="section" id="bugfix-buildsubprocesscommand-fails-with-multiple-arguments">
<h3>[BUGFIX] buildSubprocessCommand fails with multiple arguments</h3>
<p>Fixes an issue where the buildSubprocessCommand() function returned
an invalid command line which lacked spaces between command options.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49503">#49503</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3d648098ad10c7d469d2c2b338519772092a2758">3d64809</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="bugfix-form-viewhelpers-throw-exception-if-no-formobject-is-set">
<h3>[BUGFIX] Form ViewHelpers throw exception if no formObject is set</h3>
<p>When using forms with object binding Fluid throws an exception for FormField
ViewHelpers bound to nested properties if no form object is available.
This is the case for example in newAction() where the object is usually NULL:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;create&quot;</span> <span class="nx">objectName</span><span class="o">=</span><span class="s2">&quot;user&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">textfield</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;name.firstName&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29290">#29290</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/695cb81310bf655ea2157151332707863fa0cc76">695cb81</a></li>
</ul>
</div>
<div class="section" id="bugfix-flush-template-cache-on-viewhelper-changes">
<h3>[BUGFIX] Flush template cache on ViewHelper changes</h3>
<p>Changing the signature of the render method in a ViewHelper leads to
stale cached templates that throw exceptions. This change uses the
file monitoring to flush the template cache on a change to a ViewHelper
class.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/54135">#54135</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/d1af4a05cfd2ca541e467d449035b2bf32133088">d1af4a0</a></li>
</ul>
</div>
<div class="section" id="task-optimize-number-format-calls">
<h3>[TASK] Optimize number_format calls</h3>
<p>This change optimizes number_format calls in ViewHelpers by
explicitly casting the number argument to float.
A benchmark shows this increases performance of the number_format
call by a factor of 2-3.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36207">#36207</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/e8ce12322f3f6cfde83f5e2589faf6a7a7dfa7c5">e8ce123</a></li>
</ul>
</div>
<div class="section" id="bugfix-don-t-use-folders-as-templates-partials-and-layouts">
<h3>[BUGFIX] Don&#8217;t use folders as templates, partials and layouts</h3>
<p>The PHP function <tt class="docutils literal"><span class="pre">file_exists()</span></tt> returns TRUE for files as well as
directories.
This change adjusts Template- and StandaloneView to use <tt class="docutils literal"><span class="pre">is_file()</span></tt>
instead.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47188">#47188</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/2bf6363234ad0b7795b3c617c6c4136549666e96">2bf6363</a></li>
</ul>
</div>
<div class="section" id="task-initializeaction-methods-have-to-be-protected">
<h3>[TASK] initializeAction methods have to be protected</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/4a79af88c25354280e5bb0e482621f247a41c18c">4a79af8</a></li>
</ul>
</div>
<div class="section" id="bugfix-additional-identity-properties-not-set-on-mapping-error">
<h3>[BUGFIX] Additional Identity Properties not set on mapping error</h3>
<p>When binding Fluid forms to nested objects, Fluid automatically adds
hidden fields with the identifiers of all affected objects so that
the persistence layer can update all objects correctly.</p>
<p>When a form was redisplayed due to property mapping errors, the
identity fields for the nested sub objects were no longer created.</p>
<p>This change fixes this by making sure all identity fields are rendered
recursively also after property mapping errors.</p>
<p>Example code to verify this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;update&quot;</span> <span class="nx">object</span><span class="o">=</span><span class="s2">&quot;{user}&quot;</span> <span class="nx">objectName</span><span class="o">=</span><span class="s2">&quot;user&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">textfield</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;firstName&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{user.invoices}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;invoice&quot;</span> <span class="nx">iteration</span><span class="o">=</span><span class="s2">&quot;iteration&quot;</span><span class="o">&gt;</span>
    <span class="p">{</span><span class="nx">iteration</span><span class="o">.</span><span class="nx">cycle</span><span class="p">}</span><span class="o">:</span>
    <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">textfield</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;invoices.{iteration.index}.subject&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">submit</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;update&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>When submitting the form with validation errors, the redisplayed form
should contain a div with a hidden field named
&#8220;user[__identity]&#8221; for the user and one for each invoice.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29290">#29290</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/516fc3707c391e32cda7f070d219c92921af0fdc">516fc37</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<p>No changes</p>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="3305fd86-d748-741e-ff82-2bc5688346e0" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="abb53482-22cf-6be6-ccf5-7ad5e63dfcc4" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="210" locale="">
        <properties>
         <title>2.1.0</title>
        </properties>
        <node identifier="8f943d3e-3a2c-0ca5-fb01-bf9d9deea232" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="bbdcf00d-a507-f582-ee59-3f73b3930d9e" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>2.1.0</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
</div>
<div class="section" id="typo3-eel">
<h2>TYPO3.Eel</h2>
<div class="section" id="feature-configuration-helper-settings">
<h3>[FEATURE] Configuration Helper: settings</h3>
<p>This new helper is supposed to be the one which provides information
about the environment. The first implemented method allows for retrieving
settings.</p>
<p>Example for use within TypoScript:</p>
<blockquote>
<div>sitePackageKey = ${Configuration.setting(‚Acme.Demo.sitePackageKey&#8217;)}</div></blockquote>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/39c2c03318cb771fa6e9d8612a708157735a0052">39c2c03</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-release/8/">http://ci.typo3.robertlemke.net/job/typo3-flow-release/8/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6f9b2513da5c48fc77285fb463abbed9e287be99">6f9b251</a></li>
</ul>
</div>
<div class="section" id="security-remove-possible-xss-from-actioncontroller-error-output">
<h3>[SECURITY] Remove possible XSS from ActionController Error output</h3>
<p>The errorAction method in the ActionController base class of Flow
returns error messages without properly encoding them. Because these
error messages can contain user input, this could lead to a Cross-Site
Scripting vulnerability in Flow driven applications.</p>
<p>The offending output has been removed without substitution.</p>
<p>Hint: If you have customized the error action in your Flow application,
we advise you to check that the error messages returned in these actions
only contain static strings and are not derived from any kind of user
input. If you are not sure whether your code is fine in that regard,
feel free to ask on a public mailing list or the forum.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31206">#31206</a></li>
</ul>
<p>Security-Bulletin: TYPO3-FLOW-SA-2013-001</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/76987d1216590846c9cbed23f25593e29ef5c039">76987d1</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<p>No changes</p>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="ddaff973-3865-dcc5-62e3-aa50d9140e0f" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="ab9b0120-1fc7-435a-1e87-26d3938050d1" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="210-rc1" locale="">
        <properties>
         <title>2.1.0-RC1</title>
        </properties>
        <node identifier="4327c2c8-8185-8267-d461-0fc4ff96cc0b" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="2fa0b037-7371-0350-5268-5c5272b8b81f" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="rc1">
<h1>2.1.0-RC1</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-fix-create-branch-dependency-handling">
<h3>[TASK] Fix create-branch dependency handling</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/2c1a07c8573fceab82bc926340a3a41c2608a0b1">2c1a07c</a></li>
</ul>
</div>
<div class="section" id="task-some-tweaks-to-the-release-scripts">
<h3>[TASK] Some tweaks to the release scripts</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/1e7dac4a5ebd97007337a79db95f7952dabeed8c">1e7dac4</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-eel">
<h2>TYPO3.Eel</h2>
<div class="section" id="feature-use-javascript-semantics-of-and-operators">
<h3>[!!!][FEATURE] Use JavaScript semantics of || and &amp;&amp; operators</h3>
<p>This change updates the handling of the boolean short circuit operators
for disjunction and conjunction to the JavaScript semantics of returning
one of the left or right side values instead of a boolean.</p>
<p>This is only breaking if the code using Eel relied on the exact type
e.g. by using a strict comparison.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/573c1008e339e3d01617f8d9002698acf343d203">573c100</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-release/6/">http://ci.typo3.robertlemke.net/job/typo3-flow-release/6/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/42b85cacfddb51a4688eabcfd9ce13b1dda077ae">42b85ca</a></li>
</ul>
</div>
<div class="section" id="task-add-dependencies-to-newly-created-composer-manifests">
<h3>[TASK] Add dependencies to newly created composer manifests</h3>
<p>Newly created composer manifests had a single dependency to
Flow before this change. Now the dependencies from package
meta data are added to the manifest.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a19225d6ecce263d86057ffc372610c9ef5d6658">a19225d</a></li>
</ul>
</div>
<div class="section" id="task-update-contributors-list-in-guide">
<h3>[TASK] Update contributors list in guide</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ada13c7047718aad1ff417e2812589f4dad183d1">ada13c7</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="task-fix-flush-on-a-non-object-in-templatecompiler">
<h3>[TASK] Fix “flush() on a non-object” in TemplateCompiler</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/5f57d1b8327f310cdb497ddc05feeeb96455b09e">5f57d1b</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<p>No changes</p>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="c7d80ef0-f25b-3ebe-53d3-70472bcd7507" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="a8fa532d-e13f-9245-2095-cf29af894bf4" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="210-beta1" locale="">
        <properties>
         <title>2.1.0-beta1</title>
        </properties>
        <node identifier="e72d75a0-4764-58a7-6159-0ed71a91042b" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="70e0bec9-55d0-0ba2-3acb-064f477094e3" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="beta1">
<h1>2.1.0-beta1</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-fix-version-requirements-on-packages">
<h3>[TASK] Fix version requirements on packages</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/243a6033b3126cae30d8cd28b5aa7e6467373e13">243a603</a></li>
</ul>
</div>
<div class="section" id="task-update-composer-manifest">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/9ad8d7129c684dfacc5b6f7318e86b1165bff4fb">9ad8d71</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-commit-links-in-create-changelog-sh-script">
<h3>[BUGFIX] Fix commit links in create-changelog.sh script</h3>
<p>Link to correct URI for git.typo3.org commit details.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/7a84b99e197517a16da9de63ff8f9151e5cd6ab9">7a84b99</a></li>
</ul>
</div>
<div class="section" id="task-tweak-to-create-changelog-sh-script">
<h3>[TASK] Tweak to create-changelog.sh script</h3>
<p>Also link FLOW-SA-… bulletins</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/953bb776da163c59d82e4274bb239430e3a32694">953bb77</a></li>
</ul>
</div>
<div class="section" id="task-add-installer-scripts-for-package-installs">
<h3>[TASK] Add installer scripts for package installs</h3>
<p>Add configuration to manifest that calls scripts on every package
install.</p>
<p>See also I06a2c5e35004f400291e7697c215bea8e685266b.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/a15031ca269f4767c39a0bdcbf8b68792afab04c">a15031c</a></li>
</ul>
</div>
<div class="section" id="task-update-vfsstream-requirement-to-1-2">
<h3>[TASK] Update vfsstream requirement to 1.2.*</h3>
<p>This updates the requirement for mikey179/vfsstream from 1.1.* to 1.2.*.
* Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/976ee75848e65d1915d173cc10cdaf94de77abaa">976ee75</a></p>
</div>
<div class="section" id="task-tweak-scripts-to-help-with-releases-and-branching">
<h3>[TASK] Tweak scripts to help with releases and branching</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/a7a335bfd31e0c83eb0526de777fea05b1688452">a7a335b</a></li>
</ul>
</div>
<div class="section" id="task-add-scripts-to-help-with-releases-and-branching">
<h3>[TASK] Add scripts to help with releases and branching</h3>
<p>This adds a number of scripts specific to the Flow distribution to aid
with creating new branches and for releasing new versions.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/543b40811c6017ed16b58bacf768847406e81f12">543b408</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-dev-version-of-typo3-eel">
<h3>[BUGFIX] Use &#64;dev version of TYPO3.Eel</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42176">#42176</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/0346b3eff6d4350a05dd8a2138318c87d3e22791">0346b3e</a></li>
</ul>
</div>
<div class="section" id="task-add-suggestion-for-pdo-sqlite-to-composer-manifest">
<h3>[TASK] Add suggestion for pdo_sqlite to composer manifest</h3>
<p>For running the functional tests out-of-the-box pdo_sqlite is required,
so inform about that during installation.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/26b5162135508e319a00632305c0a54d4c4ee0db">26b5162</a></li>
</ul>
</div>
<div class="section" id="task-removed-minimum-stability-setting">
<h3>[TASK] Removed minimum stability setting</h3>
<p>This removes the minimum-stability so tagged releases of dependencies
are used. It explicitly allows dev versions for typo3/fluid, typo3/party
(because we want to use them as dev-master) and doctrine/migrations
(because no suitable stable release exists).</p>
<p>This change speeds up installation (because zip archives will be used
instead of git clones) and avoids surprises due to possibly unstable
3rd party code being pulled in.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47808">#47808</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/b748f0eeb00fa56293cfb88eef92c9d01a8d2008">b748f0e</a></li>
</ul>
</div>
<div class="section" id="task-remove-jenkins-repository-from-composer-manifest">
<h3>[TASK] Remove Jenkins repository from  composer manifest</h3>
<p>Since our packages are on Packagist now, the Satis repository on Jenkins
should no longer be used by the public.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44022">#44022</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/035be380eb7d38e92d206f5743fa74e1bafd09e0">035be38</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-eel">
<h2>TYPO3.Eel</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-release/4/">http://ci.typo3.robertlemke.net/job/typo3-flow-release/4/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ae6e2b9ba3f1fd0c224a07b862876eada6eaf098">ae6e2b9</a></li>
</ul>
</div>
<div class="section" id="task-fix-version-requirement-on-fluid-party-eel">
<h3>[TASK] Fix version requirement on Fluid, Party, Eel</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/073489208b48e69b728fa22aa325c3176d3dd9c2">0734892</a></li>
</ul>
</div>
<div class="section" id="id5">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/47f7996ef3288a0a73acc6f9b129db7b798a7922">47f7996</a></li>
</ul>
</div>
<div class="section" id="task-update-readme-txt-and-upgrading-txt-for-2-1">
<h3>[TASK] Update Readme.txt and Upgrading.txt for 2.1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/03bc52c2dbe30bce34050b7b2a81053a00c56833">03bc52c</a></li>
</ul>
</div>
<div class="section" id="feature-deprecated-base-tag">
<h3>[!!!][FEATURE] Deprecated base tag</h3>
<p>Currently the <tt class="docutils literal"><span class="pre">UriBuilder</span></tt> creates relative URLs with relative paths
in the form &#8220;some/path.html&#8221; by default.
This change adjusts the <tt class="docutils literal"><span class="pre">UriBuilder</span></tt> to prefix URLs with the scripts
request path (usually &#8220;/&#8221; or &#8220;/document-root/&#8221;).</p>
<p>This makes the <tt class="docutils literal"><span class="pre">&lt;base</span> <span class="pre">/&gt;</span></tt> tag redundant for most scenarios, even
when working with relative URLs.</p>
<p>This is not a breaking change per se, because using the base tag
doesn&#8217;t break the behavior. But it has an impact on all relative URLs
created by the <tt class="docutils literal"><span class="pre">UriBuilder</span></tt>.</p>
<p>If you expect the rendered HTML to contain URLs in the form
&#8220;some/path.html&#8221; (that is: without leading slash) you might need to
adjust your code or set the compatibilty flag that is introduced with
this change:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">:</span>
  <span class="nx">Flow</span><span class="o">:</span>
    <span class="nx">compatibility</span><span class="o">:</span>
      <span class="nx">uriBuilder</span><span class="o">:</span>
        <span class="nx">createRelativePaths</span><span class="o">:</span> <span class="k">TRUE</span>
</pre></div>
</div>
<p>NOTE: This flag will be deprecated with version 2.2 and removed with
version 3.0 of Flow. It&#8217;s recommended to adjust your code so that it
does not rely on the generated URLs</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/53827">#53827</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5d1a49f7e15158c97e2418ba48e10c20473c8106">5d1a49f</a></li>
</ul>
</div>
<div class="section" id="feature-support-injecting-settings-through-annotation">
<h3>[FEATURE] Support injecting Settings through annotation</h3>
<p>This change extends the existing inject annotation with two new
options.</p>
<ul class="simple">
<li>setting: to specify a path to a setting that should be injected into that property</li>
<li>package: the package to load the setting from, by default the package that the class belongs to</li>
</ul>
<p>The main goal is to make the access to settings more convenient, because
you currently need to inject the configurationManager and get the setting
manually from it, even if you only need one simple string.</p>
<p>As a best practice the user should add an setter for it&#8217;s settings as well, but
this is only to make more portable. This change does not need a setter.</p>
<p>Example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @var string</span>
<span class="sd"> * @Flow\\Inject(setting=&quot;my.setting&quot;)</span>
<span class="sd"> */</span>
 <span class="k">protected</span> <span class="nv">$foo</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @var string</span>
<span class="sd"> * @Flow\\Inject(setting=&quot;core.phpBinaryPathAndFilename&quot;, package=&quot;TYPO3.Flow&quot;)</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$phpBinary</span><span class="p">;</span>
</pre></div>
</div>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/46378319ee337260d6f6eea259028dcf80486d1f">4637831</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-identityroutepart-unit-tests">
<h3>[BUGFIX] Fix IdentityRoutePart unit tests</h3>
<p>This fixes unit tests that fail since merging
of I071ae923924f3a98c673b79ef969a9a31c3f4942</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b1439475e5873e1faab5a31a6a041314e2796ca9">b143947</a></li>
</ul>
</div>
<div class="section" id="bugfix-package-manager-needs-to-sort-active-packages-in-dependency-order">
<h3>[BUGFIX]&nbsp;Package Manager needs to sort active packages in dependency order</h3>
<p>Problem: If being in production context and the configuration cache is still empty,
it might happen that $this-&gt;activePackages is not sorted in the correct order of
package dependencies, but $this-&gt;packages is. This leads to wrongly merged configuration,
which is then cached.</p>
<p>This problem might also occur in development context, but only on first hit. After
a reload it is gone.</p>
<p>This change is a fix which makes sure the order in activePackages is the same
as in packages.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/455480019a912332d84b61d7b2d011ec4fa22f1b">4554800</a></li>
</ul>
</div>
<div class="section" id="feature-documentation-of-the-authentication-process">
<h3>[FEATURE] documentation of the authentication process</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/184a0ecad5f70f245963d1c34468a8195d0e2cd4">184a0ec</a></li>
</ul>
</div>
<div class="section" id="bugfix-composer-installer-scripts-create-a-packages-folder">
<h3>[BUGFIX] Composer installer scripts create a .Packages folder</h3>
<p>The composer installer scripts create a .Packages folder inside
the root of the Flow project. This is incorrect as the created
directory should be inside the Packages folder.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/53961">#53961</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/340139ccaf6d3a060eeda9195e01fb572ab267e6">340139c</a></li>
</ul>
</div>
<div class="section" id="bugfix-actionrequest-should-not-serialize-parent-http-request">
<h3>[BUGFIX] ActionRequest should not serialize parent HTTP request</h3>
<p>When working with WebRedirects and authentication, the intercepted
request is serialized with the security context. While it makes sense
to do so, we should not include the reference to the base HTTP request
in this case, as this includes lots of cruft like $_SERVER etc.</p>
<p>In order to test this, just look at the serialized session files
when a web redirect is taking place.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/53931">#53931</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6ec233ef27a1c903617a48947026512e5098bf15">6ec233e</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-order-of-conditions-for-request-port-check">
<h3>[BUGFIX] Fix wrong order of conditions for Request port check</h3>
<p>In the last patch set of change I4fae171d701c060841b154362644611602b60da0
I broke the actual functionality be choosing the wrong order for the
if conditions.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9f3b3132236fd76af1b0c25823452904ad14ba13">9f3b313</a></li>
</ul>
</div>
<div class="section" id="feature-acknowledge-x-forwarded-port-header-sent-by-proxy">
<h3>[FEATURE] Acknowledge X-FORWARDED-PORT header sent by proxy</h3>
<p>This adjusts Http\Uri and Http\Request to detect and acknowledge an
X-FORWARDED-PORT header sent by a proxy. It also introduces a new
method getPort() to the Request object.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6949e14c7d74b48bacefcabd094459c30896ab28">6949e14</a></li>
</ul>
</div>
<div class="section" id="task-remove-persistall-from-identityroutepart">
<h3>[TASK] Remove persistAll() from IdentityRoutePart</h3>
<p>Having IdentityRoutePart call persistAll() could have very weird and
unexpected side effects, not even mentioning “safe request”.</p>
<p>This change limits the persist operation to the items managed by the
ObjectPathMappingRepository.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6dad43efc78885d442cc3527813e134aa1258b19">6dad43e</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-broken-unit-test-for-configurationmanager">
<h3>[BUGFIX] Fix broken unit test for ConfigurationManager</h3>
<p>Fixes a unit test that broke with a previous commit</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/52e2d76cce391bc6935afff45d3e961da55cb119">52e2d76</a></li>
</ul>
</div>
<div class="section" id="task-add-additional-safeguard-for-corrupt-user-sessions">
<h3>[TASK] Add additional safeguard for corrupt user sessions</h3>
<p>This adds an additional check into Context-&gt;getPartyByType() to avoid
&#8220;called member function on a non-object&#8221; errors if a user seems to be
authenticated but, for some reason, the token could not provide the
respective account.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b8cec90f5eb2849459c65f037e56b1b652a1c3bb">b8cec90</a></li>
</ul>
</div>
<div class="section" id="task-remove-left-over-php-closing-tags">
<h3>[TASK] Remove left over PHP closing tags</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2e1edd65d91250ad29a03b1c316106e4eaab7aa9">2e1edd6</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-wrong-exception-class-name">
<h3>[BUGFIX] Fix wrong exception class name</h3>
<p>In change I048360fc8883942d6561be92c2d0ad915e9f164e an exception was moved
around and not adjusted in all places.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3fd5ad97665cd1686a6147691455daf1435f3870">3fd5ad9</a></li>
</ul>
</div>
<div class="section" id="task-remove-unused-use-statements">
<h3>[TASK] Remove unused use statements</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5e1a8591abbdddd49b78f1c4168e4cfaee1a801b">5e1a859</a></li>
</ul>
</div>
<div class="section" id="task-cgl-fixes">
<h3>[TASK] CGL Fixes</h3>
<ul class="simple">
<li>Removes indent from inline comments</li>
<li>Fixes several docblock issues</li>
<li>Fixes inline conditions</li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e53648c8720c72feae8b989b2fae5c13a6e1c7b8">e53648c</a></li>
</ul>
</div>
<div class="section" id="task-mention-php-closing-tag-omission-in-cgl">
<h3>[TASK] Mention PHP closing tag omission in CGL</h3>
<p>This updates the Coding Guidelines to omit the PHP closing tag.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d9d6ff986703c0022b10b87e4e0f41a790cc85a0">d9d6ff9</a></li>
</ul>
</div>
<div class="section" id="task-remove-php-closing-tag">
<h3>[TASK] Remove PHP closing tag</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/181a01b06f38ad1f9069ede75bc3ee45a524e842">181a01b</a></li>
</ul>
</div>
<div class="section" id="bugfix-var-dump-is-unstyled-if-flow-is-not-in-docroot">
<h3>[BUGFIX] var_dump() is unstyled if Flow is not in docroot</h3>
<p>If TYPO3 Flow is not directly in the document root the var_dump
output is unstyled as the path to the external CSS can not be
loaded. By loading all CSS inline and replacing the background
image by CSS there&#8217;s no need to load external resources anymore.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/52711">#52711</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e7499ac2f4eb4f8c1ed5734c9405250f9156c3f8">e7499ac</a></li>
</ul>
</div>
<div class="section" id="bugfix-safeguard-against-illegal-filenames-below-classes">
<h3>[BUGFIX] Safeguard against illegal filenames below Classes</h3>
<p>If a filename below Classes in a package contains dots, Flow breaks
when it tries to flush caches during startup.</p>
<p>See <a class="reference external" href="https://phpexcel.codeplex.com/workitem/20336">https://phpexcel.codeplex.com/workitem/20336</a> for an example of such
a filename, even though PSR-0 does not allow such names.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/cebda033e438f51e93d5145854c27a953fba39ec">cebda03</a></li>
</ul>
</div>
<div class="section" id="task-update-commit-message-documentation">
<h3>[TASK] Update commit message documentation</h3>
<p>Tweaks the documentation for proper git commit messages
and adds some examples.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7534a582c6bf6a573e5956201834a3bb4cf32b71">7534a58</a></li>
</ul>
</div>
<div class="section" id="task-improve-documentation-for-excludeclasses-setting">
<h3>[TASK] Improve documentation for excludeClasses setting</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/be54ffb5219cc1f4f7a3b3871bfdb6b88e5fc86c">be54ffb</a></li>
</ul>
</div>
<div class="section" id="bugfix-request-getrelativepath-must-not-return-false">
<h3>[BUGFIX] Request::getRelativePath() must not return FALSE</h3>
<p>This makes sure that <tt class="docutils literal"><span class="pre">Request::getRelativePath()</span></tt> always returns
a string.</p>
<p>This getter has been introduced with
I48548b6f1465d6b509298d42cff39242040e7782, but it returned FALSE if
the base URI path was longer or as long as the current URI path which
is the case for the root URI.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2955be47ece8007dddb9cf67cb91edb4340d2914">2955be4</a></li>
</ul>
</div>
<div class="section" id="bugfix-expose-more-details-in-mappingexceptions">
<h3>[BUGFIX] Expose more details in MappingExceptions</h3>
<p>This adds a try/catch block to the FlowAnnotationDriver adding the
affected class name to the message of the thrown exception.</p>
<p>Before if <tt class="docutils literal"><span class="pre">evaluatePropertyAnnotations</span></tt> threw an exception during
the <tt class="docutils literal"><span class="pre">flow:doctrine:compileproxies</span></tt> command the exception did not
contain details about the affected class (see #52907).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52907">#52907</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7e0c425ceefd06252ef00b9addcd9389f1e7d950">7e0c425</a></li>
</ul>
</div>
<div class="section" id="feature-add-tagging-to-router-cache">
<h3>[FEATURE] Add tagging to router cache</h3>
<p>This adjusts the RouterCachingService to tag every Routing cache entry
with any UUID the routeValues/matchResult contain.</p>
<p>This will make it possible to flush caches only for affected entities.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29972">#29972</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2b702b0f5716e10b8a5fcf7b86f2652e8850ce7e">2b702b0</a></li>
</ul>
</div>
<div class="section" id="task-get-rid-of-routercachingaspect">
<h3>[TASK] Get rid of RouterCachingAspect</h3>
<p>This moves code from the RouterCache AOP aspect to the Router itself
making the aspect redundant.</p>
<p>Before the cache handling of the Routing Framework has been extracted
to an AOP aspect in order to keep the Router code simple. Since the
introduction of the RouterCachingService (#52452) this is no longer
required.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/52704">#52704</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/52452">#52452</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d645b051ad3d8adb849649ff4076c7759c9c006f">d645b05</a></li>
</ul>
</div>
<div class="section" id="task-cleanup-routercachingservice">
<h3>[TASK] Cleanup RouterCachingService</h3>
<p>Some (mostly cosmetic) adjustments to our CGL and some
renamings to increase readability.</p>
<p>This also renames the misleading method Route::getMatchingUri()
by Route::getResolvedUriPath(). The old method is still available as
deprecated alias.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/52452">#52452</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2a4a7f466b84be88aba72ec06d3765832aff5a7c">2a4a7f4</a></li>
</ul>
</div>
<div class="section" id="task-move-isconnected-from-role-repository-to-persistence-manager">
<h3>[TASK] Move isConnected from role repository to persistence manager</h3>
<p>To make isConnected api, we have to move it to some central
place. The persistence manager seems to be a lot better place,
than the persistence repository, as it is not reference as much
in user code.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/52846">#52846</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2df9c7cf79d664544fddbe654976b061c7fb6913">2df9c7c</a></li>
</ul>
</div>
<div class="section" id="bugfix-role-handling-depends-on-an-active-database-connection">
<h3>[BUGFIX] Role handling depends on an active database connection</h3>
<p>The PolicyService now depends on having an active database connection.
This connection is not always available (like in the Neos setup) and
is not required at all for authentication using in memory roles like
the system roles.</p>
<p>This change updates the PolicyService to ignore synchronization if
the RoleRepository has no active database connection, and makes the
FileBasedSimpleKeyProvider use a Role object which only exists in
memory.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3ba15f0158d645b68a6f9e4d1059f810ce6b2c6e">3ba15f0</a></li>
</ul>
</div>
<div class="section" id="bugfix-don-t-catch-security-exceptions-during-property-mapping">
<h3>[BUGFIX] Don&#8217;t catch security exceptions during property mapping</h3>
<p>As security exceptions will be handled by the security
framework, we have to let them bubble up instead of
converting them into an property mapping exception.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5438318bfd58b77481387893c6c49c14af3d983d">5438318</a></li>
</ul>
</div>
<div class="section" id="task-cleanup-usage-of-return-value-on-return-void-method">
<h3>[TASK] Cleanup usage of return value on &#64;return void method</h3>
<p>The renderStatically() method does not return a value, and thus the
echo can be removed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/39cfef54913b1c5bdbe9dcb312701048f8e45103">39cfef5</a></li>
</ul>
</div>
<div class="section" id="bugfix-http-x-http-method-override-is-incorrect">
<h3>[BUGFIX] HTTP_X_HTTP_METHOD_OVERRIDE is incorrect</h3>
<p>In the test the HTTP_X_HTTP_METHOD header is not set, but the
HTTP_X_HTTP_METHOD_OVERRIDE is set twice. This causes the test to
prove that HTTP_X_HTTP_METHOD_OVERRIDE is used, but not necessarily
means that HTTP_X_HTTP_METHOD is overridden.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/932eb5eeb1439f3d2b9911b4b3aa421b6d516b35">932eb5e</a></li>
</ul>
</div>
<div class="section" id="bugfix-roles-are-not-always-correctly-initialized">
<h3>[BUGFIX] Roles are not always correctly initialized</h3>
<p>Due to #47975 it happens, that packageKey
and name are not correctly set in role objects. This
change is a quick workaround, which can be removed
once the above issues are solved.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e566a56db823edb01bc572fed9c13b1eb2bdc1a4">e566a56</a></li>
</ul>
</div>
<div class="section" id="bugfix-injected-properties-are-not-available-in-initializeobject">
<h3>[BUGFIX] Injected properties are not available in initializeObject()</h3>
<p>This fixes an issue where properties injected to the parent class A
were not available when the initializeObject() method of sub class B
was called.</p>
<p>The root cause of this bug was that, in order to avoid double injection,
injectProperties() was only called in the constructor of sub class B
and not in the constructor of parent class A. The initializeObject()
methods however, were still executed in both constructors.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43659">#43659</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6d2ea6b3fc5db90f3c7e6ccd0dea5304ec32ef5e">6d2ea6b</a></li>
</ul>
</div>
<div class="section" id="feature-add-a-new-system-role-authenticateduser">
<h3>[FEATURE] Add a new system role &#8220;AuthenticatedUser&#8221;</h3>
<p>This role will always be active as soon as some token could be
authenticated.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/875bc80c9c168ba6ae8489d67532f83ea0d024fe">875bc80</a></li>
</ul>
</div>
<div class="section" id="task-add-getter-for-relative-path-to-http-request-class">
<h3>[TASK] Add getter for relative path to Http\Request class</h3>
<p>Also refactors the routing to use this getter.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0583f79649d0a457f7fb0a7c4f54b078d5608882">0583f79</a></li>
</ul>
</div>
<div class="section" id="bugfix-append-views-configurations-instead-of-merging-them">
<h3>[BUGFIX] Append Views configurations instead of merging them</h3>
<p>Configurations from Views.yaml are merged together leading to mixed
up configurations and invalid options.</p>
<p>This adds a new processing type CONFIGURATION_PROCESSING_TYPE_APPEND
that does not merge configurations from packages &amp; contexts
recursively but appends them into a flat array.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52635">#52635</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/dbd2f265bfed7ae512519d378842be321639f51c">dbd2f26</a></li>
</ul>
</div>
<div class="section" id="bugfix-wrong-media-type-on-non-lower-case-filenames">
<h3>[BUGFIX] Wrong media type on non-lower case filenames</h3>
<p>This fixes an issue in the getMediaTypeFromFilename() function which
returned application/octet-stream on any filename specified which
contained a non-lowercase file extension.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6b6ae5a09909847acb5e8942093da42d6759316f">6b6ae5a</a></li>
</ul>
</div>
<div class="section" id="bugfix-object-route-parts-fall-back-to-technical-identifier">
<h3>[BUGFIX] Object Route Parts fall back to technical identifier</h3>
<p>As described in the routing section of the documentation, the
<cite>Object Route Parts`</cite> should use the technical identifier to
represent an object if no uriPattern is specified and the
specified object does not contain any identity properties.</p>
<p>Instead an exception was thrown if no uriPattern could be
determined because <tt class="docutils literal"><span class="pre">ClassSchema::getIdentityProperties()</span></tt>
doesn&#8217;t return the property name of the technical identifier.</p>
<p>This change fixes this by falling back by skipping the
ObjectPathMapping if no uriPattern is defined.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/51082">#51082</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3ca238501129a075a4b1dfe67b536e9df2fb2081">3ca2385</a></li>
</ul>
</div>
<div class="section" id="bugfix-respect-case-sensitivity-in-object-routing">
<h3>[BUGFIX] Respect case-sensitivity in object routing</h3>
<p>By default dynamic route parts are lower-cased unless the
&#8220;toLowerCase&#8221; flag is set to TRUE for the route or a single
route part.
This change makes sure that this flag is actually taken into
account for routes using the ObjectPathMapping.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44521">#44521</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9ec9717a5ba73e7dab90f74fc9e167333930ed87">9ec9717</a></li>
</ul>
</div>
<div class="section" id="bugfix-required-option-flag-in-abstractvalidator-works-correct">
<h3>[BUGFIX] &#8220;Required option&#8221; flag in AbstractValidator works correct</h3>
<p>This fix adds a boolean condition to the &#8220;Required option&#8221; flag
condition. With this fix the flag can also be FALSE.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52425">#52425</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9e5f2e40226a8e3e4ecf5ebc2072ee3b7e82076d">9e5f2e4</a></li>
</ul>
</div>
<div class="section" id="bugfix-skip-csrf-protection-for-authenticate-action">
<h3>[BUGFIX] Skip csrf protection for authenticate action</h3>
<p>As the authenticate action is usually called by a
POST request, this request is considered a non safe
request. However, as you are most likely not logged in
when calling authenticate, csrf protection is neither
working nor needed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/02d5c019135e3d278b298f0f4a4406dd3d1216f7">02d5c01</a></li>
</ul>
</div>
<div class="section" id="bugfix-do-not-calculate-effective-privileges-if-runtime-evaluations-are-in-place">
<h3>[BUGFIX] Do not calculate effective privileges, if runtime evaluations are in place</h3>
<p>In this case the effective privileges can not be calculated.
Therefore we have to skip it.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5518aadd3ffc93fa452d67c50f5292966f29db20">5518aad</a></li>
</ul>
</div>
<div class="section" id="bugfix-security-has-to-be-bypassed-if-testablesecurity-is-disabled">
<h3>[BUGFIX] Security has to be bypassed if testableSecurity is disabled</h3>
<p>If testable security is not switched on in a functional test, skip any
checks by overriding in the AccessDecisionManager.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f5fcc776c220e04da9e5aef36f5ad360f3a27185">f5fcc77</a></li>
</ul>
</div>
<div class="section" id="task-initializeaction-methods-have-to-be-protected">
<h3>[TASK] initializeAction methods have to be protected</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7ebecd48fb5a2f5d3f4a0c053bd7f35da79277b5">7ebecd4</a></li>
</ul>
</div>
<div class="section" id="task-add-method-hasaccesstoresource-to-the-access-decision-manager">
<h3>[!!!][TASK] Add method &#8220;hasAccessToResource&#8221; to the access decision manager</h3>
<p>This is a convenience method to avoid a try/catch in userland code.</p>
<p>Breaking only for those who implemented AccessDecisionManagerInterface
on their own.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/85b1d10c228b465bae789d99adbe81b2649b9ae5">85b1d10</a></li>
</ul>
</div>
<div class="section" id="task-refactor-and-clarify-the-database-exception-handling">
<h3>[!!!][TASK] Refactor and clarify the database exception handling</h3>
<p>This change differentiates between connection errors and missing
tables in the database which were before handled equally.
It also writes the full exception to the log for debugging.</p>
<p>The former DatabaseConnectionException has been moved to
Exception\DatabaseConnectionException, a code migration is
provided with the change.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0591fcd14ccf5a2e6ecaf0ee9f4fddab5d080ad4">0591fcd</a></li>
</ul>
</div>
<div class="section" id="task-replace-some-leftover-flow3-in-tests">
<h3>[TASK]  Replace some leftover FLOW3 in tests</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4e6ce4424cbe61f0d473aa82b5ad0a42b571417d">4e6ce44</a></li>
</ul>
</div>
<div class="section" id="task-warn-that-a-package-is-not-available-on-de-activate">
<h3>[TASK] Warn that a package is not available on (de)activate</h3>
<p>Flow now specifically warns about a package not being available
when the activate or deactivate command for a package is called.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c9776cf15abc92714cd52d74c5890a1a6bb02146">c9776cf</a></li>
</ul>
</div>
<div class="section" id="task-refactor-router-caching-logic-into-a-service">
<h3>[TASK] Refactor router caching logic into a service</h3>
<p>This change removes most of the logic from the
RouterCachingAspect and introduces it in the form of a new
RouterCachingService.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/52452">#52452</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a60ef3c8672ff70b62f799ff6ea6ad1323f18a85">a60ef3c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-case-resolving-for-methods-in-security-commands">
<h3>[BUGFIX] Fix case resolving for methods in security commands</h3>
<p>We are now using reflection classes to resolve the
case sensitive method names, as this more reliably
includes really all methods of the given class including
inherited methods.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/963ecb32e208f7a78289a863c578172551e4a04f">963ecb3</a></li>
</ul>
</div>
<div class="section" id="feature-add-command-to-list-methods-matched-by-a-policy-resource">
<h3>[FEATURE] Add command to list methods matched by a policy resource</h3>
<p>Using this command one can list methods that are included in a resource
definition:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">./</span><span class="nx">flow</span> <span class="nx">security</span><span class="o">:</span><span class="nx">showmethodsforresource</span> <span class="nx">TYPO3_Neos_Service</span>
</pre></div>
</div>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0adfb8876862f47e57d099c1e1d7ad12fdc13af1">0adfb88</a></li>
</ul>
</div>
<div class="section" id="feature-add-package-filtering-by-path-and-type">
<h3>[FEATURE] Add Package Filtering by Path and Type</h3>
<p>This makes getting a particular kind of package, by path or type, or
first class Flow feature. The docs say that you can put packages in any
subdirectory of Packages/, but if you want to get a list of packages in
any one of those directories, you had to do your own filter the list of
packages yourself.</p>
<p>For example:</p>
<p>Neos can use this to get typo3-flow-site packages in Packages/Sites/.
Builders can use this to get a list of typo3-flow-boilerplate packages.</p>
<p>This change is backwards compatible since it doesn&#8217;t change any
behavior, it just adds some additional methods to the PackageManager.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d95e1c0c030ab5738738650201da609cdaf0bac2">d95e1c0</a></li>
</ul>
</div>
<div class="section" id="bugfix-filebasedsimplekeyprovider-has-to-authenticate-an-account-with-roles">
<h3>[BUGFIX] FileBasedSimpleKeyProvider has to authenticate an account with roles</h3>
<p>To be able to use real role based authorization with the
FileBasedSimpleKeyProvider, we have to authenticate an
account which holds existing roles.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d3f504f7ee13e5b647130eb34409c7593dcfc2ab">d3f504f</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-validation-if-nested-properties-of-same-type-are-present">
<h3>[BUGFIX] Fix validation if nested properties of same type are present</h3>
<p>The performance optimization in #46340
changed the isValid() method of the
GenericObjectValidator to use the result
property while recursing through the properties
of the to be validated object.</p>
<p>Since GenericObjectValidator is reused, it could
be the case that this result set is reset to
empty value.</p>
<p>Revert this change and set the result property
after all properties of the to be validated
object are validated.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/50585">#50585</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46340">#46340</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/09756f36380d948ac84916419e71465a54bd7c2f">09756f3</a></li>
</ul>
</div>
<div class="section" id="feature-add-policy-analysis-commands">
<h3>[FEATURE] Add policy analysis commands</h3>
<p>With the new commands it is possible to check for unprotected commands
and see the effective policy rules for a given role:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">./</span><span class="nx">flow</span> <span class="nx">security</span><span class="o">:</span><span class="nx">showunprotectedactions</span>
<span class="o">./</span><span class="nx">flow</span> <span class="nx">security</span><span class="o">:</span><span class="nx">showeffectivepolicy</span>
</pre></div>
</div>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/77e8282fe7f4fbe0b39bf1e867d45e3a7475132e">77e8282</a></li>
</ul>
</div>
<div class="section" id="task-clarify-configuration-subdirectory-usage">
<h3>[TASK] Clarify Configuration subdirectory usage</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7e9e3d795892857ec2412f315b696ac2e493ec65">7e9e3d7</a></li>
</ul>
</div>
<div class="section" id="bugfix-transient-properties-should-not-be-serialized">
<h3>[BUGFIX] Transient Properties should not be serialized</h3>
<p>Properties annoated with the \TYPO3\Flow\Annotations\Transient
annotation should not be serialized in the autogenerated __sleep
method.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52448">#52448</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/791b57041971f80a50bcbc3194be2bbba698a033">791b570</a></li>
</ul>
</div>
<div class="section" id="task-allow-package-installer-actions-scripts">
<h3>[TASK] Allow package installer actions / scripts</h3>
<p>Allow packages to register scripts and resources to be executed or
installed upon composer install and update.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0dd80fb832dd1cb58ca3e8d241f6413c32493053">0dd80fb</a></li>
</ul>
</div>
<div class="section" id="task-phpfrontend-has-a-method-to-return-original-code">
<h3>[TASK] PhpFrontend has a method to return original code</h3>
<p>With this change the PhpFrontend has the added method
getWrappend(), which returns the code including the
automatically added php opening tag and ending line.
The method get() returns exactly the same string that was stored
in the cache.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/50474">#50474</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/bdebde07f3fc0a78db022900c4446c3fac6d9dbd">bdebde0</a></li>
</ul>
</div>
<div class="section" id="bugfix-uuid-validator-rejects-too-long-uuids">
<h3>[BUGFIX] UUID Validator rejects too long UUIDs</h3>
<p>Now the validation regex has start- and end of string
boundaries, hence rejecting strings which only
contain a valid UUID, but having extraordinary strings
before or behind.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52311">#52311</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/52b186222419828dd5a888b700cca609a0cec32d">52b1862</a></li>
</ul>
</div>
<div class="section" id="task-remove-arbitrary-limit-on-resource-filename-extension">
<h3>[TASK] Remove arbitrary limit on Resource filename/extension</h3>
<p>The DB columns for those properties are VARCHAR(255), so the validation
limit of 100 makes no sense.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9b0a1a37653f677e11f1a0a9f377566abb995705">9b0a1a3</a></li>
</ul>
</div>
<div class="section" id="feature-flexible-array-sorter">
<h3>[FEATURE] Flexible array sorter</h3>
<p>Introduces a new utility class <tt class="docutils literal"><span class="pre">PositionalArraySorter</span></tt> that can be used to sort
an array based on a &#8220;position string&#8221;.</p>
<p>This feature is especially useful for sorting configuration options with
multiple sources.
Example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">SomeSetting</span><span class="o">:</span>
  <span class="s1">&#39;key1&#39;</span><span class="o">:</span>
    <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span>
    <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;start&#39;</span>
  <span class="s1">&#39;key2&#39;</span><span class="o">:</span>
    <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span>
    <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;after key1&#39;</span>
  <span class="s1">&#39;key3&#39;</span><span class="o">:</span>
    <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;quux&#39;</span>
    <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;end&#39;</span>
</pre></div>
</div>
<p>possible position strings are:
*  start (&lt;weight&gt;)
*  end (&lt;weight&gt;)
*  before &lt;key&gt; (&lt;weight&gt;)
*  after &lt;key&gt; (&lt;weight&gt;)
*  &lt;numerical-order&gt;</p>
<p>Usage:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$arraySorter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PositionalArraySorter</span><span class="p">(</span><span class="nv">$unorderedArray</span><span class="p">);</span>
<span class="nv">$orderedArray</span> <span class="o">=</span> <span class="nv">$arraySorter</span><span class="o">-&gt;</span><span class="na">toArray</span><span class="p">();</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/52074">#52074</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/69bd32c6c0af1bb4ad10b73178a8a4a595db1777">69bd32c</a></li>
</ul>
</div>
<div class="section" id="feature-add-ansiconsolebackend-for-logging">
<h3>[FEATURE] Add AnsiConsoleBackend for logging</h3>
<p>Taken from TYPO3.Surf.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/637d173661ef03513d6d96fea2b043cabd0a05ab">637d173</a></li>
</ul>
</div>
<div class="section" id="bugfix-dynamic-routeparts-should-be-urldecoded">
<h3>[BUGFIX] Dynamic RouteParts should be urldecoded</h3>
<p>This makes sure that request path segments are urldecoded
during matching and urlencoded during resolving of Routes.</p>
<p>Previously An URI <tt class="docutils literal"><span class="pre">/some.package/sub%5Csomecontroller</span></tt> was
not decoded correctly leading to a 404.
Now the value is correctly decoded to &#8220;sub\somecontroller&#8221;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46449">#46449</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b4c6e7ed40a97964673ccbf8f6f91625a40d5c9b">b4c6e7e</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-resolving-of-relative-namespaces-in-parent-classes">
<h3>[BUGFIX] Fix resolving of relative namespaces in parent classes</h3>
<p>With I28fd7c7993ea79714cc62032fcc332ac8cf9d4bc the ReflectionService
resolves relative and aliased namespaces automatically.
This doesn&#8217;t work for inherited classes though because the code only
considered the current class, not it&#8217;s parents.</p>
<p>With this change code like this will work:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">TYPO3\\Flow\\Security\\Context</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">SomeParentClass</span> <span class="p">{</span>

  <span class="sd">/**</span>
<span class="sd">  * @var Context</span>
<span class="sd">  * @Flow\\Inject</span>
<span class="sd">  */</span>
  <span class="k">protected</span> <span class="nv">$securityContext</span><span class="p">;</span>

  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">SomeChildClass</span> <span class="k">extends</span> <span class="nx">SomeParentClass</span> <span class="p">{</span>
<span class="p">}</span>
</pre></div>
</div>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/50909">#50909</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46008">#46008</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/751b4b55594ebaa334a007d8c98999dba04aafb1">751b4b5</a></li>
</ul>
</div>
<div class="section" id="revert-bugfix-published-resources-don-t-support-symlinks">
<h3>Revert &#8220;[BUGFIX] Published resources don&#8217;t support symlinks&#8221;</h3>
<p>This reverts commit 64480cd47066458bfd9a15a9a10f1760e5a0a3b4</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b7ac599a27ee59ce1cc6d433816a0792209565b7">b7ac599</a></li>
</ul>
</div>
<div class="section" id="task-more-meaningful-error-message-for-connection-errors">
<h3>[TASK] More meaningful error message for connection errors</h3>
<p>This patch provides more meaning full exception messages for
database connection errors. Now the message distinguishes
between &#8220;no database selected&#8221;, &#8220;wrong credentials&#8221; and
&#8220;unknown&#8221; database.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/35936c58c3aabb400f8d630ef1e24543c50eb236">35936c5</a></li>
</ul>
</div>
<div class="section" id="feature-let-cache-warmup-warm-up-every-configured-configuration-type">
<h3>[FEATURE] Let cache:warmup warm up every configured configuration type</h3>
<p>When having done a flow:cache:warmup, the Configuration Manager only cached
the configurations which were necessary during the CLI command invocation,
so, for example, Routes, Views, NodeTypes etc. were not cached.</p>
<p>This change introduces a SignalSlot listening to the warmupCache signal,
and touching every configured configuration type in order to make it
present in the configurations array, ready for later storing.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/51652">#51652</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/88dd9edb9b54c9f89e27cbfaf984a68c6e2f2ea7">88dd9ed</a></li>
</ul>
</div>
<div class="section" id="bugfix-ignore-unreflectable-classes">
<h3>[BUGFIX] Ignore unreflectable classes</h3>
<p>Classes that cannot be reflected will make the automatic configuration choke.
This happens quite often when using 3rd party components.</p>
<p>Make the reflection system mark the class unconfigurable, to allow the configurator
to ignore the class.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ad7fbeb9a096393bc73249e85312438f408184c2">ad7fbeb</a></li>
</ul>
</div>
<div class="section" id="feature-improve-rendering-of-large-exceptions">
<h3>[FEATURE] Improve rendering of large exceptions</h3>
<p>Splits exception messages containting multiple sentences and/or
line breaks into &#8220;subject&#8221; and &#8220;body&#8221; and renders the body with
nl2br().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/51713">#51713</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ebfb00bfbc91cdbeabb47da0488ad72680a74665">ebfb00b</a></li>
</ul>
</div>
<div class="section" id="bugfix-published-resources-don-t-support-symlinks">
<h3>[BUGFIX] Published resources don&#8217;t support symlinks</h3>
<p>Fixes an issue with the publication of persistent resources which
resulted in inaccessible resources after a few deployments with
TYPO3.Surf.</p>
<p>TYPO3.Surf heavily relies on symbolic links for pointing to the
currently active release. The key problem was that the symbolic
link which is put into the Web/_Resources folder used an absolute
path (realpath) to the resource file in Data/Persistent/ rather than
a possible symbolic link. This worked fine as long as the actual
directory (previous release) exists, but breaks as soon as old
releases have been removed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/51676">#51676</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/64480cd47066458bfd9a15a9a10f1760e5a0a3b4">64480cd</a></li>
</ul>
</div>
<div class="section" id="feature-allow-string-source-for-arrayconverter">
<h3>[FEATURE] Allow String source for ArrayConverter</h3>
<p>ArrayConverter can now convert strings to arrays. It uses
explode internally with a default delimiter of &#8221;,&#8221;.
The delimiter is configurable with the key &#8220;stringDelimiter&#8221; in
propertyMapping configuration for the ArrayConverter.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48148">#48148</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/af810292032f7adf7437bc9fd385a8dc2ec04339">af81029</a></li>
</ul>
</div>
<div class="section" id="feature-allow-arbitrary-request-methods-in-http-request">
<h3>[FEATURE] Allow arbitrary request methods in HTTP\Request</h3>
<p>This patch removes a check in the HTTP Request class which
previously disallowed custom HTTP request methods such as &#8220;COPY&#8221;.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/50637">#50637</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1b756e93cc136bf28d8a7360cb1facf28de78487">1b756e9</a></li>
</ul>
</div>
<div class="section" id="bugfix-booleanconverter-considers-false-true">
<h3>[BUGFIX] BooleanConverter considers &#8220;false&#8221; TRUE</h3>
<p>The BooleanConverter provided by Flow simply casts the $source
to a boolean using boxing.
With this change a string &#8220;false&#8221; (case insensitive) is considered FALSE.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/51255">#51255</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/51385">#51385</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/8207a1309efca3d47dc21555e008147ec098a130">8207a13</a></li>
</ul>
</div>
<div class="section" id="bugfix-curlengine-tries-to-rewind-stream">
<h3>[BUGFIX] CurlEngine tries to rewind stream</h3>
<p>This fixes an issue with the CurlEngine which executes a
rewind() if the given request content is a stream resource.</p>
<p>This is not necessary and is especially harmful if a stream
resource is provided which does not support seek operations.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/50636">#50636</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5d9b98f0c65743a8858e1f7caf6bab60983d369b">5d9b98f</a></li>
</ul>
</div>
<div class="section" id="bugfix-test-fails-since-i72b943a63a88bd1620951b1d12c648b4433339db">
<h3>[BUGFIX] Test fails since I72b943a63a88bd1620951b1d12c648b4433339db</h3>
<p>Change I72b943a63a88bd1620951b1d12c648b4433339db broke one of the unit
tests.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/03df9d1b6a150d0f47dacfcc2657327d4450fa05">03df9d1</a></li>
</ul>
</div>
<div class="section" id="feature-catch-and-log-exceptions-occurring-in-echoexceptionweb">
<h3>[FEATURE] Catch and log exceptions occurring in echoExceptionWeb</h3>
<p>If, during the rather complex process of custom exception renderings,
again an exception occurs, this exception is again caught silently
and logged. In such a case there won&#8217;t be anything output (white page),
but still a 500 Internal Server Error is sent, and the actual reason
for the exception can still be found in the log.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ac9f348334d836345860335cb7e40aa72db5ab1b">ac9f348</a></li>
</ul>
</div>
<div class="section" id="bugfix-treat-namespaces-with-underscores-correctly">
<h3>[BUGFIX] Treat namespaces with underscores correctly</h3>
<p>The actual classloading does not handle the presence of underscores in namespaces
correctly.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/49847">#49847</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ced8e0bed7bbc10745f69a95f901adb2e1701300">ced8e0b</a></li>
</ul>
</div>
<div class="section" id="task-improved-error-message-for-unresolved-route">
<h3>[TASK] Improved error message for unresolved route</h3>
<p>This change adds information about the request method and the
originally called URI to the error message which is displayed when
no route matched.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/09f30305ef49030618aa42371aba3750362fc6f7">09f3030</a></li>
</ul>
</div>
<div class="section" id="bugfix-routepath-command-shows-the-format-name-again">
<h3>[BUGFIX] RoutePath command shows the format name again</h3>
<p>This is just a minor fix. Instead of printing out whether the
format is set or not, the actual name is now shown again.</p>
<p>This was introduced by 07ab7988577c6a2c8656707820d8db1a5f08545b.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/51257">#51257</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0a35aa5ec1a4bcb9094593f08576cf42f6737bb5">0a35aa5</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-tests-and-fix-for-phpunit-3-8">
<h3>[TASK] Clean up tests and fix for PHPUnit 3.8</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/600bf48027ecb8334d9f4776bda89a0f497ddab4">600bf48</a></li>
</ul>
</div>
<div class="section" id="bugfix-buildsubprocesscommand-fails-with-multiple-arguments">
<h3>[BUGFIX] buildSubprocessCommand fails with multiple arguments</h3>
<p>Fixes an issue where the buildSubprocessCommand() function returned
an invalid command line which lacked spaces between command options.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49503">#49503</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c01679271fc3faa25bf41d666e21bf36f0c5da98">c016792</a></li>
</ul>
</div>
<div class="section" id="feature-files-removeemptydirectoriesonpath">
<h3>[FEATURE] Files::removeEmptyDirectoriesOnPath()</h3>
<p>This change introduces a new utility function which removes all
empty directories on a given path.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7765d86cfdf8cddb029be9d575339278b3af495e">7765d86</a></li>
</ul>
</div>
<div class="section" id="task-fix-typo-in-name-of-joel-on-software">
<h3>[TASK] Fix typo in name of &#8220;Joel on Software&#8221;</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c720e847226e8d5a6ecc661d6675f8446c37c427">c720e84</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-a-serialization-problem-with-intercepted-request">
<h3>[BUGFIX]&nbsp;Fix a serialization problem with intercepted request</h3>
<p>This change fixes a recursive serialization problem where the
ActionRequest is serialized multiple times in a session entry.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49289">#49289</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/65fa532130fcb59446f321598912a6e9eee42f4e">65fa532</a></li>
</ul>
</div>
<div class="section" id="task-fix-license-in-file-level-docblocks">
<h3>[TASK] Fix license in file level docblocks</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/50835">#50835</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1c315deb84b13e88433659dd5a8a799bf50cbf2e">1c315de</a></li>
</ul>
</div>
<div class="section" id="task-cosmetic-typographical-fixes-in-documentation">
<h3>[TASK] Cosmetic &amp; typographical fixes in documentation</h3>
<p>Fixes some spelling errors in the ModelViewController chapter
and adjusts the indention of a YAML example.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/623ff4971a48f52dff23f3afd97e6d8721feb4be">623ff49</a></li>
</ul>
</div>
<div class="section" id="bugfix-broken-annotation-in-documentation">
<h3>[BUGFIX] Broken annotation in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a9b92c7d3049b1f82495ae051b502e5b13cd6ee3">a9b92c7</a></li>
</ul>
</div>
<div class="section" id="bugfix-replace-wrong-keyword-in-documentation">
<h3>[BUGFIX] Replace wrong keyword in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/8f1d91f52dd24d94e25494a8b1df4bc3e7851df3">8f1d91f</a></li>
</ul>
</div>
<div class="section" id="feature-new-doctrine-data-type-objectarray">
<h3>[FEATURE] New Doctrine data type &#8220;objectarray&#8221;</h3>
<p>This type should be used for any array properties that might contain
objects. It has two advantages over the standard Doctrine array type:</p>
<ul class="simple">
<li>stores only type/identifier for persisted objects</li>
<li>uses BLOB on the database level instead of CLOB</li>
</ul>
<p>The latter makes it actually work with PostgreSQL (or other RDBMS that
do not allow NUL bytes in CLOB columns).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42167">#42167</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c78cf9a3ad288788c7cfcde354ce6f6e528e952d">c78cf9a</a></li>
</ul>
</div>
<div class="section" id="feature-allow-view-configuration-via-views-yaml">
<h3>[FEATURE] Allow view configuration via Views.yaml</h3>
<p>This patch adds a new Configuration called <tt class="docutils literal"><span class="pre">Views.yaml</span></tt>
to set/override various settings for Views, just
like the template path to use or controller options.</p>
<p>Example <tt class="docutils literal"><span class="pre">Views.yaml</span></tt>:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">-</span>
  <span class="nx">requestFilter</span><span class="o">:</span> <span class="s1">&#39;isPackage(&quot;My.Package&quot;)&#39;</span>
  <span class="nx">viewClassName</span><span class="o">:</span> <span class="s1">&#39;TYPO3\\TypoScript\\View\\TypoScriptView&#39;</span>
  <span class="nx">options</span><span class="o">:</span>
    <span class="nx">typoScriptPathPattern</span><span class="o">:</span> <span class="s1">&#39;resource://My.Package/Private/TypoScripts&#39;</span>
</pre></div>
</div>
<p>Change I7596f6fc7f8349f3c43d05e6b5916b7946d412d5 in
Fluid takes care about this with rearranging the TemplateView.</p>
<p>Additionally this change introduces a dependency to TYPO3.Eel.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42176">#42176</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/dc39b58dabe448f69ed6b896572e9b3bbbff14e7">dc39b58</a></li>
</ul>
</div>
<div class="section" id="bugfix-corrected-security-documentation-regarding-entrypoints">
<h3>[BUGFIX] Corrected Security documentation regarding EntryPoints</h3>
<p>This updates the section about the WebRedirect EntryPoint and mentions
the obsolescence of the uri key and its superseding option
routeValues.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/74c20238ea9d2dbec67f8c1ce176d5df292ac550">74c2023</a></li>
</ul>
</div>
<div class="section" id="task-use-note-to-make-statement-more-catching">
<h3>[TASK] use &#8216;note&#8217; to make statement more catching</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/568b614b7df4e82b17d9dc38243499254c39fcbf">568b614</a></li>
</ul>
</div>
<div class="section" id="task-fix-broken-links-in-documentation">
<h3>[TASK] Fix broken links in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2abf69b9253af090b5feb3ef8f8a146bca5e1d28">2abf69b</a></li>
</ul>
</div>
<div class="section" id="task-add-cgl-pdf-to-flow-package">
<h3>[TASK] Add CGL PDF to Flow package</h3>
<p>Includes the &#8220;TYPO3 Flow Coding Guidelines on one page&#8221; PDF
as asset to the Flow documentation.</p>
<p>This also links the CGL thumbnail with the PDF and moves images
two levels up in the directory structure.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e8e497600ca0d73d7c7f3b2dc56763dcadf84f61">e8e4976</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-index-number-regarding-upload-fields-in-definitiv-guide">
<h3>[BUGFIX] Fix index number regarding upload fields in definitiv guide</h3>
<p>The docs state a wrong number on the generated tags.</p>
<p>Though this is small, the docs state that</p>
<p>&lt;f:form.upload property=&#8221;attachments.0.originalResource&#8221; /&gt;
&lt;f:form.upload property=&#8221;attachments.1.originalResource&#8221; /&gt;</p>
<p>translates to
&lt;input type=&#8221;file&#8221; name=&#8221;formObject[attachments][0][originalResource]&#8221;&gt;
&lt;input type=&#8221;file&#8221; name=&#8221;formObject[attachments][0][originalResource]&#8221;&gt;</p>
<p>Obviously, this is not the case. Second index is 1.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/50181">#50181</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d4448a680e46d7a5849743900624acc837293f46">d4448a6</a></li>
</ul>
</div>
<div class="section" id="task-fix-documentation-version">
<h3>[TASK] Fix documentation version</h3>
<p>Sets the version of this documentation to &#8220;2.1&#8221; so that it is rendered
correctly at docs.typo3.org</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/8e65980bd8ea1df07cf6787e8f95e7af1eca1bea">8e65980</a></li>
</ul>
</div>
<div class="section" id="task-update-documentation-cgl-thumbnail">
<h3>[TASK] Update documentation CGL Thumbnail</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e1591ea92f1c60e112ecd3b0ed9a33b4a51330ec">e1591ea</a></li>
</ul>
</div>
<div class="section" id="task-update-coding-guidelines-on-one-page">
<h3>[TASK] Update Coding Guidelines on One Page</h3>
<p>Updates Coding Guidelines on One Page to include information on
relative namespaces and other CGL changes from:
Idd4f6a5ea2f24ccd6368c3e43bff57355c5baa4b</p>
<p>Also updates the coloring and styles to match the code hiliting
on docs.typo3.org, as well as using TYPO3 Orange instead of red.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/24bb59a026884a49c15e805bfe7b741c4ccebda9">24bb59a</a></li>
</ul>
</div>
<div class="section" id="task-update-version-branch-to-dev-master">
<h3>[TASK] Update version branch to dev-master</h3>
<p>This updates the constant FLOW_VERSION_BRANCH to
version &#8220;dev-master&#8221;.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0640b2a74100d61d6f9ebfe98c08299c846fa027">0640b2a</a></li>
</ul>
</div>
<div class="section" id="task-update-cgl-to-recent-changes">
<h3>[TASK] Update CGL to recent changes</h3>
<p>Adjusts the &#8220;PHP Coding Guidelines &amp; Best Practices&#8221; to additions that
have been agreed on during our &#8220;TYPO3 Neos Technical Discussion&#8221; meetup.</p>
<p>In addition this tweaks and fixes some parts of the existing guidelines.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/50032">#50032</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3fb0ca37ff9f9eaba2aa68d7a4dd5cb090d203c8">3fb0ca3</a></li>
</ul>
</div>
<div class="section" id="feature-resolve-relative-namespaces-and-use-statements-in-var-param-annotations">
<h3>[FEATURE] Resolve relative namespaces and use statements in &#64;var &amp; &#64;param annotations</h3>
<p>Reflection should expand shortened or namespaced &#64;var &amp; &#64;param annotations
to their fully qualified class name.</p>
<p>This has a direct benefit in the following areas (all covered by tests):</p>
<ul class="simple">
<li>Reflection returns the fully qualified class name for &#64;var and &#64;param annotations</li>
<li>Reflection returns the fully qualified property types for Domain Models
inside the class schema</li>
<li>Dependency Injection using &#64;Flow\Inject works with shortened class names</li>
<li>Property mapping works for shortened class names in type hint &amp; &#64;param annotation</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46008">#46008</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/bc8f7164dea7331823b6170aa76833ffdc6c9658">bc8f716</a></li>
</ul>
</div>
<div class="section" id="bugfix-controllercontext-constructor-has-4-arguments">
<h3>[BUGFIX] ControllerContext constructor has 4 arguments</h3>
<p>ControllerContext constructor has no flashMessageContainer
argument, 5th argument.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/49923">#49923</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d905ae0e7296a231b81435bac12308a379736b5c">d905ae0</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-arbitrary-setters-in-persistentobjectconverter">
<h3>[BUGFIX] Allow arbitrary setters in PersistentObjectConverter</h3>
<p>This change supports additional setters in entities by implementing a
fallback to the reflection service if the class schema does not contain
a property.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49815">#49815</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/8c28a5866d3fab7389bb034f4f4cc192564420ae">8c28a58</a></li>
</ul>
</div>
<div class="section" id="task-use-better-matching-note-instead-of-tip-in-documentation">
<h3>[TASK] Use better matching &#8216;note&#8217; instead of &#8216;tip&#8217; in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0f5de1984be014f7a705bdb3a2b0f503ea58cb13">0f5de19</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-consistent-spelling-of-dependency-to-avoid-confusion">
<h3>[BUGFIX] Use consistent spelling of dependency to avoid confusion</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a0929592f1eebabfe87dbb0cf1d3c6e7bbeac9e9">a092959</a></li>
</ul>
</div>
<div class="section" id="bugfix-write-typo3-cms-instead-of-just-typo3-in-documentation">
<h3>[BUGFIX] Write TYPO3 CMS instead of just TYPO3 in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7b108b5af28ddfefb5c5802958fa77753b7a8872">7b108b5</a></li>
</ul>
</div>
<div class="section" id="feature-allow-configurable-doctrine-event-subscribers">
<h3>[FEATURE] Allow configurable doctrine event subscribers</h3>
<p>This change allows doctrine event subscribers and listeners to be configured
via the options TYPO3.Flow.persistence.doctrine.eventSubscribers and
TYPO3.Flow.persistence.doctrine.eventListeners respectively.</p>
<p>This feature allows doctrine extensions to be used with Flow, that depend on
the doctrine event system, like the gedmo behavioral extension.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47228">#47228</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5540b3c3a8ebba602410d869fdc88cd5f1f133a5">5540b3c</a></li>
</ul>
</div>
<div class="section" id="id55">
<h3>[TASK] Fix broken links in documentation</h3>
<p>This fixes links that were mostly broken due to the renamed
git repositories / Flow packages.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49963">#49963</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4061f2bafdd8a16a51bb8d3805f16e96ec5b315a">4061f2b</a></li>
</ul>
</div>
<div class="section" id="bugfix-behave-silently-if-no-translation-unit-elements-are-present">
<h3>[BUGFIX] Behave silently if no translation unit elements are present</h3>
<p>If a translation source does not contain any translationUnit elements,
which is allowed in XLIFF for &lt;trans-unit&gt; elements inside //file/body,
now there is no Undefined Index error anymore, but the incident is
silently logged to the system logger as every other translation-related
incident.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47058">#47058</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/06a1694dec79a67e8e195ede97c3a9ffccc4aacb">06a1694</a></li>
</ul>
</div>
<div class="section" id="task-extract-mediatype-handling-from-http-request">
<h3>[TASK] Extract MediaType handling from HTTP request</h3>
<p>Currently the HTTP Request contains several methods interacting
with media types (aka MIME types).</p>
<p>This change extract those methods to the MediaTypes utility class
to purge the request class and to make media type handling easier
reusable for other components.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48615">#48615</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/19cf544d222968f650065ae91e67efeccc672e30">19cf544</a></li>
</ul>
</div>
<div class="section" id="task-add-www-data-debian-ubuntu-to-examples-of-webserver-users-in-documentation">
<h3>[TASK] Add &#8216;www-data&#8217; (debian,ubuntu) to examples of webserver users in documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/20636f11afae288f5126b1cc7d9696bef92be6e7">20636f1</a></li>
</ul>
</div>
<div class="section" id="bugfix-roles-are-not-synchronized-after-database-migrate">
<h3>[BUGFIX] Roles are not synchronized after database migrate</h3>
<p>The roles are not synchronized from the Policy.yaml files to the
database after the database migration, but only after rebuilding
the cache. This causes problems in the setup package where the
database migration is run and the next step fails in reading the
roles from the database.</p>
<p>By adding a signal to the doctrine migration command we can run
the synchronization after database migration so the roles in the
database will always be up to date after migration.</p>
<p>This change makes the initializeRolesFromPolicy method public
which does not cause issues as the method won&#8217;t perform any
actions if the rolesFromPolicyUpToDate flag in the cache is set.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/43fe1a383622bcc9aa6d153b9bd793db582bf99a">43fe1a3</a></li>
</ul>
</div>
<div class="section" id="bugfix-cache-management-exception-when-files-changed-but-no-classes">
<h3>[BUGFIX] Cache Management Exception when files changed but no classes</h3>
<p>When classes did not change, but other files did, an exception occurs
because $modifiedClassNamesWithUnderscores does not exist, as it can
be seen when reading the source code.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49571">#49571</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/dce0d7becda1150b38de3153b387da856cfc0add">dce0d7b</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-deterministic-join-aliases">
<h3>[BUGFIX] Use deterministic join aliases</h3>
<p>Before this change, we used uniqid() for building join aliases. This prevented
the doctrine DQL cache to work correctly.</p>
<p>We found this change during profiling TYPO3 Neos, where it led to about
10% performance increase in frontend rendering.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49569">#49569</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4b2e5ca6f4496e480ecaa14ab2e6077f215fdfeb">4b2e5ca</a></li>
</ul>
</div>
<div class="section" id="feature-bind-routes-to-http-request-methods">
<h3>[FEATURE] Bind routes to HTTP request methods</h3>
<p>This change allows routes to be limited to certain request methods.
This is especially useful for REST services where you often need the
same URI to invoke different actions depending on the HTTP method.</p>
<p>Usage:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">-</span>
  <span class="nx">uriPattern</span><span class="o">:</span> <span class="s1">&#39;foo/bar&#39;</span>
  <span class="nx">defaults</span><span class="o">:</span>
    <span class="s1">&#39;@package&#39;</span><span class="o">:</span>    <span class="s1">&#39;Some.Package&#39;</span>
    <span class="s1">&#39;@controller&#39;</span><span class="o">:</span> <span class="s1">&#39;Standard&#39;</span>
    <span class="s1">&#39;@action&#39;</span><span class="o">:</span>     <span class="s1">&#39;first&#39;</span>
  <span class="nx">httpMethods</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;GET&#39;</span><span class="p">]</span>

<span class="o">-</span>
  <span class="nx">uriPattern</span><span class="o">:</span> <span class="s1">&#39;foo/bar&#39;</span>
  <span class="nx">defaults</span><span class="o">:</span>
    <span class="s1">&#39;@package&#39;</span><span class="o">:</span>    <span class="s1">&#39;Some.Package&#39;</span>
    <span class="s1">&#39;@controller&#39;</span><span class="o">:</span> <span class="s1">&#39;Standard&#39;</span>
    <span class="s1">&#39;@action&#39;</span><span class="o">:</span>     <span class="s1">&#39;second&#39;</span>
  <span class="nx">httpMethods</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;PUT&#39;</span><span class="p">]</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/27117">#27117</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/07ab7988577c6a2c8656707820d8db1a5f08545b">07ab798</a></li>
</ul>
</div>
<div class="section" id="bugfix-orm-fails-on-databases-with-low-maximum-length-for-table-names">
<h3>[BUGFIX] ORM fails on databases with low maximum length for table names</h3>
<p>This fixes a bug that creates too long database identifiers on
systems where maxIdentifierLength is less than 31 as Oracle has.</p>
<p>This patch fixes the bug in a backwards compatible way.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/49007">#49007</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e7f4df662c2589219990c3986bc646b1c71b0a94">e7f4df6</a></li>
</ul>
</div>
<div class="section" id="bugfix-exception-in-proxyclassbuilder-cannot-be-thrown-because-wrong-exception-message">
<h3>[BUGFIX] Exception in ProxyClassBuilder cannot be thrown because wrong exception message</h3>
<p>This leads to weird exceptions such as:</p>
<blockquote>
<div>Notice: Undefined variable: TYPO3\Flow\Command\ConfigurationCommandController</div></blockquote>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49370">#49370</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/54ed453a823f5f004098244351abf2259f5d2797">54ed453</a></li>
</ul>
</div>
<div class="section" id="feature-iterator-support-for-apc-cache-backend">
<h3>[FEATURE] Iterator support for APC cache backend</h3>
<p>This adds support for iterating over entries of an APC cache.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/49185">#49185</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/119ac7c58e4e2d0b9dba57c139b9f0e543dd053d">119ac7c</a></li>
</ul>
</div>
<div class="section" id="bugfix-session-storage-has-poor-performance-for-hundreds-of-sessions">
<h3>[BUGFIX] Session storage has poor performance for hundreds of sessions</h3>
<p>Fixes an issue with the storage backend for sessions which resulted in
a bad overall performance when hundreds of sessions were active
simultaneously. The improved implementation is now based on two separate
cache storages and a new garbage collector which allows for more fine
grained tuning.</p>
<p>If you previously used a different than the default cache backend for
sessions, you will need to adjust your configuration because this
implementation is based on two distinct cache backend configurations
(see updated Caches.yaml).</p>
<p>The option name for setting the garbage collection probability has
changed: the settings now come with a dedicated section for garbage
collection which contains the probability and, added by this patch, the
maximum number of old sessions which may be removed by the garbage
collector during one invocation.</p>
<p>You need to flush caches with &#8211;force after applying this change set.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/49189">#49189</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49190">#49190</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d84108f8e6a52c946f8465793a41ca4e4fe26081">d84108f</a></li>
</ul>
</div>
<div class="section" id="feature-iterator-support-for-cache-frontends-backends">
<h3>[FEATURE] Iterator support for Cache Frontends / Backends</h3>
<p>This adds support for iterating over entries of a cache. In this
particular patch only support for the VariableFrontend and the file
based backends is included. Further implementations will be part of
separate commits.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49185">#49185</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ebb885123b6e328f555d7971f0dc75590902c80b">ebb8851</a></li>
</ul>
</div>
<div class="section" id="bugfix-session-garbage-collection-is-non-functional">
<h3>[BUGFIX] Session garbage collection is non-functional</h3>
<p>Fixes an issue with the newly introduced session handling which resulted
in a big amount of orphaned cache entries due to a non-functional
garbage collection. In combination with a non-optimized implementation
of the garbage collector, this resulted in very long request times if
thousands of entries existed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49021">#49021</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f243be48c3c14e87e4493ec37edf5f4183c52d0b">f243be4</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-introduction-is-broken">
<h3>[BUGFIX] Property introduction is broken</h3>
<p>This change fixes property introduction through aspects by adding
missing checks for available property introductions.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39413">#39413</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/915b71ce7346b7c6cc33e95ccb9d628f7023bbb1">915b71c</a></li>
</ul>
</div>
<div class="section" id="bugfix-provide-working-apache-settings-in-documentation">
<h3>[BUGFIX] Provide working apache settings in documentation</h3>
<p>The provided AllowOverride is now matching the needs of Flow.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48951">#48951</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f91bbc8ccf811a4d235c2c21d6749e8609ab4ab9">f91bbc8</a></li>
</ul>
</div>
<div class="section" id="task-small-documentation-correction">
<h3>[TASK] Small documentation correction</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/cf9e8888c9cfb55ed1f1321aa1e2afb6c163f46b">cf9e888</a></li>
</ul>
</div>
<div class="section" id="task-tiny-cgl-cleanup">
<h3>[TASK] Tiny CGL cleanup</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/83d2cadd8141f59151e21ec5da738b8a92cb19be">83d2cad</a></li>
</ul>
</div>
<div class="section" id="bugfix-cache-is-not-flushed-for-changes-in-sub-routes">
<h3>[BUGFIX] Cache is not flushed for changes in sub routes</h3>
<p>The CacheManager automatically flushes routing caches in
Development context if a Routes.yaml file was changed.
This extends the behavior to flush caches even if a custom
sub route (Routes.xyz.yaml) was modified.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47255">#47255</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43966">#43966</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7ca72da7866f754237a4280bce453651c0f119e5">7ca72da</a></li>
</ul>
</div>
<div class="section" id="bugfix-validation-is-not-reset-in-functional-tests">
<h3>[BUGFIX] Validation is not reset in functional tests</h3>
<p>If using the internal request engine (= in functional tests) the ValidationResolver
that contains a 1st level cache for validated objects is not properly reset.</p>
<p>This change fixes this by introducing a reset() method that is called by
InternalRequestEngine::sendRequest()</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46715">#46715</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/8f0041d50cb85dd85aee0adea53989e8a8865241">8f0041d</a></li>
</ul>
</div>
<div class="section" id="bugfix-doctrine-docparser-ignores-flow-autoloader">
<h3>[BUGFIX] Doctrine DocParser ignores Flow autoloader</h3>
<p>The Doctrine DocParser does not utilize the autoloaders
registered into spl_autoload. This change registers
the Flow autoloader into Doctrines AnnotionRegistry so
it will be used in the lookup.</p>
<p>The error only occurs in Production context, but
it&#8217;s hard to say how this change can be verified as
it seems to be very specific when the error occurs
and does not have to occur for all controller /
action combinations in the application.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48551">#48551</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ec698a03696491c499ad75e5ee664682edd8aee1">ec698a0</a></li>
</ul>
</div>
<div class="section" id="bugfix-comment-now-references-to-the-correct-method-name">
<h3>[BUGFIX] Comment now references to the correct method name</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48557">#48557</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/20216daec85c0b41ddadfaed7969aab8d04595f4">20216da</a></li>
</ul>
</div>
<div class="section" id="bugfix-broken-inheritance-type-handling-in-flowannotationdriver">
<h3>[BUGFIX] Broken inheritance type handling in FlowAnnotationDriver</h3>
<p>This reverts commit 93fbe9fc8d789547f05eec2b4945eb6c565fa3fa because
it broke more than it was supposed to fix.</p>
<p>The failing test that led to the original &#8220;fix&#8221; was in fact broken and
is fixed with this change.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/48231">#48231</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/69c6576f25069a7f9915dd260089d490cedcd5ec">69c6576</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-obsolete-packagemanagercontrollertest">
<h3>[BUGFIX] remove obsolete PackageManagerControllerTest</h3>
<p>… the original has been removed at I3f7e287d4dca234f77a727ec113960b3fd215b33
&#8211; breaking the unit tests</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2ac620e6e10f1cef33d7d3eda66ffdfaaf24f30b">2ac620e</a></li>
</ul>
</div>
<div class="section" id="task-make-code-migration-checking-roles-in-policies-more-robust">
<h3>[TASK] Make code migration checking roles in policies more robust</h3>
<p>The migration checking for the use of globally defined roles identifier
was a bit too eager in working on packages without Policy.yaml and/or
role definitions, plus it did not skip local roles in ACLs.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/35ec586bf09490fce1e2399dbca8f2f8d6ba57d2">35ec586</a></li>
</ul>
</div>
<div class="section" id="feature-allow-use-of-callback-function-in-regex-search-replace">
<h3>[FEATURE] Allow use of callback function in regex search/replace</h3>
<p>Since using the e modifier for preg_replace() is no longer recommended
(deprecated as of PHP 5.5) this is an alternative. If the $replace
argument given to searchAndReplaceRegex() in code migrations is an
anonymous function it will be passed to preg_replace_callback() and
thus allows custom replace operations.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/12d815db47ae371e66218bddfa1a6adfc06e6896">12d815d</a></li>
</ul>
</div>
<div class="section" id="task-add-german-translation-for-validation-error-messages">
<h3>[TASK] Add german translation for validation error messages</h3>
<p>This adds german translatsions for bundled validation error messages.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48254">#48254</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/45279">#45279</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9808fb28b3cf2ea4671c0d4474c13dcf086908f2">9808fb2</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-access-to-resources-granted-to-everybody">
<h3>[BUGFIX] Allow access to resources GRANTED to &#8220;Everybody&#8221;</h3>
<p>PolicyEnforcement does no longer throw an AccessDenied exception
if not logged in before checking the actual ACLs for the
resource in question. This allows creating resources and
granting access to them for &#8220;Everybody&#8221; which was not possible
before.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46036">#46036</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1efc1016d89c87bf34bc51cdce5bb7dbff3b8f5f">1efc101</a></li>
</ul>
</div>
<div class="section" id="task-remove-leftover-package-manager-controller-for-cli">
<h3>[TASK]&nbsp;Remove leftover package manager controller for CLI</h3>
<p>This one was replaced by a command controller some time ago.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/277ff08c8cf7180253626bcfa0aaa4fccfe6c114">277ff08</a></li>
</ul>
</div>
<div class="section" id="task-document-translated-validation-error-messages">
<h3>[TASK] Document translated validation error messages</h3>
<p>This adds documentation on how to use translated validation error
messages.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48251">#48251</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f445b78d02b2de93e5b92480a3a2ade6e6419ad1">f445b78</a></li>
</ul>
</div>
<div class="section" id="bugfix-ignoring-of-inheritance-type-in-flowannotationdriver-broken">
<h3>[BUGFIX] Ignoring of inheritance type in FlowAnnotationDriver broken</h3>
<p>Due to weird circumstances the tests for the FlowAnnotationDriver were
skipped for a while, and change Ie6e46efa858a651b2f1fe4b08d78039249504dea
broke the functionality to disable inheritance of no subclasses exist
for a class annotated with an InheritanceType annotation.</p>
<p>This changes fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48231">#48231</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/93fbe9fc8d789547f05eec2b4945eb6c565fa3fa">93fbe9f</a></li>
</ul>
</div>
<div class="section" id="task-re-enable-and-fix-flowannotationdriver-tests">
<h3>[TASK] Re-enable and fix FlowAnnotationDriver tests</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6a310a17f75cb992ed4ce78d9e5108453149c938">6a310a1</a></li>
</ul>
</div>
<div class="section" id="task-fix-mailing-list-uri-on-first-guide-page">
<h3>[TASK] Fix mailing list URI on first guide page</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b3a9b132339c59aadd59b438c7f2d69e53244b54">b3a9b13</a></li>
</ul>
</div>
<div class="section" id="task-update-cli-command-reference">
<h3>[TASK] Update CLI command reference</h3>
<p>This updates the CLI command reference in the guide. The change looks
bigger than it is, because the commands are now sorted by package key
and identifier.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/04b484a78d574e8c9558709844eeb2f78a638224">04b484a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-failing-validatorresolvertest">
<h3>[BUGFIX] Fix failing ValidatorResolverTest</h3>
<p>The PolyTypeObjectValidator change broke a number of changes, because
it was not adjusted to the static method result compilation changes
merged since it was created.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/45167">#45167</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3761b8f9b20947d6fd2a2a745dccdd8c829536d1">3761b8f</a></li>
</ul>
</div>
<div class="section" id="task-fix-rst-markup-in-objectmanagement-chapter">
<h3>[TASK] Fix rST markup in ObjectManagement chapter</h3>
<p>A note block was not correctly marked up.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/59f544398bd93c1c5c5d945e0be971e0bd7185f0">59f5443</a></li>
</ul>
</div>
<div class="section" id="task-fix-rst-markup-in-routing-chapter">
<h3>[TASK] Fix rST markup in Routing chapter</h3>
<p>Some code blocks were not correctly marked up, leading to block quotes
instead of code listings.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/150d2cdbfae25b2cf465408b0a8570d21d109302">150d2cd</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-missing-search-acl-to-file-permission-script">
<h3>[BUGFIX] Add missing &#8220;search&#8221; ACL to file permission script</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48133">#48133</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/361343830e95ed2aeaecffa0c035c778a9a0617c">3613438</a></li>
</ul>
</div>
<div class="section" id="bugfix-controllers-must-not-be-of-scope-singleton">
<h3>[BUGFIX] Controllers must not be of scope singleton</h3>
<p>Removes the scope(&#8220;singleton&#8221;) annotation from the
provided base controllers.</p>
<p>Background:
Usually the scope of a controller doesn&#8217;t really make a difference,
because they are only instantiated once per request.
But if the same controller is used multiple times
(e.g. within two plugin/widget instances on one page) the side
effects could be very confusing.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/45647">#45647</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7f89b1bad66a1ef0940e86869389adb94f904ab4">7f89b1b</a></li>
</ul>
</div>
<div class="section" id="bugfix-authentication-does-not-work-any-longer-without-redirects">
<h3>[BUGFIX] Authentication does not work any longer without redirects</h3>
<p>This fixes a regression that made the authenticated roles only available
in the security context after a redirect following authentication.</p>
<p>Background:</p>
<p>This is a regression introduced with the 1st level cache added in
Id256b168ff9c6aa4cac8da8957ada237f9236c71 but the actual problem is
that the PersistenceQueryRewritingAspect initializes the security
context if it was not initialized before (since change
I44838de1503cbe49cf3fee51921b731bfaa0cfc5) when intercepting QOM
queries setting the context roles to &#8220;Anonymous&#8221; and &#8220;Everybody&#8221;.</p>
<p>This change adds a new method Context::withoutAuthorizationChecks()
that allows you temporarily disable authorization related interceptors
e.g. PolicyEnforcement and PersistenceQueryRewriting aspects in order
to be able to circumvent authorization in low level operations (for
example to fetch the current account in an AuthenticationProvider).</p>
<p>Usage:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">securityContext</span><span class="o">-&gt;</span><span class="na">withoutAuthorizationChecks</span><span class="p">(</span>
  <span class="k">function</span> <span class="p">(</span><span class="nv">$accountRepository</span><span class="p">,</span> <span class="nv">$username</span><span class="p">,</span> <span class="nv">$providerName</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$account</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// this will disable the PersistenceQueryRewritingAspect for this one call</span>
    <span class="nv">$account</span> <span class="o">=</span> <span class="nv">$accountRepository</span>
      <span class="o">-&gt;</span><span class="na">findActiveByAccountIdentifierAndAuthenticationProviderName</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span> <span class="nv">$providerName</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">);</span>
</pre></div>
</div>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46352">#46352</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46636">#46636</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e06e0f2dd6eb565f00ae535c780ab13b74de8f92">e06e0f2</a></li>
</ul>
</div>
<div class="section" id="task-adjust-dependencies-to-doctrine-packages">
<h3>[TASK] Adjust dependencies to doctrine packages</h3>
<p>This changes the dependencies to doctrine/migrations (so it explicitly
points to dev-master) and doctrine/data-fixtures (so it becomes a
suggestion instead of a requirement).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47808">#47808</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/14d6b5c3ff82c67d92d50112fd1221aebefbea94">14d6b5c</a></li>
</ul>
</div>
<div class="section" id="bugfix-reflectionservice-works-for-non-entity-inheritance-members">
<h3>[BUGFIX] ReflectionService works for non-Entity inheritance members</h3>
<p>As soon as a class which is not an entity was present as an
ancestor of an Entity (with at least one Entity descendant in
between), there was an Undefined Index error because the
ReflectionService proceeded on the assumption that everything
was an Entity, hence present in the -&gt;classSchemata array.</p>
<p>This adds an additional check for the actual presence of
such an array index and proofs this behavior with a
Functional Test Fixture.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47809">#47809</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4c5207896059e9a3e5d841ddb564f387c51cb634">4c52078</a></li>
</ul>
</div>
<div class="section" id="bugfix-handle-open-basedir-properly-during-file-upload">
<h3>[BUGFIX] Handle open basedir properly during file upload</h3>
<p>This solves the issues of uploading files when using open_basedir
restriction. Instead of having to add the temporary upload
directory (upload_tmp_dir) in the open_basedir configuration,
which is a bad idea, this ensures that it works even though the
open basedir restricts access to the temporary upload directory.</p>
<p>Make sure that the temporary upload directory is writable to test
this issue.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45936">#45936</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6fb381bc6665e65bd0b68dec8ee027c644188d86">6fb381b</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-variable-name-references-in-var-annotations">
<h3>[BUGFIX] Allow variable name references in &#64;var annotations</h3>
<p>This change loosens the strictness of the &#64;var annotation parsing, where
it would throw an exception when the annotation contained the variable
name it referred to.</p>
<p>So this is now possible:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @var integer $variable</span>
<span class="sd"> */</span>
</pre></div>
</div>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47114">#47114</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4395bcba3a3b49abb16388e05c3ba2e176dd8915">4395bcb</a></li>
</ul>
</div>
<div class="section" id="feature-allow-using-own-i18n-formatters">
<h3>[FEATURE] Allow using own I18n formatters</h3>
<p>Internationalization&#8217;s placeholder formatters do not need
to be placed under the TYPO3\Flow namespace anymore, making
it possible to use very own formatters in own packages.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d836376a1571a0c70d2815de42afbef9217f5575">d836376</a></li>
</ul>
</div>
<div class="section" id="task-update-configuration-schemas">
<h3>[TASK] Update configuration schemas</h3>
<p>This change updates the configuration schemas to the latest merges.</p>
<p>On top, it allows for configuration of doctrine connection
wrappers and the MasterSlaveConnection wrapper, that allows to setup
a master/slave database connection.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47346">#47346</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3b554c967324ec4c59a657452ff031c7e83becd2">3b554c9</a></li>
</ul>
</div>
<div class="section" id="bugfix-support-bcrypt-validation-of-hashes-with-different-cost">
<h3>[BUGFIX] Support BCrypt validation of hashes with different cost</h3>
<p>In the current implementation of the BCryptHashingStrategy a password is
hashed with crypt and the hash contains the algorithm and parameters
with the salt that was used to hash the password.</p>
<p>This change updates the validation to also take the cost from the stored
hash and allow changes to the cost setting.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47725">#47725</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/8872a65bc437cd3d1d2275b9657ceb92ad19e492">8872a65</a></li>
</ul>
</div>
<div class="section" id="bugfix-classloader-does-not-handle-underscore-correctly">
<h3>[BUGFIX] ClassLoader does not handle underscore correctly</h3>
<p>For class names containing an underscore the ClassLoader now correctly
replaces that with a directory separator when loading classes.</p>
<p>This fixes compatibility with some PSR-0 compatible composer packages.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47675">#47675</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/24e15e460535f5002d9b2fdb6a700618b0e9a85a">24e15e4</a></li>
</ul>
</div>
<div class="section" id="task-fix-spelling-error-related-to-static-method-advice-test">
<h3>[TASK] Fix spelling error related to static method advice test</h3>
<p>This was introduced with I15817e357d98eb78de8984a78582de5cdf16064e</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47371">#47371</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ff139888dc3ee3a509b9bfcb3a12f5c24dfbcf9a">ff13988</a></li>
</ul>
</div>
<div class="section" id="bugfix-lazy-di-causes-endless-loop-for-certain-session-objects">
<h3>[BUGFIX] Lazy DI causes endless loop for certain session objects</h3>
<p>Fixes an issue with the Lazy Dependency Injection mechanism which caused
and endless loop if session-scoped objects were unserialized and later on
injected lazily.</p>
<p>Background:</p>
<p>when a session is resumed (rather early in the HTTP Request Handler), the
objects contained in the session are unserialized and register their
instance automatically at the Object Manager. If
such an object, for example the Security Context, is later on injected
lazily into another class, the generated proxy code will overwrite the
instance which was previously set at the Object Manager.</p>
<p>In the reported case the RequestHandler retrieved the Security Context
via ObjectManager-&gt;get() and received a DependencyProxy instead of the
expected real instance. On using it, the DependencyProxy called the
ObjectManager-&gt;get() method to retrieve the real instance which resulted
in a recursion.</p>
<p>This patch corrects the generated proxy code to check for an existing
real instance before trying to generate a Dependency Proxy.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46424">#46424</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a532ede63163c3b059d9d5f12fb3573c16a1d17c">a532ede</a></li>
</ul>
</div>
<div class="section" id="bugfix-aop-erroneously-allows-to-advise-static-methods">
<h3>[BUGFIX] AOP erroneously allows to advise static methods</h3>
<p>Fixes an issue with the AOP proxy builder which erroneously allowed to
advise static methods which resulted in a PHP fatal error as soon as
such a method was called.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47371">#47371</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/86620ec8cead8ba3773a554aab7763d436de9c8a">86620ec</a></li>
</ul>
</div>
<div class="section" id="bugfix-unpublishpersistentresource-deletes-only-intended-resource">
<h3>[BUGFIX] unpublishPersistentResource deletes only intended Resource</h3>
<p>When calling <tt class="docutils literal"><span class="pre">unpublishPersistentResource</span></tt>, now only the actually
intended Resource gets deleted, rather than the whole publishing
target directory.</p>
<p>Since vfsStream does not support the necessary glob() operation,
the appropriate UnitTest is rebuilt to use the real filesystem.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7278fbb207accc06b5cc853b6418b74bd76bc379">7278fbb</a></li>
</ul>
</div>
<div class="section" id="bugfix-generateuuid-creates-uppercase-characters-in-uuids">
<h3>[BUGFIX] generateUUID() creates uppercase characters in UUIDs</h3>
<p>The UUIDs generated by that method were always lowercase, now they are
uppercase (since change I1237fdfbee75cbfca2f2082cf30a69383dbc7fd5). As
soon as you do a case-sensitive comparison on those UUIDs as strings,
this will now break, even if the UUIDs are the same semantically.</p>
<p>This change makes them lowercase again.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47534">#47534</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46862">#46862</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/654e0f4bb2c557b066538bc53588461c1c3aad28">654e0f4</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-policyservice-createrole-to-use-the-role-object">
<h3>[BUGFIX] Fix PolicyService-&gt;createRole to use the Role object</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47500">#47500</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c1774f1b389c42a928b61ef11f9d1ad934402a52">c1774f1</a></li>
</ul>
</div>
<div class="section" id="bugfix-initializeobject-is-no-longer-executed-twice">
<h3>[BUGFIX] initializeObject is no longer executed twice</h3>
<p>In every session-scope object initializeObject() was
called twice as soon as the session is started.
Now initializeObject() is only called once.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45609">#45609</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/609de0dadd1574ab3779f1fb79b80844faf74f32">609de0d</a></li>
</ul>
</div>
<div class="section" id="bugfix-setparentroles-fails-if-passed-roles-contain-duplicates">
<h3>[BUGFIX] setParentRoles() fails if passed roles contain duplicates</h3>
<p>Fixes an issue where Doctrine failed inserting parent roles if the array
passed to Role-&gt;setParentRoles() contained duplicates.</p>
<p>Even though getParentRoles() does return roles without duplicates,
setParentRoles() did not filter duplicates and caused the SQL error
mentioned in the related issue ticket.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47473">#47473</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/30124b2021fcd7eed4938218d0422b5b23bff73e">30124b2</a></li>
</ul>
</div>
<div class="section" id="bugfix-actioncontroller-throws-warning-because-of-short-method-names">
<h3>[BUGFIX] ActionController throws warning because of short method names</h3>
<p>Fixes an issue in ActionController which caused a PHP warning if the
concrete ActionController implementation contained methods whose name
was shorter than 7 characters.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47469">#47469</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/54d4b684fe5ffba936c32b98513e6d299604eb25">54d4b68</a></li>
</ul>
</div>
<div class="section" id="task-complete-documentation-for-error-rendering-groups">
<h3>[TASK] Complete documentation for Error Rendering Groups</h3>
<p>This adds a section about how to configure and use the custom error
views resp. rendering groups.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/39423">#39423</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/fcfbc329a7a1b480f9cb548d9e91933e6d272bf9">fcfbc32</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-hasrole-to-policyservice">
<h3>[BUGFIX] Add hasRole() to PolicyService</h3>
<p>The PolicyService needs hasRole() to allow checks for existing roles
without workarounds.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47416">#47416</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/43f35845e10d127dc216a4163a3a14f1b52c0e46">43f3584</a></li>
</ul>
</div>
<div class="section" id="bugfix-generateuuid-can-be-broken-by-seeding-mt-rand">
<h3>[BUGFIX] generateUUID can be broken by seeding mt_rand</h3>
<p>Use randomizer which cannot be seeded / configured by userspace code.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46862">#46862</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3ad59e9b377520299822c7a907f2134a5407d8a3">3ad59e9</a></li>
</ul>
</div>
<div class="section" id="feature-skip-automatic-persistence-and-csrf-protection-for-safe-requests">
<h3>[!!!][FEATURE] Skip automatic persistence and CSRF protection for &#8220;safe&#8221; requests</h3>
<p>This change set introduces an important behavior for Flow applications:
HTTP request methods which are, by definition, considered to be &#8220;safe&#8221;
(that is, &#8220;read-only&#8221;) are now treated as such.</p>
<p>In practice it means that GET requests will not trigger a persistAll() call
anymore and CSRF protection for actions is not checked anymore if
the request is a GET request.</p>
<p>Please adjust your applications to cleanly observe this principle since
more optimizations in this direction are planned for later versions of
TYPO3 Flow.</p>
<p>This patch contains the corresponding documentation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47252">#47252</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f3d285c368ce916765721cde523c4b023375f76a">f3d285c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-exception-header-in-internalrequestengine">
<h3>[BUGFIX] Fix exception header in InternalRequestEngine</h3>
<p>When using the virtual browser in functional tests, the
InternalRequestEngine communicates any exceptions
which occurred during the request by adding special
headers to the HTTP response.</p>
<p>Previously the &#8220;X-Flow-ExceptionCode&#8221; header contained
exception codes like &#8220;#1222268609: &#8221;. This patch fixes
the rendering to just the code, like &#8220;1222268609&#8221;.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a5be4aa6daf98ec57d0c3b54e6ef3fb6808abcff">a5be4aa</a></li>
</ul>
</div>
<div class="section" id="bugfix-property-mapper-can-again-map-account-roles">
<h3>[BUGFIX] Property mapper can again map account roles</h3>
<p>Due to the type hint in the setter method of roles, the property
mapper was unable to set the converted property.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47232">#47232</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/71ba4e0fa243a7425b00f61554c5dd0ba753ad0a">71ba4e0</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow-exception-shouldn-t-be-in-use-statement">
<h3>[BUGFIX] Flow Exception shouldn&#8217;t be in use statement</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47253">#47253</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ee91e3f15d5b906aef4e3dbf280cbcc2659b54df">ee91e3f</a></li>
</ul>
</div>
<div class="section" id="bugfix-system-roles-don-t-get-a-package-namespace">
<h3>[BUGFIX] System roles don&#8217;t get a package namespace</h3>
<p>The role change I39f335baa01fbe9b883e98e85cb1f063bbaf5744
introduced the automatic prepend of the package namespace
where the role has been defined; except for system roles
which are at the moment Anonymous and Everybody.</p>
<p>For ACLs, however, the package namespace has been prepended
also for the system roles. This fixes that behavior.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47229">#47229</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/28862">#28862</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f71d9f1cd5ccbf7932db166a40fe58db24130bb1">f71d9f1</a></li>
</ul>
</div>
<div class="section" id="feature-http-method-tunneling">
<h3>[FEATURE] HTTP method tunneling</h3>
<p>This change allows the HTTP method to be overridden by the client.
This is especially useful for clients that only support a subset of the
supported methods (e.g. browsers).</p>
<p>The request method can be overridden by specifying a <tt class="docutils literal"><span class="pre">__method</span></tt>
argument. Additionally Flow now respects the <tt class="docutils literal"><span class="pre">X-HTTP-Method</span></tt>
respectively <tt class="docutils literal"><span class="pre">X-HTTP-Method-Override</span></tt> header.</p>
<p>usage:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;POST&quot;</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;__method&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;DELETE&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Note:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">The</span> <span class="nx">HTTP</span> <span class="nx">request</span> <span class="nx">method</span> <span class="nx">can</span> <span class="nx">only</span> <span class="nx">be</span> <span class="nx">changed</span> <span class="k">for</span> <span class="nx">POST</span> <span class="nx">requests</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/47137">#47137</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a297b170fba8e97836dc4173cf0a90dbb12d31a1">a297b17</a></li>
</ul>
</div>
<div class="section" id="task-adjust-logexception-signature-in-loggerinterface">
<h3>[!!!][TASK] Adjust logException() signature in LoggerInterface</h3>
<p>This adds the $additionalData parameter to the signature of the
logException() method.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2f4a691102d19a1fef8a85ceb0c40299c653722d">2f4a691</a></li>
</ul>
</div>
<div class="section" id="task-remove-operator-again-in-simplefilebackend-and-classloader">
<h3>[TASK] Remove &#64;-operator again in SimpleFileBackend and ClassLoader</h3>
<p>This change removes the shut-up operator again from include_once()
calls in the ClassLoader and SimpleFileBackend in order to provide
meaningful error messages to the developer if class files or cache
entries were not found.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46689">#46689</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f04343e10cef18e3e76bb302b840c1313225b57e">f04343e</a></li>
</ul>
</div>
<div class="section" id="feature-static-compilation-of-compile-time-data">
<h3>[FEATURE] Static compilation of compile time data</h3>
<p>Implement a CompileStatic annotation for static methods that will be
evaluated by the proxy builder in production. Update bootstrap and some
classes to enable efficient caching of reflection information and lazy
loading of the reflection service.</p>
<p>Note: It is not possible to give a type hint to those static methods,
since it could be a DependencyProxy that is actually passed.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46371">#46371</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c63295652b7f620395266c495e71aa2977ff9837">c632956</a></li>
</ul>
</div>
<div class="section" id="task-throw-exception-on-lacking-var-annotation">
<h3>[TASK] Throw exception on lacking &#64;var annotation</h3>
<p>In the Validation\ValidationResolver now an
exception is thrown if the validated
property does not have an &#64;var annotation
which is mandatory.</p>
<p>This prevents a Notice exception when
accessing the not present &#8216;var&#8217; key
on the tag values array, and gives instead
a more helpful exception message.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/eacd75db3f2ec8cd6ddf35f1c986a6aef8d86276">eacd75d</a></li>
</ul>
</div>
<div class="section" id="task-re-add-testing-routes-yaml">
<h3>[TASK] Re-add Testing Routes.yaml</h3>
<p>This partly reverts I9aa80105cf05e675fbb6ca26bd99f377f52254c8
which rendered functional routing tests useless (they are skipped if
the testing routes are not available).</p>
<p>Now, if Flow Subroutes are included in a distribution, Routing tests
will be executed again.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/259a6e88078b70cd5164ea7cd106e22ebcef3334">259a6e8</a></li>
</ul>
</div>
<div class="section" id="bugfix-initialize-rolerepository-correctly">
<h3>[BUGFIX] Initialize $roleRepository correctly</h3>
<p>The $roleRepository is set &#8220;manually&#8221; in initializeRolesFromPolicy() -
only if caches are outdated. But the $roleRepository is needed even if
the caches are up to date, so this breaks.</p>
<p>This change moves the initialization outside the check.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47115">#47115</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ae01fce3d26b85934fcec897e0783bc0007e7f88">ae01fce</a></li>
</ul>
</div>
<div class="section" id="bugfix-propertymapper-now-normalizes-simple-types">
<h3>[BUGFIX] PropertyMapper now normalizes simple types</h3>
<p>This fixes a bug where the property mapper was unable to find a
valid typeconverter for properties annotated with int or bool.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47054">#47054</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/8eca52b6c44787b60a210dec1c653ca532326aff">8eca52b</a></li>
</ul>
</div>
<div class="section" id="feature-handle-roles-consistently-as-objects">
<h3>[!!!][FEATURE] Handle roles consistently as objects</h3>
<p>With this change roles are consistently used as objects.</p>
<p>To prevent naming conflicts between roles from different packages the
package key is added to the role names.</p>
<p>The handling of roles now is more strict and does not allow the use of
not configured (non-existent) roles anymore.</p>
<p>Roles are now referenced as real instances instead of their string
identifiers in models. Roles which were defined in policies are now
automatically mirrored to the RoleRepository (usually stored as a
table in a database).</p>
<p>The getRoles() method has been removed from TokenInterface.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/28862">#28862</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43578">#43578</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37451">#37451</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27698">#27698</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f0776fb3e7c561940617b0011ce36fc3609084f5">f0776fb</a></li>
</ul>
</div>
<div class="section" id="task-cleaned-up-configuration-validate-command">
<h3>[TASK] Cleaned up configuration:validate command</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/44990">#44990</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3ece55dbba9a4dab4ce25ae9d92c3c7f6096e360">3ece55d</a></li>
</ul>
</div>
<div class="section" id="feature-allow-split-configuration-sources">
<h3>[FEATURE] Allow split configuration sources</h3>
<p>With this change it is possible to allow split configuration sources
when defining a custom configuration type. This allows to use multiple
YAML for a type (when using the bundled YamlSource), which will be
merged together.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37854">#37854</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/fae1b9d96cf4eb9101ff75139e5510f99c450042">fae1b9d</a></li>
</ul>
</div>
<div class="section" id="feature-support-for-sessionless-authentication">
<h3>[FEATURE] Support for sessionless authentication</h3>
<p>This feature enables authentication without the need of a session to
be started. This is useful for stateless services (e.g. REST) where
you don&#8217;t want Flow to create a session cookie.</p>
<p>Authentication tokens which don&#8217;t rely on a session simply implement
the SessionlessTokenInterface marker interface.</p>
<p>This patch reverts parts of the first implementation of sessionless
authentication introduced in <a class="reference external" href="https://review.typo3.org/#/c/18388">https://review.typo3.org/#/c/18388</a>
(commit I5f86cb7a3a3fff3220d61d705f216e1b1d4f2369).
The original implementation was a breaking change with a few
unresolved side effects.</p>
<p>The implementation contained in this change set is backwards
compatible with already existing authentication tokens which
relied on sessions.</p>
<p>This patch also contains a small speed optimization for the CSRF
Protection pattern which assumes that no account has been
authenticated yet if the Authentication Manager is still a Dependency
Proxy.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45282">#45282</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46428">#46428</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9feb5902e1c4ed1b32278b28b6edc0a41a6bb7b9">9feb590</a></li>
</ul>
</div>
<div class="section" id="bugfix-session-add-safeguard-against-incompatible-request-handlers">
<h3>[BUGFIX] Session: add safeguard against incompatible request handlers</h3>
<p>This adds additional checks and throws an exception if a session should be
started but the currently active request handler does not implement the
HttpRequestHandlerInterface.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44087">#44087</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9a0715c231f715d193c26db1ea8a008727e51adb">9a0715c</a></li>
</ul>
</div>
<div class="section" id="bugfix-reduce-side-effects-of-sessions-used-in-functional-tests">
<h3>[BUGFIX] Reduce side effects of sessions used in functional tests</h3>
<p>This patch makes sure that once a session has been closed or
destroyed, it will rebuild information determined from the request /
response in case it is started again.</p>
<p>While this scenario (a session is closed and started again during
the same PHP request) is uncommon in real world projects, it may
happen during functional tests. Therefore this is mainly a fix to
reduce side effects in functional tests.</p>
<p>A concrete side effect Flow has without this patch is that session
cookies are set to the HTTP response only when a session was
started the first time.</p>
<p>This patch also adds an explanation about starting / resuming
sessions to the class doc comment.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46703">#46703</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44202">#44202</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2fdafb69fa403e2bc55c10f9f1d28808dcd0fc6f">2fdafb6</a></li>
</ul>
</div>
<div class="section" id="feature-set-packagetype-when-creating-new-package">
<h3>[FEATURE] Set packageType when creating new package</h3>
<p>When calling packageManager-&gt;createPackage you have
no way to define what package type you are creating.</p>
<p>This allows for ex. SiteKickstarter to set correct
package type in composer manifest</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44258">#44258</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/bb742c5ae1ce9060769ac82e27b410a40b36fbca">bb742c5</a></li>
</ul>
</div>
<div class="section" id="bugfix-avoid-side-effects-in-apc-cache-backend">
<h3>[BUGFIX] Avoid side effects in APC cache backend</h3>
<p>When more than one cache was using the APC cache backend, use of the
same entry identifiers would cause side effects, as the frontends would
access the same entries.</p>
<p>This is fixed by including the cache identifier in the prefix hash.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44471">#44471</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/38135">#38135</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b09ea9951de50206ef48ef2f334de6129b0e1a61">b09ea99</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-variable-type-declaration-in-security-context">
<h3>[BUGFIX] Fix variable type declaration in Security\Context</h3>
<p>The $request member is annotated as being Http\Request but must be
Mvc\ActionRequest instead.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44743">#44743</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0a10bdf0db0d285735a98545bf7ca06d55a5f22b">0a10bdf</a></li>
</ul>
</div>
<div class="section" id="task-adjust-tests-to-rewritten-urls-in-functional-tests">
<h3>[TASK] Adjust tests to rewritten URLs in functional tests</h3>
<p>The resolution for #44434 makes Flow behave as if mod_rewrite was
available during functional tests. Some tests checking against
generated URLs need to be adjusted, so they no longer expect it  to
produce links with embedded &#8220;index.php&#8221;.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/44434">#44434</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5d1ed40f65de3c1d1e1878f7a1207c79dff42d8b">5d1ed40</a></li>
</ul>
</div>
<div class="section" id="bugfix-enable-settings-override-with-empty-array-value">
<h3>[!!!][BUGFIX] Enable settings override with empty array value</h3>
<p>This change updates the behavior of arrayMergeRecursiveOverrule such
that empty arrays are also treated as empty values. If you used this
function before it can lead to different results after the change.</p>
<p>Before the change an empty array value was always merged
into the first array, even if emptyValuesOverride was set to TRUE.
With the new behavior an empty array value overrides a given input
value if emptyValuesOverride is set. This allows to override settings
with an empty array in the settings hierarchy.</p>
<p>This change is breaking if your settings hierarchy depends on
empty array values not overriding a parent configuration.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36720">#36720</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/abdffa83a03ae660b9a850d87209312cb9843c08">abdffa8</a></li>
</ul>
</div>
<div class="section" id="revert-feature-make-arrayconverter-map-only-allowed-properties">
<h3>Revert &#8220;[FEATURE] Make ArrayConverter map only allowed properties&#8221;</h3>
<p>This reverts commit ed875023d0a980b4192bc01e7307db9efc7d2071
The feature is breaking if you rely on Arrays being converted
as is and it breaks some functional tests. Until a backwards
compatible solution is found the feature is reverted.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/bb48029a51b1b1c0c1d11e284fb61f8c1448ac3c">bb48029</a></li>
</ul>
</div>
<div class="section" id="bugfix-reintroduce-support-for-entities-with-custom-id-properties">
<h3>[BUGFIX] Reintroduce support for entities with custom id properties</h3>
<p>This adjusts the pointcut expressions of the PersistenceMagicAspect
to introduce UUID identifiers only to entities that do not contain custom
identifier properties (annotated with &#64;ORM\Id).</p>
<p>This change also refactors the unit tests and adds functional tests for
the aspect.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46883">#46883</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/cd38544b443e44eb81b6791f58519588d77f5e68">cd38544</a></li>
</ul>
</div>
<div class="section" id="task-remove-leading-backslash-in-use-statement-s">
<h3>[TASK] Remove leading backslash in use statement(s)</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b3473de3dc4b838f0e111d733fa3805490ae3e77">b3473de</a></li>
</ul>
</div>
<div class="section" id="task-update-contributors-list-in-guide">
<h3>[TASK] Update contributors list in guide</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5c96eb1ed635764b86b6834d14a9edf0fc86e5a7">5c96eb1</a></li>
</ul>
</div>
<div class="section" id="task-code-cleanup-in-error-classes">
<h3>[TASK] Code cleanup in Error classes</h3>
<ul class="simple">
<li>Make proper use of namespace</li>
<li>Fixes a number of CGL violations</li>
<li>Fixes other small issues</li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/331b66a99a8ae24563e8dfe167a028694e777604">331b66a</a></li>
</ul>
</div>
<div class="section" id="task-two-tweaks-to-the-documentation">
<h3>[TASK] Two tweaks to the documentation</h3>
<p>Add a hint on setting the default collation for MySQL and tweak the
installation instructions a tiny bit.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/12d062b88fd9179c4ef2a47fa2b67728cd781718">12d062b</a></li>
</ul>
</div>
<div class="section" id="bugfix-stringlengthvalidator-should-use-utf-8-safe-function">
<h3>[BUGFIX] StringLengthValidator should use UTF-8 safe function</h3>
<p>StringLengthValidator no longer uses strlen to determine the
length of the string to be validated but uses the
Utility\Unicode\Functions::strlen method which relies on
mb_string internally.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/36159">#36159</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e32d5e69a6765b36682554c39bb1e4facb8db618">e32d5e6</a></li>
</ul>
</div>
<div class="section" id="task-improved-exception-message-for-compilation-errors">
<h3>[TASK] Improved exception message for compilation errors</h3>
<p>This removes the &#8220;Execution of subprocess failed with exit code …&#8221;
as it distracts from the real problem which only appears later in the
message. Most likely the user / developer is not interested in possible
bugs of the compiler / subprocess.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a18996b353fe985de686d15856daef7ee9cd4120">a18996b</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-upload-of-files-without-file-extension">
<h3>[BUGFIX] Allow upload of files without file extension</h3>
<p>This change allows upload of files without a file extension. The upload
of PHP-Files is still not allowed. The method importUploadedResource
does not have a unit test, since it is not testable through the use of
move_uploaded_file.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46536">#46536</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d17b53c61e66ef6555e3f53424cb571b77c048ed">d17b53c</a></li>
</ul>
</div>
<div class="section" id="feature-support-arguments-in-scripts-executecommand">
<h3>[FEATURE] Support arguments in Scripts::executeCommand</h3>
<p>Previously it was not supported to have command arguments in a CLI
subcommand. This patch solves this issue by adding a $commandArguments
parameter to the executeCommand() method.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46072">#46072</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/aa3f832d698af044aece2f258f2d7af916ac3db1">aa3f832</a></li>
</ul>
</div>
<div class="section" id="task-fix-typo-in-method-name">
<h3>[TASK] Fix typo in method name</h3>
<p>The method forceFlushCachesIfNeccessary() is spelled incorrectly, it
should be forceFlushCachesIfNecessary().</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/34971c3ed58f805e127a21281cb8a0610898644d">34971c3</a></li>
</ul>
</div>
<div class="section" id="bugfix-undefined-index-breaks-logger-setup-in-production">
<h3>[BUGFIX] Undefined index breaks logger setup in Production</h3>
<p>With I6da4763fb94798b1d1647b6108457996a48aa128 the logger used for the
system log was made configurable. In Production context, when cached
settings are used, this breaks after an update - and even &#8211;force with a
cache flush does not help.</p>
<p>This change adds a safeguard against the settings not being there.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/40738">#40738</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46053">#46053</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c3f0cdbfd21491e8dbd1d1b9240b1a09041dad5d">c3f0cdb</a></li>
</ul>
</div>
<div class="section" id="bugfix-objectaccess-getproperty-breaks-on-stdclass-due-to-cache">
<h3>[BUGFIX] ObjectAccess::getProperty() breaks on \stdClass due to cache</h3>
<p>When using getProperty() on \stdClass instances, the accessor cache
leads to false results - because the class name alone in this case does
not tell anything about the availability of a property.</p>
<p>With this change getProperty() does not use the cache for \stdClass
anymore.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46465">#46465</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d1fdd2a3af1a24160e236b15b7529b1e2245c3a4">d1fdd2a</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-objectaccess-getproperty-for-getters-in-arrayaccess-objects">
<h3>[BUGFIX] fix ObjectAccess::getProperty() for getters in ArrayAccess objects</h3>
<p>With I2abbbd5924cd0177ad8a31cb01c2953dd5ba39fd a regression was introduced
that prevented ObjectAccess::getProperty() to work on objects implementing ArrayAccess
and providing custom getters.</p>
<p>Code to reproduce:
\TYPO3\Flow\Reflection\ObjectAccess::getProperty(new \ArrayObject(), &#8216;iteratorClass&#8217;)</p>
<p>expected: &#8220;ArrayIterator&#8221;
actual: Exception</p>
<p>This change fixes this by checking arrays and ArrayAccess objects separately.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46491">#46491</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42723">#42723</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/392020a6c50a832b778423b0e2d8a17a9f2e5d09">392020a</a></li>
</ul>
</div>
<div class="section" id="feature-allow-polytype-custom-validators-to-be-used">
<h3>[FEATURE] Allow PolyType custom validators to be used</h3>
<p>This introduces a new PolyTypeObjactValidatorInterface. When building
base validator conjunctions for a type, all implementations of that
interface will be asked if they canValidate() the type.</p>
<p>This enables the writing of custom validators that act on multiple
types.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45167">#45167</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7f51878cb4cad29a86fcc4ca64aee1f7b444920f">7f51878</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-the-abstractexceptionhandler-check-for-error-reporting">
<h3>[BUGFIX] Make the AbstractExceptionHandler check for error_reporting()</h3>
<p>When the shut-up operator is used in PHP the error_reporting level is
temporarly lowered to 0. The AbstractExceptionHandler does not check
for this, and outputs the exception whenever it is called.</p>
<p>This is a problem when the set_exception_handler method is used, as
PHP will still call those exception handlers even if the shut-up
operator is used. This is why the AbstractExceptionHandler should
check for error_reporting() === 0 and ignore the exception if so.</p>
<p>This change fixes the exit code 255 error during the compile run
which is thrown in the Testing context where we set E_WARNING to
be an exceptional error.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46485">#46485</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f4d459b7a1996a8776e5bde760561bcc58ae32d4">f4d459b</a></li>
</ul>
</div>
<div class="section" id="task-cgl-cleanup-of-typo3-flow">
<h3>[TASK] CGL cleanup of TYPO3.Flow</h3>
<p>Fixes a list of CGL issues in Flow.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/516c3e210ea073fc55466ec1e2b4ee136ade6d98">516c3e2</a></li>
</ul>
</div>
<div class="section" id="task-cache-result-of-isauthenticated-in-authenticationprovidermanager">
<h3>[!!!][TASK] Cache result of isAuthenticated in AuthenticationProviderManager</h3>
<p>This change will calculate the result of the authentication in
authenticate() and respect the authentication strategy for the result.
The authenticate() method will be called lazily if not done before.</p>
<p>This is breaking since isAuthenticated() before would behave like the
&#8220;at least one token&#8221; strategy was used, even the strategy was set to
&#8220;all tokens&#8221;.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/44f14091dc3fe0bf0982a144705da4026ec563e5">44f1409</a></li>
</ul>
</div>
<div class="section" id="task-add-unit-tests-for-utility-algorithms">
<h3>[TASK] Add Unit Tests for Utility\Algorithms</h3>
<p>This adds Unit Tests for the Utility\Algorithms class and its functions.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/936ffe938c27361bab71f34c3e7bafbbc2319dad">936ffe9</a></li>
</ul>
</div>
<div class="section" id="task-add-default-route-in-functional-test-for-security">
<h3>[TASK] Add default route in functional test for security</h3>
<p>If the Flow framework routes were not mounted some functional tests
failed due to the request matcher of the TestingProvider. This change
adds the required route programatically. Since the Routes.yaml for
functional tests is not needed anymore it can be removed.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/60c09a2b61ba9823d92bf598435dc113b56f3b14">60c09a2</a></li>
</ul>
</div>
<div class="section" id="feature-make-system-logger-frontend-configurable">
<h3>[FEATURE] Make System Logger frontend configurable</h3>
<p>Move hard coded TYPO3\FLOW3\Log\Logger to Settings.yaml instead. This
allows a user to fully replace the logger instead of just adding or
removing backends.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/40738">#40738</a> #46053</li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0c1046e9235d55f9273474de8333118ef578bea1">0c1046e</a></li>
</ul>
</div>
<div class="section" id="task-keep-roles-until-tokens-get-updated">
<h3>[TASK] Keep roles until tokens get updated</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46352">#46352</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5241493c41d0829cb67066e1bfc0cf9d7b1ef8bc">5241493</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-getidentifierbyobject-for-lazy-doctrine-proxy">
<h3>[BUGFIX] Fix getIdentifierByObject for lazy doctrine proxy</h3>
<p>This bug was introduces with Ib6e1eda1ac38677e84c46a441d099b2c5c1e6e24
and causes the content security functional test to fail. There was no
unit test or other indication for this behaviour, so this change adds
a unit test for the Doctrine persistence manager.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/42263198f3c0ebf3db8d5905638ab6dea8ebc595">4226319</a></li>
</ul>
</div>
<div class="section" id="task-remove-cache-has-call-in-router-caching-aspect">
<h3>[TASK] Remove cache has call in router caching aspect</h3>
<p>This change removes a call to &#8220;has&#8221; on the cache frontend, which is not
needed if we want to use the entry with &#8220;get&#8221;. This improves the
performance when building a larger number of URIs.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f614a3671acf22c8b2a322a34824daf382a7afe9">f614a36</a></li>
</ul>
</div>
<div class="section" id="feature-a-boolean-value-validator">
<h3>[FEATURE] A boolean value Validator</h3>
<p>A new Validator for validating if a value is a specific
boolean value (TRUE or FALSE). Used with no options it
expects TRUE.
Mainly useful for validating mandatory checkboxes in
forms (like Terms and Conditions).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45553">#45553</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d46b153a646fe12fb4eb988d46a277ec366cda40">d46b153</a></li>
</ul>
</div>
<div class="section" id="task-optimize-validation-to-improve-performance">
<h3>[TASK] Optimize Validation to improve performance</h3>
<p>The validation result object traverses the whole result-
tree everytime someone checks for errors, notices or
warnings.</p>
<p>This patch refactors the Result object to cache the result
internally and propagate changes to the parent result object.</p>
<p>In addition the heavy merge actions use this cached
information to prevent unneccesary operations.</p>
<p>Furthermore the validators are reworked to prevent
superfluous object creation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46340">#46340</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/90b4bc42ab87eaf7ed78a9b0f1fcbc54b3ea304e">90b4bc4</a></li>
</ul>
</div>
<div class="section" id="task-use-property-injection-where-possible">
<h3>[TASK]&nbsp;Use property injection where possible</h3>
<p>This change refactors setter injection to property injection to allow
lazy dependency injection.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9ed19b5ced8edf727bdf4b523e7f1fbdb514c865">9ed19b5</a></li>
</ul>
</div>
<div class="section" id="task-optimize-i18n-service">
<h3>[TASK] Optimize I18N service</h3>
<p>This change makes the I18N service usable for lazy loading by removing
it from the default runtime. Additionally the Locale class is marked
as non-proxyable to prevent calls to the wakeup function.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9c2f9ee7d1dcffb19f11a7f2470adc4562474e28">9c2f9ee</a></li>
</ul>
</div>
<div class="section" id="feature-lazy-dependency-injection">
<h3>[!!!][FEATURE] Lazy Dependency Injection</h3>
<p>This introduces lazy dependency injection for dependencies injected
through Property Injection. Instead of loading the respective class
and instantiating the dependency right away, a proxy object is
injected which automatically replaces itself with the real dependency
once a method is called on it.</p>
<p>The &#64;Inject annotation now accepts an optional argument &#8220;lazy&#8221; which
allows for turning off lazy dependency injection in specific cases.</p>
<p>Please read the new section in the Object Management chapter of
the Flow manual, included in this change set.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43819">#43819</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ff8608f1c296d7cfe8865e629f6d0cdf07a67e61">ff8608f</a></li>
</ul>
</div>
<div class="section" id="task-remove-file-get-contents-call-in-cache-filebackend">
<h3>[TASK] Remove file_get_contents call in Cache FileBackend</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46343">#46343</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4607e589f45ac501c7308d483a84b467ac155938">4607e58</a></li>
</ul>
</div>
<div class="section" id="task-change-order-of-accessing-identity-in-getidentifierbyobject">
<h3>[TASK] Change order of accessing identity in getIdentifierByObject</h3>
<p>This change improves the performance of getIdentifierByObject since
the EntityManager contains method is rather slow.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4b4548f84a8f2820c4ef29dc145397dda37e1eb8">4b4548f</a></li>
</ul>
</div>
<div class="section" id="task-use-include-with-shutup-instead-of-file-exists">
<h3>[TASK] Use include with shutup instead of file_exists</h3>
<p>This change uses include with shutup operator instead of file_exists
checks for optimized performance.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46337">#46337</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/70a092b9b7bfa4ae904bbc027135fec7f2df00d5">70a092b</a></li>
</ul>
</div>
<div class="section" id="bugfix-compile-original-and-proxy-class-into-one-file">
<h3>[BUGFIX] Compile original and proxy class into one file</h3>
<p>Reduce amount of file inclusions by combining original class
code and proxy class code into the same file as both need to
be loaded anyway.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46338">#46338</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7a00ec8a46f4ce549513303fbbe749fd38c51d98">7a00ec8</a></li>
</ul>
</div>
<div class="section" id="bugfix-remove-unneeded-filesystem-calls">
<h3>[BUGFIX] Remove unneeded filesystem calls</h3>
<p>This change removes a call to is_dir in the FileMonitor
which is duplicate as the ReadDirectoryRecursively does
exactly the same and throws an error in this case.</p>
<p>Also 2 calls to file_exists are removed as they&#8217;re not
necessary at this point as filemtime() will just return
FALSE if something goes wrong.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46290">#46290</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/203534c808fc5514829692be63c031ed2126bca9">203534c</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-flow-doctrine-cache-adapter">
<h3>[BUGFIX] Add Flow-Doctrine cache adapter</h3>
<p>This adds a cache adapter for Doctrine. It is used for the Doctrine ORM
metadata and query cache instead of the ArrayCache used until now.</p>
<p>Until now the cache implementations of Doctrine that could be configured
were not usable. This change fixes that, so that actually a cache for
metadata and query caching is used.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45264">#45264</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5e5ebf31970c572b49fc73f87832f351248f899f">5e5ebf3</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow-bootstrap-now-works-if-phpunit-is-used-as-phar-file">
<h3>[BUGFIX] Flow Bootstrap now works if PhpUnit is used as Phar file</h3>
<p>If PhpUnit was used as a Phar file, the Flow Core Bootstrap failed
during initialization in Testing context because it tried to find
PhpUnit&#8217;s autoloader. Since autoloading is already in effect when
using the Phar version, a simple check for the existence of a
PhpUnit class is sufficient.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7b9a93553ac9e6dacf3f9aa0c7075f8f31b3daf7">7b9a935</a></li>
</ul>
</div>
<div class="section" id="task-make-aspects-singletons">
<h3>[TASK] Make Aspects singletons</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/90cdde464b91bfebcbbea276415a134676f41b56">90cdde4</a></li>
</ul>
</div>
<div class="section" id="task-allow-package-key-wildcards-for-excludeclasses">
<h3>[TASK] Allow package key wildcards for excludeClasses</h3>
<p>The object.excludeClasses setting can now handle a trailing * as a
wildcard character in the package key.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a381478b3eddbfdc5f253f7111f504eba808e04f">a381478</a></li>
</ul>
</div>
<div class="section" id="bugfix-exception-thrown-in-typehandling-follow-up">
<h3>[BUGFIX] Exception thrown in TypeHandling (follow up)</h3>
<p>When using isCollectionType() on an string, a warning is thrown.
The change id Iae59221cbd72677e6c18ad0a383792a798447253 introduced this.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45876">#45876</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5772372b5dcb5e3c7b1a24443a8db12a76bd0766">5772372</a></li>
</ul>
</div>
<div class="section" id="task-some-cleanup-to-cache-related-classes">
<h3>[TASK] Some cleanup to cache related classes</h3>
<p>Non-functional changes to enhance CGL compliance and fix some typos.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/258afd36f20e3735e9b7b9ff753880938073151f">258afd3</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow-cli-again-works-for-windows-command-prompt">
<h3>[BUGFIX] Flow CLI again works for Windows command prompt</h3>
<p>Probably introduced with Ibd70e2dc8ff3a958a33ad0eb422060dc0fd8b799,
the Flow CLI call via the provided .bat file didn&#8217;t work anymore
because the used <tt class="docutils literal"><span class="pre">$_SERVER['PHP_SELF']</span></tt> will behave differently
for the flow shell and the flow.bat file: in case of the shell,
the actual <tt class="docutils literal"><span class="pre">Scripts/flow.php</span></tt> file will be included, while in
case of the .bat file, the <tt class="docutils literal"><span class="pre">Scripts/flow.php</span></tt> file is immediately
called with PHP. This results in a different PHP_SELF value.</p>
<p>The <tt class="docutils literal"><span class="pre">FLOW_ROOTPATH</span></tt> value which has to be determined, now is built
manually in case of a <tt class="docutils literal"><span class="pre">DIRECTORY_SEPARATOR</span></tt> equaling a
Windows one.</p>
<p>Additionally, in order to still allow calling the flow executable
from arbitrary locations also for Windows, the flow.bat file
is adjusted a bit in order to not rely on being at the root
path when calling the file.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44000">#44000</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/31642">#31642</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6a4c6dfbb624a10fc4c73e37a0c53a63e60979bd">6a4c6df</a></li>
</ul>
</div>
<div class="section" id="task-use-composer-installers-instead-of-own-fork">
<h3>[TASK] Use composer/installers instead of own fork</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1721c1423fd3cb8f4228019af4bb504e2233aeaa">1721c14</a></li>
</ul>
</div>
<div class="section" id="bugfix-exception-thrown-in-typehandling">
<h3>[BUGFIX] Exception thrown in TypeHandling</h3>
<p>When using isCollectionType() on an unknown class, an exception is
caused by a warning PHP gives about that class being unknown.</p>
<p>The issue has been introduced together with the patch
I007b0faf486680ecfb2fe7c753ef4cabcf6d618c</p>
<p>This adds a check that the element is a known class before using
is_subclass_of() to prevent the exception.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45876">#45876</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/57a78d3b789f24393f66a996faa62f28b469fefe">57a78d3</a></li>
</ul>
</div>
<div class="section" id="task-remove-configuration-source-sourceinterface">
<h3>[TASK] Remove Configuration\Source\SourceInterface</h3>
<p>It is unused and switching sources is not supported any longer.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/34f5d44b126078fffb16a941e7536c2dc2d9d7d8">34f5d44</a></li>
</ul>
</div>
<div class="section" id="task-tweak-some-unit-tests">
<h3>[TASK] Tweak some unit tests</h3>
<p>Basically a non-functional change that simply gets rid of some
warnings and a skipped test.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a25a8b59ad7b5b98cf8d323317c509b2c4ec4ea9">a25a8b5</a></li>
</ul>
</div>
<div class="section" id="feature-make-arrayconverter-map-only-allowed-properties">
<h3>[FEATURE] Make ArrayConverter map only allowed properties</h3>
<p>With this change the ArrayConverter only maps allowed and not skipped
keys from source to target. Of no PropertyMappingConfiguration is given,
it returns the unchanged source array (as before).</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46061">#46061</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ed875023d0a980b4192bc01e7307db9efc7d2071">ed87502</a></li>
</ul>
</div>
<div class="section" id="feature-allow-unknown-disallowed-properties-to-be-skipped">
<h3>[FEATURE] Allow unknown / disallowed properties to be skipped</h3>
<p>This adds skipUnknownProperties() and skipProperties() to the
PropertyMappingConfiguration. If configured to skip all unknown or the
given properties, the PropertyMapper will not throw an error if they
are found in the source when doing property mapping.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/46048">#46048</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/162f676d59931b67a5e591ff87981a2a7bb17253">162f676</a></li>
</ul>
</div>
<div class="section" id="bugfix-keep-array-keys-with-nested-descendall-in-jsonview">
<h3>[BUGFIX] Keep array keys with nested _descendAll in JsonView</h3>
<p>When nesting _descendAll the JsonView discards array keys. This change
fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/46046">#46046</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/090dd30ba8b6b8e34993a5cb3bbe393f2f77e145">090dd30</a></li>
</ul>
</div>
<div class="section" id="task-tiny-tweaks-to-security-documentation">
<h3>[TASK] Tiny tweaks to security documentation</h3>
<p>Some markup fixes to the security chapter.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9296c2e94e749d08d887e89d7bdeeb13b6ba4683">9296c2e</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-security-related-functional-tests">
<h3>[BUGFIX] Fix security related functional tests</h3>
<p>With the fix related to &#8220;sessionless authentication&#8221;
(I5f86cb7a3a3fff3220d61d705f216e1b1d4f2369) settings have been
adjusted in order to use the testing provider &amp; token only for requests
matching a ControllerObjectName of &#8220;TYPO3\Flow\Tests\.*&#8221;.</p>
<p>This change adjusts the tests accordingly.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/45282">#45282</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45953">#45953</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/bd46c6127889ae27c6b9848d624bcfbb89ef1433">bd46c61</a></li>
</ul>
</div>
<div class="section" id="task-some-translation-corrections-and-addition-of-french">
<h3>[TASK] Some translation corrections and addition of French</h3>
<ul class="simple">
<li>Add new trans-unit id and new target-language fr translation
for ValidationErrors.xlf</li>
<li>Add new file and new target-language fr for translation
for Main.xlf</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45279">#45279</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f35d572f2462377403090835a52091bc6a67ed36">f35d572</a></li>
</ul>
</div>
<div class="section" id="bugfix-constants-use-in-yaml-configuration-maintains-type">
<h3>[BUGFIX] Constants use in YAML Configuration maintains type</h3>
<p>If a constant expression in the YAML configuration is used,
for example <tt class="docutils literal"><span class="pre">foo:</span> <span class="pre">'%PHP_VERSION_ID%'</span></tt>, and the value
exclusively represents this constant (i.e. no additional string
concatenation like <tt class="docutils literal"><span class="pre">path:</span> <span class="pre">'%FLOW_PATH_DATA%Logs/Exception'</span></tt>),
the value is substituted directly in order to maintain the initial
type of the constant.</p>
<p>Prior to this, a <tt class="docutils literal"><span class="pre">str_replace</span></tt> was done which resulted in a string
in every case no matter if the constant was meant to be an integer,
for example.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45864">#45864</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e2e7e50c30ac512393095ee3bca008c4fc13e4fb">e2e7e50</a></li>
</ul>
</div>
<div class="section" id="feature-routing-nested-subroutes">
<h3>[FEATURE] Routing: Nested SubRoutes</h3>
<p>With this change it&#8217;s possible to load SubRoutes from other SubRoutes.
The syntax is the same as before with two additions:</p>
<ol class="arabic">
<li><dl class="first docutils">
<dt>You can specify a <tt class="docutils literal"><span class="pre">suffix</span></tt> in order to load a SubRoute from</dt>
<dd><p class="first last">a different file than the default <tt class="docutils literal"><span class="pre">Routes.yaml</span></tt></p>
</dd>
</dl>
</li>
<li><p class="first">You can set <tt class="docutils literal"><span class="pre">variables</span></tt> that will be replaced in the merged SubRoutes</p>
</li>
</ol>
<p>Usage:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">-</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Product&#39;</span>
  <span class="nx">uriPattern</span><span class="o">:</span> <span class="s1">&#39;products/&lt;EntitySubroutes&gt;&#39;</span>
  <span class="nx">defaults</span><span class="o">:</span>
    <span class="s1">&#39;@package&#39;</span><span class="o">:</span>    <span class="s1">&#39;My.Package&#39;</span>
    <span class="s1">&#39;@controller&#39;</span><span class="o">:</span> <span class="s1">&#39;Product&#39;</span>
  <span class="nx">subRoutes</span><span class="o">:</span>
    <span class="s1">&#39;EntitySubroutes&#39;</span><span class="o">:</span>
      <span class="nx">package</span><span class="o">:</span> <span class="s1">&#39;MyPackage.RestTest&#39;</span>
       <span class="c1"># load SubRoutes from My.Package/Configuration/Routes.Entity.yaml</span>
      <span class="nx">suffix</span><span class="o">:</span>  <span class="s1">&#39;Entity&#39;</span>
       <span class="c1"># replace placeholder &quot;&lt;entityName&gt;&quot; with &quot;product&quot;:</span>
      <span class="nx">variables</span><span class="o">:</span>
        <span class="s1">&#39;entityName&#39;</span><span class="o">:</span> <span class="s1">&#39;product&#39;</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43966">#43966</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/15788c42ed75d02ed48f277a58fb8f4748ff3677">15788c4</a></li>
</ul>
</div>
<div class="section" id="id171">
<h3>[!!!][FEATURE] Support for &#8220;sessionless authentication&#8221;</h3>
<p>This feature enables authentication without the need of a session to be started.
This is useful for stateless services (e.g. REST) where you don&#8217;t want Flow to create
a session cookie.</p>
<p>This is a breaking change if you created a custom authentication provider or -token
and relied on the fact that AuthenticationProvider::authenticate() started a session.
With this change the session is started when AuthenticationToken::updateCredentials() is
called. This way the token can decide if it needs a session.
Just add a &#64;Flow\Session(autoStart=true) to the updateCredentials() method if your custom
token relies on a session.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45282">#45282</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7d79b800d4237a359d3876a69538078dc2298d18">7d79b80</a></li>
</ul>
</div>
<div class="section" id="bugfix-routing-includes-object-arguments-even-though-it-should-not">
<h3>[BUGFIX] Routing includes object arguments even though it should not</h3>
<p>Route::resolve() considered &#8220;__identity&#8221; arguments as internal and ignored them,
if they were not part of the respective Route defaults or uriPattern.
This change fixes this by only iterating through sub requests (marked with a &#8220;&#8211;&#8221;)</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45463">#45463</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/85ceb84ea05f54a77748f2f55b521a712eebbd6d">85ceb84</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-jsonview-and-jsonviewtest-internals">
<h3>[TASK] Clean up JsonView and JsonViewTest internals</h3>
<p>Fix docblock and add array type hint to $configuration argument of
transformValue() and transformObject(); fix language in JsonViewTest
test names.</p>
<p>A tiny, non-functional change to Http\Message is included.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/70bd32eb6242f47f1075b2d5438dd30993f29eec">70bd32e</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-composer-requirements">
<h3>[BUGFIX] Fix composer requirements</h3>
<p>This fixes some requirements that were a bit too relaxed (due to a
misunderstanding when introducing composer to Flow).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5d68589e8244eba5e6e7ca2e9c040673770f55b2">5d68589</a></li>
</ul>
</div>
<div class="section" id="bugfix-account-s-expirationdate-can-be-set-null">
<h3>[BUGFIX] Account&#8217;s expirationDate can be set NULL</h3>
<p>After setting the expirationDate once, it&#8217;s impossible to set it
NULL again due to the typehint in the function parameters.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45629">#45629</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f350533c6f15e35dacd038e601e56443eae14a97">f350533</a></li>
</ul>
</div>
<div class="section" id="bugfix-flow-should-work-with-php-versions-lower-than-5-3-9">
<h3>[BUGFIX] Flow should work with PHP versions lower than 5.3.9</h3>
<p>The change Ia42e374202845dfe5e95c72512e9fefb4f00e789 introduced
usage of is_a() with 3 arguments which is only implemented from
PHP 5.3.9. This change replaces the call with a manual check for
inheritance.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/32829">#32829</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/45ea227709db707db3165e4b46c68834e8b671d8">45ea227</a></li>
</ul>
</div>
<div class="section" id="bugfix-mapping-to-subtype-with-type-fails">
<h3>[BUGFIX] Mapping to subtype with [__type] fails</h3>
<p>The type of a target object can be manipulated by setting __type in the
form (or during action initialization when saving the form). This
however fails if the target subclass contains fields that the original
class does not have, because the property mapping is done before the
final class is extracted from the __type request variable.</p>
<p>To get this working, the process of getting the final class name is
moved before the property mapping.</p>
<p>If you wrote your own type converters, you might need to implement the
new getTargetTypeForSource() method if you do not extend the provided
AbstractTypeConverter of Flow.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/32829">#32829</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/81997950b7819d9bc7938ee79dcc9aaedab6dcdc">8199795</a></li>
</ul>
</div>
<div class="section" id="bugfix-correctly-handle-boolean-values-with-property-injection">
<h3>[BUGFIX] Correctly handle boolean values with property injection</h3>
<p>This change fixes a bug in the property injection where an empty string
or 1 are used for representing a boolean value. This change forces the
value to be TRUE or FALSE when the value configured in Objects.yaml
is a boolean value.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45413">#45413</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/206c7371dac8d67fec6180a24098cff6cbf42f4f">206c737</a></li>
</ul>
</div>
<div class="section" id="feature-allow-influencing-ini-usage-for-sub-process">
<h3>[FEATURE] Allow influencing ini usage for sub process</h3>
<p>With a newly introduced configuration directive
<tt class="docutils literal"><span class="pre">TYPO3.Flow.core.subRequestPhpIniPathAndFilename</span></tt> it
is now possible to control whether to use an ini file
or not for sub processes. The allowed values for this
setting might either be NULL or not set to use the
parent process&#8217; ini file; or might be a path to a
specific ini file.</p>
<p>If this setting is set to <tt class="docutils literal"><span class="pre">false</span></tt>, no explicit ini file
will be used for sub processes.</p>
<p>Additionally, this patch refactory the actual command
generation out of the execution method in order to make
it unit-testable, which is also included in this patch.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45178">#45178</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/577d51cc4fd89d4c6274b713b346cb8e07650685">577d51c</a></li>
</ul>
</div>
<div class="section" id="task-cosmetic-cleanup-of-security-sub-package">
<h3>[TASK] Cosmetic cleanup of security sub package</h3>
<p>Non-functional adjustments adding type hints &amp; fixing doc comments
in order to reduce code warnings in Security sub package.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d74b0863d6555925275b17d364f646c79c18a5c1">d74b086</a></li>
</ul>
</div>
<div class="section" id="feature-command-to-list-registered-type-converters">
<h3>[FEATURE] Command to list registered type converters</h3>
<p>For debugging and informational purposes, this provides
a command <tt class="docutils literal"><span class="pre">flow:typeconverter:list</span></tt> that lists the
currently active type converters known to the Flow
instance.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3b17b1835c082405ba738fd9bbd29ea3fe3fdc19">3b17b18</a></li>
</ul>
</div>
<div class="section" id="bugfix-dependency-injection-safeguard-for-malformed-docblocks">
<h3>[BUGFIX] Dependency Injection: safeguard for malformed DocBlocks</h3>
<p>This adds a safeguard to the Dependency Injection Proxy Class Builder
which previously ended with a fatal error if client code contained a
malformed DocBlock</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45219">#45219</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/abcdf940f2236db11ddec3d478fa43e377253ff6">abcdf94</a></li>
</ul>
</div>
<div class="section" id="bugfix-correct-method-listing-of-cache-frontendinterface">
<h3>[BUGFIX] Correct method listing of cache FrontendInterface</h3>
<p>The documented listing of the method the cache&#8217;s FrontendIterface
supports is now in sync with the actually supported methods.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/867ecc74d7124048e92dfcab9990e848adf86c32">867ecc7</a></li>
</ul>
</div>
<div class="section" id="task-remove-canvalidate-from-genericobjectvalidator">
<h3>[!!!][TASK] Remove canValidate() from GenericObjectValidator</h3>
<p>The canValidate() method on the GenericObjectValidator has been around
for years in various forms, but is not used anymore.</p>
<p>Marked as breaking because it had been annotated as &#64;api for no real
reason.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7d466f2a5b1bd44aa9c09178b9ce7690710f672a">7d466f2</a></li>
</ul>
</div>
<div class="section" id="task-fix-rendering-date-in-documentation-index">
<h3>[TASK] Fix rendering date in documentation index</h3>
<p>The change in I6de5923f7277b728debd29f29a43e4f8aac2b99d did nest markup,
so the &#8220;today&#8221; was not expanded.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/753b6cdf61a3231e7bbdd99e18363d0f91f86657">753b6cd</a></li>
</ul>
</div>
<div class="section" id="task-add-custom-configuration-types-documentation">
<h3>[TASK] Add custom configuration types documentation</h3>
<p>In change I16b1de8e7c3ec826240c273a87c5e2a095815a86 the option to use
custom configuration types was added.</p>
<p>This change adds the missing documentation for that feature.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37854">#37854</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9c5e31b69e6e3a48d03f2ffa682fc69579b20e48">9c5e31b</a></li>
</ul>
</div>
<div class="section" id="task-add-rendering-date-to-documentation-index">
<h3>[TASK] Add rendering date to documentation index</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9815a450cc7d8a574d9f0fad1580235df0c6acb1">9815a45</a></li>
</ul>
</div>
<div class="section" id="bugfix-redirect-instead-of-raising-entity-not-found-exception">
<h3>[BUGFIX] Redirect instead of raising &#8220;Entity not found&#8221; exception</h3>
<p>If you are logged in into a secured Flow project and delete the
corresponding db user (for whatever reasons) an exception &#8220;Entity not
found&#8221; is raised and not caught.</p>
<p>With this change the exception is caught and instead PolicyEnforcement
will throw an AuthenticationRequiredException, usually calling a
redirect to the configured login page.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29907">#29907</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/940f56d124705ba86d13a3ff0bfc48b406b0c42c">940f56d</a></li>
</ul>
</div>
<div class="section" id="bugfix-expose-timezone-in-jsonview-s-datetime-output">
<h3>[!!!][BUGFIX] Expose timezone in JsonView&#8217;s DateTime output</h3>
<p>This corrects the string formatting in JsonView regarding
DateTime objects. The additionally required Timezone offset
is appended as of ISO 8601 in order to not lead into timezone
issues after transferring the resulting JSON.</p>
<p>This is breaking in cases where the original incorrect behaviour
was worked around by subsequent processing of the transmitted
timestamp.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44997">#44997</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e5ed0ff7d36706c4e13bcb4789392dfe99f3759e">e5ed0ff</a></li>
</ul>
</div>
<div class="section" id="feature-add-unique-entity-validator">
<h3>[FEATURE] Add unique entity validator</h3>
<p>This adds a validator for ensuring uniqueness of submitted
entities. It uses the entity identity properties to determine
the uniqueness of the entity. Made with intended use in create
&amp; update actions using the action parameter validation.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44622">#44622</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7ee3832c0769511f6804bafd9f770d4b6c1e322e">7ee3832</a></li>
</ul>
</div>
<div class="section" id="task-tweak-figures-used-in-documentation">
<h3>[TASK] Tweak figures used in documentation</h3>
<p>Tweaks image inclusions in the sources and fixes some tiny markup
errors along the way.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/44885">#44885</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b944d9190e44484723eb2a65186add12ae341085">b944d91</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-security-related-functional-test-failures-part-2">
<h3>[BUGFIX] Fix security-related functional test failures, part 2</h3>
<p>The change I724c1b352dd1807ba53b1e336f2d90e90360ff4d introduced some
test failures. This change takes care of the failing functional tests.</p>
<p>It does that by:</p>
<ul class="simple">
<li>setting the &#8220;current request&#8221; again after a call to clearContext() in
ContentSecurityTest</li>
<li>adjusting the expected exception in MethodSecurityTest in two places</li>
</ul>
<p>This is a followup to I353e2cba11473cf9ddef82f96b6a79d9d6fefbba which
was broken after having fixed those already.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42601">#42601</a></li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44765">#44765</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/56c6d852cdc7bc3faea8070708be6cd68bfc5cb9">56c6d85</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-security-related-functional-test-failures">
<h3>[BUGFIX] Fix security-related functional test failures</h3>
<p>The change I724c1b352dd1807ba53b1e336f2d90e90360ff4d introduced some
test failures. This change takes care of the failing functional tests.</p>
<p>It does that by:</p>
<ul class="simple">
<li>changing the order in which security is set up in the
FunctionalTestCase provided by Flow.</li>
<li>setting the &#8220;current request&#8221; again after a call to clearContext() in
ContentSecurityTest</li>
<li>adjusting the expected exception in MethodSecurityTest in two places</li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44765">#44765</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42601">#42601</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/55a312f28997fc4a06914ba0279db4ae57219de4">55a312f</a></li>
</ul>
</div>
<div class="section" id="task-adjust-rest-documentation-for-docs-typo3-org">
<h3>[TASK] Adjust reST documentation for docs.typo3.org</h3>
<p>Moves images around, adjust sources as needed, add Settings.yml.</p>
<p>Some source syntax fixes along the way.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44885">#44885</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/60d8f3191819cdf70d21dae5cb23c96bde51a24f">60d8f31</a></li>
</ul>
</div>
<div class="section" id="task-add-api-tags-for-methods-in-resource">
<h3>[TASK] Add &#64;api tags for methods in Resource</h3>
<p>This just adds missing &#64;api tags to those methods we support as part of
the API.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5e248b0e79fa1ff978ba2c26bed3b6b1edc40c7c">5e248b0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-high-memory-consumption-of-renderobjectdump">
<h3>[BUGFIX] Fix high memory consumption of renderObjectDump()</h3>
<p>This change reduces the maximum recursion level for Doctrine Collection
dumps from 12 to 3. This reduces memory consumption during exception
handling and when using \TYPO3\Flow\var_dump().</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44278">#44278</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/261af722510782a060ca78f49f7d730709e27064">261af72</a></li>
</ul>
</div>
<div class="section" id="bugfix-throw-exception-when-using-options-with-singleton-validators">
<h3>[BUGFIX] Throw exception when using options with singleton validators</h3>
<p>Validators being singleton must not be called with options because
the options are then inherent properties of the Validator and cannot
be executed subsequently with other options.</p>
<p>An exception is thrown if such a case occurs because it is then
a design mistake of the developer.</p>
<p>Besides, this improves the namespace use a bit.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/34872">#34872</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5f1f59bda711607bcaf7bf63098ba53ff6c159af">5f1f59b</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-security-related-unit-test-failures">
<h3>[BUGFIX] Fix security-related unit test failures</h3>
<p>The change I724c1b352dd1807ba53b1e336f2d90e90360ff4d introduced some
test failures. This change takes care of the failing unit tests.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42601">#42601</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9a3433d938110b57052d2a6bce81963368d7eeb2">9a3433d</a></li>
</ul>
</div>
<div class="section" id="task-adds-a-documentation-tip-to-keep-type-hinting">
<h3>[TASK] Adds a documentation tip to keep type hinting</h3>
<p>This adds a tip to the PropertyMapping documentation
in relation to the MVC stack; mentioning how to not
lose type hinting capabilities due to index-accessing
controller&#8217;s <tt class="docutils literal"><span class="pre">arguments</span></tt> array.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5fb83bd67dc25762ae356ce8344ec9a6855e6524">5fb83bd</a></li>
</ul>
</div>
<div class="section" id="feature-support-streams-as-request-content">
<h3>[FEATURE] Support streams as Request content</h3>
<p>This patch enhances the setContent() method of the HTTP Request class
to accept stream resources, additionally to plain strings. Additionally
the CurlEngine now detects a stream and takes advantage of cURL&#8217;s INFILE
feature.</p>
<p>That way (bigger) files can bypass PHP when sent through a request with
cURL.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44730">#44730</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c958024417ffc8ee2fb7104a338f51ba7b1a541e">c958024</a></li>
</ul>
</div>
<div class="section" id="bugfix-the-security-context-is-only-allowed-to-be-initialized-after-routing-took-place">
<h3>[BUGFIX]&nbsp;The security context is only allowed to be initialized after routing took place</h3>
<p>This bugfix solves the root-cause for the following two symptoms:</p>
<ul class="simple">
<li>two logins needed in Neos until the Site is shown</li>
<li>if the Flow_Mvc_Routing_FindMatchResults cache is deactivated completely,
the login does not work at all.</li>
</ul>
<p>The problem is as follows:</p>
<ul>
<li><p class="first">The security context needs the current request for working properly;
such that it can separate the active and inactive tokens correctly in
\TYPO3\Flow\Security\Context::separateActiveAndInactiveTokens()</p>
</li>
<li><p class="first">The current request is built during routing. Thus, the routing mechanism
(f.e. RoutePart handlers) is not allowed to access the Security Context
in any way. If it does (like in this example), things might break in various
ways.</p>
</li>
<li><p class="first">For Neos, the following call chain takes place:</p>
<blockquote>
<div><ul>
<li><p class="first">Routing</p>
</li>
<li><p class="first">FrontendNodeRoutePartHandler-&gt;matchValue line 51</p>
</li>
<li><p class="first">NodeService-&gt;getNodeByContextNodePath() line 57</p>
</li>
<li><p class="first">new ContentContext() calls &#8220;initializeObject&#8221;</p>
</li>
<li><p class="first">ContentContext-&gt;initializeObject does $this-&gt;domainRepository-&gt;findByHost()</p>
</li>
<li><p class="first">this internally uses Repository-&gt;findAll()</p>
</li>
<li><p class="first">this executes the TYPO3\Flow\Security\Aspect\PersistenceQueryRewritingAspect-&gt;rewriteQomQuery</p>
</li>
<li><p class="first">because Neos has policy entries for entities (TYPO3\TYPO3CR\Domain\Model\Node),
$this-&gt;securityContext-&gt;initialize() is called, WITHOUT HAVING A
REQUEST SET BEFORE.</p>
</li>
<li><p class="first">This results in a half- and wrongly-initialized Security Context
set up, with activeTokens not properly set, and also only the
standard roles assigned (&#8220;Everybody&#8221;).</p>
</li>
<li><dl class="first docutils">
<dt>Thus, the check in TYPO3\Neos\Controller\Frontend\NodeController-&gt;showAction() fails:</dt>
<dd><p class="first last">$this-&gt;accessDecisionManager-&gt;decideOnResource(&#8216;TYPO3_Neos_Backend_BackendController&#8217;);</p>
</dd>
</dl>
</li>
<li><p class="first">This redirects the user back to the login ($this-&gt;redirect(&#8216;index&#8217;, &#8216;Login&#8217;))</p>
</li>
<li><p class="first">Now, if the routing cache is activated, the aspect kicks in (in
the second iteration) and directly returns the match result, without
triggering a database query before.</p>
</li>
</ul>
</div></blockquote>
</li>
</ul>
<p>Thus, we need to enforce that the security context is not initialized during
the routing phase.</p>
<p>The attached patch is just a quick fix; with not really the clean solution.
But at least it works and the problem is properly described ;-)</p>
<p>This is a follow-up to issue #42601; where the according code has been
implemented.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ce08c301e116f3e775657a977c3f1bc3ee4fcad3">ce08c30</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-yaml-schemas-to-latest-changes">
<h3>[BUGFIX] Adjust YAML schemas to latest changes</h3>
<p>the CLI command &#8221;./flow configuration:validate&#8221; currently reports
invalid configuration for type &#8220;Settings&#8221; and &#8220;Objects&#8221; due to
outdated schema files.
This adjust respective schemas to recent Flow changes.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44602">#44602</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/911e281962d0c2312d0718daa29a8c8d44bce064">911e281</a></li>
</ul>
</div>
<div class="section" id="bugfix-check-inheritance-in-typehandling-iscollectiontype">
<h3>[BUGFIX] Check inheritance in TypeHandling::isCollectionType()</h3>
<p>With this change TypeHandling::isCollectionType() does consider
inheritance when it comes to the checking it does. Thus a subclass of
SplObjectStorage or an implementation of Doctrine&#8217;s Collection interface
will now be seen as a collection type.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44535">#44535</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/54d4fe931c3038d7da960a849ecda932e2f13dcc">54d4fe9</a></li>
</ul>
</div>
<div class="section" id="bugfix-implement-case-sensitivity-switch-for-query-equals">
<h3>[BUGFIX] Implement case-sensitivity switch for Query::equals()</h3>
<p>That was left as a todo and never done. Now it is possible to check
case-insensitive. Checking case-sensitive works depending on database
support, it can only be done if the database allows for case-sensitive
checking.</p>
<p>The change also trivially solves a todo about NULL checking in equals().</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44520">#44520</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/61ae4455c6c403e20f34af0e1c49f6ce83ad8ee0">61ae445</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-use-of-datetimevalidator-possible">
<h3>[BUGFIX] Make use of DateTimeValidator possible</h3>
<p>When one used Validate(type=&#8221;DateTime&#8221;) the ValidatorResolver would try
to use DateTime as the validator itself. This change fixes that.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/40449">#40449</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0a4f1ca4260156fd981bf642048e3f825158887a">0a4f1ca</a></li>
</ul>
</div>
<div class="section" id="feature-add-setoption-to-curlengine">
<h3>[FEATURE] Add setOption() to CurlEngine</h3>
<p>This allows to configure cURL in the CurlEngine. Examples for use are
proxy server settings or SSL certification handling:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CurlEngine</span><span class="p">();</span>
<span class="nv">$engine</span><span class="o">-&gt;</span><span class="na">setOption</span><span class="p">(</span><span class="nx">CURLOPT_PROXY</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">);</span>
<span class="nv">$engine</span><span class="o">-&gt;</span><span class="na">setOption</span><span class="p">(</span><span class="nx">CURLOPT_PROXYPORT</span><span class="p">,</span> <span class="mi">8888</span><span class="p">);</span>
</pre></div>
</div>
<p>In addition the singleton scope of the CurlEngine is removed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43903">#43903</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1c2e454ee4a4572f909536b2141caf70b088c938">1c2e454</a></li>
</ul>
</div>
<div class="section" id="feature-api-to-access-prefixed-identifier-in-cache-backend">
<h3>[FEATURE] API to access prefixed identifier in cache backend</h3>
<p>In case where we need to share cache between different application, it&#8217;s
needed to access the prefixed identifier to allow the other application
to access the cache entry.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/43960">#43960</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0bc34652f314b93cec8719b47889d627ac9bb724">0bc3465</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-git-error-with-core-migrate-status-command">
<h3>[BUGFIX] Fix git error with &#8220;core:migrate &#8211;status&#8221; command</h3>
<p>Obviously there are some different ways git handles the &#8211;grep option
to the log command. This changes should make it work everywhere, and
uses the syntax actually spelled out in the help text.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44280">#44280</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a898458de778bb748dcaff1ec9ae526dd7f3a747">a898458</a></li>
</ul>
</div>
<div class="section" id="bugfix-exclude-doctrine-annotations-and-collections-from-reflection">
<h3>[BUGFIX] Exclude Doctrine Annotations and Collections from reflection</h3>
<p>Doctrine split Annotations and Collections from the Common package,
now the exclusion of those packages from reflection is updated.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44496">#44496</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2bc1a6158704f57bf26578baa4e791b7e7df7c94">2bc1a61</a></li>
</ul>
</div>
<div class="section" id="feature-allow-custom-custom-configuration-files-in-configurationmanager">
<h3>[FEATURE] Allow custom custom configuration files in ConfigurationManager</h3>
<p>Using the added methods it is possible to register new &#8220;types&#8221; of
configuration. The set of processing types remains constant, but one
can now e.g. register &#8220;Assets&#8221; as configuration type and use the
&#8220;Settings&#8221; processing rule for that. This way it it possible to move
settings for assets into a dedicated file, &#8220;Assets.yaml&#8221;.</p>
<p>The change adds</p>
<ul class="simple">
<li>resolveConfigurationProcessingType() method</li>
<li>registerConfigurationType() method</li>
<li>2 tests to add a new ConfigurationType</li>
<li>emitConfigurationManagerReady() to register new ConfigurationTypes during boot</li>
</ul>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37854">#37854</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/8378b191783f0909ffc9368af80e97b9b9507b65">8378b19</a></li>
</ul>
</div>
<div class="section" id="task-ignore-libraries-in-core-migrate-commands">
<h3>[TASK] Ignore Libraries in core:migrate commands</h3>
<p>This change makes the core:migrate commands ignore the folder
Packages/Libraries to avoid unintended side effects.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44398">#44398</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c2a7d73232178f4bbb15de3646a3dcad16426fed">c2a7d73</a></li>
</ul>
</div>
<div class="section" id="task-adjust-suggested-folder-structure-in-package-management-section">
<h3>[TASK] Adjust suggested folder structure in Package Management section</h3>
<p>I7772051938a4306328108bacde34710c54fc3a69 introduced suggested
names for directories under Resources/Public.</p>
<p>This adjusts the suggested folder names as discussed and adds a link
to the ResourceManagement chapter.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/42726">#42726</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/13694">#13694</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4d72543cd7aced3b58cd5b01843cc6877fe58ff8">4d72543</a></li>
</ul>
</div>
<div class="section" id="bugfix-actually-do-regex-search-replace-in-code-migrations">
<h3>[BUGFIX] Actually do regex search/replace in code migrations</h3>
<p>Actually makes searchAndReplaceRegex() in code migrations do something
with the target files.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44402">#44402</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/df259e527d4f02ec85757acf249d6dccf40610d4">df259e5</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-code-migration-status-command">
<h3>[BUGFIX] Fix code migration status command</h3>
<p>Calling flow:core:migrate &#8211;status is fixed by this change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44397">#44397</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5b4cd7c7ff5572f88a4ca9785fca8826f5c48f4e">5b4cd7c</a></li>
</ul>
</div>
<div class="section" id="bugfix-prevent-uribuilder-adding-current-namespaced-arguments">
<h3>[BUGFIX] Prevent UriBuilder adding current namespaced arguments</h3>
<p>UriBuilder no longer removes namespaced arguments from the
parent request causing all arguments of namespaced sub request to
be added to new request even though addQueryString isn&#8217;t set.</p>
<p>The bug was introduced in Iba56bfffa9d8f47670afb1297575607b1b0023a8</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44139">#44139</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1c357548c59929d12ba370992c0579ce8b414fb2">1c35754</a></li>
</ul>
</div>
<div class="section" id="task-some-documentation-fixes-regarding-caching">
<h3>[TASK] Some documentation fixes regarding Caching</h3>
<p>This corrects an incorrect mentioned of <tt class="docutils literal"><span class="pre">Settings.yaml</span></tt>
(which must be <tt class="docutils literal"><span class="pre">Objects.yaml</span></tt> correctly), and some
occurrences of an unnecessary additional colon in a
literal block (<tt class="docutils literal"><span class="pre">::</span></tt>)</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6c48a05edb69c4644f58f447f4d074e256418639">6c48a05</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-migration-error-on-missing-configuration-directory">
<h3>[BUGFIX] Fix migration error on missing Configuration directory</h3>
<p>For packages having no Configuration directory the core migration tool
died with an error message when trying to process configuration. This
is solved by checking for existence before trying to read any files.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43948">#43948</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/dec41821d0259156b37205c21e6be420b4c19df0">dec4182</a></li>
</ul>
</div>
<div class="section" id="task-some-documentation-fixes">
<h3>[TASK] Some documentation fixes</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6d825e960679dab83d0d53f505e183a399b9b442">6d825e9</a></li>
</ul>
</div>
<div class="section" id="task-update-link-and-thumbnail-for-one-page-cgl">
<h3>[TASK] Update link and thumbnail for one-page CGL</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43882">#43882</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/51d5a7a874fd172ef7a0750a2e99ef30198d5590">51d5a7a</a></li>
</ul>
</div>
<div class="section" id="feature-allow-exposing-the-class-name-of-an-object-in-jsonview">
<h3>[FEATURE] Allow exposing the class name of an object in JsonView</h3>
<p>Besides telling the identifier of a persisted object, it&#8217;s now
additionally possible to expose the class name of this object.</p>
<p>For convenience, it&#8217;s possible to output only the unqualified class
name rather than the fully qualified one.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42784">#42784</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5aa52833fd9658daf30c5ccc8bdfdef1372377e6">5aa5283</a></li>
</ul>
</div>
<div class="section" id="bugfix-silence-warning-on-writing-packagestates-php">
<h3>[BUGFIX] Silence warning on writing PackageStates.php</h3>
<p>When the file permissions on for example the configuration folder are
not correct a PHP warning is shown. This is shown on top of the
friendly error TYPO3.Setup message and should be hidden.</p>
<p>The only way to silence this is to use the shut-up operator in
sortAndSavePackageStates() inside PackageManager. Any exception or
error code thrown at that point are not catchable by a (setup)
controller.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/42202">#42202</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f1c8c38f57c72522499749ad4ce1eecff10983fc">f1c8c38</a></li>
</ul>
</div>
<div class="section" id="task-adjust-routing-documentation-to-recent-changes">
<h3>[TASK] Adjust routing documentation to recent changes</h3>
<p>This fixes the routing examples provided with the definitive guide.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4e3272312043e885a985e95196e66ee3d001335d">4e32723</a></li>
</ul>
</div>
<div class="section" id="feature-improve-executecommand-exception-message">
<h3>[FEATURE] Improve executeCommand exception message</h3>
<p>If a subprocess command could not be executed, the exception
message now clearly says what command that actually is.</p>
<p>Besides, the message formatting is a bit nicer and an exception
number (timestamp) has been added.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1e7af086ba23f91b50c0523d20f012c5db6bf009">1e7af08</a></li>
</ul>
</div>
<div class="section" id="task-add-runtime-cache-to-reflection-objectaccess">
<h3>[TASK] Add Runtime Cache to Reflection\ObjectAccess</h3>
<p>Using Reflection\ObjectAccess during validation or f.e. JsonView in an
extensive way you soon will end up with thousands of calls to functions
of that class.</p>
<p>By adding a runtime cache this can be sped up.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42723">#42723</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3f1761886d9764e16f67297e226dc9620eabe22c">3f17618</a></li>
</ul>
</div>
<div class="section" id="bugfix-handle-constant-correctly-in-doctrine-service">
<h3>[BUGFIX] Handle constant correctly in Doctrine\Service</h3>
<p>The runDql() method in Persistence\Doctrine\Service didn&#8217;t
use the passed by value for the hydrationMode correctly.</p>
<p>Now that value is considered to be an already resolved constant
as annotated and noted down in the method&#8217;s signature.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44049">#44049</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a3f587b179a92a9c1d126ae1616c35b71265ad1d">a3f587b</a></li>
</ul>
</div>
<div class="section" id="task-various-cleanup-changes-to-tests-and-a-files-method">
<h3>[TASK] Various cleanup changes to tests and a Files method</h3>
<p>Fixes a number of docblocks, two test names. The Utility\Files method
createDirectoryRecursively now throws a dedicated exception if a file
exists already where a directory should be created.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/451f9b3377cd587f806116785ee12eb001530d61">451f9b3</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-2-0-beta-1">
<h3>[TASK] Add ChangeLog for 2.0 beta 1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9083bed19de3b5ed42fa8b54ac946ad7d27d3d0b">9083bed</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="task-fix-version-requirement-on-flow">
<h3>[TASK] Fix version requirement on Flow</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/4422c5196a25c8593a265c8df9c04ea55548164d">4422c51</a></li>
</ul>
</div>
<div class="section" id="id217">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/3d3ebdb803ae67d88f20160ea4e3e02a8ecb2667">3d3ebdb</a></li>
</ul>
</div>
<div class="section" id="task-adjust-to-deprecated-base-tag">
<h3>[TASK] Adjust to &#8220;Deprecated base tag&#8221;</h3>
<p>This adjusts code and documentation to the recent change in Flow,
namely the deprecation of base tags.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/53827">#53827</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/102fcfa94c6018742c2b2d10c4f881e9115f3b4e">102fcfa</a></li>
</ul>
</div>
<div class="section" id="task-allow-link-viewhelper-to-generate-relative-uris">
<h3>[TASK] Allow link ViewHelper to generate relative URIs</h3>
<p>This re-introduces the <tt class="docutils literal"><span class="pre">absolute</span></tt> argument to the <tt class="docutils literal"><span class="pre">link.action</span></tt>
ViewHelper that has been removed in revision
I85fdff19e54c70eb8b16ffb247e6c171fa5bac04.</p>
<p>But its default value is now <tt class="docutils literal"><span class="pre">TRUE</span></tt> for backwards compatibility
reasons.
So in order to render relative URIs, the argument has to be set
explicitly:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nb">link</span><span class="o">.</span><span class="nx">action</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span> <span class="nx">absolute</span><span class="o">=</span><span class="s2">&quot;false&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/53827">#53827</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/5d6d51d2f5829d50fa81a34dd59faa957aa84329">5d6d51d</a></li>
</ul>
</div>
<div class="section" id="bugfix-flush-template-cache-on-viewhelper-changes">
<h3>[BUGFIX] Flush template cache on ViewHelper changes</h3>
<p>Changing the signature of the render method in a ViewHelper leads to
stale cached templates that throw exceptions. This change uses the
file monitoring to flush the template cache on a change to a ViewHelper
class.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/54135">#54135</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/ced8f4086a75bc8fd3937796b1801d093c33d606">ced8f40</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-ifaccessviewhelper-tests">
<h3>[BUGFIX] Fix IfAccessViewHelper tests</h3>
<p>Fixes the unit tests for the <tt class="docutils literal"><span class="pre">security.ifAccess</span></tt> ViewHelper
that broke with I39abae46be9e553954e3967ecabe229124acb551</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/352fcddf8cac03141edc86c652e38bee5ae416d3">352fcdd</a></li>
</ul>
</div>
<div class="section" id="task-regard-system-role-authenticateduser-in-ifhasrole-vh">
<h3>[TASK] Regard system role AuthenticatedUser in IfHasRole VH</h3>
<p>This patch makes the ViewHelper regard the new system role
<cite>AuthenticatedUser</cite> which was introduced in
Ia00bea27e81b2e4a172ad4f998dfa30581dd71dd.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/53800">#53800</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/db33e39a5b565b47ec9d0191c7d0ef8267231bc9">db33e39</a></li>
</ul>
</div>
<div class="section" id="task-ifaccessviewhelper-now-avoids-exceptions-in-security-log">
<h3>[TASK] IfAccessViewHelper now avoids exceptions in Security.log</h3>
<p>Previously this view helper was just calling decideOnResource() in
order to find out if a resource was accessible and caught any exception
thrown by that method. Now the correct method hasAccessToResource() is
called instead.</p>
<p>Because the logging aspect registered even caught exceptions, any call
to this view helper resulted in an Access Denied entry in Security.log</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/f556da2eeb24826dbd8367c971063bec8cec13c5">f556da2</a></li>
</ul>
</div>
<div class="section" id="id222">
<h3>[TASK] CGL Fixes</h3>
<ul class="simple">
<li>Removes indent from inline comments</li>
<li>Fixes several docblock issues</li>
<li>Fixes incorrect spacing</li>
<li>Fixes several other CGL issues</li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/77c32254fdb3689b10ff527d6f48e9fdf27c9885">77c3225</a></li>
</ul>
</div>
<div class="section" id="id223">
<h3>[TASK] Remove PHP closing tag</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/def4ec62d0a75a1d7c315e2e16ea254af4d0b365">def4ec6</a></li>
</ul>
</div>
<div class="section" id="bugfix-form-viewhelpers-throw-exception-if-no-formobject-is-set">
<h3>[BUGFIX] Form ViewHelpers throw exception if no formObject is set</h3>
<p>When using forms with object binding Fluid throws an exception for FormField
ViewHelpers bound to nested properties if no form object is available.
This is the case for example in newAction() where the object is usually NULL:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;create&quot;</span> <span class="nx">objectName</span><span class="o">=</span><span class="s2">&quot;user&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">textfield</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;name.firstName&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/29290">#29290</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/b074081871f2e302ef30f83b9216c7cc28c6a724">b074081</a></li>
</ul>
</div>
<div class="section" id="id225">
<h3>[TASK] initializeAction methods have to be protected</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/d53af1787879b8c2c84e5b446d0448913871dab4">d53af17</a></li>
</ul>
</div>
<div class="section" id="bugfix-additional-identity-properties-not-set-on-mapping-error">
<h3>[BUGFIX] Additional Identity Properties not set on mapping error</h3>
<p>When binding Fluid forms to nested objects, Fluid automatically adds
hidden fields with the identifiers of all affected objects so that
the persistence layer can update all objects correctly.</p>
<p>When a form was redisplayed due to property mapping errors, the
identity fields for the nested sub objects were no longer created.</p>
<p>This change fixes this by making sure all identity fields are rendered
recursively also after property mapping errors.</p>
<p>Example code to verify this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;update&quot;</span> <span class="nx">object</span><span class="o">=</span><span class="s2">&quot;{user}&quot;</span> <span class="nx">objectName</span><span class="o">=</span><span class="s2">&quot;user&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">textfield</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;firstName&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span> <span class="nb">each</span><span class="o">=</span><span class="s2">&quot;{user.invoices}&quot;</span> <span class="k">as</span><span class="o">=</span><span class="s2">&quot;invoice&quot;</span> <span class="nx">iteration</span><span class="o">=</span><span class="s2">&quot;iteration&quot;</span><span class="o">&gt;</span>
    <span class="p">{</span><span class="nx">iteration</span><span class="o">.</span><span class="nx">cycle</span><span class="p">}</span><span class="o">:</span>
    <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">textfield</span> <span class="nx">property</span><span class="o">=</span><span class="s2">&quot;invoices.{iteration.index}.subject&quot;</span> <span class="o">/&gt;</span>
  <span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">for</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">submit</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;update&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>When submitting the form with validation errors, the redisplayed form
should contain a div with a hidden field named
&#8220;user[__identity]&#8221; for the user and one for each invoice.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/29290">#29290</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/3a56759eb8548783d540dd757b24cfa6c244c46b">3a56759</a></li>
</ul>
</div>
<div class="section" id="bugfix-don-t-use-folders-as-templates-partials-and-layouts">
<h3>[BUGFIX] Don&#8217;t use folders as templates, partials and layouts</h3>
<p>The PHP function <tt class="docutils literal"><span class="pre">file_exists()</span></tt> returns TRUE for files as well as
directories.
This change adjusts Template- and StandaloneView to use <tt class="docutils literal"><span class="pre">is_file()</span></tt>
instead.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47188">#47188</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/b1041e1c0b1f38fe321096b5130ac0baf1df4e45">b1041e1</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-templateobjectaccessinterface">
<h3>[FEATURE] Introduce TemplateObjectAccessInterface</h3>
<p>This change is needed to handle TypoScript objects, simple types and
Eel expressions in the same way.</p>
<p>With the additional call to $node-&gt;objectAccess() for implementations of
TemplateObjectAccessInterface the evaluation of TypoScript objects can
be deferred until the actual rendering to be as lazy as possible.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/48359">#48359</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/7c7ea0a239c7ffb9ecfc4a3d1a46c50eea469281">7c7ea0a</a></li>
</ul>
</div>
<div class="section" id="id229">
<h3>[TASK] Fix license in file level docblocks</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/50835">#50835</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/0cabe77c38f959c9b02f1063c579fe2d70722f4f">0cabe77</a></li>
</ul>
</div>
<div class="section" id="task-major-cosmetic-cleanup">
<h3>[TASK] Major cosmetic cleanup</h3>
<p>This adjusts the package to recent CGL changes, fixes loads of
minor spelling and includes further cleanups:</p>
<ul class="simple">
<li>Fix package key in class doc comments</li>
<li>Import namespaces in order to avoid FQNs</li>
<li>Add inline &#64;var annotations for better maintainability</li>
<li>Remove deprecated ViewHelpers &#8220;identity.json&#8221;, &#8220;link.widget&#8221; &amp; &#8220;uri.widget&#8221;</li>
<li>Remove obsolete DocbookGenerator (use XsdGenerator instead)</li>
<li>Fix unit and functional tests!</li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/4578833bb95f8d66c54043dbed481d4f64485a22">4578833</a></li>
</ul>
</div>
<div class="section" id="feature-add-supportedoptions-to-templateview">
<h3>[FEATURE] Add supportedOptions to templateView</h3>
<p>This changes the templateView to make use of the new
way to set options by the view configuration change.
See I93acc3ed3d9578a5d00d494b367aa7201138255b</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42176">#42176</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/eec91b0bff9f46fe742ec5065773d23b25e44a72">eec91b0</a></li>
</ul>
</div>
<div class="section" id="feature-fallback-paths">
<h3>[FEATURE] Fallback paths</h3>
<p>With this change it will be possible to define multiple values
for the <tt class="docutils literal"><span class="pre">template</span></tt>, <tt class="docutils literal"><span class="pre">partial</span></tt> and <tt class="docutils literal"><span class="pre">layout</span></tt> root path configuration.</p>
<p>Each of the respective options will now have a corresponding setter
that enables configuration of multiple paths to look up when loading a
Fluid template file:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$view</span><span class="o">-&gt;</span><span class="na">setTemplateRootPaths</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;first/path&#39;</span><span class="p">,</span> <span class="s1">&#39;second/path&#39;</span><span class="p">,</span> <span class="err">…</span><span class="p">));</span>
</pre></div>
</div>
<p>The old setters will be kept and they overrule the fallback paths. So:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$view</span><span class="o">-&gt;</span><span class="na">setTemplateRootPath</span><span class="p">(</span><span class="s1">&#39;some/path&#39;</span><span class="p">);</span>
</pre></div>
</div>
<p>would disable the fallback paths of the previous example. The same is true
for <tt class="docutils literal"><span class="pre">setPartialRootPath()</span></tt> and <tt class="docutils literal"><span class="pre">setLayoutRootPath()</span></tt>.</p>
<p>The rootPath-getters have been deprecated in favor of
<tt class="docutils literal"><span class="pre">getTemplateRootPaths()</span></tt>, <tt class="docutils literal"><span class="pre">getPartialRootPaths()</span></tt> and
<tt class="docutils literal"><span class="pre">getLayoutRootPaths()</span></tt>.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/39870">#39870</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/a1173897ceb00aa20669f8dd14b8cc4f795cb620">a117389</a></li>
</ul>
</div>
<div class="section" id="bugfix-base64-encode-widget-context">
<h3>[BUGFIX] Base64-encode widget context</h3>
<p>In order to avoid various null-byte-issues as they occur
when serializing an object with protected members (see
[1]); for example with Suhosin or some reverse proxy
implementations; the context object is transferred
in a Base64 encoded state now.</p>
<p>As there is no need to urlencode it anymore, this additionally
saves some bytes.</p>
<p>[1] <a class="reference external" href="http://php.net/serialize">http://php.net/serialize</a> section &#8220;Parameters&#8221;, subsection Note</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/35090">#35090</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/f53ee1c679c828874d5ffec565b6eb202ade9040">f53ee1c</a></li>
</ul>
</div>
<div class="section" id="feature-added-autofocus-attribute-to-textfield-and-textarea">
<h3>[FEATURE] Added autofocus attribute to textfield and textarea</h3>
<p>The ViewHelpers f:form.textfield and f:form.textarea were lacking the
HTML5 &#8220;autofocus&#8221; attribute. It is available for button, input and
textarea. Now Fluid reflects this correctly by adding this attribute to
the initializeArguments methods for TextareaViewHelper and
TextfieldViewHelper.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49726">#49726</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/c763e759de10e329963465b1a3e06e1fdf4bc286">c763e75</a></li>
</ul>
</div>
<div class="section" id="bugfix-format-bytes-viewhelper-add-peta-byte-and-support-large-numbers">
<h3>[BUGFIX] format.bytes ViewHelper: add peta-byte and support large numbers</h3>
<p>In the row of prefixes for multiples &#8220;peta&#8221; is missing between
&#8220;tera&#8221; and &#8220;exa&#8221;.</p>
<p>pow() will use float if the numbers require it (too large). So we
also need to allow float-values to support larger numbers.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/49143">#49143</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/27e6ebe6c40fac69acedf7692b470a7438a91cca">27e6ebe</a></li>
</ul>
</div>
<div class="section" id="feature-viewhelper-to-display-file-sizes">
<h3>[FEATURE] ViewHelper to display file sizes</h3>
<p>Simple ViewHelper that converts the size of a file to a human
readable string.</p>
<p>Usage:
{fileSize -&gt; f:format.bytes()}</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/49128">#49128</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/96c31080b5b1f928717c981541a0721869b7fe48">96c3108</a></li>
</ul>
</div>
<div class="section" id="bugfix-typo-in-switchviewhelper-code-example">
<h3>[BUGFIX] Typo in SwitchViewHelper code example</h3>
<p>Fixes a typo in the usage example introduced with
Ibec7b1acc4555a8f69ea7465023a2cf2b06e63aa</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48856">#48856</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/33817">#33817</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/88edf89ef5f2e2dd20f51fec613beeee414f9f3f">88edf89</a></li>
</ul>
</div>
<div class="section" id="task-add-hints-to-viewhelpers">
<h3>[TASK] Add hints to ViewHelpers</h3>
<p>This adds some developer notes to commonly used ViewHelpers
that should prevent over- or misusage.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/eb510fff282ce112c79b7b8a54579ef470345cad">eb510ff</a></li>
</ul>
</div>
<div class="section" id="feature-switch-view-helper">
<h3>[FEATURE] Switch View Helper</h3>
<p>Simple view helper that allows you to render content depending
on a given value or expression.
It bahaves similar to a basic switch statement in PHP.</p>
<p>Usage:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">switch</span> <span class="nx">expression</span><span class="o">=</span><span class="s2">&quot;{person.gender}&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">case</span> <span class="k">case</span><span class="o">=</span><span class="s2">&quot;male&quot;</span><span class="o">&gt;</span><span class="nx">Mr</span><span class="o">.&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">case</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="k">case</span> <span class="k">case</span><span class="o">=</span><span class="s2">&quot;female&quot;</span><span class="o">&gt;</span><span class="nx">Mrs</span><span class="o">.&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">case</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="k">switch</span><span class="o">&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/33817">#33817</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/4fd6714dd228e34fe2603dd1920ea2684c602eef">4fd6714</a></li>
</ul>
</div>
<div class="section" id="task-optimize-number-format-calls">
<h3>[TASK] Optimize number_format calls</h3>
<p>This change optimizes number_format calls in ViewHelpers by
explicitly casting the number argument to float.
A benchmark shows this increases performance of the number_format
call by a factor of 2-3.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/36207">#36207</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/48e3cf06a385f3b11f5b4acbd2b5aae949071f59">48e3cf0</a></li>
</ul>
</div>
<div class="section" id="bugfix-declare-objectmanager-property">
<h3>[BUGFIX] Declare ObjectManager property</h3>
<p>The objectManager is injected and used but the property is not
declared in the class.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47968">#47968</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/1779aeb9d2cdfa58ce322b724ef82fe6dfacc04a">1779aeb</a></li>
</ul>
</div>
<div class="section" id="feature-csrf-token-viewhelper">
<h3>[FEATURE] CSRF token ViewHelper</h3>
<p>With I9d667aa451a7510cf12ab13be745fed1f7ca477e CSRF tokens
are not added to URIs any longer.</p>
<p>Therefore you need to add the token yourself for &#8220;unsafe&#8221; requests
(POST, PUT, DELETE, ...).</p>
<p>This is not true for fluid forms where the token is added automatically
if the form does not have method=&#8221;get&#8221; set
(see Ic600a9e591d047ca9bbd39d352c4f337bcfaa6a9).</p>
<p>For other forms or AJAX requests the ViewHelper can be used like this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;&lt;someAction&gt;&quot;</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span><span class="o">&gt;</span>
  <span class="o">...</span>
  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;hidden&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;__csrfToken&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;{f:security.csrfToken()}&quot;</span> <span class="o">/&gt;</span>
<span class="o">&lt;/</span><span class="nx">form</span><span class="o">&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47252">#47252</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/480bbefbe7d77233e9e2df821b4a55d266b6665d">480bbef</a></li>
</ul>
</div>
<div class="section" id="task-csrf-protection-for-safe-request-methods">
<h3>[!!!][TASK] CSRF protection for &#8220;safe&#8221; request methods</h3>
<p>This change set adjusts URL related view helpers in Fluid to
an important behavior for Flow applications: HTTP request
methods which are, by definition, considered to be &#8220;safe&#8221;
(that is, &#8220;read-only&#8221;) are now treated as such.</p>
<p>The Fluid Link and Uri view helpers will not generate CSRF tokens
anymore, since we assume that you are using them for GET requests.
The FormViewHelper however, will enable link protection if the
form does not have method=&#8221;get&#8221; set.</p>
<p>Please adjust your applications to cleanly observe this principle since
more optimizations in this direction are planned for later versions of
TYPO3 Flow.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47252">#47252</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/e1ca2a73bed86aa028d8289b0130eec7983a4779">e1ca2a7</a></li>
</ul>
</div>
<div class="section" id="task-add-packagekey-attribute-to-ifhasrole-view-helper">
<h3>[TASK] Add packageKey attribute to ifHasRole view helper</h3>
<p>This change adds support for handling a packageKey to the ifHasRole
view helper. It can be used in three ways:</p>
<ol class="arabic simple">
<li>The &#8216;old&#8217; way, with just a string like &#8216;Administrator&#8217;
This will result in a check for the Administrator role within
the current package (fetched from the controllerContext)</li>
<li>With a full role identifier like &#8216;Foo.MyPackage:Administrator&#8217;</li>
<li>Using both, the role attribute and packageKey attribute</li>
</ol>
<p>This was once Iae92119bf9f8d6125211d1e4b1e42a0a513d804b but had to be
reverted after an accidental merge.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37451">#37451</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/3a7966ba7a0b49aa53292719c873c82c68edbe99">3a7966b</a></li>
</ul>
</div>
<div class="section" id="task-revert-add-packagekey-attribute-to-ifhasrole-view-helper">
<h3>[TASK] Revert: &#8220;Add packageKey attribute to ifHasRole view helper&#8221;</h3>
<p>This reverts commit 806a29a4dabd5a7a90b55d819a39782a0a807cff
The change was merged too early by mistake. Related changes need to
be merged first.
see: <a class="reference external" href="https://review.typo3.org/#/q/status:merged+branch:master+topic:roles,n,z">https://review.typo3.org/#/q/status:merged+branch:master+topic:roles,n,z</a></p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37451">#37451</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/b2153d8801ec0d9795c445b8fabe5fe5a52c874e">b2153d8</a></li>
</ul>
</div>
<div class="section" id="id247">
<h3>[TASK] Remove leading backslash in use statement(s)</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/0f4d1d41e9e9eaf55ad04293cd6ec3c9e144b0a6">0f4d1d4</a></li>
</ul>
</div>
<div class="section" id="id248">
<h3>[TASK] Add packageKey attribute to ifHasRole view helper</h3>
<p>This change adds support for handling a packageKey to the ifHasRole
view helper. It can be used in three ways:</p>
<ol class="arabic simple">
<li>The &#8216;old&#8217; way, with just a string like &#8216;Administrator&#8217;
This will result in a check for the Administrator role within
the current package (fetched from the controllerContext)</li>
<li>With a full role identifier like &#8216;Foo.MyPackage.Administrator&#8217;</li>
<li>Using both, the role attribute and packageKey attribute</li>
</ol>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37451">#37451</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/806a29a4dabd5a7a90b55d819a39782a0a807cff">806a29a</a></li>
</ul>
</div>
<div class="section" id="bugfix-groupedfor-viewhelper-to-support-datetime-objects">
<h3>[BUGFIX] GroupedFor ViewHelper to support DateTime objects</h3>
<p>The groupedFor view helper can group by DateTime objects as defined
in the properties of an object. It uses \DateTime::RFC850 format to
group by internally, so the the subsequent groupKey can use it to
format a valid date again.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44826">#44826</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/c7b4af75c6330fca3dcad3798fec0cc7f55d0d24">c7b4af7</a></li>
</ul>
</div>
<div class="section" id="feature-add-a-format-case-viewhelper">
<h3>[FEATURE] Add a Format.Case ViewHelper</h3>
<p>This adds a Format.Case ViewHelper that changes
a string&#8217;s case in various manners like uppercase,
lowercase, (un-)capitalization and
each-word-capitalization.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44572">#44572</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/770f32c48fbc82b0d364eb3e2e8105834bca3dd2">770f32c</a></li>
</ul>
</div>
<div class="section" id="task-adjust-fluid-to-lazy-dependency-injection">
<h3>[TASK] Adjust Fluid to Lazy Dependency Injection</h3>
<p>This adjusts the ViewHelperNode and AbstractWidgetViewHelper
to Lazy Dependency Injection introduced in Flow 2.0</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43819">#43819</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/cd8dbb130be69be6ed10e4bd6c9e826c3ba98971">cd8dbb1</a></li>
</ul>
</div>
<div class="section" id="task-filemtime-is-namespaced-in-templateview-php">
<h3>[TASK] filemtime is namespaced in TemplateView.php</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45987">#45987</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/84901723b9055e8b6293b09673562e647f191d04">8490172</a></li>
</ul>
</div>
<div class="section" id="task-remove-dependency-on-installer">
<h3>[TASK] Remove dependency on installer</h3>
<p>Rely on implicit dependency through TYPO3.Flow</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/9c58d28b9a8fbccde49a9cc9cc6c44afdeb1c33e">9c58d28</a></li>
</ul>
</div>
<div class="section" id="feature-configurable-prepend-option-for-select-viewhelper">
<h3>[FEATURE] Configurable prepend option for Select ViewHelper</h3>
<p>A common use case with select fields is to have a &#8216;empty&#8217; option at
first position in the options list.
This change provides the possibility to add a label and (optionally)
a value, which will be rendered in the option list.</p>
<p>Usage:
&lt;f:form.select prependOptionLabel=&#8221;select one&#8221; /&gt;</p>
<p>Note: The prepended option can be translated using the &#8220;translate&#8221;
argument.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44235">#44235</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/4c58955fad2d25e98828e05ab3f1f6f4d4ec4ab3">4c58955</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-broken-templateviewtest">
<h3>[BUGFIX] Fix broken TemplateViewTest</h3>
<p>The test was broken by I6f31adc1bd493f2c818b532b2394a774c17f24b7
when some imported class names were made fully qualified (and thus
pointed to non-existing classes).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/44710">#44710</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/f988260b36a22115a334676e8b4a19a72cba7240">f988260</a></li>
</ul>
</div>
<div class="section" id="feature-allow-f-link-action-to-operate-on-parent-request">
<h3>[FEATURE] Allow f:link.action to operate on parent request</h3>
<p>Add an useParentRequest argument to link.action, uri.action,
and form ViewHelpers to generate links using the Parent
Request instead of the current Request.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35790">#35790</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/6b5f0d051dc1863a271c45a1ebcd616f81c3bf0b">6b5f0d0</a></li>
</ul>
</div>
<div class="section" id="task-fix-some-cgl-issues-spotted-during-backporting-part2">
<h3>[TASK] Fix some CGL issues spotted during backporting (part2)</h3>
<p>This patch fixes some CGL problems spotted while
syncing Flow Fluid and TYPO3 CMS Fluid
Also removed unneeded backporter tokens from code.
This will ease next backporting a lot.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44710">#44710</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/725a55219ac661b38472f1347c20aba0960d683b">725a552</a></li>
</ul>
</div>
<div class="section" id="task-add-placeholder-attribute-to-password-viewhelper">
<h3>[TASK] Add placeholder attribute to password ViewHelper</h3>
<p>As a follow-up to I24bb73c5de5a494259171ff289d434892f85e16e,
this also adds the placeholder attribute to the password
ViewHelper.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37558">#37558</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/c8089da16b68434c96f5b325a56fb2c2a11a682f">c8089da</a></li>
</ul>
</div>
<div class="section" id="task-fix-cgl-in-templateparser">
<h3>[TASK] Fix CGL in TemplateParser</h3>
<p>This patch fixes some CGL violations found in TemplateParser</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44702">#44702</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/5e10ef28fbeacc84d3dc4541e0f62d680cdde081">5e10ef2</a></li>
</ul>
</div>
<div class="section" id="task-fix-cgl-issues-in-abstractviewhelper">
<h3>[TASK] Fix CGL issues in AbstractViewHelper</h3>
<p>This patch fixes some CGL issues found in AbstractViewHelper
founded when backporting fluid to TYPO3 CMS</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44706">#44706</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/62f0fbd8f15b3b795cc2cfd46445e15b6ac0edbb">62f0fbd</a></li>
</ul>
</div>
<div class="section" id="bugfix-urlencode-viewhelper-accepts-objects-with-tostring">
<h3>[!!!][BUGFIX] urlencode viewhelper accepts objects with __toString</h3>
<p>This fixes a problem with the urlencode view helper. If you pass it an
object with __toString() method – for example an URI object – it is
returned as is. Now the view helper additionally checks for a
__toString() method.</p>
<p>This change is breaking if you rely on the viewhelper to return
values that are not a string or an object with __toString.
The viewhelper will now throw an exception in this case.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44889">#44889</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/d8097eb1dcbed2835c8acef46cb2223ec6c36494">d8097eb</a></li>
</ul>
</div>
<div class="section" id="task-fix-some-cgl-issues-spotted-during-backporting">
<h3>[TASK] Fix some CGL issues spotted during backporting</h3>
<p>This patch fixes some cgl problems spotted while
syncing Flow Fluid and CMS Fluid</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44710">#44710</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/295eacf61e4fc45b90a6707b44f7da8a3f6151af">295eacf</a></li>
</ul>
</div>
<div class="section" id="feature-add-errorclass-to-form-hidden-vh">
<h3>[FEATURE] Add errorClass to form.hidden VH</h3>
<p>For use in JS-enhanced frontends it can be useful to attach errorClass
even to hidden fields (to detect validation errors).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/a5e0ba77ff3dfc5f9b250b9f013c7101fda516ec">a5e0ba7</a></li>
</ul>
</div>
<div class="section" id="task-clean-up-placeholder-on-textfield-and-text-area-vhs">
<h3>[!!!][TASK] Clean up placeholder on textfield and text area VHs</h3>
<p>The form.textfield VH had a placeholder attribute as argument to the
render() method; the form.textarea VH did not support placeholder at all.</p>
<p>With this change the placeholder is available on both VHs but registered
as tag attribute.</p>
<p>If you extended TextfieldViewHelper::render() make sure to remove the
$placeholder argument, otherwise you will see</p>
<blockquote>
<div>Argument &#8220;placeholder&#8221; has already been defined, thus it should not
be defined again.</div></blockquote>
<p>errors from Fluid.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/37558">#37558</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/11ecf9b2997c98a967372968dd43ff469c75ee28">11ecf9b</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-input-string-argument-to-format-crop-viewhelper">
<h3>[BUGFIX] Add input string argument to Format.Crop ViewHelper</h3>
<p>The Format.Crop ViewHelper did not provide a way to pass
the input string as simple argument; this patch now allows
this. An appropriate UnitTest is added; additionally an
augmentation to the ViewHelpers&#8217; DocComment, mentioning an
inline use case, is added.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/c3f3ca32707a1d05365ea28624ddbe2014915160">c3f3ca3</a></li>
</ul>
</div>
<div class="section" id="bugfix-adjust-pagination-widget-to-recent-changes">
<h3>[BUGFIX] Adjust pagination widget to recent changes</h3>
<p>With #43589 the action argument of link/URI ViewHelpers is
not optional any longer.</p>
<p>This change adjusts the template of the provided pagination widget
to that breaking change by specifying the action argument.</p>
<p>Besides this adds a check to widget.link &amp; widget.uri ViewHelpers
which throws a more meaningful exception if the action argument
was omitted.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44376">#44376</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/43589">#43589</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/fd3ff0418b46bfb529d8ab7386dcab95326826a6">fd3ff04</a></li>
</ul>
</div>
<div class="section" id="bugfix-tweaked-the-translateviewhelper-documentation">
<h3>[BUGFIX] Tweaked the TranslateViewHelper documentation</h3>
<p>The DocComment part of the TranslateViewHelper contained
an example which does not work in Fluid that exactly way.
A wrapping CDATA block obviously fixes the issue in order
to prevent Fluid regarding the translation placeholder
as object literal incorrectly.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/2afcead8fbfe81aea1c7304c1fb64bd426277220">2afcead</a></li>
</ul>
</div>
<div class="section" id="task-make-gettemplaterootpath-public-like-its-setter">
<h3>[TASK] Make getTemplateRootPath() public like its setter</h3>
<p>The getTemplateRootPath() method in View\TemplateView now
becomes public analogous to its setter counterpart which
already is public, too.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/29303">#29303</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/73156e7e789d4961a9fd5e6218e4962938c588dd">73156e7</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id268">
<h3>[TASK] Fix version requirement on Flow</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/5f55f0553501a9769df68a744f72b1efd5c4ba02">5f55f05</a></li>
</ul>
</div>
<div class="section" id="id269">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/411856a75f64cf5872b6bd536450ea7e85ae943b">411856a</a></li>
</ul>
</div>
<div class="section" id="id271">
<h3>[TASK] CGL Fixes</h3>
<ul class="simple">
<li>Fixes incorrect spacing</li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/93d51f2cb1bd9fd3d45217412855199aec4ebc3e">93d51f2</a></li>
</ul>
</div>
<div class="section" id="id272">
<h3>[TASK] Remove PHP closing tag</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/dedf7b186a9f56d7da842bc6bacad63eb98d8c65">dedf7b1</a></li>
</ul>
</div>
<div class="section" id="task-adjust-test-to-relative-namespace-handling">
<h3>[TASK] Adjust test to relative namespace handling</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46008">#46008</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/df5e4c657a783872eb395e28db9a5acd853a8ead">df5e4c6</a></li>
</ul>
</div>
<div class="section" id="id274">
<h3>[TASK] Fix license in file level docblocks</h3>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/50835">#50835</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/923b8b4253b9dbccaed17d19ed174ad52a17ef29">923b8b4</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstarter-creates-superfluous-code">
<h3>[BUGFIX] Kickstarter creates superfluous code</h3>
<p>The kickstarter creates a lot of code that is not needed.
Especially redundant doc comments are counter productive.</p>
<p>This change tweaks and cleans up the generator templates so
that they create less noise.</p>
<p>This also comes with following minor improvements:</p>
<ul class="simple">
<li>Remove leading slash from use statement</li>
<li>Replace &#8220;&lt;f:form name&#8221; with &#8220;&lt;f:form objectName&#8221;</li>
<li>Move formatting ViewHelpers to subdirectory for good measure</li>
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48030">#48030</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/4de1a56d356203540a0c8a1ef1f20b58fbee3dc8">4de1a56</a></li>
</ul>
</div>
<div class="section" id="bugfix-kickstarter-creates-delete-links">
<h3>[BUGFIX] Kickstarter creates &#8220;delete links&#8221;</h3>
<p>With 2.0 Flow won&#8217;t persist changes automatically
for safe requests (see #47252).
This adjusts the index template accordingly so that it
creates delete forms instead of links.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48028">#48028</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/47252">#47252</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/cc329f391832ec687d421e976b9c1fddf2beb443">cc329f3</a></li>
</ul>
</div>
<div class="section" id="id279">
<h3>[BUGFIX] Controllers must not be of scope singleton</h3>
<p>Adjusts the controller templates to create prototypes instead
of singletons.</p>
<p>Background:
Usually the scope of a controller doesn&#8217;t really make a difference,
because they are only instantiated once per request.
But if the same controller is used multiple times
(e.g. within two plugin/widget instances on one page) the side
effects could be very confusing.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45647">#45647</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/35bd7a3aa1f9c7058ef7ddd925bf413e4756fb53">35bd7a3</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-command-controller-kickstart">
<h3>[BUGFIX] Fix command controller kickstart</h3>
<p>When kickstarting a command controller the class/file name would lack
the &#8220;Command&#8221; part (as of Ie758c26cecd591ed240478de3f9597714060fb88).</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/43908">#43908</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/568c98f34472e453559ead436eb5842ed31ddffd">568c98f</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id282">
<h3>[TASK] Fix version requirement on Flow</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/1a2e276c9bcb9d94c5bbacc35879fbedcaf52339">1a2e276</a></li>
</ul>
</div>
<div class="section" id="id283">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/57aa36b593e8cf4f47a321ce2a8fd977e941d1eb">57aa36b</a></li>
</ul>
</div>
<div class="section" id="id284">
<h3>[TASK] CGL Fixes</h3>
<ul class="simple">
<li>Removes indent from inline comments</li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/2a24d3221faf55ab23ad380ee89686cf97533dfe">2a24d32</a></li>
</ul>
</div>
<div class="section" id="id285">
<h3>[TASK] Remove PHP closing tag</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/4b1adcb15709d90bf5e3f5b495046d7ca2c98a2e">4b1adcb</a></li>
</ul>
</div>
<div class="section" id="task-improve-electronic-address-validators">
<h3>[TASK] Improve Electronic Address validators</h3>
<p>Improvement of the regex pattern for MSN, Yahoo and
Sip validators. This includes the removal of an
exception when trying to resolve the pattern.</p>
<p>In the MSN validator an outlook domain address is
now also valid in addition to msn, hotmail and live
domains.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47882">#47882</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/c733d12eccd865a9f7e9ee9975ebf7e2e26163e9">c733d12</a></li>
</ul>
</div>
<div class="section" id="bugfix-add-missing-delimiter-in-icqvalidator">
<h3>[BUGFIX] Add missing delimiter in IcqValidator</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/47881">#47881</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/1628866e1a9e7f4b080a73910dc9d2838c937bcd">1628866</a></li>
</ul>
</div>
<div class="section" id="feature-add-possibility-to-fetch-address-and-usage-types">
<h3>[FEATURE] Add possibility to fetch address and usage types</h3>
<ul class="simple">
<li>Add the possibility to get lists of electronic address types and
usage types.</li>
<li>Add extra validation to properties</li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/44196">#44196</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/d9f5aeb0ef49fcdcb158c0cdcc5778f966ab4219">d9f5aeb</a></li>
</ul>
</div>
<div class="section" id="feature-support-nested-editing-of-electronic-addresses">
<h3>[FEATURE] Support nested editing of electronic addresses</h3>
<p>A setter for electronic addresses is needed when using nested Fluid
forms.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/55af8656c44c59c3c36b0908857ea584d7a4fb58">55af865</a></li>
</ul>
</div>
<div class="section" id="task-add-missing-validators-for-electronicaddress-types">
<h3>[TASK] Add missing validators for ElectronicAddress types</h3>
<p>Adds the needed validators and changes the ElectronicAddressValidator
so that it uses them.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/39150">#39150</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/a69dd90273efc9795312c990eb10a1dcdd5c3db7">a69dd90</a></li>
</ul>
</div>
<div class="section" id="id291">
<h3>[TASK] Remove dependency on installer</h3>
<p>Rely on implicit dependency thorugh TYPO3.Flow</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/f9967440a15b50a14062b833a0a2a9881e761ba2">f996744</a></li>
</ul>
</div>
<div class="section" id="bugfix-removing-primary-electronic-address-fails-in-persistence">
<h3>[BUGFIX] Removing primary electronic address fails in persistence</h3>
<p>When removing an electronic address which is also the primary
electronic address of a Person an exception is thrown in the
persistence layer due to a property being unset and not set
to NULL when validating the object before persisting.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45459">#45459</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/b145b95d8671afe8e2f976899f6f413384df96f7">b145b95</a></li>
</ul>
</div>
<div class="section" id="task-remove-gizmo-as-electronic-address-type">
<h3>[TASK] Remove Gizmo as electronic address type</h3>
<p>Due to discontinued support as of April 3, 2011.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/45276">#45276</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/b16e70e2ddfa074bab25b91f87d63def2d9fa64d">b16e70e</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id294">
<h3>[TASK] Fix version requirement on Flow</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Welcome.git/commit/39f81ba4e448f1d4e1c9daf7e8ed8beb3214efd7">39f81ba</a></li>
</ul>
</div>
<div class="section" id="id295">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/3/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Welcome.git/commit/19b018e8dff02aecd4b954117df0810c6db9bc4a">19b018e</a></li>
</ul>
</div>
<div class="section" id="bugfix-switch-welcome-site-to-jquery-for-consistency">
<h3>[BUGFIX] Switch welcome site to jQuery for consistency</h3>
<p>The welcome site now also uses jQuery as JavaScript library.
Additionally folder names were adapted to match the best
practice proposal we have.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/44670">#44670</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Welcome.git/commit/27b3e27f12d1ad472a8c5a9f6732f8a864a20c55">27b3e27</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="1c287e08-4637-de32-4a4b-89efbf992ab6" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="11fc2d25-bbfc-01fc-675c-0345b192580f" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="211" locale="">
        <properties>
         <title>2.1.1</title>
        </properties>
        <node identifier="2367f4a6-5a55-d86b-482d-49c42459d796" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="3992357a-c350-e55f-51ca-e839f18086f1" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="id1">
<h1>2.1.1</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
</div>
<div class="section" id="typo3-eel">
<h2>TYPO3.Eel</h2>
<div class="section" id="bugfix-fix-unwrapping-of-left-hand-side-operand-for-substractions">
<h3>[BUGFIX] Fix unwrapping of left hand side operand for substractions</h3>
<p>This change fixes a missing unwrap on the Eel context for substraction
expressions in the CompilingEelParser.</p>
<p>All expressions should be re-generated by flushing the Eel expression
cache.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/69afae87e90ea2d076f4bdf586a51b92b05c8484">69afae8</a></li>
</ul>
</div>
<div class="section" id="bugfix-prevent-race-conditions-in-eel-expression-cache">
<h3>[BUGFIX] Prevent race conditions in Eel Expression Cache</h3>
<p>This should prevent race conditions where the included cache
file contained less expressions than the file that ends up in
the code to be cached string.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/54487">#54487</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/854789c380f9d81e5a658bb3155c5a9694af0eb3">854789c</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-release/11/">http://ci.typo3.robertlemke.net/job/typo3-flow-release/11/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/74ce49d3572bd3672090c9c724082d22c316db41">74ce49d</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-typo3-flow-2-0-2">
<h3>[TASK] Add changelog for TYPO3 Flow 2.0.2</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-release/10/">http://ci.typo3.robertlemke.net/job/typo3-flow-release/10/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3e97719f5d6b432a32da2df5b85ddaed888e55b5">3e97719</a></li>
</ul>
</div>
<div class="section" id="bugfix-translation-not-working-with-single-numeric-argument">
<h3>[!!!][BUGFIX] Translation not working with single numeric argument</h3>
<p>This removes the option to provide the plural quantity as a single numeric
argument, as this was used nowhere but prevented translations from working
with such single arguments.</p>
<p>This change is breaking for cases where an application depends on previous
behavior that translateBy* calls with a single numeric argument would implicate
a quantity for plural form. Also classes extending I18n\Translator and using
protected method getPluralForm() will break due to a signature change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45062">#45062</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/79e26ae931177af7af18ec3cacc1f856ce58a1b0">79e26ae</a></li>
</ul>
</div>
<div class="section" id="bugfix-set-max-age-for-cookies">
<h3>[BUGFIX] Set Max-Age for Cookies</h3>
<p>If the configured session cookie lifetime is &gt; 0, the Max-Age property of the
cookie is set accordingly in the response header.</p>
<p>Before this change the lifetime would be used as the expiry time, leading to
cookies having session lifetime only.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/55369">#55369</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/de82f2445647c6ccd2938bcec30730d8ef5662fd">de82f24</a></li>
</ul>
</div>
<div class="section" id="bugfix-route-caching-should-take-hostnames-into-account">
<h3>[BUGFIX] route caching should take hostnames into account</h3>
<p>With several Sites / Domains in Neos the routing cache identifier
is not unique for nodes with the same name</p>
<p>This change takes the hostname into account and ensures the
cache Identifier is unique for all Sites</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/54632">#54632</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b47c850cb958ac52ad2c000a5ef6522c9b3734dc">b47c850</a></li>
</ul>
</div>
<div class="section" id="task-add-notice-about-php-path-for-windows-users">
<h3>[TASK] Add notice about php path for windows users</h3>
<p>Adds an additional note to set the php path in Settings.yaml for
windows users as most won&#8217;t have php in C:/php/php.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5bb87551779811efef88bb008bb52686f12141c5">5bb8755</a></li>
</ul>
</div>
<div class="section" id="bugfix-sort-packages-by-dependency">
<h3>[!!!][BUGFIX] Sort packages by dependency</h3>
<p>Before this, packages were sorted with PHP sort functions which did
not work in all cases due to the insufficiently determined order of
package dependencies.</p>
<p>With this change the sorting is done with an depth-first algorithm
that makes sure that package settings overrule settings from
depending packages.</p>
<p>The algorithm is an adapted version of
<a class="reference external" href="http://en.wikipedia.org/wiki/Topological_sorting">http://en.wikipedia.org/wiki/Topological_sorting</a></p>
<p>This is a breaking change in case you relied on the previous (and
sometimes incorrect) sorting of packages.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9966f752ba9fa091a07fddbff56d4d0743f04fc4">9966f75</a></li>
</ul>
</div>
<div class="section" id="task-tweak-documentation-rendering">
<h3>[TASK] Tweak documentation rendering</h3>
<ul class="simple">
<li>fix broken TOC</li>
<li>exclude change logs from PDF</li>
<li>use parts for PDF rendering</li>
</ul>
<p>All changes have been merged for master already and are consolidated
here for the branch.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6666435f9ac4371815f293d2191377e9917f6b24">6666435</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-getpackageofobject-work-for-proxy-objects">
<h3>[BUGFIX] Make getPackageOfObject() work for proxy objects</h3>
<p>The method <tt class="docutils literal"><span class="pre">PackageManager::getPackageOfObject()</span></tt> failed to
resolve the package of a given object if it was a proxy.</p>
<p>This change fixes this by comparing the namespace of the object
with the package namespaces rather than the file locations.</p>
<p>Background:</p>
<p>The Flow/Doctrine proxy classes usually reside in a folder underneath
<tt class="docutils literal"><span class="pre">Data/Temporary</span></tt>. Comparing those paths with the package root paths
led to invalid results.</p>
<p>In addition this adjusts the <tt class="docutils literal"><span class="pre">getPackageKeyFromMigrationVersion()</span></tt>
of the <tt class="docutils literal"><span class="pre">Doctrine\\Service</span></tt> not to rely on <tt class="docutils literal"><span class="pre">getPackageOfObject()</span></tt>
as all doctrine migrations reside in the <tt class="docutils literal"><span class="pre">TYPO3\\Flow</span></tt> namespace.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/55309">#55309</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a24c68375c3159819c30099706914e022db5d735">a24c683</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-configuration-schema-for-routes">
<h3>[BUGFIX] Fix configuration schema for Routes</h3>
<p>This adjusts the Routes.schema.yaml to the &#8220;httpMethods&#8221;
setting introduced with #27117</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27117">#27117</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3b8223c2b2483ed69f485590cc35d27ed3d7d14e">3b8223c</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-configuration-schema-for-package-settings">
<h3>[BUGFIX] Fix configuration schema for package settings</h3>
<p>This adjusts the TYPO3.Flow.package.schema.yaml to the &#8220;packagesPathByType&#8221;
setting introduced with Ic87ebaece612e25898318795c748941e5a96b8cb.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/84f1e6f76e8cb714fadc88a9d879e086aaa06ebb">84f1e6f</a></li>
</ul>
</div>
<div class="section" id="bugfix-classes-without-namespace-create-invalid-proxy-code">
<h3>[BUGFIX] Classes without namespace create invalid proxy code</h3>
<p>This change makes classes without namespace create proper proxy
class code, by optionally skipping the namespace declaration.
Before such classes would create an empty namespace statement,
which resulted in syntax errors, i.e.:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="p">;</span>
</pre></div>
</div>
<p>=&gt; &#8220;syntax error, unexpected &#8216;;&#8217;, expecting T_STRING or
T_NS_SEPARATOR or &#8216;{&#8216; in [filename]&#8221;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52944">#52944</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d9e103d24ada569e9492224f6ce96de6e76ccd54">d9e103d</a></li>
</ul>
</div>
<div class="section" id="bugfix-browser-must-not-directly-handle-cookie">
<h3>[BUGFIX] Browser must not directly handle cookie</h3>
<p>Request::create() doesn&#8217;t support &#8220;cookies&#8221; parameter.</p>
<p>Cookie argument has been removed from Request::create
with change Icdf7fea74d8331abcf95f1ec361abc78e31bfb8c.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48290">#48290</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b8b11424bd03b5f15d33a7685a7b82174c8d435e">b8b1142</a></li>
</ul>
</div>
<div class="section" id="bugfix-respect-x-forwarded-proto-header-consistently">
<h3>[BUGFIX] Respect X-Forwarded-Proto header consistently</h3>
<p>The <tt class="docutils literal"><span class="pre">Http\\Request</span></tt> currently only considers <tt class="docutils literal"><span class="pre">X-Forwarded-Proto</span></tt>
headers in its isSecure() method.</p>
<p>With this change the header is checked in the constructor so that it
overrules the requested protocol if set.</p>
<p>Before:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">GET</span> <span class="nx">http</span><span class="o">://</span><span class="nx">acme</span><span class="o">.</span><span class="nx">com</span><span class="o">:</span><span class="mi">8080</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
<span class="nx">X</span><span class="o">-</span><span class="nx">Forwarded</span><span class="o">-</span><span class="nx">Proto</span><span class="o">:</span> <span class="nx">https</span>
<span class="nx">X</span><span class="o">-</span><span class="nx">Forwarded</span><span class="o">-</span><span class="nx">Port</span><span class="o">:</span> <span class="mi">443</span>
</pre></div>
</div>
<p>Generated URIs like <tt class="docutils literal"><span class="pre">http://acme.com:8080</span></tt>. With this change the
result is <tt class="docutils literal"><span class="pre">https://acme.com</span></tt>.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/54453">#54453</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a5c3398363278a2c28fd67f4edca58f448c420a1">a5c3398</a></li>
</ul>
</div>
<div class="section" id="task-tweak-documentation-settings-enable-pdf">
<h3>[TASK] Tweak documentation settings, enable PDF</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c4b5ced677ec6ca273488921642aa76af3405a54">c4b5ced</a></li>
</ul>
</div>
<div class="section" id="task-add-change-logs-for-typo3-flow-2-0-0-2-0-1">
<h3>[TASK] Add change logs for TYPO3 Flow 2.0.0, 2.0.1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/48c46577ec5efbf708cb34d7f3eab3cb0a67a9c5">48c4657</a></li>
</ul>
</div>
<div class="section" id="task-fix-and-tweak-rst-markup">
<h3>[TASK] Fix and tweak rST markup</h3>
<p>Note especially the changes to Förthner and Föder! :)</p>
<p>Yes, they fix PDF rendering of the documentation.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3fae2f8e7cc7469eefbf0e3ac74ecb84660c2468">3fae2f8</a></li>
</ul>
</div>
<div class="section" id="task-fix-tables-in-rst-documents">
<h3>[TASK] Fix tables in rST documents</h3>
<p>Although working for HTML rendering the syntax was wrong, breaking PDF
rendering.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3d208c17661633a79646d6588d42682669c2347c">3d208c1</a></li>
</ul>
</div>
<div class="section" id="bugfix-http-accept-header-parsing-was-not-case-insensitive">
<h3>[BUGFIX] HTTP accept header parsing was not case-insensitive</h3>
<p>Some browsers send the Accept-Language header with uppercase letters for
the region. This was not correctly matched by the
parseAcceptLanguageHeader utility function.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/db8857ff394908d2a0614aa692b9f52be899995d">db8857f</a></li>
</ul>
</div>
<div class="section" id="bugfix-filebackend-is-prone-to-race-condition-while-writing-cache-entry">
<h3>[BUGFIX] Filebackend is prone to race condition while writing cache entry</h3>
<p>This change improves protection against race conditions by adding a unique
identifier to the temporary file name while writing cache entry files.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b47acdf1873ee776ed1f69fbef98fabca6a1e807">b47acdf</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="task-remove-php-closing-tag-in-templates">
<h3>[TASK] Remove PHP closing tag in templates</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/7656394f939e29f42887f38479859fdc237c2b72">7656394</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<p>No changes</p>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="d4bdc7e8-d8c8-e653-89e5-25a52452eb77" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="c3674d91-0b30-9254-04f4-96a6a4c8ca20" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="220-beta1" locale="">
        <properties>
         <title>2.2.0-beta1</title>
        </properties>
        <node identifier="ae79dda7-9891-14e4-e896-898f79372ae3" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="c7d210ba-dc60-775d-8395-87d4457c001a" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="beta1">
<h1>2.2.0-beta1</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
<div class="section" id="task-update-composer-manifest">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/752d6bbad2716f48f3753949a2f29f54b6ac7608">752d6bb</a></li>
</ul>
</div>
<div class="section" id="task-add-phpunit-phpunit-as-dev-requirement">
<h3>[TASK] Add phpunit/phpunit as dev requirement</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/5531c5d1ea22c4c7de97035296e879c97a9e2c29">5531c5d</a></li>
</ul>
</div>
<div class="section" id="task-some-tweaks-to-the-release-scripts">
<h3>[TASK] Some tweaks to the release scripts</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/a546323ae510ce07cba873223b87f66319729363">a546323</a></li>
</ul>
</div>
<div class="section" id="task-fix-create-branch-dependency-handling">
<h3>[TASK] Fix create-branch dependency handling</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Flow/Distributions/Base.git/commit/ccb988da6b41be1e8095f468f2165cb20b68905b">ccb988d</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-eel">
<h2>TYPO3.Eel</h2>
<div class="section" id="id1">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/bf8b1de74618769f070fd92638ee2a767c67096a">bf8b1de</a></li>
</ul>
</div>
<div class="section" id="revert-feature-shuffle-operation">
<h3>Revert &#8220;[FEATURE] shuffle() operation&#8221;</h3>
<p>After some discussion we decided to remove this feature again because the same
behavior can, as Christopher pointed out, be achieved through the Array Helper:</p>
<p>${Array.random(q(node).children(&#8216;...&#8217;).get())}</p>
<p>The merged shuffle() operation also had the problem of preserving array keys.
The following line of TypoScript would _not_ return a random, but always the
first article:</p>
<p>articles = ${q(this.someArticles).shuffle().get(0)}</p>
<p>This reverts the following commits:
2db53f9877b1d0b461a6b5df35d20bd66efb7469
cdc83573e41778089143dc5cdb2413b825e9c200</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/feb5d4df0308c5b171befdb61e088f1c5eb31460">feb5d4d</a></li>
</ul>
</div>
<div class="section" id="feature-add-first-letter-to-upper-lower-methods-in-stringshelper">
<h3>[FEATURE] Add first letter to upper/lower methods in StringsHelper</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/86b894c0ae3ed057e427362307d8442e880e6908">86b894c</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-shuffle-a-non-final-operation">
<h3>[BUGFIX] Make shuffle() a non-final operation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/cdc83573e41778089143dc5cdb2413b825e9c200">cdc8357</a></li>
</ul>
</div>
<div class="section" id="feature-shuffle-operation">
<h3>[FEATURE] shuffle() operation</h3>
<p>This introduces a new FlowQuery operation which randomizes the current
context. If the context is, for example, an array of Nodes, ashuffle()
can be used to pick one of these.</p>
<p>TypoScript Example:</p>
<blockquote>
<div>articleNode = ${q(this.articleNodes).shuffle().get(0)}</div></blockquote>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/2db53f9877b1d0b461a6b5df35d20bd66efb7469">2db53f9</a></li>
</ul>
</div>
<div class="section" id="bugfix-prevent-race-conditions-in-eel-expression-cache">
<h3>[BUGFIX] Prevent race conditions in Eel Expression Cache</h3>
<p>This should prevent race conditions where the included cache
file contained less expressions than the file that ends up in
the code to be cached string.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/54487">#54487</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/65b34b448deeadd331c8fa7c079c36c7812fdcc1">65b34b4</a></li>
</ul>
</div>
<div class="section" id="revert-bugfix-prevent-race-conditions-in-eel-expression-cache">
<h3>Revert &#8220;[BUGFIX] Prevent race conditions in EEL Expression Cache&#8221;</h3>
<p>SORRY, accidentally hit the submit button, just wanted to leave my review.</p>
<p>This reverts commit e30a9e7cf65fe4a260121900024157733b8dc6f6</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/c39d5c5e2db46d214ffdb1821b8a76ddd9be325f">c39d5c5</a></li>
</ul>
</div>
<div class="section" id="id3">
<h3>[BUGFIX] Prevent race conditions in EEL Expression Cache</h3>
<p>This should prevent race conditions where the included cache
file contained less expressions than the file that ends up in
the code to be cached string.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/e30a9e7cf65fe4a260121900024157733b8dc6f6">e30a9e7</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-unwrapping-of-left-hand-side-operand-for-substractions">
<h3>[BUGFIX] Fix unwrapping of left hand side operand for substractions</h3>
<p>This change fixes a missing unwrap on the Eel context for substraction
expressions in the CompilingEelParser.</p>
<p>All expressions should be re-generated by flushing the Eel expression
cache.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/4859a3bd0fa7203819612f39dd24f925734a5a11">4859a3b</a></li>
</ul>
</div>
<div class="section" id="feature-configuration-helper-settings">
<h3>[FEATURE] Configuration Helper: settings</h3>
<p>This new helper is supposed to be the one which provides information
about the environment. The first implemented method allows for retrieving
settings.</p>
<p>Example for use within TypoScript:</p>
<blockquote>
<div>sitePackageKey = ${Configuration.setting(‚Acme.Demo.sitePackageKey&#8217;)}</div></blockquote>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/fbf13aba9ba5c044161d6186ef6acea57e35f801">fbf13ab</a></li>
</ul>
</div>
<div class="section" id="feature-use-javascript-semantics-of-and-operators">
<h3>[!!!][FEATURE] Use JavaScript semantics of || and &amp;&amp; operators</h3>
<p>This change updates the handling of the boolean short circuit operators
for disjunction and conjunction to the JavaScript semantics of returning
one of the left or right side values instead of a boolean.</p>
<p>This is only breaking if the code using Eel relied on the exact type
e.g. by using a strict comparison.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Eel.git/commit/6205fbc0f24577add74045508a737ae3f5038c0a">6205fbc</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-release/13/">http://ci.typo3.robertlemke.net/job/typo3-flow-release/13/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/8863063a544f3d5a78e4792303f72729cc5d8e70">8863063</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-requesttest-branch-independent">
<h3>[BUGFIX] Make RequestTest branch independent</h3>
<p>There are two tests testing headers rendered by Http\Request, those
include the FLOW_VERSION_BRANCH - but did not use the constant.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/89fd41847b2e639ce6a9b51824f6439ab03c0ac7">89fd418</a></li>
</ul>
</div>
<div class="section" id="task-adjust-flow-version-branch-to-2-2">
<h3>[TASK] Adjust FLOW_VERSION_BRANCH to 2.2</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/bd9d7b133c99dac55ba64d0f03410d8972cef099">bd9d7b1</a></li>
</ul>
</div>
<div class="section" id="id5">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/3d5a722b61c03cd10e84909f1098227c4d16b41c">3d5a722</a></li>
</ul>
</div>
<div class="section" id="bufgix-throw-exception-if-packagestates-php-is-not-writeable">
<h3>[BUFGIX] Throw exception if PackageStates.php is not writeable</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/53238">#53238</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1781926870db735f5b32db6b9fe0199a6f4e99e6">1781926</a></li>
</ul>
</div>
<div class="section" id="feature-add-psr-4-support-to-package">
<h3>[FEATURE] Add PSR-4 support to Package</h3>
<p>This change updates the Package class to properly load PSR-4
based packages.</p>
<p>Depends on: <a class="reference external" href="https://github.com/composer/installers/pull/135">https://github.com/composer/installers/pull/135</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/66e66d39d90a0d712fef468dfa37f20ba5da3561">66e66d3</a></li>
</ul>
</div>
<div class="section" id="feature-throw-exception-for-unpersisted-changes-in-safe-requests">
<h3>[!!!][FEATURE] Throw exception for unpersisted changes in Safe Requests</h3>
<p>This changeset keeps track if the PersistenceManager has unpersisted changes
and notifies the Developer with a helpful exception if this happens in a
safe request (GET/HEAD). This exception is only thrown in development context</p>
<p>In case you implemented your own Persistence Manager, you must add the new
hasUnpersistedChanges() method, unless you extend the AbstractPersistenceManager.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/51570">#51570</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e9b5de3f8708ce136c2a08d07e173f953013ecce">e9b5de3</a></li>
</ul>
</div>
<div class="section" id="task-tweak-readme-and-upgrading-docs-towards-release">
<h3>[TASK] Tweak readme and upgrading docs towards release</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4c39af690571e7bd0930e8bef1bdfaf93f533fd0">4c39af6</a></li>
</ul>
</div>
<div class="section" id="bugfix-do-not-serialize-singleton-properties-on-sleep">
<h3>[BUGFIX] Do not serialize singleton properties on __sleep</h3>
<p>Serializing a Flow managed object will not serialize injected
properties as they will be reinjected anyway. This now works
consistently for all injections.</p>
<p>This also is a workaround for the PHP bug:
<a class="reference external" href="https://bugs.php.net/bug.php?id=65967">https://bugs.php.net/bug.php?id=65967</a></p>
<p>As the only reason we serialize an SplObjectStorage curently is
that we serialize Logger instances.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/cf5bb875cbe57b72a1da2dc75ce49e9401bc3cb3">cf5bb87</a></li>
</ul>
</div>
<div class="section" id="task-fix-unit-test-failing-due-to-float-precision-issue-part-iii">
<h3>[TASK] Fix unit test failing due to float precision issue, part III</h3>
<p>Tries to fix two unit tests still failing with something like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Expected</span><span class="o">:</span> <span class="s2">&quot;12.35&quot;</span>
<span class="nx">Actual</span><span class="o">:</span> <span class="s2">&quot;12.349999999999999857891452847979962825775146484375&quot;</span>
</pre></div>
</div>
<p>The first tries did not work, so we just raise the value from 12.34 to
112.34 - that makes it 112.34000000... which makes the test pass.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2c1148be6ed0c78edd5b449294dcc26bf9755b18">2c1148b</a></li>
</ul>
</div>
<div class="section" id="task-fix-unit-test-failing-due-to-float-precision-issue">
<h3>[TASK] Fix unit test failing due to float precision issue</h3>
<p>Tries to fix two unit tests still failing with something like:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Expected</span><span class="o">:</span> <span class="s2">&quot;12.35&quot;</span>
<span class="nx">Actual</span><span class="o">:</span> <span class="s2">&quot;12.349999999999999857891452847979962825775146484375&quot;</span>
</pre></div>
</div>
<p>The first try did not work, so maybe handing in the expected value in
it&#8217;s true format helps.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/260a6868b9b2536ca62133b716764625033c80e4">260a686</a></li>
</ul>
</div>
<div class="section" id="id9">
<h3>[TASK] Fix unit test failing due to float precision issue</h3>
<p>Tries to fix two unit failing with:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Expected</span><span class="o">:</span> <span class="s2">&quot;12.34&quot;</span>
<span class="nx">Actual</span><span class="o">:</span> <span class="s2">&quot;12.339999999999999857891452847979962825775146484375&quot;</span>
</pre></div>
</div>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/89bdc23257a91c75c861739cff0b1d773e7d4482">89bdc23</a></li>
</ul>
</div>
<div class="section" id="bugfix-packagemanager-initialize-signature-is-incompatible">
<h3>[BUGFIX] PackageManager initialize() signature is incompatible</h3>
<p>PackageManagerInterface contains following method declaration:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">initialize</span><span class="p">(</span><span class="nx">\\TYPO3\\Flow\\Core\\Bootstrap</span> <span class="nv">$bootstrap</span><span class="p">);</span>
</pre></div>
</div>
<p>however in the PackageManager the signature is:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">initialize</span><span class="p">(</span><span class="nx">\\TYPO3\\Flow\\Core\\Bootstrap</span> <span class="nv">$bootstrap</span><span class="p">,</span>
  <span class="nv">$packagesBasePath</span> <span class="o">=</span> <span class="nx">FLOW_PATH_PACKAGES</span><span class="p">,</span>
  <span class="nv">$packageStatesPathAndFilename</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>This will create a fatal error on some versions of php and when running
unit tests on hhvm (of CMS), see
<a class="reference external" href="http://php.net/manual/en/language.oop5.interfaces.php">http://php.net/manual/en/language.oop5.interfaces.php</a>:</p>
<p>&#8220;The class implementing the interface must use the exact same method
signatures as are defined in the interface. Not doing so will result
in a fatal error.&#8221;</p>
<p>This change updates the method signature of the PackageManager to be in
line with the interface.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/56409">#56409</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/bff1609471a84b50e0358f1d3ce0d25d7322f155">bff1609</a></li>
</ul>
</div>
<div class="section" id="feature-use-cacheawareinterface-to-build-route-cache-identifier">
<h3>[FEATURE] Use CacheAwareInterface to build route cache identifier</h3>
<p>This change allows to cache route values with objects implementing
CacheAwareInterface. As an optimization an exception that was used
only internally is replaced by boolean values.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/fa2889485eaa7adeab0dabc0a86aa1a774ee82d6">fa28894</a></li>
</ul>
</div>
<div class="section" id="bugfix-htaccess-is-overwritten-by-the-composer-install-scripts">
<h3>[BUGFIX] .htaccess is overwritten by the composer install scripts</h3>
<p>The composer update / install scripts overwrite the Web/.htaccess
file which is unwanted behavior as this leads to issues when
people add custom rewrite rules, or if for example setting the
MultiViews option is not allowed.</p>
<p>This change moves the .htaccess, index.php and flow scripts
to the Defaults folder so it will only be initialy placed into
the installation.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/54553">#54553</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c2beba9f9ea05f8a732a2899db2523123c74df6c">c2beba9</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-typo3-flow-2-1-1">
<h3>[TASK] Add changelog for TYPO3 Flow 2.1.1</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-release/11/">http://ci.typo3.robertlemke.net/job/typo3-flow-release/11/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7c633c0962dcebedea220429764fe817e6a9b3fc">7c633c0</a></li>
</ul>
</div>
<div class="section" id="task-add-changelog-for-typo3-flow-2-0-2">
<h3>[TASK] Add changelog for TYPO3 Flow 2.0.2</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-release/10/">http://ci.typo3.robertlemke.net/job/typo3-flow-release/10/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f77957f3e9f67d90d03c142551815bfb00091daf">f77957f</a></li>
</ul>
</div>
<div class="section" id="feature-optional-evaluation-of-validator-with-ignorevalidation">
<h3>[!!!][FEATURE] Optional evaluation of validator with IgnoreValidation</h3>
<p>If an &#64;IgnoreValidation annotation is added for an action argument,
the validation will not be evaluated by default anymore. This is an
optimization for read-only actions and other cases where the validation
adds a measurable overhead.</p>
<p>The annotation option &#8220;evaluate&#8221; can be set to true to enable the old
behaviour of evaluating the validator for the argument and storing the
validation results (while still ignoring any error).</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/3305">#3305</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/58cf4d49b1699cf73b137c664b0fe6c482ca5b91">58cf4d4</a></li>
</ul>
</div>
<div class="section" id="task-proxy-class-cache-is-only-asked-for-existing-classes">
<h3>[TASK] Proxy class cache is only asked for existing classes</h3>
<p>Build a map of proxied classes to be used by the class loader to prevent
calls to the proxy class cache that cannot be fullfilled.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c81dcc99a248681b9877db1dfd005c72ca22ba34">c81dcc9</a></li>
</ul>
</div>
<div class="section" id="task-validatorresolver-uses-compilestatic">
<h3>[TASK] ValidatorResolver uses CompileStatic</h3>
<p>Available Validator implementations can be given to the
ValidatorResolver via CompileStatic, there is no need to
find them on runtime.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2013e26ad0f88ca2c27b8e990e583fc5b072d84c">2013e26</a></li>
</ul>
</div>
<div class="section" id="bugfix-classes-from-inactive-packages-should-not-be-loaded">
<h3>[BUGFIX] Classes from inactive packages should not be loaded</h3>
<p>The ClassLoader refactoring made it possible to load classes
from inactive packages as the class paths would still be
registered by composer which knows nothing about inactive
packages.</p>
<p>The solution is to unset class paths for inactive packages.
Additionally an UnitTest was added to make sure the behavior
stays correct.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ed30c3075a80b14759b0eaf47359a59fadfb5f5f">ed30c30</a></li>
</ul>
</div>
<div class="section" id="task-resources-are-published-with-relative-symlinks">
<h3>[TASK] Resources are published with relative symlinks</h3>
<p>Fixes an issue with the publication of persistent resources which
used absolute paths rather than relative paths for generating symbolic
links.</p>
<p>TYPO3.Surf heavily relies on symbolic links for pointing to the
currently active release. The key problem was that the symbolic
link which is put into the Web/_Resources folder used an absolute
path (realpath) to the resource file in Data/Persistent/ rather than
a possible symbolic link. This worked fine as long as the actual
directory (previous release) exists, but breaks as soon as old
releases have been removed.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/51676">#51676</a></li>
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/51809">#51809</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6d206c1d35324f26e8780fdad80fed466bc9f4e1">6d206c1</a></li>
</ul>
</div>
<div class="section" id="feature-cache-backend-s-flushbytag-now-reports-no-of-affected-entries">
<h3>[FEATURE] Cache backend&#8217;s flushByTag() now reports no. of affected entries</h3>
<p>This slightly changes the behaviour of flushByTag() which now should
return the number of actually removed entries. If a backend cannot or
doesn&#8217;t want to report that number (for example due to performance
constraints), that function may still return NULL.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/14bacb4a8c38068ab56fb6ec23981e2d26f0bbd6">14bacb4</a></li>
</ul>
</div>
<div class="section" id="task-use-json-instead-of-serialize-in-filemonitor">
<h3>[!!!][TASK] Use JSON instead of serialize() in FileMonitor</h3>
<p>For larger arrays JSON is faster than serialize() so the FileMonitor
that caches large associative arrays is switched to use json_encode()
and json_decode() and a StringBackend instead of the VariableBackend
that serializes.</p>
<p>This could be breaking if you implemented your own Strategy and use the
Flow_Monitor cache there because it will no longer accept all kinds of
variables but only strings.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f270ae893a5fc9caaa946cd267157ae43cc583fd">f270ae8</a></li>
</ul>
</div>
<div class="section" id="task-clarify-logger-configuration-in-objects-yaml">
<h3>[TASK] Clarify logger configuration in Objects.yaml</h3>
<p>The configuration given in Objects.yaml for the system logger is not really used,
as the logger is set up from settings during boot.</p>
<p>This change makes it clear that a change to the settings should be done
through Settings.yaml.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/641364d8af07164259f937f601b3e9b1f1c86d41">641364d</a></li>
</ul>
</div>
<div class="section" id="feature-allow-ignorevalidation-on-class-properties">
<h3>[FEATURE] Allow IgnoreValidation on class properties</h3>
<p>Ignoring class properties during object validation can be useful. This
change allows to use the IngoreValidation annotation to be used on class
properties. The ValidatorResolver will then skip those properties when
building the base validator conjunction.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f4aa656dfd873814f1e1f07e0bf656bedd945600">f4aa656</a></li>
</ul>
</div>
<div class="section" id="task-warn-on-invalid-persistence-doctrine-settings">
<h3>[TASK] Warn on invalid persistence.doctrine settings</h3>
<p>If the Doctrine settings are removed (due to an error in the YAML files)
compiling proxy classes will just not happen. Since this is hard to
spot, throw an exception if the settings are NULL.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1b4abf6deef3492f5e3f194f1e90d9ce773428d1">1b4abf6</a></li>
</ul>
</div>
<div class="section" id="bugfix-translation-not-working-with-single-numeric-argument">
<h3>[!!!][BUGFIX] Translation not working with single numeric argument</h3>
<p>This removes the option to provide the plural quantity as a single numeric
argument, as this was used nowhere but prevented translations from working
with such single arguments.</p>
<p>This change is breaking for cases where an application depends on previous
behavior that translateBy* calls with a single numeric argument would implicate
a quantity for plural form. Also classes extending I18n\Translator and using
protected method getPluralForm() will break due to a signature change.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/45062">#45062</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/98748f8b10bf6746daa2594dc069ff0b473982de">98748f8</a></li>
</ul>
</div>
<div class="section" id="task-fix-intermittent-failure-in-sessiontest-unit-test">
<h3>[TASK] Fix intermittent failure in SessionTest unit test</h3>
<p>By injecting a system logger mock, the test for GC that would fail at
random should now run reliably.</p>
<p>Along this the test tweaks the code (style) a bit.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/be63e6030cbe643c2396989435193219319a43a2">be63e60</a></li>
</ul>
</div>
<div class="section" id="bugfix-route-caching-should-take-hostnames-into-account">
<h3>[BUGFIX] route caching should take hostnames into account</h3>
<p>With several Sites / Domains in Neos the routing cache identifier
is not unique for nodes with the same name</p>
<p>This change takes the hostname into account and ensures the
cache Identifier is unique for all Sites</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/54632">#54632</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7dcacff9d1f8a174d6ba67d023ae3887eada4753">7dcacff</a></li>
</ul>
</div>
<div class="section" id="feature-allow-conversion-from-objects-to-simple-types">
<h3>[FEATURE] Allow conversion from objects to simple types</h3>
<p>This change allows the PropertyMapper to convert from object types to
simple types by registering a specific converter for that direction.
A converter from persistent objects to string is added to allow for a
simple (reversible) way to represent entities and valueobjects
as strings.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/a2a5266b4a76b6d860e5754f6289da9e0d38691d">a2a5266</a></li>
</ul>
</div>
<div class="section" id="task-prevent-errors-on-non-existing-classes">
<h3>[TASK] Prevent errors on non existing classes</h3>
<p>Removing the shutup operator results in a non functional
state when flushing all caches as the annotation parser tries
to load all annotations as classes which results in warnings.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/67fb9decbce9c449c1653985187a3e002f5d2dca">67fb9de</a></li>
</ul>
</div>
<div class="section" id="task-use-isset-in-mergerecursiveoverrule-where-possible">
<h3>[TASK] Use isset in mergeRecursiveOverrule where possible</h3>
<p>In some places array_key_exists is unnecessary and isset
is faster. Because of the high amount of calls it makes
sense to optimize this.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/c5f177c0165b92f3591162c891eb9385311b50a1">c5f177c</a></li>
</ul>
</div>
<div class="section" id="task-getunixstylepath-uses-only-one-str-replace">
<h3>[TASK] getUnixStylePath uses only one str_replace</h3>
<p>A single str_replace call is less expensive than multiple
nested calls. Therefor it is changed in getUnixstylePath().</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ad76fa3e8f855f2c073cd8e0b53dd1a01d523f05">ad76fa3</a></li>
</ul>
</div>
<div class="section" id="task-allow-use-of-phpunit-from-pear">
<h3>[TASK] Allow use of PHPUnit from PEAR</h3>
<p>The class loader change Ib7ff6f4f73f323ce9fc71627c84bf96ef077557e
removed some code used to load PHPUnit from PEAR if needed.</p>
<p>This change brings that back.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/774dac05c95d9689751568bf04e3ba4049a7741b">774dac0</a></li>
</ul>
</div>
<div class="section" id="task-remove-shut-up-operator-in-classloader">
<h3>[TASK] Remove shut-up operator in ClassLoader</h3>
<p>The last classloader change added the shut-up operator to a number of
include() calls. This change removes it again and uses file_exists()
instead.</p>
<p>Since those checks happen only once (when initializing the class
loader), the performance impact should be minimal.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/15f558637298aa704decfe1b4aaebf5d0770b4aa">15f5586</a></li>
</ul>
</div>
<div class="section" id="feature-provide-request-response-in-exception-dump">
<h3>[FEATURE] Provide request / response in exception dump</h3>
<p>This change enhances the Logger to compile some more post mortem data
which is then written into the exception dump file. Now the HTTP
request and response are also included if possible.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/55c39c6235d0fb24c6c75a329de74fa77c11173c">55c39c6</a></li>
</ul>
</div>
<div class="section" id="task-optimize-arraymergerecursiveoverrule-by-removing-recursion">
<h3>[TASK] Optimize arrayMergeRecursiveOverrule by removing recursion</h3>
<p>Method calls in PHP are generally slow. As we rely heavily on this
function in several parts it&#8217;s worthwile to micro-optimize the
implementation to get rid of recursion. Running the unit tests showed
a performance improvement of 25% by using a stack based approach instead
of nested calls. The effect could be even higher for highly nested
arrays (like configuration).</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2e0ee9deea5f43e15f93b7b2c7f7f95fc4accfaa">2e0ee9d</a></li>
</ul>
</div>
<div class="section" id="feature-allow-to-cache-doctrine-orm-query-results">
<h3>[FEATURE] Allow to cache Doctrine ORM query results</h3>
<p>This change allows to cache query results in the persistence layer.</p>
<p>The caching can be switched on by setting the new $cacheResult flag
on Repository-&gt;findBy(), Repository-&gt;findOneBy() and Query-&gt;execute().</p>
<p>In addition the caching can be switched on globally by setting:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Flow</span><span class="o">.</span><span class="nx">persistence</span><span class="o">.</span><span class="nx">cacheAllQueryResults</span>
</pre></div>
</div>
<p>to TRUE. Keep in mind this might have unexpected side effects.</p>
<p>Note: The caching is only implemented for the Doctrine persistence.
When using generic persistence it has no effect.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/060ab576b4bc496db496745204d4206fe7bd869e">060ab57</a></li>
</ul>
</div>
<div class="section" id="task-improve-security-checks-and-related-logging">
<h3>[TASK] Improve security checks and related logging</h3>
<p>The AccessDecisionVoterManager now doesn&#8217;t throw &amp; catch an exception
in order to find out if hasAccessToResource().</p>
<p>Also improves the log output for security / account related events.
It adds the current session ID to the message</p>
<blockquote>
<div>Successfully re-authenticated tokens for account &#8220;foo&#8221;</div></blockquote>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/15a95698b7c7234558e3c1fd26f5aa4a69539a61">15a9569</a></li>
</ul>
</div>
<div class="section" id="feature-use-php-yaml-extension-if-available">
<h3>[!!!][FEATURE] Use PHP YAML extension if available</h3>
<p>If you have the PECL YAML extension installed it will be used
to parse your configuration files, which results in a tremendous
speed improvement, especially in Development context.</p>
<p>As this YAML parser is stricter also all yaml files are adapted.</p>
<p>This is breaking if the YAML extension is installed and you
have invalid YAML files.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/63f744685882203d128ceb222f927b262ca159d4">63f7446</a></li>
</ul>
</div>
<div class="section" id="bugfix-set-max-age-for-cookies">
<h3>[BUGFIX] Set Max-Age for Cookies</h3>
<p>If the configured session cookie lifetime is &gt; 0, the Max-Age property of the
cookie is set accordingly in the response header.</p>
<p>Before this change the lifetime would be used as the expiry time, leading to
cookies having session lifetime only.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/55369">#55369</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7f16897c90f34c97b667d7177488b863313fd1f8">7f16897</a></li>
</ul>
</div>
<div class="section" id="task-classloader-compatible-with-all-composer-packages">
<h3>[TASK] ClassLoader compatible with all composer packages</h3>
<p>The ClassLoader understands all composer autoload types (PSR-0
autoloading, PSR-4 autoloading, classmap generation and files includes)
and additionally has a faster resolution logic.</p>
<p>For additional speed, e.g. in Production context, you can run:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">composer</span> <span class="nx">install</span> <span class="o">-</span><span class="nx">o</span>
</pre></div>
</div>
<p>to let composer generate optimized autoloading maps.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/42961">#42961</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d36117c47bdbe37f3089323f799ac5add7bfcec7">d36117c</a></li>
</ul>
</div>
<div class="section" id="task-add-a-forgotten-change-log">
<h3>[TASK] Add a forgotten change log</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/01481791ab1c42b60ad8f989ce015918c0678864">0148179</a></li>
</ul>
</div>
<div class="section" id="task-remove-changelog-from-pdf">
<h3>[TASK] Remove ChangeLog from PDF</h3>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/55215">#55215</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/1f5e5fb1d1083e2a9037443593815ea9f37ecfcd">1f5e5fb</a></li>
</ul>
</div>
<div class="section" id="bugfix-toc-is-broken-on-docs-typo3-org">
<h3>[BUGFIX] TOC is broken on docs.typo3.org</h3>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/55212">#55212</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/97851812eabf4b040173e48d7602e4506f2a5f4c">9785181</a></li>
</ul>
</div>
<div class="section" id="task-introduce-cacheawareinterface">
<h3>[TASK] Introduce &#8220;CacheAwareInterface&#8221;</h3>
<p>This change introduces a new interface which describes how objects can
provide a distinct identifier which can be used for a cache entry.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d356f21d57a6e9828a18b10f388d18587a3bea56">d356f21</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-doctrine-service-return-correct-packages-for-migrations">
<h3>[BUGFIX] Make Doctrine service return correct packages for migrations</h3>
<p>With a previous fix <tt class="docutils literal"><span class="pre">PackageManager::getPackageOfObject()</span></tt> now
compares the namespace of a given object rather than it&#8217;s location
on the disk.
This broke the behavior of
<tt class="docutils literal"><span class="pre">Doctrine\\Service::getPackageKeyFromMigrationVersion()</span></tt> because
doctrine migrations all have the same namespace <tt class="docutils literal"><span class="pre">\\TYPO3\\Flow\\..</span></tt></p>
<p>With this fix the doctrine service compares the file paths again.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/55309">#55309</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5385bae67f18803beacad1e1b8ed622c2d5c02d1">5385bae</a></li>
</ul>
</div>
<div class="section" id="bugfix-return-404-status-code-for-removed-entities">
<h3>[!!!][BUGFIX] Return 404 status code for removed entities</h3>
<p>With this change the status code for persisted entities that can&#8217;t
be found is no longer <tt class="docutils literal"><span class="pre">500</span></tt>.</p>
<p>Background:
When an exception is thrown in <tt class="docutils literal"><span class="pre">PropertyMapper::convert()</span></tt> it is
always wrapped in a <tt class="docutils literal"><span class="pre">\\TYPO3\\Flow\\Property\\Exception</span></tt> leading to the
default exception handling which sets the status code of the HTTP
response to 500.</p>
<p>This is a breaking change only in the case that one relied on the
(incorrect) behavior of returning a status code 500 for entities that
couldn&#8217;t be found.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/55618">#55618</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/bdc1c89ad2d3cba08767d8d45b9bfb4dbe12ff45">bdc1c89</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-packagemanager-unit-tests">
<h3>[BUGFIX] Fix PackageManager unit tests</h3>
<p>Due to a previous change the PackageManager&#8217;s unit tests are failing.
This change adjusts the tests to the modified code fixing the tests.</p>
<p>Background:
The method <tt class="docutils literal"><span class="pre">getPackageOfObject()</span></tt> fixed with
I49cf6615b15f4414193d4b563dfe11169fcf44b7 changes the behavior of the
PackageManager so that it compares namespaces rather than file paths.
Unfortunately this broke unittests that generated dummy files with
invalid PHP namespaces.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/55309">#55309</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/002243ac06cd96da5b54fabb5a4ab94994db1e8a">002243a</a></li>
</ul>
</div>
<div class="section" id="bugfix-sort-packages-by-dependency">
<h3>[!!!][BUGFIX] Sort packages by dependency</h3>
<p>Before this, packages were sorted with PHP sort functions which did
not work in all cases due to the insufficiently determined order of
package dependencies.</p>
<p>With this change the sorting is done with an depth-first algorithm
that makes sure that package settings overrule settings from
depending packages.</p>
<p>The algorithm is an adapted version of
<a class="reference external" href="http://en.wikipedia.org/wiki/Topological_sorting">http://en.wikipedia.org/wiki/Topological_sorting</a></p>
<p>This is a breaking change in case you relied on the previous (and
sometimes incorrect) sorting of packages.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/318a0bcafcd082c6dbb794b3a7fca88743ba87d4">318a0bc</a></li>
</ul>
</div>
<div class="section" id="feature-add-method-getpackagebyclassname-to-packagemanager">
<h3>[FEATURE] Add method getPackageByClassName to PackageManager</h3>
<p>Currently there is only a method to fetch the package of a given object.
This change adds a new method <tt class="docutils literal"><span class="pre">PackageManager::getPackageByClassName()</span></tt> that
resolves the package of a given class name.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/50118">#50118</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6f335eb49d7f70c9c3db9da8b9241405af7c0c8e">6f335eb</a></li>
</ul>
</div>
<div class="section" id="bugfix-make-getpackageofobject-work-for-proxy-objects">
<h3>[BUGFIX] Make getPackageOfObject() work for proxy objects</h3>
<p>The method <tt class="docutils literal"><span class="pre">PackageManager::getPackageOfObject()</span></tt> failed to
resolve the package of a given object if it was a proxy.</p>
<p>This change fixes this by comparing the namespace of the object
with the package namespaces rather than the file locations.</p>
<p>Background:</p>
<p>The Flow/Doctrine proxy classes usually reside in a folder underneath
<tt class="docutils literal"><span class="pre">Data/Temporary</span></tt>. Comparing those paths with the package root paths
led to invalid results.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/55309">#55309</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9128a7f1895901f3308bf50986b69da514d61427">9128a7f</a></li>
</ul>
</div>
<div class="section" id="task-add-notice-about-php-path-for-windows-users">
<h3>[TASK] Add notice about php path for windows users</h3>
<p>Adds an additional note to set the php path in Settings.yaml for
windows users as most won&#8217;t have php in C:/php/php.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9858381d095cc4788a53adebd8df25fa544760de">9858381</a></li>
</ul>
</div>
<div class="section" id="bugfix-http-accept-header-parsing-was-not-case-insensitive">
<h3>[BUGFIX] HTTP accept header parsing was not case-insensitive</h3>
<p>Some browsers send the Accept-Language header with uppercase letters for
the region. This was not correctly matched by the
parseAcceptLanguageHeader utility function.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/e1df340cc168838d556643a1a861f0dc25252314">e1df340</a></li>
</ul>
</div>
<div class="section" id="task-tweak-documentation-settings">
<h3>[TASK] Tweak documentation settings</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/221aa7edae21348e5f7c465a56f72aea10d07758">221aa7e</a></li>
</ul>
</div>
<div class="section" id="task-add-change-log-for-typo3-flow-2-1-0-rc1">
<h3>[TASK] Add change log for TYPO3 Flow 2.1.0-RC1</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/7b8af25b681246a881c0c9078424d8817371f374">7b8af25</a></li>
</ul>
</div>
<div class="section" id="task-fix-and-tweak-rst-markup">
<h3>[TASK] Fix and tweak rST markup</h3>
<p>Note especially the changes to Förthner and Föder! :)</p>
<p>Yes, they fix PDF rendering of the documentation.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/108574158a3d46eb6a24be0801ebc8da0d431b68">1085741</a></li>
</ul>
</div>
<div class="section" id="id30">
<h3>[TASK] Tweak documentation settings</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/896c375215b507fe8b31ea006408909a1a177b13">896c375</a></li>
</ul>
</div>
<div class="section" id="task-fix-tables-in-rst-documents">
<h3>[TASK] Fix tables in rST documents</h3>
<p>Although working for HTML rendering the syntax was wrong, breaking PDF
rendering.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b04fc8e349571bb5e3d9dba703bdb55b976451bf">b04fc8e</a></li>
</ul>
</div>
<div class="section" id="task-add-change-logs-for-typo3-flow-2-0-0-2-0-1-2-1-0">
<h3>[TASK] Add change logs for TYPO3 Flow 2.0.0, 2.0.1, 2.1.0</h3>
<p>Add change logs, some minor tweaks to some distribution files.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/4490120629268ef833d7a3eb77aec020404d404a">4490120</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-configuration-schema-for-package-settings">
<h3>[BUGFIX] Fix configuration schema for package settings</h3>
<p>This adjusts the TYPO3.Flow.package.schema.yaml to the &#8220;packagesPathByType&#8221;
setting introduced with Ic87ebaece612e25898318795c748941e5a96b8cb.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ba088da3e7adf9d27a45fe86ef2a9c90a9283126">ba088da</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-configuration-schema-for-routes">
<h3>[BUGFIX] Fix configuration schema for Routes</h3>
<p>This adjusts the Routes.schema.yaml to the &#8220;httpMethods&#8221;
setting introduced with #27117</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/27117">#27117</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d62a22857900c47f6f91defcf94a807424216020">d62a228</a></li>
</ul>
</div>
<div class="section" id="bugfix-allow-uppercase-rewrite-regex-expression-for-session-id">
<h3>[BUGFIX] Allow uppercase rewrite regex expression for session id</h3>
<p>The usage of the SecurityPublishingConfiguration in combination with
the fluid resource viewhelper generates a link which includes the
users sessions id. This session id includes uppercase characters.
The mod_rewrite rule for this private resources doesnt allow uppercase
characters for the session id, so the user gets a 404.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/54973">#54973</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/dc9388740556f46d9091e2cd6d3399bc0f8f6d48">dc93887</a></li>
</ul>
</div>
<div class="section" id="task-enable-pdf-rendering-of-the-documentation">
<h3>[TASK] Enable PDF rendering of the documentation</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/dda156d2ba84eba180b3f166189b13c7f67ef2b3">dda156d</a></li>
</ul>
</div>
<div class="section" id="task-fix-some-typos">
<h3>[TASK] Fix some typos</h3>
<p>Fixes some typos within comments.
This is a cosmetic fix only.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/99390afeeb24a03188f43f0034dec9a8bcd2c2a4">99390af</a></li>
</ul>
</div>
<div class="section" id="bugfix-classes-without-namespace-create-invalid-proxy-code">
<h3>[BUGFIX] Classes without namespace create invalid proxy code</h3>
<p>This change makes classes without namespace create proper proxy
class code, by optionally skipping the namespace declaration.
Before such classes would create an empty namespace statement,
which resulted in syntax errors, i.e.:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="p">;</span>
</pre></div>
</div>
<p>=&gt; &#8220;syntax error, unexpected &#8216;;&#8217;, expecting T_STRING or
T_NS_SEPARATOR or &#8216;{&#8216; in [filename]&#8221;</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/52944">#52944</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/9352bf3f8d582091dc0ba432c50c31b1ae917e25">9352bf3</a></li>
</ul>
</div>
<div class="section" id="bugfix-filebackend-is-prone-to-race-condition-while-writing-cache-entry">
<h3>[BUGFIX] Filebackend is prone to race condition while writing cache entry</h3>
<p>This change improves protection against race conditions by adding a unique
identifier to the temporary file name while writing cache entry files.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/bfbec2f4f39393b9c65578402efaf963d2c0bad2">bfbec2f</a></li>
</ul>
</div>
<div class="section" id="bugfix-respect-x-forwarded-proto-header-consistently">
<h3>[BUGFIX] Respect X-Forwarded-Proto header consistently</h3>
<p>The <tt class="docutils literal"><span class="pre">Http\\Request</span></tt> currently only considers <tt class="docutils literal"><span class="pre">X-Forwarded-Proto</span></tt>
headers in its isSecure() method.</p>
<p>With this change the header is checked in the constructor so that it
overrules the requested protocol if set.</p>
<p>Before:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">GET</span> <span class="nx">http</span><span class="o">://</span><span class="nx">acme</span><span class="o">.</span><span class="nx">com</span><span class="o">:</span><span class="mi">8080</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
<span class="nx">X</span><span class="o">-</span><span class="nx">Forwarded</span><span class="o">-</span><span class="nx">Proto</span><span class="o">:</span> <span class="nx">https</span>
<span class="nx">X</span><span class="o">-</span><span class="nx">Forwarded</span><span class="o">-</span><span class="nx">Port</span><span class="o">:</span> <span class="mi">443</span>
</pre></div>
</div>
<p>Generated URIs like <tt class="docutils literal"><span class="pre">http://acme.com:8080</span></tt>. With this change the
result is <tt class="docutils literal"><span class="pre">https://acme.com</span></tt>.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/54453">#54453</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/ca7d52f5f458f8191980ec41f9df21fb495286f1">ca7d52f</a></li>
</ul>
</div>
<div class="section" id="bugfix-browser-must-not-directly-handle-cookie">
<h3>[BUGFIX] Browser must not directly handle cookie</h3>
<p>Request::create() doesn&#8217;t support &#8220;cookies&#8221; parameter.</p>
<p>Cookie argument has been removed from Request::create
with change Icdf7fea74d8331abcf95f1ec361abc78e31bfb8c.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/48290">#48290</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/32283a2a6e84eda922602d27075e7e6df1ecb943">32283a2</a></li>
</ul>
</div>
<div class="section" id="security-remove-possible-xss-from-actioncontroller-error-output">
<h3>[SECURITY] Remove possible XSS from ActionController Error output</h3>
<p>The errorAction method in the ActionController base class of Flow
returns error messages without properly encoding them. Because these
error messages can contain user input, this could lead to a Cross-Site
Scripting vulnerability in Flow driven applications.</p>
<p>The offending output has been removed without substitution.</p>
<p>Hint: If you have customized the error action in your Flow application,
we advise you to check that the error messages returned in these actions
only contain static strings and are not derived from any kind of user
input. If you are not sure whether your code is fine in that regard,
feel free to ask on a public mailing list or the forum.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/31206">#31206</a></li>
</ul>
<p>Security-Bulletin: TYPO3-FLOW-SA-2013-001</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f4fc77ca74e539ac2998408d034dc65155237d89">f4fc77c</a></li>
</ul>
</div>
<div class="section" id="task-add-dependencies-to-newly-created-composer-manifests">
<h3>[TASK] Add dependencies to newly created composer manifests</h3>
<p>Newly created composer manifests had a single dependency to
Flow before this change. Now the dependencies from package
meta data are added to the manifest.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/22edb22a0474b5b8a8d64cd8bca04d647b51e4f6">22edb22</a></li>
</ul>
</div>
<div class="section" id="task-update-contributors-list-in-guide">
<h3>[TASK] Update contributors list in guide</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/f51de6bf28114b4f2630e5a63c9000bf8f6a5d64">f51de6b</a></li>
</ul>
</div>
<div class="section" id="task-remove-version-number-in-composer-command-to-install-flow">
<h3>[TASK] Remove version number in composer command to install Flow</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/6df0dad73d1eab3ab7a19d0c17fb4796fb373db8">6df0dad</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="id38">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/e587e0ff7a78bf80f7e596268ff8572529e42ce9">e587e0f</a></li>
</ul>
</div>
<div class="section" id="task-fix-failing-functional-formobjectstest">
<h3>[TASK] Fix failing functional FormObjectsTest</h3>
<p>With change Ic37008975e9c58ec9bea9d4277ee4621e6de061b being merged the
test objectIsNotCreatedAnymoreIfIdentityFieldHasBeenAdded failed due to
404 being returned instead of 500.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/675deaf341be33bb3fcee375c7c046f535f82c4a">675deaf</a></li>
</ul>
</div>
<div class="section" id="bugfix-use-getpropertypath-in-autocomplete-widget">
<h3>[BUGFIX] Use getPropertyPath in autocomplete widget</h3>
<p>Since the query in the widget that searches for autocomplete items
already supports nested properties the building of the result array
now also uses ObjectAccess::getPropertyPath() instead of
ObjectAccess::getProperty().</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/55142">#55142</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/5332635efb2b7f02a69ed87026edfd80fd42b040">5332635</a></li>
</ul>
</div>
<div class="section" id="feature-add-generic-data-attribute">
<h3>[FEATURE] Add generic data-* attribute</h3>
<p>All elements in HTML5 can have any number of data-* attributes.
This additional array attribute on tag bases viewhelpers makes
it easier to add several data-* attributes to them:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">textfield</span> <span class="nx">data</span><span class="o">=</span><span class="s2">&quot;{foo: &#39;bar&#39;, baz: &#39;foos&#39;}&quot;</span> <span class="o">/&gt;</span>
</pre></div>
</div>
<p>Will render:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">data</span><span class="o">-</span><span class="nx">foo</span><span class="o">=</span><span class="s2">&quot;bar&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">baz</span><span class="o">=</span><span class="s2">&quot;foos&quot;</span> <span class="o">...</span>
</pre></div>
</div>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/35748">#35748</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/8f7bd506e06e62c4f28428f47d14a4e4f9ea8977">8f7bd50</a></li>
</ul>
</div>
<div class="section" id="task-fix-flush-on-a-non-object-in-templatecompiler">
<h3>[TASK] Fix “flush() on a non-object” in TemplateCompiler</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/89d02b3c4ae3d234abe70521deb582086d4e0923">89d02b3</a></li>
</ul>
</div>
<div class="section" id="task-move-f-form-validationresults-view-helper-to-f-validation-results">
<h3>[TASK] Move f:form.validationResults view helper to f:validation.results</h3>
<p>Moves the validationResults ViewHelper to the <tt class="docutils literal"><span class="pre">validation</span></tt> namespace
for consistency reasons.
If you use this ViewHelper you should update your Fluid templates from:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">validationResults</span><span class="o">&gt;...&lt;/</span><span class="nx">f</span><span class="o">:</span><span class="nx">form</span><span class="o">.</span><span class="nx">validationResults</span><span class="o">&gt;</span>
</pre></div>
</div>
<dl class="docutils">
<dt>to::</dt>
<dd>&lt;f:validation.results&gt;&lt;/f:validation.results&gt;</dd>
</dl>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/54196">#54196</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/49dfdbe5c17a617ddabf997bdf76703e66a196e5">49dfdbe</a></li>
</ul>
</div>
<div class="section" id="feature-introduce-validation-ifhaserrors-viewhelper">
<h3>[FEATURE] Introduce Validation.IfHasErrors ViewHelper</h3>
<p>This allows to check whether validation errors adhere
to the current request, or if there is such an error
for a particular property path.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/54196">#54196</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/c4d4db3afcfb4fbc3a4b66b3c4c14813929f34df">c4d4db3</a></li>
</ul>
</div>
<div class="section" id="feature-make-numberviewhelper-regard-locale">
<h3>[FEATURE] Make NumberViewHelper regard locale</h3>
<p>This change makes the NumberViewHelper use the forceLocale attribute
like the Currency and DateViewHelper do.
It also abstracts the locale awareness away into a seperate abstract
ViewHelper class to lay a foundation for other such ViewHelpers.</p>
<ul class="simple">
<li>Resolves: <a class="reference external" href="http://forge.typo3.org/issues/48218">#48218</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/df00bf92a42d92b26e66c30976272115a24992f1">df00bf9</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<div class="section" id="id45">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/93f267b75b26e009aa2e0ecf272211ffcded8e27">93f267b</a></li>
</ul>
</div>
<div class="section" id="task-fix-cgl-violations-in-generator-service">
<h3>[TASK] Fix CGL violations in generator service</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/61b8b45aea212cef84246f93289d805c6a4adadd">61b8b45</a></li>
</ul>
</div>
<div class="section" id="task-remove-php-closing-tag-in-templates">
<h3>[TASK] Remove PHP closing tag in templates</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Kickstart.git/commit/053ac2e0bdcc30f9a33cba7482f152379143f8ea">053ac2e</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<div class="section" id="id46">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Party.git/commit/75cb8aabb2fd5b346cc2b117beae1d60c7b11062">75cb8aa</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<div class="section" id="id47">
<h3>[TASK] Update composer manifest</h3>
<p>See <a class="reference external" href="http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/">http://ci.typo3.robertlemke.net/job/typo3-flow-branch/4/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Welcome.git/commit/9c182a4d354bc46afbba65ec47afd3cdc9a64ffa">9c182a4</a></li>
</ul>
</div>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="a7cfad3e-837a-9bb8-8022-c2adb103770e" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
       <node identifier="cc6a39a4-cf1c-ff54-1242-7688d0f619f4" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="220-beta2" locale="">
        <properties>
         <title>2.2.0-beta2</title>
        </properties>
        <node identifier="c5aa0ced-27f9-7368-77b1-f454232518f3" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
         <node identifier="dd81fc91-57cd-fab1-3aaf-e4731d465e75" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
          <properties>
           <text><![CDATA[<div class="section" id="beta2">
<h1>2.2.0-beta2</h1>
<div class="section" id="base-distribution">
<h2>Base Distribution</h2>
</div>
<div class="section" id="typo3-eel">
<h2>TYPO3.Eel</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-flow">
<h2>TYPO3.Flow</h2>
<div class="section" id="task-update-references-in-documentation">
<h3>[TASK] Update references in documentation</h3>
<p>See <a class="reference external" href="https://ci.neos.typo3.org/job/typo3-flow-release/15/">https://ci.neos.typo3.org/job/typo3-flow-release/15/</a></p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/5704ae7724ea4d32224b9083e2012ec3df305e06">5704ae7</a></li>
</ul>
</div>
<div class="section" id="task-update-upgrading-txt-with-note-about-changed-persistall">
<h3>[TASK] Update Upgrading.txt with note about changed persistAll()</h3>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d7714f09374ca70c098da631f567c5e0bb25c2c8">d7714f0</a></li>
</ul>
</div>
<div class="section" id="bugfix-prevent-invocation-of-protected-controller-methods">
<h3>[BUGFIX] Prevent invocation of protected controller methods</h3>
<p>Currently any method with an &#8220;Action&#8221; suffix is callable via the
default request handling if a corresponding route exists.</p>
<p>For the fallback routes provided by Flow this is the case for the
<tt class="docutils literal"><span class="pre">initialize*Action()</span></tt> methods that are called before the actual
action invocation.</p>
<p>This change adds a check for the visibility of an action method
and only allows invocation of public methods.</p>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/57410">#57410</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/22212565c6a42a0387f354333b4742dac75138d1">2221256</a></li>
</ul>
</div>
<div class="section" id="bugfix-slaverequesthandler-must-not-ignore-quit-command">
<h3>[BUGFIX] SlaveRequestHandler must not ignore QUIT command</h3>
<p>The <tt class="docutils literal"><span class="pre">SlaveRequestHandler</span></tt> listens for a &#8220;QUIT\n&#8221; command but
it trims the input first, removing the newline character.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b8155cf721c36ecdb191de1a739af3aa7d0343ca">b8155cf</a></li>
</ul>
</div>
<div class="section" id="feature-persist-whitelisted-objects-even-for-safe-requests">
<h3>[FEATURE] Persist whitelisted objects even for safe requests</h3>
<p>This change provides the possibility to register single objects which
should be allowed to be persisted even if the current request is a
&#8220;safe&#8221; request.</p>
<p>See documentation for further explanation and an example.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/b51d10b61a0b10500b92dd5ffb5a8a98337c4b54">b51d10b</a></li>
</ul>
</div>
<div class="section" id="feature-split-configuration-sources-include-non-split-default">
<h3>[FEATURE] Split configuration sources include non-split default</h3>
<p>This change changes the behavior of split configuration sources to
include the default non-prefixed source as a fallback for increased
flexibility, allowing some packages to have split sources and others
to have a single source.</p>
<p>Also a check in the has method is made more strict.</p>
<ul class="simple">
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/37854">#37854</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d9d1fd03c5ea316f0481cdc79e658094022cf65f">d9d1fd0</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-temporary-path-for-availableproxyclasses-php">
<h3>[BUGFIX] Fix temporary path for AvailableProxyClasses.php</h3>
<p>This fixes the temporary path used for &#8220;AvailableProxyClasses.php&#8221; for
situations when a application sub context was used.</p>
<p>Provided that the context is &#8220;Development/MyMachine&#8221;, without this patch
Flow would create a file
&#8220;Data/Temporary/Development/MyMachine/AvailableProxyClasses.php&#8221; while
all other temporary files would reside in
&#8220;Data/Temporary/Development/SubContextMyMachine/&#8221;.</p>
<p>With this patch, the path will be
&#8220;Data/Temporary/Development/SubContextMyMachine/AvailableProxyClasses.php&#8221;</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/da46db268ded3c4d0f124e13fdb6aaf4fa427f4b">da46db2</a></li>
</ul>
</div>
<div class="section" id="bugfix-fix-resolving-of-imported-collection-types">
<h3>[BUGFIX] Fix resolving of imported collection types</h3>
<p>This change extends the ReflectionService so that it is able to
expand our custom notation for collection types:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">CollectionType</span><span class="o">&lt;</span><span class="nx">ElementType</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Background:</p>
<p>In the Coding Guidelines we encourage developers to import namespaces
in order to increase readability.</p>
<p>With #46008 the ReflectionService is able to resolve relative and
imported namespace (with #50909 this also works for abstract classes).</p>
<p>But this does not work for our custom notation of Collection types yet.
With this fix relative and imported class names are supported also for
our custom notation of collection types and the above would be
expanded to:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">\\CollectionTypeNamespace\\CollectionType</span><span class="o">&lt;</span><span class="nx">\\ElementTypeNamespace\\ElementType</span><span class="o">&gt;</span>
</pre></div>
</div>
<ul class="simple">
<li>Fixes: <a class="reference external" href="http://forge.typo3.org/issues/57034">#57034</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/46008">#46008</a></li>
<li>Related: <a class="reference external" href="http://forge.typo3.org/issues/50909">#50909</a></li>
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0b45aa53d72a61241d975d5d68a64ea638439306">0b45aa5</a></li>
</ul>
</div>
<div class="section" id="feature-custom-cache-directory-for-file-based-cache-backends">
<h3>[FEATURE] Custom cache directory for file based cache backends</h3>
<p>This introduces a new backend option &#8220;cacheDirectory&#8221; which allows for
explicitly specifying a path to the directory where entries of a
specific cache are stored. This option overrides the automatically
chosen path within Flow&#8217;s temporary directory.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/0c8315b6ed5ab91794ff090e8a32902034a9846f">0c8315b</a></li>
</ul>
</div>
<div class="section" id="revert-task-resources-are-published-with-relative-symlinks">
<h3>Revert &#8220;[TASK] Resources are published with relative symlinks&#8221;</h3>
<p>This reverts commit 6d206c1d35324f26e8780fdad80fed466bc9f4e1
(also known as I2e84cd8f9abd41578a87791813d03e764528feb9)</p>
<p>In a real-world Surf setup, this patch will cause invalid relative
paths in the generated symbolic links.</p>
<p>For example:</p>
<p>The current release is in
/var/www/acme.com/releases/current</p>
<p>which would have a realpath() of
/var/www/acme.com/releases/201403060101</p>
<p>A published resource symlink would incorrectly point to
../../../releases/20140306210347/Data/Persistent/Resources/abcdef1234</p>
<p>The correct path would be
../../../Data/Persistent/Resources/abcdef1234</p>
<p>Since there are more variations to consider (virtual host root path
contains a symlink to releases/current/Web/_Resources or not)
this can&#8217;t be solved last minute and needs thorough testing.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/2ba78fa66b75109a159faf04ba376666f2073a1c">2ba78fa</a></li>
</ul>
</div>
<div class="section" id="task-fix-intermittent-failures-in-sessiontest">
<h3>[TASK] Fix intermittent failures in SessionTest</h3>
<p>At time the garbageCollectionOnlyRemovesTheDefinedMaximumNumberOfSessions
in SessionTest fails with &#8220;Failed asserting that 1 matches expected 5.&#8221;</p>
<p>Since the test is about making sure a maximum is not exceeded, this
changes the assertion from &#8220;equal&#8221; to &#8220;less than or equal&#8221;.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Flow.git/commit/d8fcd9d8de1934ac49345e4e12566adcce64ab3f">d8fcd9d</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-fluid">
<h2>TYPO3.Fluid</h2>
<div class="section" id="bugfix-arrays-as-form-objects-also-support-property-paths">
<h3>[BUGFIX] Arrays as form objects also support property paths</h3>
<p>When having an array as form object and a dotted property notation
for form fields, that dotted notation wasn&#8217;t followed for no
reason. Now it&#8217;s possible to have a <tt class="docutils literal"><span class="pre">&lt;f:form.textfield</span>
<span class="pre">property=&quot;product.tag&quot;</span> <span class="pre">/&gt;</span></tt> if the underlying form object is
<tt class="docutils literal"><span class="pre">array('product'=&gt;array('tag'=&gt;'somevalue'))</span></tt>.</p>
<ul class="simple">
<li>Commit: <a class="reference external" href="https://git.typo3.org/Packages/TYPO3.Fluid.git/commit/736d07ae90682ae96353927e057bd35a90f2dfc6">736d07a</a></li>
</ul>
</div>
</div>
<div class="section" id="typo3-kickstart">
<h2>TYPO3.Kickstart</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-party">
<h2>TYPO3.Party</h2>
<p>No changes</p>
</div>
<div class="section" id="typo3-welcome">
<h2>TYPO3.Welcome</h2>
<p>No changes</p>
</div>
</div>]]></text>
           <title></title>
          </properties>
         </node>
        </node>
        <node identifier="be84cc2f-8d38-4d3f-5ea8-09090375da09" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
       </node>
      </node>
     </node>
     <node identifier="ff2b8851-aaca-edab-b5e1-59058ef45c79" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="contributors" locale="">
      <properties>
       <title>Contributors</title>
      </properties>
      <node identifier="37a7e9e7-a060-5c38-9f7d-1caaa36f604a" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="d297a930-ac20-2bc4-ba10-ee87f745a4f2" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="contributors">
<h1>Contributors</h1>
<p>The following is a list of contributors generated from version control
information (see below). As such it is neither claiming to be complete nor is the
ordering anything but alphabetic.</p>
<ul class="simple">
<li>Adrian Föder</li>
<li>Aftab Naveed</li>
<li>Alexander Berl</li>
<li>Alexander Schnitzler</li>
<li>Alexander Stehlik</li>
<li>Andreas Förthner</li>
<li>Andreas Wolf</li>
<li>Andy Grunwald</li>
<li>Aske Ertmann</li>
<li>Bastian Waidelich</li>
<li>Benno Weinzierl</li>
<li>Berit Jensen</li>
<li>Bernhard Fischer</li>
<li>Cedric Ziel</li>
<li>Christian Jul Jensen</li>
<li>Christian Kuhn</li>
<li>Christian Müller</li>
<li>Christopher Hlubek</li>
<li>Dominique Feyer</li>
<li>Felix Oertel</li>
<li>Ferdinand Kuhl</li>
<li>Franz Kugelmann</li>
<li>Helmut Hummel</li>
<li>Henrik Møller Rasmussen</li>
<li>Ingo Pfennigstorf</li>
<li>Irene Höppner</li>
<li>Jacob Floyd</li>
<li>Jan-Erik Revsbech</li>
<li>Jochen Rau</li>
<li>Johannes Künsebeck</li>
<li>Julian Kleinhans</li>
<li>Julian Wachholz</li>
<li>Karol Gusak</li>
<li>Karsten Dambekalns</li>
<li>Lars Peipmann</li>
<li>Laurent Cherpit</li>
<li>Lienhart Woitok</li>
<li>Marc Neuhaus</li>
<li>Marco Huber</li>
<li>Markus Goldbeck</li>
<li>Markus Günther</li>
<li>Martin Brüggemann</li>
<li>Martin Ficzel</li>
<li>Mattias Nilsson</li>
<li>Michael Gerdemann</li>
<li>Michael Klapper</li>
<li>Michael Sauter</li>
<li>Oliver Hader</li>
<li>Pankaj Lele</li>
<li>Patrick Pussar</li>
<li>Philipp Maier</li>
<li>Rens Admiraal</li>
<li>Robert Lemke</li>
<li>Ryan J. Peterson</li>
<li>Sascha Egerer</li>
<li>Sebastian Kurfürst</li>
<li>Simon Schaufelberger</li>
<li>Simon Schick</li>
<li>Soeren Rohweder</li>
<li>Soren Malling</li>
<li>Stefan Neufeind</li>
<li>Steffen Ritter</li>
<li>Stephan Schuler</li>
<li>Thomas Hempel</li>
<li>Thomas Layh</li>
<li>Tim Eilers</li>
<li>Tim Kandel</li>
<li>Tim Spiekerkötter</li>
<li>Tobias Liebig</li>
<li>Tolleiv Nietsch</li>
<li>Tymoteusz Motylewski</li>
<li>Wouter Wolters</li>
<li>Zach Davis</li>
</ul>
<p>The list has been generated with some manual tweaking of the output of this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">rm</span> <span class="nx">contributors</span><span class="o">.</span><span class="nx">txt</span>
<span class="k">for</span> <span class="nx">REPO</span> <span class="nx">in</span> <span class="sb">`ls`</span> <span class="p">;</span> <span class="k">do</span>
  <span class="nx">cd</span> <span class="nv">$REPO</span>
  <span class="nx">git</span> <span class="nx">log</span> <span class="o">--</span><span class="nx">format</span><span class="o">=</span><span class="s1">&#39;%aN&#39;</span> <span class="o">&gt;&gt;</span> <span class="o">../</span><span class="nx">contributors</span><span class="o">.</span><span class="nx">txt</span>
  <span class="nx">cd</span> <span class="o">..</span>
<span class="nx">done</span>
<span class="nb">sort</span> <span class="o">-</span><span class="nx">u</span> <span class="o">&lt;</span> <span class="nx">contributors</span><span class="o">.</span><span class="nx">txt</span> <span class="o">&gt;</span> <span class="nx">contributors</span><span class="o">-</span><span class="nx">sorted</span><span class="o">.</span><span class="nx">txt</span>
<span class="nx">mv</span> <span class="nx">contributors</span><span class="o">-</span><span class="nx">sorted</span><span class="o">.</span><span class="nx">txt</span> <span class="nx">contributors</span><span class="o">.</span><span class="nx">txt</span>
</pre></div>
</div>
</div>]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="15df0bbf-3677-1fe0-c117-2fc467acfe64" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     </node>
    </node>
    <node identifier="82647a94-a9ed-4584-04e4-9b46b0c9d6b4" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="coding-guidelines" locale="">
     <properties>
      <title>Coding Guidelines</title>
     </properties>
     <node identifier="5f200095-8ece-48bf-02c3-80cca1669eba" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
      <node identifier="512a1c05-f378-4178-1e2d-aefddd3a2db7" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
       <properties>
        <text><![CDATA[<div class="section" id="coding-guidelines">
<h1>Coding Guidelines</h1>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="flow/references/coding-guidelines/php.html">PHP Coding Guidelines &amp; Best Practices</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/php.html#cgl-on-one-page">CGL on One Page</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/php.html#code-formatting-and-layout-aka-beautiful-code">Code Formatting and Layout aka &#8220;beautiful code&#8221;</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#general-considerations">General considerations</a><ul>
<li class="toctree-l4"><a class="reference internal" href="flow/references/coding-guidelines/php.html#indentation-and-line-formatting">Indentation and line formatting</a></li>
</ul>
</li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#naming">Naming</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#vendor-namespaces">Vendor namespaces</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#package-names">Package names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#namespace-and-class-names">Namespace and Class names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#importing-namespaces">Importing Namespaces</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#interface-names">Interface names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#exception-names">Exception names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#method-names">Method names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#variable-names">Variable names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#constant-names">Constant names</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#filenames">Filenames</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/php.html#php-code-formatting">PHP code formatting</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#strings">Strings</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#arrays">Arrays</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#classes">Classes</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#functions-and-methods">Functions and methods</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#if-statements">if statements</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#switch-statements">switch statements</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/php.html#development-process">Development Process</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#test-driven-development">Test-Driven Development</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#commit-messages">Commit Messages</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#source-code-documentation">Source Code Documentation</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#documentation-blocks">Documentation Blocks</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#class-documentation">Class documentation</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#documenting-variables-constants-includes">Documenting variables, constants, includes</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#method-documentation">Method documentation</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#testcase-documentation">Testcase documentation</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#defining-the-public-api">Defining the Public API</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#overview-of-documentation-annotations">Overview of Documentation Annotations</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/php.html#best-practices">Best Practices</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#typo3-flow">TYPO3 Flow</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#error-handling-and-exceptions">Error Handling and Exceptions</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#throwing-an-exception">Throwing an exception</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#unit-testing">Unit Testing</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#cross-platform-coding">Cross Platform Coding</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#php-in-general">PHP in General</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/php.html#comments">Comments</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html">JavaScript Coding Guidelines</a><ul>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#naming-conventions">Naming Conventions</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#doc-comments">Doc Comments</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#class-definitions">Class Definitions</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#prototype-class-definitions">Prototype Class Definitions</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#singleton-class-definitions">Singleton Class Definitions</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#class-doc-comments">Class Doc Comments</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#method-definitions">Method Definitions</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#property-definitions">Property Definitions</a></li>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#code-style">Code Style</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#using-jslint-to-validate-your-javascript">Using JSLint to validate your JavaScript</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#event-handling">Event Handling</a></li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#extjs-specific-things">ExtJS specific things</a><ul>
<li class="toctree-l3"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#how-to-extend-data-stores">How to extend data stores</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="flow/references/coding-guidelines/javascript.html#unit-testing">Unit Testing</a></li>
</ul>
</li>
</ul>
</div>
</div>
]]></text>
        <title></title>
       </properties>
      </node>
     </node>
     <node identifier="1060516b-254d-47e6-2be7-821ce775cc2d" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     <node identifier="080e76a2-e9e6-f06b-edf8-799c39103fe6" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="php" locale="">
      <properties>
       <title><![CDATA[PHP Coding Guidelines & Best Practices]]></title>
      </properties>
      <node identifier="e5b1117d-1c74-6e67-5d36-08d3826af3bb" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="aa23d4b9-7eb7-23d5-f8e0-86e6d206df1d" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="php-coding-guidelines-best-practices">
<h1>PHP Coding Guidelines &amp; Best Practices</h1>
<p>Coding Standards are an important factor for achieving a high code quality. A common
visual style, naming conventions and other technical settings allow us to produce a
homogenous code which is easy to read and maintain. However, not all important factors can
be covered by rules and coding standards. Equally important is the style in which certain
problems are solved programmatically - it&#8217;s the personality and experience of the
individual developer which shines through and ultimately makes the difference between
technically okay code or a well considered, mature solution.</p>
<p>These guidelines try to cover both, the technical standards as well as giving incentives
for a common development style. These guidelines must be followed by everyone who creates
code for the TYPO3 Flow core. Because Neos is based on TYPO3 Flow, it follows the same principles -
therefore, whenever we mention TYPO3 Flow in the following sections, we equally refer to Neos.
We hope that you feel encouraged to follow these guidelines as well when creating your own
packages and TYPO3 Flow based applications.</p>
<div class="section" id="cgl-on-one-page">
<h2>CGL on One Page</h2>
<div class="figure">
<a class="reference external image-reference" href="flow/references/coding-guidelines/../../_downloads/typo3_flow_coding_guidelines_on_one_page.pdf.html"><img alt="The Coding Guidelines on One Page" class="screenshot-detail" src="_Resources/Persistent/8153252c83fa0e8b70919e63f86ca4c59dee9657/TYPO3-Flow-Coding-Guidelines-on-one-page.png" style="width: 250px" /></a>
<p class="caption">The Coding Guidelines on One Page</p>
</div>
<p>The most important parts of our <a class="reference download internal" href="flow/references/coding-guidelines/../../_downloads/typo3_flow_coding_guidelines_on_one_page.pdf.html"><tt class="xref download docutils literal"><span class="pre">Coding</span> <span class="pre">Guidelines</span> <span class="pre">in</span> <span class="pre">a</span> <span class="pre">one</span> <span class="pre">page</span> <span class="pre">document</span></tt></a>
you can print out and hang on your wall for easy reference.
Does it get any easier than that?</p>
</div>
<div class="section" id="code-formatting-and-layout-aka-beautiful-code">
<h2>Code Formatting and Layout aka &#8220;beautiful code&#8221;</h2>
<p>The visual style of programming code is very important. In the TYPO3 project we want many
programmers to contribute, but in the same style. This will help us to:</p>
<ul class="simple">
<li>Easily read/understand each others code and consequently easily spot security problems
or optimization opportunities</li>
<li>It is a signal about consistency and cleanliness, which is a motivating factor for
programmers striving for excellence</li>
</ul>
<p>Some people may object to the visual guidelines since everyone has his own habits. You
will have to overcome that in the case of TYPO3 Flow; the visual guidelines must be followed
along with coding guidelines for security. We want all contributions to the project to be
as similar in style and as secure as possible.</p>
<div class="section" id="general-considerations">
<h3>General considerations</h3>
<ul class="simple">
<li>Almost every PHP file in TYPO3 Flow contains exactly one class and does not output anything
if it is called directly. Therefore you start your file with a <tt class="docutils literal"><span class="pre">&lt;?php</span></tt> tag and must not end it
with the closing <tt class="docutils literal"><span class="pre">?&gt;</span></tt>.</li>
<li>Every file must contain a header stating namespace and licensing information<ul>
<li>Declare your namespace.</li>
<li>The copyright header itself must not start with <tt class="docutils literal"><span class="pre">/**</span></tt>, as this may confuse
documentation generators!</li>
</ul>
</li>
</ul>
<p>The TYPO3 Flow standard file header:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">namespace</span> <span class="nx">YourCompany\Package\Stuff\Here</span><span class="p">;</span>

<span class="cm">/*                                                                        *</span>
<span class="cm"> * This script belongs to the TYPO3 Flow package &quot;Vendor.Package&quot;.        *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * It is free software; you can redistribute it and/or modify it under    *</span>
<span class="cm"> * the terms of the GNU Lesser General Public License, either version 3   *</span>
<span class="cm"> * of the License, or (at your option) any later version.                 *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * The TYPO3 project - inspiring people to share!                         *</span>
<span class="cm"> *                                                                        */</span>
</pre></div>
</div>
<ul class="simple">
<li>Code lines are of arbitrary length, no strict limitations to 80 characters or something
similar (wake up, graphical displays have been available for decades now...). But feel
free to break lines for better readability if you think it makes sense!</li>
<li>Lines end with a newline a.k.a <tt class="docutils literal"><span class="pre">chr(10)</span></tt> - UNIX style</li>
<li>Files must be encoded in UTF-8 without byte order mark (BOM)</li>
</ul>
<p>Make sure you use the correct license and mention the correct package in the header, we
have some <a class="reference external" href="http://wiki.typo3.org/Flow_Licensing_Boilerplate">some boilerplate text</a>.</p>
<div class="section" id="indentation-and-line-formatting">
<h4>Indentation and line formatting</h4>
<p>Indentation is done with tabs - and not spaces! The beginning of a line is the only place
where tabs are used, in all other places use spaces. Always trim whitespace off the end of
a line.</p>
<p>Here&#8217;s a code snippet which shows the correct usage of tabs and spaces.</p>
<p>Correct use of tabs and spaces:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Returns the name of the currently set context.</span>
<span class="sd"> *</span>
<span class="sd"> * @return string Name of the current context</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">getContextName</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">contextName</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>There seem to be very passionate opinions about whether TABs or spaces should be used for
indentation of code blocks in the scripts. If you&#8217;d like to read more about this religious
discussion, you find some nice arguments in the <a class="reference external" href="http://discuss.fogcreek.com/joelonsoftware/default.asp?cmd=show&amp;ixPost=3978">Joel on Software</a> forum.</p>
</div>
</div>
<div class="section" id="naming">
<h3>Naming</h3>
<p>Naming is a repeatedly undervalued factor in the art of software development. Although
everybody seems to agree on that nice names are a nice thing to have, most developers
choose cryptic abbreviations in the end (to save some typing). Beware that we TYPO3 core
developers are very passionate about naming (some people call it fanatic, well ...). In
our opinion spending 15 minutes (or more ...) just to find a good name for a method is
well spent time! There are zillions of reasons for using proper names and in the end they
all lead to better readable, manageable, stable and secure code.</p>
<p>As a general note, english words (or abbreviations if necessary) must be used for all
class names, method names, comments, variables names, database table and field names. The
consensus is that english is much better to read for the most of us, compared to other
languages.</p>
<p>When using abbreviations or acronyms remember to make them camel-cased as needed, no
all-uppercase stuff. Admittedly there are a few places where we violate that rule
willingly (TYPO3 – will not change) and historically.</p>
</div>
<div class="section" id="vendor-namespaces">
<h3>Vendor namespaces</h3>
<p>The base for namespaces as well as package keys is the vendor namespace. Since Flow is
part of the TYPO3 project, the core team decided to choose &#8220;TYPO3&#8221; as our vendor
namespace. The Object Manager for example is known under the class name
<tt class="docutils literal"><span class="pre">TYPO3\Flow\Object\ObjectManager</span></tt>. In our examples you will find the <tt class="docutils literal"><span class="pre">Acme</span></tt> vendor
namespace.</p>
<p>Why do we use vendor namespaces? This has two great benefits: first of all we don&#8217;t need a
central package key registry (like the one we have for TYPO3 CMS extensions) and secondly,
it allows anyone to seamlessly integrate third-party packages, such as Symfony2 components
and Zend Framework components or virtually any other PHP 5.3+ based library.</p>
<p>Think about your own vendor namespace for a few minutes. It will stay with you for a long
time.</p>
</div>
<div class="section" id="package-names">
<h3>Package names</h3>
<p>All package names start with an uppercase character and usually are written in
<tt class="docutils literal"><span class="pre">UpperCamelCase</span></tt>. In order to avoid problems with different filesystems,
only the characters a-z, A-Z, 0-9 and the dash sign &#8220;-&#8221; are allowed for package names –
don&#8217;t use special characters.</p>
<p>The full package key is then built by combining the vendor namespace and the package,
like <tt class="docutils literal"><span class="pre">TYPO3.Fluid</span></tt> or <tt class="docutils literal"><span class="pre">Acme.Demo</span></tt>.</p>
</div>
<div class="section" id="namespace-and-class-names">
<h3>Namespace and Class names</h3>
<ul class="simple">
<li>Only the characters a-z, A-Z and 0-9 are allowed for namespace and class names.</li>
<li>Namespaces are usually written in UpperCamelCase but variations are allowed for well
established names and abbreviations.</li>
<li>Class names are always written in <tt class="docutils literal"><span class="pre">UpperCamelCase</span></tt>.</li>
<li>The unqualified class name must be meant literally even without the namespace.</li>
<li>The main purpose of namespaces is categorization and ordering</li>
<li>Class names must be nouns, never adjectives.</li>
<li>The name of abstract classes must start with the word &#8220;Abstract&#8221;, class names of aspects
must end with the word &#8220;Aspect&#8221;.</li>
</ul>
<p>Incorrect naming of namespaces and classes</p>
<table border="1" class="docutils">
<colgroup>
<col width="37%" />
<col width="16%" />
<col width="47%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Fully qualified class name</th>
<th class="head">Unqualified name</th>
<th class="head">Remarks</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>\TYPO3\Flow\Session\Php</td>
<td>Php</td>
<td>The class is not a representation of PHP</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Flow\Cache\Backend\File</td>
<td>File</td>
<td>The class doesn&#8217;t represent a file!</td>
</tr>
<tr class="row-even"><td>\TYPO3\Flow\Session\Interface</td>
<td>Interface</td>
<td>Not allowed, &#8220;Interface&#8221; is a reserved keyword</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Foo\Controller\Default</td>
<td>Default</td>
<td>Not allowed, &#8220;Default&#8221; is a reserved keyword</td>
</tr>
<tr class="row-even"><td>\TYPO3\Flow\Object\Manager</td>
<td>Manager</td>
<td>Just &#8220;Manager&#8221; is too fuzzy</td>
</tr>
</tbody>
</table>
<p>Correct naming of namespaces and classes</p>
<table border="1" class="docutils">
<colgroup>
<col width="50%" />
<col width="20%" />
<col width="30%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Fully qualified class name</th>
<th class="head">Unqualified name</th>
<th class="head">Remarks</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>\TYPO3\Flow\Session\PhpSession</td>
<td>PhpSession</td>
<td>That&#8217;s a PHP Session</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Flow\Cache\Backend\FileBackend</td>
<td>FileBackend</td>
<td>A File Backend</td>
</tr>
<tr class="row-even"><td>\TYPO3\Flow\Session\SessionInterface</td>
<td>SessionInterface</td>
<td>Interface for a session</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Foo\Controller\StandardController</td>
<td>StandardController</td>
<td>The standard controller</td>
</tr>
<tr class="row-even"><td>\TYPO3\Flow\Object\ObjectManager</td>
<td>ObjectManager</td>
<td>&#8220;ObjectManager&#8221; is clearer</td>
</tr>
</tbody>
</table>
<p>Edge cases in naming of namespaces and classes</p>
<table border="1" class="docutils">
<colgroup>
<col width="33%" />
<col width="12%" />
<col width="55%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Fully qualified class name</th>
<th class="head">Unqualified name</th>
<th class="head">Remarks</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>\TYPO3\Flow\Mvc\ControllerInterface</td>
<td>ControllerInterface</td>
<td>Consequently the interface belongs to all the controllers in the Controller sub namespace</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Flow\Mvc\Controller\ControllerInterface</td>
<td>&nbsp;</td>
<td>Better</td>
</tr>
<tr class="row-even"><td>\TYPO3\Flow\Cache\AbstractBackend</td>
<td>AbstractBackend</td>
<td>Same here: In reality this class belongs to the backends</td>
</tr>
<tr class="row-odd"><td>\TYPO3\Flow\Cache\Backend\AbstractBackend</td>
<td>&nbsp;</td>
<td>Better</td>
</tr>
</tbody>
</table>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">When specifying class names to PHP, always reference the global namespace inside
namespaced code by using a leading backslash. When referencing a class name inside a
string (e.g. given to the <tt class="docutils literal"><span class="pre">get</span></tt>-Method of the <tt class="docutils literal"><span class="pre">ObjectManager</span></tt>, in pointcut
expressions or in YAML files), never use a leading backslash. This follows the native
PHP notion of names in strings always being seen as fully qualified.</p>
</div>
</div>
<div class="section" id="importing-namespaces">
<h3>Importing Namespaces</h3>
<p>If you refer to other classes or interfaces you are encouraged to import the namespace with the
<tt class="docutils literal"><span class="pre">use</span></tt> statement if it improves readability.</p>
<p>Following rules apply:</p>
<ul class="simple">
<li>If importing namespaces creates conflicting class names you might alias class/interface or namespaces
with the <tt class="docutils literal"><span class="pre">as</span></tt> keyword.</li>
<li>One <tt class="docutils literal"><span class="pre">use</span></tt> statement per line, one <tt class="docutils literal"><span class="pre">use</span></tt> statement for each imported namespace</li>
<li>Imported namespaces should be ordered alphabetically (modern IDEs provide support for this)</li>
</ul>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last"><tt class="docutils literal"><span class="pre">use</span></tt> statements have no side-effects (e.g. they don’t trigger autoloading).
Nevertheless you should remove unused imports for better readability</p>
</div>
</div>
<div class="section" id="interface-names">
<h3>Interface names</h3>
<p>Only the characters a-z, A-Z and 0-9 are allowed for interface names – don&#8217;t use special
characters.</p>
<p>All interface names are written in <tt class="docutils literal"><span class="pre">UpperCamelCase</span></tt>. Interface names must be adjectives
or nouns and have the Interface suffix. A few examples follow:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\ObjectInterface</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\ObjectManagerInterface</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\MyObject\MySubObjectInterface</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\MyObject\MyHtmlParserInterface</span></tt></li>
</ul>
</div>
<div class="section" id="exception-names">
<h3>Exception names</h3>
<p>Exception naming basically follows the rules for naming classes. There are two possible
types of exceptions: generic exceptions and specific exceptions. Generic exceptions should
be named &#8220;Exception&#8221; preceded by their namespace. Specific exceptions should reside in
their own sub-namespace end with the word <tt class="docutils literal"><span class="pre">Exception</span></tt>.</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\Exception</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\TYPO3\Flow\Object\Exception\InvalidClassNameException</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\MyObject\Exception</span></tt></li>
<li><tt class="docutils literal"><span class="pre">\MyCompany\MyPackage\MyObject\Exception\OutOfCoffeeException</span></tt></li>
</ul>
</div>
<div class="section" id="method-names">
<h3>Method names</h3>
<p>All method names are written in lowerCamelCase. In order to avoid problems with different
filesystems, only the characters a-z, A-Z and 0-9 are allowed for method names – don&#8217;t use
special characters.</p>
<p>Make method names descriptive, but keep them concise at the same time. Constructors must
always be called <tt class="docutils literal"><span class="pre">__construct()</span></tt>, never use the class name as a method
name.</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">myMethod()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">someNiceMethodName()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">betterWriteLongMethodNamesThanNamesNobodyUnderstands()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">singYmcaLoudly()</span></tt></li>
<li><tt class="docutils literal"><span class="pre">__construct()</span></tt></li>
</ul>
</div>
<div class="section" id="variable-names">
<h3>Variable names</h3>
<p>Variable names are written in <tt class="docutils literal"><span class="pre">lowerCamelCase</span></tt> and should be</p>
<ul class="simple">
<li>self-explanatory</li>
<li>not shortened beyond recognition, but rather longer if it makes their meaning clearer</li>
</ul>
<p>The following example shows two variables with the same meaning but different naming.
You&#8217;ll surely agree the longer versions are better (don&#8217;t you ...?).</p>
<p>Correct naming of variables</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">$singletonObjectsRegistry</span></tt></li>
<li><tt class="docutils literal"><span class="pre">$argumentsArray</span></tt></li>
<li><tt class="docutils literal"><span class="pre">$aLotOfHtmlCode</span></tt></li>
</ul>
<p>Incorrect naming of variables</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">$sObjRgstry</span></tt></li>
<li><tt class="docutils literal"><span class="pre">$argArr</span></tt></li>
<li><tt class="docutils literal"><span class="pre">$cx</span></tt></li>
</ul>
<p>As a special exception you may use variable names like <tt class="docutils literal"><span class="pre">$i</span></tt>, <tt class="docutils literal"><span class="pre">$j</span></tt> and <tt class="docutils literal"><span class="pre">$k</span></tt> for
numeric indexes in <tt class="docutils literal"><span class="pre">for</span></tt> loops if it&#8217;s clear what they mean on the first sight. But even
then you should want to avoid them.</p>
</div>
<div class="section" id="constant-names">
<h3>Constant names</h3>
<p>All constant names are written in <tt class="docutils literal"><span class="pre">UPPERCASE</span></tt>. This includes <tt class="docutils literal"><span class="pre">TRUE</span></tt>, <tt class="docutils literal"><span class="pre">FALSE</span></tt> and
<tt class="docutils literal"><span class="pre">NULL</span></tt>. Words can be separated by underscores - you can also use the underscore to group
constants thematically:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">STUFF_LEVEL</span></tt></li>
<li><tt class="docutils literal"><span class="pre">COOLNESS_FACTOR</span></tt></li>
<li><tt class="docutils literal"><span class="pre">PATTERN_MATCH_EMAILADDRESS</span></tt></li>
<li><tt class="docutils literal"><span class="pre">PATTERN_MATCH_VALIDHTMLTAGS</span></tt></li>
</ul>
<p>It is, by the way, a good idea to use constants for defining regular expression patterns
(as seen above) instead of defining them somewhere in your code.</p>
</div>
<div class="section" id="filenames">
<h3>Filenames</h3>
<p>These are the rules for naming files:</p>
<ul class="simple">
<li>All filenames are <tt class="docutils literal"><span class="pre">UpperCamelCase</span></tt>.</li>
<li>Class and interface files are named according to the class or interface they represent</li>
<li>Each file must contain only one class or interface</li>
<li>Names of files containing code for unit tests must be the same as the class which is
tested, appended with &#8220;Test.php&#8221;.</li>
<li>Files are placed in a directory structure representing the namespace structure.</li>
</ul>
<p>File naming in TYPO3 Flow</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">TYPO3.TemplateEngine/Classes/TYPO3/TemplateEngine/TemplateEngineInterface.php</span></tt></dt>
<dd>Contains the interface <tt class="docutils literal"><span class="pre">\TYPO3\TemplateEngine\TemplateEngineInterface</span></tt> which is part
of the package TYPO3.TemplateEngine</dd>
<dt><tt class="docutils literal"><span class="pre">TYPO3.Flow/Classes/TYPO3/Flow/Error/RuntimeException.php</span></tt></dt>
<dd>Contains the <tt class="docutils literal"><span class="pre">\TYPO3\Flow\Error\RuntimeException</span></tt> being a part of the package
TYPO3.Flow</dd>
<dt><tt class="docutils literal"><span class="pre">Acme.DataAccess/Classes/Acme/DataAccess/CustomQuery.php</span></tt></dt>
<dd>Contains class <tt class="docutils literal"><span class="pre">\Acme\DataAccess\CustomQuery</span></tt> which is part of the package
Acme.DataAccess</dd>
<dt><tt class="docutils literal"><span class="pre">TYPO3.Flow/Tests/Unit/Package/PackageManagerTest.php</span></tt></dt>
<dd>Contains the class <tt class="docutils literal"><span class="pre">\TYPO3\Flow\\Tests\Unit\Package\PackageManagerTest</span></tt> which
is a PHPUnit testcase for <tt class="docutils literal"><span class="pre">Package\PackageManager</span></tt>.</dd>
</dl>
</div>
</div>
<div class="section" id="php-code-formatting">
<h2>PHP code formatting</h2>
<div class="section" id="strings">
<h3>Strings</h3>
<p>In general, we use single quotes to enclose literal strings:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$vision</span> <span class="o">=</span> <span class="s1">&#39;Inspiring people to share&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>If you&#8217;d like to insert values from variables, concatenate strings:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$message</span> <span class="o">=</span> <span class="s1">&#39;Hey &#39;</span> <span class="o">.</span> <span class="nv">$name</span> <span class="o">.</span> <span class="s1">&#39;, you look &#39;</span> <span class="o">.</span> <span class="nv">$appearance</span> <span class="o">.</span> <span class="s1">&#39; today!&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>A space must be inserted before and after the dot for better readability:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$vision</span> <span class="o">=</span> <span class="s1">&#39;Inspiring people &#39;</span> <span class="o">.</span> <span class="s1">&#39;to share.&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>You may break a string into multiple lines if you use the dot operator. You&#8217;ll have to
indent each following line to mark them as part of the value assignment:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$vision</span> <span class="o">=</span> <span class="s1">&#39;Inspiring&#39;</span> <span class="o">.</span>
  <span class="s1">&#39;people &#39;</span> <span class="o">.</span>
  <span class="s1">&#39;to &#39;</span> <span class="o">.</span>
  <span class="s1">&#39;share&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>You should also consider using a PHP function such as <cite>sprintf()</cite> to concatenate strings to increase readability:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$message</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;Hey %s, you look %s today!&#39;</span><span class="p">,</span> <span class="nv">$name</span><span class="p">,</span> <span class="nv">$appearance</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="arrays">
<h3>Arrays</h3>
</div>
<div class="section" id="classes">
<h3>Classes</h3>
</div>
<div class="section" id="functions-and-methods">
<h3>Functions and methods</h3>
</div>
<div class="section" id="if-statements">
<h3>if statements</h3>
<ul class="simple">
<li>There needs to be one space between the <tt class="docutils literal"><span class="pre">if</span></tt> keyword and the opening brace &#8220;(&#8221; of the
test expression</li>
<li>After the closing brace &#8221;)&#8221; of the test expression follows one space before the curly
brace &#8220;{&#8220;</li>
<li><tt class="docutils literal"><span class="pre">else</span></tt> and <tt class="docutils literal"><span class="pre">elseif</span></tt> are on the same line as their corresponding curly braces</li>
</ul>
<p>if statements:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nv">$something</span> <span class="o">||</span> <span class="nv">$somethingElse</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">doThis</span><span class="p">();</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">doSomethingElse</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">weHaveALotOfCriteria</span><span class="p">()</span> <span class="o">===</span> <span class="k">TRUE</span>
  <span class="o">&amp;&amp;</span> <span class="nx">notEverythingFitsIntoOneLine</span><span class="p">()</span> <span class="o">===</span> <span class="k">TRUE</span>
  <span class="o">||</span> <span class="nx">youJustTendToLikeIt</span><span class="p">()</span> <span class="o">===</span> <span class="k">TRUE</span><span class="p">)</span> <span class="p">{</span>
     <span class="nx">doThis</span><span class="p">();</span>

<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="switch-statements">
<h3>switch statements</h3>
<ul class="simple">
<li>There needs to be one space between the <tt class="docutils literal"><span class="pre">switch</span></tt> keyword and the opening brace &#8220;(&#8221; of the
test expression</li>
<li>After the closing brace &#8221;)&#8221; of the test expression follows one space before the curly
brace &#8220;{&#8220;</li>
<li><tt class="docutils literal"><span class="pre">break</span></tt> is indented to the same level as <tt class="docutils literal"><span class="pre">case</span></tt> keywords</li>
</ul>
<p>switch statements:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">switch</span> <span class="p">(</span><span class="nv">$something</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">case</span> <span class="nx">FOO</span><span class="o">:</span>
     <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">handleFoo</span><span class="p">();</span>
  <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="nx">BAR</span><span class="o">:</span>
     <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">handleBar</span><span class="p">();</span>
  <span class="k">break</span><span class="p">;</span>
  <span class="k">default</span><span class="o">:</span>
     <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">handleDefault</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="development-process">
<h2>Development Process</h2>
<div class="section" id="test-driven-development">
<h3>Test-Driven Development</h3>
<p>In a nutshell: before coding a feature or fixing a bug, write an unit test.</p>
<p>Whatever you do: before committing changes to the repository, run all unit tests to make
sure nothing is broken!</p>
</div>
<div class="section" id="commit-messages">
<h3>Commit Messages</h3>
<p>To have a clear and focused history of code changes is greatly helped by using a
consistent way of writing commit messages. Because of this and to help with (partly)
automated generation of change logs for each release we have defined a fixed syntax for
commit messages that is to be used.</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Never commit without a commit message explaining the commit!</p>
</div>
<p>The syntax is as follows:</p>
<ul>
<li><p class="first">Start with one of the following codes:</p>
<dl class="docutils">
<dt>[FEATURE]</dt>
<dd><p class="first last">A feature change. Most likely it will be an added feature, but it could also be removed. For additions there should
be a corresponding ticket in the issue tracker.</p>
</dd>
<dt>[BUGFIX]</dt>
<dd><p class="first last">A fix for a bug. There should be a ticket corresponding to this in the issue tracker as well as a new) unit test for
the fix.</p>
</dd>
<dt>[SECURITY]</dt>
<dd><p class="first last">A security related change. Those must only be committed by active contributors in agreement with the
<a class="reference external" href="http://typo3.org/teams/security/">TYPO3 Security Team</a>.</p>
</dd>
<dt>[TASK]</dt>
<dd><p class="first last">Anything not covered by the above categories, e.g. coding style cleanup or documentation changes. Usually only used
if there&#8217;s no corresponding ticket.</p>
</dd>
</dl>
<p>Except for [SECURITY] each of the above codes can be prefixed with [WIP] to mark a change <strong>work in progress</strong>. This
means that it is not yet ready for a final review. The [WIP] Prefix must be removed before a change is merged.</p>
</li>
<li><p class="first">The code is followed by a short summary in the same line, no full stop at the end.
If the change affects the public API or is likely to break things on the user side, start the line with <strong>[!!!]</strong>.
This indicates a breaking change that needs human action when updating. Make sure to explain why a change is breaking
and in what circumstances.</p>
</li>
<li><p class="first">Then follows (after a blank line) a custom message explaining what was done. It should
be written in a style that serves well for a change log read by users.</p>
</li>
<li><p class="first">If there is more to say about a change add a new paragraph with background information below.
In case of breaking changes give a hint on what needs to be changed by the user.</p>
</li>
<li><p class="first">If corresponding tickets exist, mention the ticket number(s) using footer lines after
another blank line and use the following actions:</p>
<dl class="docutils">
<dt>Fixes: #&lt;number&gt;</dt>
<dd><p class="first last">If the change fixes a bug.</p>
</dd>
<dt>Resolves: #&lt;number&gt;</dt>
<dd><p class="first last">If the change resolves a feature request or task.</p>
</dd>
<dt>Related: #&lt;number&gt;</dt>
<dd><p class="first last">If the change relates to an issue but does not resolve or fix it.</p>
</dd>
</dl>
</li>
<li><p class="first">Fixes may be targeted at not only the master branch (i.e. the next major/point release),
but also for a point release in an older branch. Thus a <tt class="docutils literal"><span class="pre">Releases</span></tt> footer must address
the target branches.</p>
</li>
</ul>
<p>A commit messages following the rules...:</p>
<div class="highlight-text"><div class="highlight"><pre>[TASK] Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Write your commit message in the present tense: &quot;Fix bug&quot; and not &quot;Fixed
bug.&quot;  This convention matches up with commit messages generated by
commands like git merge and git revert.

Code snippets::

 should be written in
 ReStructuredText compatible
 format for better highlighting

Further paragraphs come after blank lines.

* Bullet points are okay, too
* An asterisk is used for the bullet, it can be preceded by a single
  space. This format is rendered correctly by Forge (redmine)
* Use a hanging indent

Resolves: #123
Resolves: #456
Related: #789
Releases: master, 1.1, 1.0
</pre></div>
</div>
<p>Examples of good and bad subject lines:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Introduce</span> <span class="nx">xyz</span> <span class="nx">service</span>                             <span class="c1">// BAD, missing code prefix</span>
<span class="p">[</span><span class="nx">BUGFIX</span><span class="p">]</span> <span class="nx">Fixed</span> <span class="nx">bug</span> <span class="nx">xyz</span>                            <span class="c1">// BAD, subject should be written in present tense</span>
<span class="p">[</span><span class="nx">WIP</span><span class="p">][</span><span class="o">!!!</span><span class="p">][</span><span class="nx">TASK</span><span class="p">]</span> <span class="nx">A</span> <span class="nx">breaking</span> <span class="nx">change</span>                <span class="c1">// BAD, subject has to start with [!!!] for breaking changes</span>
<span class="p">[</span><span class="nx">BUGFIX</span><span class="p">]</span> <span class="nx">SessionManager</span> <span class="nx">removes</span> <span class="nx">expired</span> <span class="nx">sessions</span>  <span class="c1">// GOOD, the line explains what the change does, not what the</span>
                                                     <span class="nx">bug</span> <span class="nx">is</span> <span class="nx">about</span> <span class="p">(</span><span class="k">this</span> <span class="nx">should</span> <span class="nx">be</span> <span class="nx">explained</span> <span class="nx">in</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">lines</span>
                                                     <span class="k">and</span> <span class="nx">in</span> <span class="nx">the</span> <span class="nx">related</span> <span class="nx">bug</span> <span class="nx">tracker</span> <span class="nx">ticket</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="source-code-documentation">
<h3>Source Code Documentation</h3>
<p>All code must be documented with inline comments. The syntax is similar to that known from
the Java programming language (JavaDoc). This way code documentation can automatically be
generated using <a class="reference external" href="http://pear.php.net/package/PHP_UML">PHP_UML</a>.</p>
</div>
<div class="section" id="documentation-blocks">
<h3>Documentation Blocks</h3>
<p>A file contains different documentation blocks, relating to the class in the file and the
members of the class. A documentation block is always used for the entity it precedes.</p>
</div>
<div class="section" id="class-documentation">
<h3>Class documentation</h3>
<p>Classes have their own documentation block describing the classes purpose.</p>
<p>Standard documentation block:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * First sentence is short description. Then you can write more, just as you like</span>
<span class="sd"> *</span>
<span class="sd"> * Here may follow some detailed description about what the class is for.</span>
<span class="sd"> *</span>
<span class="sd"> * Paragraphs are separated by an empty line.</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>
 <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Additional tags or annotations, such as <tt class="docutils literal"><span class="pre">&#64;see</span></tt> or <tt class="docutils literal"><span class="pre">&#64;Flow\Aspect</span></tt>, can be added as needed.</p>
</div>
<div class="section" id="documenting-variables-constants-includes">
<h3>Documenting variables, constants, includes</h3>
<p>Properties of a class should be documented as well. We use the short version for
documenting them.</p>
<p>Standard variable documentation block:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A short description, very much recommended</span>
<span class="sd"> *</span>
<span class="sd"> * @var string</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="nv">$title</span> <span class="o">=</span> <span class="s1">&#39;Untitled&#39;</span><span class="p">;</span>
</pre></div>
</div>
<p>In general you should try to code in a way that the types can be derived (e.g. by using type hints and annotations).
In some cases this is not possible, for example when iterating through an array of objects. In these cases it’s ok to
add inline &#64;var annotations to increase readability and to activate auto-completion and syntax-highlighting:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">protected</span> <span class="k">function</span> <span class="nf">someMethod</span><span class="p">(</span><span class="k">array</span> <span class="nv">$products</span><span class="p">)</span> <span class="p">{</span>
       <span class="sd">/** @var $product \Acme\SomePackage\Domain\Model\Product */</span>
       <span class="k">foreach</span> <span class="p">(</span><span class="nv">$products</span> <span class="k">as</span> <span class="nv">$product</span><span class="p">)</span> <span class="p">{</span>
               <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">getTitle</span><span class="p">();</span>
       <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="method-documentation">
<h3>Method documentation</h3>
<p>For a method, at least all parameters and the return value must be documented. The
<tt class="docutils literal"><span class="pre">&#64;access</span></tt> tag must not be used as it makes no sense (we&#8217;re using PHP 5 for a reason,
don&#8217;t we?)</p>
<p>Standard method documentation block:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * A description for this method</span>
<span class="sd"> *</span>
<span class="sd"> * Paragraphs are separated by an empty line.</span>
<span class="sd"> *</span>
<span class="sd"> * @param \TYPO3\Blog\Domain\Model\Post $post A post</span>
<span class="sd"> * @param string $someString This parameter should contain some string</span>
<span class="sd"> * @return void</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">addStringToPost</span><span class="p">(</span><span class="nx">\TYPO3\Blog\Domain\Model\Post</span> <span class="nv">$post</span><span class="p">,</span> <span class="nv">$someString</span><span class="p">)</span> <span class="p">{</span>
 <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>A special note about the <tt class="docutils literal"><span class="pre">&#64;param</span></tt> tags: The parameter type and name are separated by one
space, not aligned. Do not put a colon after the parameter name. Always document the
return type, even if it is void - that way it is clearly visible it hasn&#8217;t just been
forgotten (only constructors never have a <tt class="docutils literal"><span class="pre">&#64;return</span></tt> annotation!).</p>
</div>
<div class="section" id="testcase-documentation">
<h3>Testcase documentation</h3>
<p>Testcases need to be marked as being a test and can have some more annotations.</p>
<p>Standard testcase documentation block:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">fooReturnsBarForQuux</span><span class="p">()</span> <span class="p">{</span>
 <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="defining-the-public-api">
<h3>Defining the Public API</h3>
<p>Not all methods with a public visibility are necessarily part of the intended public API
of a project. For TYPO3 Flow, only the methods explicitly defined as part of the public API
will be kept stable and are intended for use by developers using TYPO3 Flow. Also the API
documentation we produce will only cover the public API.</p>
<p>To mark a method as part of the public API, include an <tt class="docutils literal"><span class="pre">&#64;api</span></tt> annotation for it in the
docblock.</p>
<p>Defining the public API:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * This method is part of the public API.</span>
<span class="sd"> *</span>
<span class="sd"> * @return void</span>
<span class="sd"> * @api</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">fooBar</span><span class="p">()</span> <span class="p">{</span>
 <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">When something in a class or an interface is annotated with <tt class="docutils literal"><span class="pre">&#64;api</span></tt> make sure to also
annotate the class or interface itself! Otherwise it will be ignored completely when
official API documentation is rendered!</p>
</div>
</div>
<div class="section" id="overview-of-documentation-annotations">
<h3>Overview of Documentation Annotations</h3>
<p>There are not only documentation annotations that can be used. In TYPO3 Flow annotations are
also used in the MVC component, for defining aspects and advices for the AOP framework as
well as for giving instructions to the Persistence framework. See the individual chapters
for information on their purpose and use.</p>
<p>Here is a list of annotations used within the project. They are grouped by use case and
the order given here should be kept for the sake of consistency.</p>
<p>Interface Documentation</p>
<ul class="simple">
<li>&#64;api</li>
<li>&#64;since</li>
<li>&#64;deprecated</li>
</ul>
<p>Class Documentation</p>
<ul class="simple">
<li>&#64;FlowIntroduce</li>
<li>&#64;FlowEntity</li>
<li>&#64;FlowValueObject</li>
<li>&#64;FlowScope</li>
<li>&#64;FlowAutowiring</li>
<li>&#64;FlowLazy</li>
<li>&#64;FlowAspect</li>
<li>&#64;api</li>
<li>&#64;since</li>
<li>&#64;deprecated</li>
</ul>
<p>Property Documentation</p>
<ul class="simple">
<li>&#64;FlowIntroduce</li>
<li>&#64;FlowIdentity</li>
<li>&#64;FlowTransient</li>
<li>&#64;FlowLazy</li>
<li>&#64;FlowInject</li>
<li>&#64;FlowValidate</li>
<li>&#64;var</li>
<li>&#64;api</li>
<li>&#64;since</li>
<li>&#64;deprecated</li>
</ul>
<p>Constructor Documentation</p>
<ul class="simple">
<li>&#64;param</li>
<li>&#64;throws</li>
<li>&#64;api</li>
<li>&#64;since</li>
<li>&#64;deprecated</li>
</ul>
<p>Method Documentation</p>
<ul class="simple">
<li>&#64;FlowAfter</li>
<li>&#64;FlowAfterReturning</li>
<li>&#64;FlowAfterThrowing</li>
<li>&#64;FlowAround</li>
<li>&#64;FlowBefore</li>
<li>&#64;FlowPointcut</li>
<li>&#64;FlowAutowiring</li>
<li>&#64;FlowCompileStatic</li>
<li>&#64;FlowFlushesCaches</li>
<li>&#64;FlowInternal</li>
<li>&#64;FlowSession</li>
<li>&#64;FlowSignal</li>
<li>&#64;FlowIgnoreValidation</li>
<li>&#64;FlowSkipCsrfProtection</li>
<li>&#64;FlowValidate</li>
<li>&#64;FlowValidationGroups</li>
<li>&#64;param</li>
<li>&#64;return</li>
<li>&#64;throws</li>
<li>&#64;api</li>
<li>&#64;since</li>
<li>&#64;deprecated</li>
</ul>
<p>Testcase Documentation</p>
<ul class="simple">
<li>&#64;test</li>
<li>&#64;dataProvider</li>
<li>&#64;expectedException</li>
</ul>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Additional annotations (more or less only the <tt class="docutils literal"><span class="pre">&#64;todo</span></tt> and <tt class="docutils literal"><span class="pre">&#64;see</span></tt> come to mind here),
should be placed after all other annotations.</p>
</div>
</div>
</div>
<div class="section" id="best-practices">
<h2>Best Practices</h2>
<div class="section" id="typo3-flow">
<h3>TYPO3 Flow</h3>
<p>This section gives you an overview of TYPO3 Flow&#8217;s coding rules and best practices.</p>
</div>
<div class="section" id="error-handling-and-exceptions">
<h3>Error Handling and Exceptions</h3>
<p>TYPO3 Flow makes use of a hierarchy for its exception classes. The general rule is to throw
preferably specific exceptions and usually let them bubble up until a place where more
general exceptions are caught. Consider the following example:</p>
<p>Some method tried to retrieve an object from the object manager. However, instead of
providing a string containing the object name, the method passed an object (of course not
on purpose - something went wrong). The object manager now throws an <tt class="docutils literal"><span class="pre">InvalidObjectName</span></tt>
exception. In order to catch this exception you can, of course, catch it specifically - or
only consider a more general <tt class="docutils literal"><span class="pre">Object</span></tt> exception (or an even more general <tt class="docutils literal"><span class="pre">Flow</span></tt>
exception). This all works because we have the following hierarchy:</p>
<div class="highlight-text"><div class="highlight"><pre>+ \TYPO3\Flow\Exception
+ \TYPO3\Flow\Object\Exception
+ \TYPO3\Flow\Object\Exception\InvalidObjectNameException
</pre></div>
</div>
</div>
<div class="section" id="throwing-an-exception">
<h3>Throwing an exception</h3>
<p>When throwing an exception, make sure to provide a clear error message and an <em>error code
being the unix timestamp of when you write the ``throw`` statement</em>. That error code must
be unique, so watch out when doing copy and paste!</p>
<p>For every exception there should be a page on the TYPO3 wiki, as exception messages link
to that page, identified by the error code (unix timestamp).</p>
</div>
<div class="section" id="unit-testing">
<h3>Unit Testing</h3>
<p>Some notes for a start:</p>
<ul class="simple">
<li>Never use the object manager or factory in unit tests! If they are needed, mock them.</li>
<li>Avoid tests for the scope of an object. Those tests test the object factory, rather then
the test target. Such a test should be done by checking for the presence of an expected
&#64;scope annotation – eventually we will find an elegant way for this.</li>
</ul>
</div>
<div class="section" id="cross-platform-coding">
<h3>Cross Platform Coding</h3>
<ul class="simple">
<li>When concatenating paths, always use
<tt class="docutils literal"><span class="pre">\TYPO3\Flow\Utility\Files::concatenatePaths()</span></tt> to avoid trouble.</li>
</ul>
</div>
<div class="section" id="php-in-general">
<h3>PHP in General</h3>
<ul>
<li><p class="first">All code should be object oriented. This means there should be no functions outside
classes if not absolutely necessary. If you need a &#8220;container&#8221; for some helper methods,
consider creating a static class.</p>
</li>
<li><p class="first">All code must make use of PHP5 advanced features for object oriented programming.</p>
<ul class="simple">
<li>Use <a class="reference external" href="http://www.php.net/manual/language.namespaces.php">PHP namespaces</a></li>
<li>Always declare the scope (public, protected, private) of methods and member variables</li>
<li>Make use of iterators and exceptions, have a look at the <a class="reference external" href="http://www.php.net/manual/ref.spl.php">SPL</a></li>
</ul>
</li>
<li><p class="first">Make use of <a class="reference external" href="http://www.php.net/manual/language.oop5.typehinting.php">type-hinting</a> wherever possible</p>
</li>
<li><p class="first">Always use <tt class="docutils literal"><span class="pre">&lt;?php</span></tt> as opening tags (never only <tt class="docutils literal"><span class="pre">&lt;?</span></tt>)</p>
</li>
<li><p class="first">Never use the closing tag <tt class="docutils literal"><span class="pre">?&gt;</span></tt> at the end of a file, leave it out</p>
</li>
<li><p class="first">Never use the shut-up operator <tt class="docutils literal"><span class="pre">&#64;</span></tt> to suppress error messages. It makes debugging
harder, is dirty style and slow as hell</p>
</li>
<li><p class="first">Prefer strict comparisons whenever possible, to avoid problems with truthy and falsy
values that might behave different than what you expect. Here are some examples:</p>
<p>Examples of good and bad comparisons:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nv">$template</span><span class="p">)</span>             <span class="c1">// BAD</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$template</span><span class="p">))</span>      <span class="c1">// GOOD</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$template</span> <span class="o">!==</span> <span class="k">NULL</span><span class="p">))</span>   <span class="c1">// GOOD</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$template</span> <span class="o">!==</span> <span class="s1">&#39;&#39;</span><span class="p">))</span>     <span class="c1">// GOOD</span>

<span class="k">if</span> <span class="p">(</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$template</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// BAD! strlen(&quot;-1&quot;) is greater than 0</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$template</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$template</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// BETTER</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$foo</span> <span class="o">==</span> <span class="nv">$bar</span><span class="p">)</span>          <span class="c1">// BAD, avoid truthy comparisons</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$foo</span> <span class="o">!=</span> <span class="nv">$bar</span><span class="p">)</span>          <span class="c1">// BAD, avoid falsy comparisons</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$foo</span> <span class="o">===</span> <span class="nv">$bar</span><span class="p">))</span>        <span class="c1">// GOOD</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$foo</span> <span class="o">!==</span> <span class="nv">$bar</span><span class="p">))</span>        <span class="c1">// GOOD</span>
</pre></div>
</div>
<div class="figure">
<img alt="Truthy and falsy are fuzzy..." src="_Resources/Persistent/9f3d9d2397b47c80346d14b19c7bc02ade2cbf45/PHP-TrueFalse.jpg" style="width: 250px" />
<p class="caption">Truthy and falsy are fuzzy...</p>
</div>
</li>
<li><p class="first">Order of methods in classes. To gain a better overview, it helps if methods in classes
are always ordered in a certain way. We prefer the following:</p>
<ul class="simple">
<li>constructor</li>
<li>injection methods</li>
<li>initialization methods (including <tt class="docutils literal"><span class="pre">initializeObject()</span></tt>)</li>
<li>public methods</li>
<li>protected methods</li>
<li>private methods</li>
<li>shutdown methods</li>
<li>destructor</li>
</ul>
</li>
<li><p class="first">Avoid double-negation. Instead of <tt class="docutils literal"><span class="pre">exportSystemView(...,</span> <span class="pre">$noRecurse)</span></tt> use
<tt class="docutils literal"><span class="pre">exportSystemView(...,</span> <span class="pre">$recurse)</span></tt>. It is more logical to pass <tt class="docutils literal"><span class="pre">TRUE</span></tt> if you want
recursion instead of having to pass <tt class="docutils literal"><span class="pre">FALSE</span></tt>. In general, parameters negating things
are a bad idea.</p>
</li>
</ul>
</div>
<div class="section" id="comments">
<h3>Comments</h3>
<p>In general, comments are a good thing and we strive for creating a well-documented source
code. However, inline comments can often be a sign for a bad code structure or method
naming. <a class="footnote-reference" href="#id2" id="id1">[1]</a> As an example, consider the example for a coding smell:</p>
<div class="highlight-php"><div class="highlight"><pre> <span class="c1">// We only allow valid persons</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">is_object</span><span class="p">(</span><span class="nv">$p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$p</span><span class="o">-&gt;</span><span class="na">lastN</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$p</span><span class="o">-&gt;</span><span class="na">hidden</span> <span class="o">===</span> <span class="k">FALSE</span> <span class="o">&amp;&amp;</span> <span class="err">⏎</span>
 <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">environment</span><span class="o">-&gt;</span><span class="na">moonPhase</span> <span class="o">===</span> <span class="nx">MOON_LIB</span><span class="o">::</span><span class="na">CRESCENT</span><span class="p">)</span> <span class="p">{</span>
 <span class="nv">$xmM</span> <span class="o">=</span> <span class="nv">$thd</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>This is a perfect case for the refactoring technique &#8220;extract method&#8221;: In order to avoid
the comment, create a new method which is as explanatory as the comment:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isValidPerson</span><span class="p">(</span><span class="nv">$person</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">$xmM</span> <span class="o">=</span> <span class="nv">$thd</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Bottom line is: You may (and are encouraged to) use inline comments if they support the
readability of your code. But always be aware of possible design flaws you probably try to
hide with them.</p>
<hr class="docutils" />
<table class="docutils footnote" frame="void" id="id2" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>This is also referred to as a bad &#8220;smell&#8221; in the theory of Refactoring. We highly recommend reading &#8220;Refactoring&#8221; by Martin Fowler - if you didn&#8217;t already.</td></tr>
</tbody>
</table>
</div>
</div>
</div>
]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="a2802aed-e21a-fc0e-3f25-13e2d0293ed1" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     </node>
     <node identifier="083a9daa-d33c-52d6-4ae2-76deeac042ff" type="TYPO3.DocsTypo3Org:DocumentationPage" nodeName="javascript" locale="">
      <properties>
       <title>JavaScript Coding Guidelines</title>
      </properties>
      <node identifier="5e5aa92d-f8e9-5cbc-85dd-53dc4dd9b3bb" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
       <node identifier="47e75cbb-61df-08b5-abfd-c747db539966" type="TYPO3.Neos.NodeTypes:Text" nodeName="text1" locale="">
        <properties>
         <text><![CDATA[<div class="section" id="javascript-coding-guidelines">
<h1>JavaScript Coding Guidelines</h1>
<p>Here, you will find an explanation of the JavaScript Coding Guidelines we use.
Generally, we strive to follow the TYPO3 Flow Coding Guidelines as closely as
possible, with exceptions which make sense in the JavaScript context.</p>
<p>This guideline explains mostly how we want JavaScript code to be formatted;
and it does <strong>not</strong> deal with the TYPO3 Neos User
Interface structure. If you want to know more about the TYPO3 Neos User
Interface architecture, have a look into the &#8220;Neos User Interface
Development&#8221; book.</p>
<div class="section" id="naming-conventions">
<h2>Naming Conventions</h2>
<ul>
<li><p class="first">one class per file, with the same naming convention as TYPO3 Flow.</p>
</li>
<li><p class="first">This means all classes are built like this:
<tt class="docutils literal"><span class="pre">&lt;PackageKey&gt;.&lt;SubNamespace&gt;.&lt;ClassName&gt;</span></tt>, and this class is
implemented in a JavaScript file located at
<tt class="docutils literal"><span class="pre">&lt;Package&gt;/.../JavaScript/&lt;SubNamespace&gt;/&lt;ClassName&gt;.js</span></tt></p>
</li>
<li><p class="first">Right now, the base directory for JavaScript in TYPO3 Flow packages
<tt class="docutils literal"><span class="pre">Resources/Public/JavaScript</span></tt>, but this might still change.</p>
</li>
<li><p class="first">We suggest that the base directory for JavaScript files is JavaScript.</p>
</li>
<li><p class="first">Files have to be encoded in UTF-8 without byte order mark (BOM).</p>
</li>
<li><p class="first">Classes and namespaces are written in <tt class="docutils literal"><span class="pre">UpperCamelCase</span></tt>, while properties and methods
are written in <tt class="docutils literal"><span class="pre">lowerCamelCase</span></tt>.</p>
</li>
<li><p class="first">The xtype of a class is always the fully qualified class name. Every class which can be
instantiated needs to have an xtype declaration.</p>
</li>
<li><p class="first">Never create a class which has classes inside itself. Example: if the class
<tt class="docutils literal"><span class="pre">TYPO3.Foo</span></tt> exists, it is prohibited to create a class <tt class="docutils literal"><span class="pre">TYPO3.Foo.Bar</span></tt>.You can
easily check this: If a directory with the same name as the JavaScript file exists, this
is prohibited.</p>
<p>Here follows an example:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Foo</span><span class="o">.</span><span class="nx">Bar</span> <span class="c1">// implemented in .../Foo/Bar.js</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Foo</span><span class="o">.</span><span class="nx">Bar</span> <span class="o">=</span> <span class="o">...</span>

<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Foo</span> <span class="c1">// implemented in ...Foo.js</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Foo</span> <span class="o">=</span> <span class="o">.....</span> <span class="o">**</span><span class="nx">overriding</span> <span class="nx">the</span> <span class="s2">&quot;Bar&quot;</span> <span class="nx">class</span><span class="o">**</span>
</pre></div>
</div>
<p>So, if the class <tt class="docutils literal"><span class="pre">TYPO3.Foo.Bar</span></tt> is included <strong>before</strong> <tt class="docutils literal"><span class="pre">TYPO3.Foo</span></tt>, then
the second class definition completely overrides the <tt class="docutils literal"><span class="pre">Bar</span></tt> object. In order
to prevent such issues, this constellation is forbidden.</p>
</li>
<li><p class="first">Every class, method and class property should have a doc comment.</p>
</li>
<li><p class="first">Private methods and properties should start with an underscore (<tt class="docutils literal"><span class="pre">_</span></tt>)
and have a <tt class="docutils literal"><span class="pre">&#64;private</span></tt> annotation.</p>
</li>
</ul>
</div>
<div class="section" id="doc-comments">
<h2>Doc Comments</h2>
<p>Generally, doc comments follow the following form:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> *</span>
<span class="sd"> */</span>
</pre></div>
</div>
<p>See the sections below on which doc comments are available for the different
elements (classes, methods, ...).</p>
<p>We are using <a class="reference external" href="http://code.google.com/p/ext-doc/">http://code.google.com/p/ext-doc/</a> for rendering an API
documentation from the code, that&#8217;s why types inside <tt class="docutils literal"><span class="pre">&#64;param</span></tt>, <tt class="docutils literal"><span class="pre">&#64;type</span></tt> and
<tt class="docutils literal"><span class="pre">&#64;cfg</span></tt> have to be written in braces like this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">@</span><span class="nx">param</span> <span class="p">{</span><span class="nx">String</span><span class="p">}</span> <span class="nx">theFirstParameter</span> <span class="nx">A</span> <span class="nx">Description</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">first</span> <span class="nx">parameter</span>
<span class="o">@</span><span class="nx">param</span> <span class="p">{</span><span class="nx">My</span><span class="o">.</span><span class="nx">Class</span><span class="o">.</span><span class="nx">Name</span><span class="p">}</span> <span class="nx">theSecondParameter</span> <span class="nx">A</span> <span class="nx">description</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">second</span> <span class="nx">parameter</span>
</pre></div>
</div>
<p>Generally, we do not use <tt class="docutils literal"><span class="pre">&#64;api</span></tt> annotations, as private methods and attributes
are marked with <tt class="docutils literal"><span class="pre">&#64;private</span></tt> and prefixed with an underscore. So, <strong>everything
which is not marked as private belongs to the public API!</strong></p>
<p>We are not sure yet if we should use <tt class="docutils literal"><span class="pre">&#64;author</span></tt> annotations at all. (TODO Decide!)</p>
<p>To make a reference to another method of a class, use the
<tt class="docutils literal"><span class="pre">{&#64;link</span> <span class="pre">#methodOne</span> <span class="pre">This</span> <span class="pre">is</span> <span class="pre">an</span> <span class="pre">example</span> <span class="pre">link</span> <span class="pre">to</span> <span class="pre">method</span> <span class="pre">one}</span></tt> syntax.</p>
<p>If you want to do multi-line doc comments, you need to format them with <tt class="docutils literal"><span class="pre">&lt;br&gt;</span></tt>,
<tt class="docutils literal"><span class="pre">&lt;pre&gt;</span></tt> and other HTML tags:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * Description of the class. Make it as long as needed,</span>
<span class="sd"> * feel free to explain how to use it.</span>
<span class="sd"> * This is a sample class &lt;br/&gt;</span>
<span class="sd"> * The file encoding should be utf-8 &lt;br/&gt;</span>
<span class="sd"> * UTF-8 Check: öäüß &lt;br/&gt;</span>
<span class="sd"> * {@link #methodOne This is an example link to method one}</span>
<span class="sd"> */</span>
</pre></div>
</div>
</div>
<div class="section" id="class-definitions">
<h2>Class Definitions</h2>
<p>Classes can be declared singleton or prototype. A class is <strong>singleton</strong>, if
only one instance of this class will exist at any given time. An class is of
type <strong>prototype</strong>, if more than one object can be created from the class at
run-time. Most classes will be of type <strong>prototype</strong>.</p>
<p>You will find examples for both below.</p>
<div class="section" id="prototype-class-definitions">
<h3>Prototype Class Definitions</h3>
<p>Example of a prototype class definition:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Ext</span><span class="o">.</span><span class="nx">ns</span><span class="p">(</span><span class="s2">&quot;TYPO3.TYPO3.Content&quot;</span><span class="p">);</span>

<span class="cm">/*                                                                        *</span>
<span class="cm"> * This script belongs to the TYPO3 Flow package &quot;TYPO3&quot;.                 *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * It is free software; you can redistribute it and/or modify it under    *</span>
<span class="cm"> * the terms of the GNU General Public License as published by the Free   *</span>
<span class="cm"> * Software Foundation, either version 3 of the License, or (at your      *</span>
<span class="cm"> * option) any later version.                                             *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * The TYPO3 project - inspiring people to share!                         *</span>
<span class="cm"> *                                                                        */</span>

<span class="sd">/**</span>
<span class="sd"> * @class TYPO3.TYPO3.Content.FrontendEditor</span>
<span class="sd"> *</span>
<span class="sd"> * The main frontend editor.</span>
<span class="sd"> *</span>
<span class="sd"> * @namespace TYPO3.TYPO3.Content</span>
<span class="sd"> * @extends Ext.Container</span>
<span class="sd"> */</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">FrontendEditor</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Ext</span><span class="o">.</span><span class="nx">Container</span><span class="p">,</span> <span class="p">{</span>
        <span class="c1">// here comes the class contents</span>
<span class="p">});</span>
<span class="nx">Ext</span><span class="o">.</span><span class="nx">reg</span><span class="p">(</span><span class="s1">&#39;TYPO3.TYPO3.Content.FrontendEditor&#39;</span><span class="p">,</span> <span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">FrontendEditor</span><span class="p">);</span>
</pre></div>
</div>
<ul class="simple">
<li>At the very beginning of the file is the namespace declaration of the
class, followed by a newline.</li>
<li>Then follows the class documentation block, which <strong>must</strong> start with
the <tt class="docutils literal"><span class="pre">&#64;class</span></tt> declaration in the first line.</li>
<li>Now comes a description of the class, possibly with examples.</li>
<li>Afterwards <strong>must</strong> follow the namespace of the class and the information about
object extension</li>
<li>Now comes the actual class definition, using <tt class="docutils literal"><span class="pre">Ext.extend</span></tt>.</li>
<li>As the last line of the class, it follows the xType registration. We always use
the fully qualified class name as xtype</li>
</ul>
<p>Usually, the constructor of the class receives a hash of parameters. The possible
configuration options need to be documented inside the class with the <tt class="docutils literal"><span class="pre">&#64;cfg</span></tt>
annotation:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">FrontendEditor</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Ext</span><span class="o">.</span><span class="nx">Container</span><span class="p">,</span> <span class="p">{</span>
        <span class="sd">/**</span>
<span class="sd">         * An explanation of the configuration option followed</span>
<span class="sd">         * by a blank line.</span>
<span class="sd">         *</span>
<span class="sd">         * @cfg {Number} configTwo</span>
<span class="sd">         */</span>
        <span class="nx">configTwo</span><span class="o">:</span> <span class="mi">10</span>
        <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="singleton-class-definitions">
<h3>Singleton Class Definitions</h3>
<p>Now comes a singleton class definition. You will see that it is very similar to a
prototype class definition, we will only highlight the differences.</p>
<p>Example of a singleton class definition:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">Ext</span><span class="o">.</span><span class="nx">ns</span><span class="p">(</span><span class="s2">&quot;TYPO3.TYPO3.Core&quot;</span><span class="p">);</span>

<span class="cm">/*                                                                        *</span>
<span class="cm"> * This script belongs to the TYPO3 Flow package &quot;TYPO3&quot;.                 *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * It is free software; you can redistribute it and/or modify it under    *</span>
<span class="cm"> * the terms of the GNU General Public License as published by the Free   *</span>
<span class="cm"> * Software Foundation, either version 3 of the License, or (at your      *</span>
<span class="cm"> * option) any later version.                                             *</span>
<span class="cm"> *                                                                        *</span>
<span class="cm"> * The TYPO3 project - inspiring people to share!                         *</span>
<span class="cm"> *                                                                        */</span>

<span class="sd">/**</span>
<span class="sd"> * @class TYPO3.TYPO3.Core.Application</span>
<span class="sd"> *</span>
<span class="sd"> * The main entry point which controls the lifecycle of the application.</span>
<span class="sd"> *</span>
<span class="sd"> * @namespace TYPO3.TYPO3.Core</span>
<span class="sd"> * @extends Ext.util.Observable</span>
<span class="sd"> * @singleton</span>
<span class="sd"> */</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Core</span><span class="o">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Observable</span><span class="p">,</span> <span class="p">{</span>
        <span class="c1">// here comes the class contents</span>
<span class="p">});</span>
</pre></div>
</div>
<ul class="simple">
<li>You should add a <tt class="docutils literal"><span class="pre">&#64;singleton</span></tt> annotation to the class doc comment after the
<tt class="docutils literal"><span class="pre">&#64;namespace</span></tt> and <tt class="docutils literal"><span class="pre">&#64;extends</span></tt> annotation</li>
<li>In singleton classes, you use <tt class="docutils literal"><span class="pre">Ext.apply</span></tt>. Note that you need to use <tt class="docutils literal"><span class="pre">new</span></tt> to
instantiate the base class.</li>
<li>There is <strong>no xType</strong> registration in singletons, as they are available globally anyhow.</li>
</ul>
</div>
<div class="section" id="class-doc-comments">
<h3>Class Doc Comments</h3>
<p>Class Doc Comments should always be in the following order:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">&#64;class</span> <span class="pre">&lt;Name.Of.Class&gt;</span></tt> (required)</li>
<li>Then follows a description of the class, which can span multiple lines. Before and after
this description should be a blank line.</li>
<li><tt class="docutils literal"><span class="pre">&#64;namespace</span> <span class="pre">&lt;Name.Of.Namespace&gt;</span></tt> (required)</li>
<li><tt class="docutils literal"><span class="pre">&#64;extends</span> <span class="pre">&lt;Name.Of.BaseClass&gt;</span></tt> (required)</li>
<li><tt class="docutils literal"><span class="pre">&#64;singleton</span></tt> (required if the class is a singleton)</li>
</ul>
<p>If the class has a non-empty constructor, the following doc comments need to be added as
well, after a blank line:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">&#64;constructor</span></tt></li>
<li><tt class="docutils literal"><span class="pre">&#64;param</span> <span class="pre">{&lt;type&gt;}</span> <span class="pre">&lt;nameOfParameter&gt;</span> <span class="pre">&lt;description</span> <span class="pre">of</span> <span class="pre">parameter&gt;</span></tt> for every parameter of
the constructor</li>
</ul>
<p>Example of a class doc comment without constructor:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @class Acme.Foo.Bar</span>
<span class="sd"> *</span>
<span class="sd"> * Some Description of the class,</span>
<span class="sd"> * which can possibly span multiple lines</span>
<span class="sd"> *</span>
<span class="sd"> * @namespace Acme.Foo</span>
<span class="sd"> * @extends TYPO3.TYPO3.Core.SomeOtherClass</span>
<span class="sd"> */</span>
</pre></div>
</div>
<p>Example of a class doc comment with constructor:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="sd">/**</span>
<span class="sd"> * @class Acme.TYPO3.Foo.ClassWithConstructor</span>
<span class="sd"> *</span>
<span class="sd"> * This class has a constructor!</span>
<span class="sd"> *</span>
<span class="sd"> * @namespace Acme.TYPO3.Foo</span>
<span class="sd"> * @extends TYPO3.TYPO3.Core.SomeOtherClass</span>
<span class="sd"> *</span>
<span class="sd"> * @constructor</span>
<span class="sd"> * @param {String} id The ID which to use</span>
<span class="sd"> */</span>
</pre></div>
</div>
</div>
<div class="section" id="method-definitions">
<h3>Method Definitions</h3>
<p>Methods should be documented the following way, with a blank line between methods.</p>
<p>Example of a method comment:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">...</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Core</span><span class="o">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Observable</span><span class="p">,</span> <span class="p">{</span>
        <span class="o">...</span> <span class="nx">property</span> <span class="nx">definitions</span> <span class="o">...</span>
        <span class="sd">/**</span>
<span class="sd">         * This is a method declaration; and the</span>
<span class="sd">         * explanatory text is followed by a newline.</span>
<span class="sd">         *</span>
<span class="sd">         * @param {String} param1 Parameter name</span>
<span class="sd">         * @param {String} param2 (Optional) Optional parameter</span>
<span class="sd">         * @return {Boolean} Return value</span>
<span class="sd">         */</span>
        <span class="nx">aPublicMethod</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">param1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="sd">/**</span>
<span class="sd">         * this is a private method of this class,</span>
<span class="sd">         * the private annotation marks them an prevent that they</span>
<span class="sd">         * are listed in the api doc. As they are private, they</span>
<span class="sd">         * have to start with an underscore as well.</span>
<span class="sd">         *</span>
<span class="sd">         * @return {void}</span>
<span class="sd">         * @private</span>
<span class="sd">         */</span>
        <span class="nx">_sampleMethod</span><span class="o">:</span> <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="o">...</span>
</pre></div>
</div>
<p>Contrary to what is defined in the TYPO3 Flow PHP Coding Guidelines, methods which are public
<strong>automatically belong to the public API</strong>, without an <tt class="docutils literal"><span class="pre">&#64;api</span></tt> annotation. Contrary,
methods which do <strong>not belong to the public API</strong> need to begin with an underscore and
have the <tt class="docutils literal"><span class="pre">&#64;private</span></tt> annotation.</p>
<ul class="simple">
<li>All methods need to have JSDoc annotations.</li>
<li>Every method needs to have a <tt class="docutils literal"><span class="pre">&#64;return</span></tt> annotation. In case the method does not return
anything, a <tt class="docutils literal"><span class="pre">&#64;return</span> <span class="pre">{void}</span></tt> is needed, otherwise the concrete return value should be
described.</li>
</ul>
</div>
<div class="section" id="property-definitions">
<h3>Property Definitions</h3>
<p>All properties of a class need to be properly documented as well, with an <tt class="docutils literal"><span class="pre">&#64;type</span></tt>
annotation. If a property is private, it should start with an underscore and have the
<tt class="docutils literal"><span class="pre">&#64;private</span></tt> annotation at the last line of its doc comment:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="o">...</span>
<span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Core</span><span class="o">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Observable</span><span class="p">,</span> <span class="p">{</span> <span class="c1">// this is just an example class definition</span>
        <span class="sd">/**</span>
<span class="sd">         * Explanation of the property</span>
<span class="sd">         * which is followed by a newline</span>
<span class="sd">         *</span>
<span class="sd">         * @type {String}</span>
<span class="sd">         */</span>
        <span class="nx">propertyOne</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>

        <span class="sd">/**</span>
<span class="sd">         * Now follows a private property</span>
<span class="sd">         * which starts with an underscore.</span>
<span class="sd">         *</span>
<span class="sd">         * @type {Number}</span>
<span class="sd">         * @private</span>
<span class="sd">         */</span>
        <span class="nx">_thePrivateProperty</span><span class="o">:</span> <span class="k">null</span><span class="p">,</span>
        <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="code-style">
<h3>Code Style</h3>
<ul>
<li><p class="first">use single quotes(&#8216;) instead of double quotes(&#8221;) for string quoting</p>
</li>
<li><p class="first">Multi-line strings (using <tt class="docutils literal"><span class="pre">\</span></tt>) are forbidden. Instead, multi-line strings should be
written like this:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="s1">&#39;Some String&#39;</span> <span class="o">+</span>
<span class="s1">&#39; which spans&#39;</span> <span class="o">+</span>
<span class="s1">&#39; multiple lines&#39;</span>
</pre></div>
</div>
</li>
<li><p class="first">There is no limitation on line length.</p>
</li>
<li><p class="first">JavaScript constants (true, false, null) must be written in lowercase, and not uppercase.</p>
</li>
<li><p class="first">Custom JavaScript constants should be avoided.</p>
</li>
<li><p class="first">Use a single <tt class="docutils literal"><span class="pre">var</span></tt> statement at the top of a method to declare all variables:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">myVariable1</span><span class="p">,</span> <span class="nx">myVariable2</span><span class="p">,</span> <span class="nx">someText</span><span class="p">;</span>
        <span class="c1">// now, use myVariable1, ....</span>
<span class="p">}</span>

<span class="nx">Please</span> <span class="k">do</span> <span class="o">**</span><span class="k">not</span> <span class="nx">assign</span><span class="o">**</span> <span class="nx">values</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">variables</span> <span class="nx">in</span> <span class="nx">the</span> <span class="nx">initialization</span><span class="p">,</span> <span class="nx">except</span> <span class="k">empty</span>
<span class="k">default</span> <span class="nx">values</span><span class="o">::</span>

<span class="c1">// DO:</span>
<span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">myVariable1</span><span class="p">,</span> <span class="nx">myVariable2</span><span class="p">;</span>
        <span class="o">...</span>
<span class="p">}</span>
<span class="c1">// DO:</span>
<span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">myVariable1</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">myVariable2</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">myVariable3</span><span class="p">;</span>
        <span class="o">...</span>
<span class="p">}</span>
<span class="c1">// DON&#39;T</span>
<span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">variable1</span> <span class="o">=</span> <span class="s1">&#39;Hello&#39;</span><span class="p">,</span>
                <span class="nx">variable2</span> <span class="o">=</span> <span class="nx">variable1</span> <span class="o">+</span> <span class="s1">&#39; World&#39;</span><span class="p">;</span>
        <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><p class="first">We use <strong>a single TAB</strong> for indentation.</p>
</li>
<li><p class="first">Use inline comments sparingly, they are often a hint that a new method must be
introduced.</p>
<p>Inline Comments must be indented <strong>one level deeper</strong> than the current nesting level:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">foo</span><span class="p">;</span>
                <span class="c1">// Explain what we are doing here.</span>
        <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><p class="first">Whitespace around control structures like <tt class="docutils literal"><span class="pre">if</span></tt>, <tt class="docutils literal"><span class="pre">else</span></tt>, ... should be inserted like
in the TYPO3 Flow CGLs:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">if</span> <span class="p">(</span><span class="nx">myExpression</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// if part</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// Else Part</span>
<span class="p">}</span>
</pre></div>
</div>
</li>
<li><p class="first">Arrays and Objects should <strong>never</strong> have a trailing comma after their last element</p>
</li>
<li><p class="first">Arrays and objects should be formatted in the following way:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="p">[</span>
        <span class="p">{</span>
                <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span>
        <span class="p">},</span> <span class="p">{</span>
                <span class="nx">x</span><span class="o">:</span> <span class="nx">y</span>
        <span class="p">}</span>
<span class="p">]</span>
</pre></div>
</div>
</li>
<li><p class="first">Method calls should be formatted the following way:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// for simple parameters:</span>
<span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">blah</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">scope</span><span class="p">,</span> <span class="nx">foo</span><span class="p">);</span>
<span class="nx">object</span><span class="o">.</span><span class="nx">myMethod</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">baz</span><span class="p">);</span>

<span class="c1">// when the method takes a **single** parameter of type **object** as argument, and this object is specified directly in place:</span>
<span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">Panel</span><span class="p">({</span>
        <span class="nx">a</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span>
        <span class="nx">c</span><span class="o">:</span> <span class="s1">&#39;d&#39;</span>
<span class="p">});</span>

<span class="c1">// when the method takes more parameters, and one is a configuration object which is specified in place:</span>
<span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">blah</span><span class="p">(</span>
        <span class="p">{</span>
                <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span>
        <span class="p">},</span>
        <span class="nx">scope</span><span class="p">,</span>
        <span class="nx">options</span>
<span class="p">);</span><span class="o">&lt;</span>
</pre></div>
</div>
</li>
</ul>
<p>TODO: are there JS Code Formatters / Indenters, maybe the Spket JS Code Formatter?</p>
</div>
</div>
<div class="section" id="using-jslint-to-validate-your-javascript">
<h2>Using JSLint to validate your JavaScript</h2>
<p>JSLint is a JavaScript program that looks for problems in JavaScript programs. It is a
code quality tool. When C was a young programming language, there were several common
programming errors that were not caught by the primitive compilers, so an accessory
program called <tt class="docutils literal"><span class="pre">lint</span></tt> was developed that would scan a source file, looking for problems.
<tt class="docutils literal"><span class="pre">jslint</span></tt> is the same for JavaScript.</p>
<p>JavaScript code ca be validated on-line at <a class="reference external" href="http://www.jslint.com/">http://www.jslint.com/</a>. When validating the
JavaScript code, &#8220;The Good Parts&#8221; family options should be set. For that purpose, there is
a button &#8220;The Good Parts&#8221; to be clicked.</p>
<p>Instead of using it online, you can also use JSLint locally, which is now described. For
the sake of convenience, the small tutorial bellow demonstrates how to use JSlint with the
help of CLI wrapper to enable recursive validation among directories which streamlines the
validation process.</p>
<ul>
<li><p class="first">Download Rhino from <a class="reference external" href="http://www.mozilla.org/rhino/download.html">http://www.mozilla.org/rhino/download.html</a> and put it for instance
into <tt class="docutils literal"><span class="pre">/Users/john/WebTools/Rhino</span></tt></p>
</li>
<li><p class="first">Download <tt class="docutils literal"><span class="pre">JSLint.js</span></tt> (&#64;see attachment &#8220;jslint.js&#8221;, line 5667-5669 contains the
configuration we would like to have, still to decide) (TODO)</p>
</li>
<li><p class="first">Download <tt class="docutils literal"><span class="pre">jslint.php</span></tt> (&#64;see attachment &#8220;jslint.php&#8221; TODO), for example into
<tt class="docutils literal"><span class="pre">/Users/fudriot/WebTools/JSLint</span></tt></p>
</li>
<li><p class="first">Open and edit path in <tt class="docutils literal"><span class="pre">jslint.php</span></tt> -&gt; check variable <tt class="docutils literal"><span class="pre">$rhinoPath</span></tt> and
<tt class="docutils literal"><span class="pre">$jslintPath</span></tt></p>
</li>
<li><p class="first">Add an alias to make it more convenient in the terminal:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">alias</span> <span class="nx">jslint</span> <span class="s1">&#39;/Users/fudriot/WebTools/JSLint/jslint.php&#39;</span>
</pre></div>
</div>
</li>
</ul>
<p>Now, you can use JSLint locally:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// scan one file or multi-files</span>
<span class="nx">jslint</span> <span class="nb">file</span><span class="o">.</span><span class="nx">js</span>
<span class="nx">jslint</span> <span class="nb">file</span><span class="o">-</span><span class="mf">1.</span><span class="nx">js</span> <span class="nb">file</span><span class="o">-</span><span class="mf">2.</span><span class="nx">js</span>

<span class="c1">// scan one directory or multi-directory</span>
<span class="nx">jslint</span> <span class="nx">directory</span>
<span class="nx">jslint</span> <span class="nx">directory</span><span class="o">-</span><span class="mi">1</span> <span class="nx">directory</span><span class="o">-</span><span class="mi">2</span>

<span class="c1">// scan current directory</span>
<span class="nx">jslint</span> <span class="o">.</span>
</pre></div>
</div>
<p>It is also possible to adjust the validation rules JSLint uses. At the end of file
<tt class="docutils literal"><span class="pre">jslint.js</span></tt>, it is possible to customize the rules to be checked by JSlint by changing
options&#8217; value. By default, the options are taken over the book &#8220;JavaScript: The Good
Parts&#8221; which is written by the same author of JSlint.</p>
<p>Below are the options we use for TYPO3 v5:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">bitwise</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">eqeqeq</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">immed</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span><span class="nx">newcap</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">nomen</span><span class="o">:</span> <span class="k">false</span><span class="p">,</span>
<span class="nx">onevar</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">plusplus</span><span class="o">:</span> <span class="k">false</span><span class="p">,</span> <span class="nx">regexp</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">rhino</span><span class="o">:</span> <span class="k">true</span><span class="p">,</span> <span class="nx">undef</span><span class="o">:</span> <span class="k">false</span><span class="p">,</span>
<span class="nx">white</span><span class="o">:</span> <span class="k">false</span><span class="p">,</span> <span class="nx">strict</span><span class="o">:</span> <span class="k">true</span>
</pre></div>
</div>
<p>In case some files needs to be evaluated with special rules, it is possible to add a
comment on the top of file which can override the default ones:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="cm">/* jslint white: true, evil: true, laxbreak: true, onevar: true, undef: true,</span>
<span class="cm">nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true,</span>
<span class="cm">newcap: true, immed: true */</span>
</pre></div>
</div>
<p>More information about the meaning and the reasons of the rules can be found at
<a class="reference external" href="http://www.jslint.com/lint.html">http://www.jslint.com/lint.html</a></p>
</div>
<div class="section" id="event-handling">
<h2>Event Handling</h2>
<p>When registering an event handler, always use explicit functions instead of inline
functions to allow overriding of the event handler.</p>
<p>Additionally, this function needs to be prefixed with <tt class="docutils literal"><span class="pre">on</span></tt> to mark it as event handler
function. Below follows an example for good and bad code.</p>
<p>Good Event Handler Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Application</span><span class="o">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;theEventName&#39;</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="nx">_onCustomEvent</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</pre></div>
</div>
<p>Bad Event Handler Code:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Application</span><span class="o">.</span><span class="nx">on</span><span class="p">(</span>
        <span class="s1">&#39;theEventName&#39;</span><span class="p">,</span>
        <span class="k">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Text&#39;</span><span class="p">);</span>
        <span class="p">},</span>
        <span class="k">this</span>
<span class="p">);</span>
</pre></div>
</div>
<p>All events need to be explicitly documented inside the class where they are fired onto
with an <tt class="docutils literal"><span class="pre">&#64;event</span></tt> annotation:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Core</span><span class="o">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">new</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Observable</span><span class="p">,</span> <span class="p">{</span>
        <span class="sd">/**</span>
<span class="sd">         * @event eventOne Event declaration</span>
<span class="sd">         */</span>

        <span class="sd">/**</span>
<span class="sd">         * @event eventTwo Event with parameters</span>
<span class="sd">         * @param {String} param1 Parameter name</span>
<span class="sd">         * @param {Object} param2 Parameter name</span>
<span class="sd">         * &lt;ul&gt;</span>
<span class="sd">         * &lt;li&gt;&lt;b&gt;property1:&lt;/b&gt; description of property1&lt;/li&gt;</span>
<span class="sd">         * &lt;li&gt;&lt;b&gt;property2:&lt;/b&gt; description of property2&lt;/li&gt;</span>
<span class="sd">         * &lt;/ul&gt;</span>
<span class="sd">         */</span>
        <span class="o">...</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Additionally, make sure to document if the scope of the event handler is not set to
<tt class="docutils literal"><span class="pre">this</span></tt>, i.e. does not point to its class, as the user expects this.</p>
</div>
<div class="section" id="extjs-specific-things">
<h2>ExtJS specific things</h2>
<p>TODO</p>
<ul class="simple">
<li>explain initializeObject</li>
<li>how to extend Ext components</li>
<li>can be extended by using constructor() not initComponents() like it is for panels and so
on</li>
</ul>
<div class="section" id="how-to-extend-data-stores">
<h3>How to extend data stores</h3>
<p>This is an example for how to extend an ExtJS data store:</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">DummyStore</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Ext</span><span class="o">.</span><span class="nx">data</span><span class="o">.</span><span class="nx">Store</span><span class="p">,</span> <span class="p">{</span>

        <span class="nx">constructor</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">cfg</span> <span class="o">=</span> <span class="nx">cfg</span> <span class="o">||</span> <span class="p">{};</span>
                <span class="k">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">Ext</span><span class="o">.</span><span class="nx">apply</span><span class="p">(</span>
                        <span class="p">{</span>
                                <span class="nx">autoLoad</span><span class="o">:</span> <span class="k">true</span>
                        <span class="p">},</span>
                        <span class="nx">cfg</span>
                <span class="p">);</span>

                <span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">DummyStore</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">call</span><span class="p">(</span>
                        <span class="k">this</span><span class="p">,</span>
                        <span class="nx">config</span>
                <span class="p">);</span>
        <span class="p">}</span>
<span class="p">});</span>
<span class="nx">Ext</span><span class="o">.</span><span class="nx">reg</span><span class="p">(</span><span class="s1">&#39;TYPO3.TYPO3.Content.DummyStore&#39;</span><span class="p">,</span> <span class="nx">TYPO3</span><span class="o">.</span><span class="nx">TYPO3</span><span class="o">.</span><span class="nx">Content</span><span class="o">.</span><span class="nx">DummyStore</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="unit-testing">
<h2>Unit Testing</h2>
<ul class="simple">
<li>It&#8217;s highly recommended to write unit tests for javascript classes. Unit tests should be
located in the following location: <tt class="docutils literal"><span class="pre">Package/Tests/JavaScript/...</span></tt></li>
<li>The structure below this folder should reflect the structure below
<tt class="docutils literal"><span class="pre">Package/Resources/Public/JavaScript/...</span></tt> if possible.</li>
<li>The namespace for the Unit test classes is <tt class="docutils literal"><span class="pre">Package.Tests</span></tt>.</li>
<li>TODO: Add some more information about Unit Testing for JS</li>
<li>TODO: Add note about the testrunner when it&#8217;s added to the package</li>
<li>TODO: <a class="reference external" href="http://developer.yahoo.com/yui/3/test/">http://developer.yahoo.com/yui/3/test/</a></li>
</ul>
</div>
</div>
]]></text>
         <title></title>
        </properties>
       </node>
      </node>
      <node identifier="d22a6040-a282-10bc-ed14-ea367f964df0" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
     </node>
    </node>
   </node>
   <node identifier="3296934c-7b25-5486-6a20-75bf8decdaab" type="TYPO3.Neos.NodeTypes:Page" nodeName="packages" locale="">
    <properties>
     <title>Community Packages</title>
    </properties>
    <node identifier="b75cd804-d9ac-4460-e2aa-385da79c8d03" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
    <node identifier="0ee9cfb8-d8f6-a160-b859-56c34e189c76" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
   </node>
  </node>
  <node identifier="af0973c8-70c4-45da-a853-8a6f08b9a6bc" type="TYPO3.DocsTypo3Org:Project" nodeName="neos" locale="">
   <properties>
    <title>TYPO3 Neos</title>
   </properties>
   <node identifier="d1b78238-992d-6aea-8696-a22981ec0866" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
   <node identifier="b587db73-16dd-05cf-2d84-7f5faf404f3d" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
   <node identifier="66cbcaf0-6b81-4a77-d9f9-8ead8f01a01d" type="TYPO3.Neos.NodeTypes:Page" nodeName="references" locale="">
    <properties>
     <title>References</title>
    </properties>
    <node identifier="a4d8bd8a-ac1f-144d-cb36-7d596f812dbe" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
    <node identifier="fcbc185e-6e1a-bc66-aac2-965a71bc2370" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
   </node>
   <node identifier="7ae37cc2-b633-f2c3-1a4e-c2453e51ac6d" type="TYPO3.Neos.NodeTypes:Page" nodeName="packages" locale="">
    <properties>
     <title>Community Packages</title>
    </properties>
    <node identifier="9eb6ee63-e016-8b30-911f-969f0fd36319" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
    <node identifier="9fa51499-09fd-08e4-7fae-157fd8901e17" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
   </node>
  </node>
  <node identifier="e7295eb5-ac79-a039-7fe0-105943db8175" type="TYPO3.Neos.NodeTypes:Page" nodeName="documentation-matrix" locale="" hiddenInIndex="true">
   <properties>
    <title>Documentation Matrix</title>
    <layout></layout>
    <subpageLayout></subpageLayout>
   </properties>
   <node identifier="4633da9e-1d87-ae46-c3bf-d4646a6ca73b" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
   <node identifier="9f5dacea-d843-74e5-380f-3995659c33ab" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
  </node>
  <node identifier="fc41d84c-df1c-92db-6f20-599623a27ab2" type="TYPO3.Neos:Shortcut" nodeName="introduction" locale="" hiddenInIndex="true">
   <properties>
    <targetMode>firstChildNode</targetMode>
    <title>Introduction</title>
    <targetNode __type="reference"/>
   </properties>
   <node identifier="8571c227-107f-cdb6-d0f3-b39d011aed3b" type="TYPO3.Neos.NodeTypes:Page" nodeName="getting-started" locale="">
    <properties>
     <title>Getting started</title>
    </properties>
    <node identifier="3a8a9f72-48ca-6697-ad2d-c3631ff3de15" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
    <node identifier="dbff85c4-8bb7-dcf3-58c9-51ea4fcb27e1" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
   </node>
   <node identifier="7086d76e-97a1-5f85-2881-3d9d057beac1" type="TYPO3.Neos.NodeTypes:Page" nodeName="how-to-contribute" locale="">
    <properties>
     <title>How to contribute ?</title>
     <layout></layout>
     <subpageLayout></subpageLayout>
    </properties>
    <node identifier="b4fccbb6-df6a-c12d-c69f-616bf8dfb0f6" type="TYPO3.Neos:ContentCollection" nodeName="main" locale=""/>
    <node identifier="4e3fc2ea-6e0b-7b99-cdc0-1447d86913d7" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
   </node>
   <node identifier="974870cd-4005-aeea-0484-c6ca248086a9" type="TYPO3.Neos.NodeTypes:Page" nodeName="who-are-you" locale="">
    <properties>
     <title>Who are you ?</title>
    </properties>
    <node identifier="46e36d44-aa29-d14b-36d9-151ab9ed8c3a" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
     <node identifier="3fd20643-3f5e-b08b-902a-f835e5fbd886" type="TYPO3.Neos.NodeTypes:Headline" nodeName="node5347ac397a1e7" locale="">
      <properties>
       <title><![CDATA[<h1>We need to know who you are ?<br/></h1>]]></title>
      </properties>
     </node>
     <node identifier="35be3911-69e9-7129-3714-af5f946e8de7" type="TYPO3.Neos.NodeTypes:Text" nodeName="node5347ac4d3e9e4" locale="">
      <properties>
       <text><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin elementum urna massa, eu lacinia arcu tempus at. Pellentesque in diam et purus vestibulum dictum in eget nisl. Aliquam semper tempor leo, non convallis libero tempus id. Sed eget ornare nunc, id scelerisque lacus. Nulla quis tincidunt metus, non imperdiet orci. Duis congue tellus vel pulvinar imperdiet. Donec eget diam felis. Sed tincidunt, massa sit amet blandit sagittis, lacus mi laoreet metus, vel rutrum enim enim eu mi. Nam quis eros nec felis dictum lobortis at ullamcorper lorem. Sed nec aliquet lectus. Vestibulum eu leo quis leo ultricies vehicula in in nunc.</p>]]></text>
      </properties>
     </node>
     <node identifier="724e38e3-a3c6-cc7b-c231-89b602cfca18" type="TYPO3.Neos.NodeTypes:Text" nodeName="node5347b1e048b36" locale="">
      <properties>
       <text><![CDATA[<h2>Sed vestibulum eget ipsum convallis tempus.</h2><p>Pellentesque sollicitudin condimentum quam, vitae iaculis mauris hendrerit quis. Donec sit amet metus at ligula ultrices tincidunt vel ut lorem. Donec in risus vitae velit tincidunt rutrum. Aenean sodales libero a dolor dictum sollicitudin. Donec posuere tincidunt augue, id commodo neque semper quis. Suspendisse rutrum urna ut libero bibendum, ut imperdiet lacus volutpat.</p>]]></text>
      </properties>
     </node>
     <node identifier="1e23d366-3f20-dd38-d0cf-87155ef1b3be" type="TYPO3.Neos.NodeTypes:Text" nodeName="node5347b1fd4a20a" locale="">
      <properties>
       <text><![CDATA[<h2>Nam rutrum erat ligula, at congue felis sodales ac.</h2><p>Aenean tristique elementum ante sed pellentesque. In neque enim, sagittis sed elit scelerisque, scelerisque fringilla ligula. Maecenas tincidunt ultricies magna, quis porta risus mollis vitae. Pellentesque et sodales turpis. Nunc imperdiet scelerisque lacus, id pulvinar dolor lacinia id. Sed adipiscing, elit sed eleifend tempus, quam arcu pellentesque ligula, ac congue ligula nulla nec leo. Integer elementum tincidunt magna ac malesuada. Sed ac eleifend felis. Aliquam semper neque sed velit iaculis, sit amet tempor libero bibendum.</p>]]></text>
      </properties>
     </node>
     <node identifier="f173cb54-1b7e-0f0d-faf1-5fcc6360fb82" type="TYPO3.Neos.NodeTypes:Text" nodeName="node5347b227b6a3e" locale="">
      <properties>
       <text><![CDATA[<h3>Donec ut ullamcorper nisl.</h3><p>Phasellus sodales, felis nec dictum volutpat, turpis nunc blandit turpis, vel bibendum dui lectus ut dolor. Aliquam consequat turpis in est tincidunt, in tempor mauris pellentesque. Sed in cursus velit. Aliquam sodales erat est, vel vestibulum lorem suscipit ut. Donec dapibus diam ac nisl placerat, et ultricies urna consectetur. Fusce mattis, nisl quis volutpat blandit, leo purus vulputate neque, et mollis sapien eros id mi. Sed et ligula sed arcu varius faucibus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nam et nibh malesuada arcu blandit sagittis non sed mi. Curabitur a ultricies mi. Cras volutpat neque a dui interdum convallis. In sed tristique libero. Pellentesque nec turpis dolor.</p><h3>Cras tempor erat ac sem facilisis, et dapibus quam varius.</h3><p>Nam a porta libero. Sed scelerisque massa lacinia turpis condimentum, vel laoreet lorem congue. Nullam rhoncus urna eu risus ornare, vel rhoncus nunc tristique. Ut nec mi accumsan, aliquam mauris ac, condimentum dolor. Pellentesque convallis justo eros, eu laoreet mauris feugiat at. Nullam vestibulum purus eget ante fermentum, vitae vehicula sem accumsan. Vestibulum laoreet mollis leo, sed mollis orci bibendum id. Donec quis lectus risus. In hac habitasse platea dictumst. Vivamus a nibh tempor, placerat turpis vitae, rutrum ipsum. Proin sollicitudin posuere nisi et posuere. Vivamus commodo orci sit amet magna fermentum, adipiscing volutpat felis mollis.</p><p><br/></p>]]></text>
      </properties>
     </node>
    </node>
    <node identifier="3950afd3-4e47-a6ef-3be3-03adb89f8097" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
    <node identifier="f82d0f71-3929-9fbf-3cfd-7f0129268bd4" type="TYPO3.Neos.NodeTypes:Page" nodeName="editor" locale="">
     <properties>
      <title>I'm an Editor</title>
      <layout></layout>
      <subpageLayout></subpageLayout>
     </properties>
     <node identifier="7979ccc1-ac6a-5faf-56f0-dad5478088b9" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
      <node identifier="d3e2a089-ff1f-72c5-b0fd-e8263c2fee78" type="TYPO3.Neos.NodeTypes:Headline" nodeName="node5347ab6f1c8d5" locale="">
       <properties>
        <title><![CDATA[<h1>Dear Editor,</h1>]]></title>
       </properties>
      </node>
      <node identifier="d6c66673-ca7c-0994-2746-0a5275889556" type="TYPO3.Neos.NodeTypes:Text" nodeName="node5347abaa0a3bd" locale="">
       <properties>
        <text><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin elementum urna massa, eu lacinia arcu tempus at. Pellentesque in diam et purus vestibulum dictum in eget nisl. Aliquam semper tempor leo, non convallis libero tempus id. Sed eget ornare nunc, id scelerisque lacus. Nulla quis tincidunt metus, non imperdiet orci. Duis congue tellus vel pulvinar imperdiet. Donec eget diam felis. Sed tincidunt, massa sit amet blandit sagittis, lacus mi laoreet metus, vel rutrum enim enim eu mi. Nam quis eros nec felis dictum lobortis at ullamcorper lorem. Sed nec aliquet lectus. Vestibulum eu leo quis leo ultricies vehicula in in nunc.</p><p>Sed vestibulum eget ipsum convallis tempus. Pellentesque sollicitudin condimentum quam, vitae iaculis mauris hendrerit quis. Donec sit amet metus at ligula ultrices tincidunt vel ut lorem. Donec in risus vitae velit tincidunt rutrum. Aenean sodales libero a dolor dictum sollicitudin. Donec posuere tincidunt augue, id commodo neque semper quis. Suspendisse rutrum urna ut libero bibendum, ut imperdiet lacus volutpat.</p>]]></text>
       </properties>
      </node>
     </node>
     <node identifier="aa7e1be0-dd55-d096-c8f1-e7d23964c061" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
    </node>
    <node identifier="21e23d16-7cb8-1b0f-85c7-f3b8b532411e" type="TYPO3.Neos.NodeTypes:Page" nodeName="integrator" locale="">
     <properties>
      <title>I'm an Integrator</title>
      <layout></layout>
      <subpageLayout></subpageLayout>
     </properties>
     <node identifier="4af67265-f8fe-bed4-d323-8a0bce5fc154" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
      <node identifier="7914eb4a-62e5-6a06-7d2a-e7b2e2d9414e" type="TYPO3.Neos.NodeTypes:Headline" nodeName="node5347abb97de56" locale="">
       <properties>
        <title><![CDATA[<h1>Dear Intergrator,</h1>]]></title>
       </properties>
      </node>
      <node identifier="1fd51ae6-a91f-30be-3bb8-17c7a56006f6" type="TYPO3.Neos.NodeTypes:Text" nodeName="node5347abc632304" locale="">
       <properties>
        <text><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin elementum urna massa, eu lacinia arcu tempus at. Pellentesque in diam et purus vestibulum dictum in eget nisl. Aliquam semper tempor leo, non convallis libero tempus id. Sed eget ornare nunc, id scelerisque lacus. Nulla quis tincidunt metus, non imperdiet orci. Duis congue tellus vel pulvinar imperdiet. Donec eget diam felis. Sed tincidunt, massa sit amet blandit sagittis, lacus mi laoreet metus, vel rutrum enim enim eu mi. Nam quis eros nec felis dictum lobortis at ullamcorper lorem. Sed nec aliquet lectus. Vestibulum eu leo quis leo ultricies vehicula in in nunc.</p><p>Sed vestibulum eget ipsum convallis tempus. Pellentesque sollicitudin condimentum quam, vitae iaculis mauris hendrerit quis. Donec sit amet metus at ligula ultrices tincidunt vel ut lorem. Donec in risus vitae velit tincidunt rutrum. Aenean sodales libero a dolor dictum sollicitudin. Donec posuere tincidunt augue, id commodo neque semper quis. Suspendisse rutrum urna ut libero bibendum, ut imperdiet lacus volutpat.</p>]]></text>
       </properties>
      </node>
     </node>
     <node identifier="3e1f283f-124b-333d-e161-df05e1c2487d" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
    </node>
    <node identifier="335de7c3-378a-f5fb-8ffb-84e0ab2f5a06" type="TYPO3.Neos.NodeTypes:Page" nodeName="developper" locale="">
     <properties>
      <title>I'm a Developper</title>
      <layout></layout>
      <subpageLayout></subpageLayout>
     </properties>
     <node identifier="cc8c2a28-d1bf-7ccd-0b5e-d1fc7392d3f1" type="TYPO3.Neos:ContentCollection" nodeName="main" locale="">
      <node identifier="3a9aa12a-fa97-c703-a7d6-54bdcfd9b11a" type="TYPO3.Neos.NodeTypes:Headline" nodeName="node5347abcfcfa97" locale="">
       <properties>
        <title><![CDATA[<h1>Dear Developper,</h1>]]></title>
       </properties>
      </node>
      <node identifier="d8481fbe-01df-b7f6-2a8f-8c3583016ed3" type="TYPO3.Neos.NodeTypes:Text" nodeName="node5347abd8d44c5" locale="">
       <properties>
        <text><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin elementum urna massa, eu lacinia arcu tempus at. Pellentesque in diam et purus vestibulum dictum in eget nisl. Aliquam semper tempor leo, non convallis libero tempus id. Sed eget ornare nunc, id scelerisque lacus. Nulla quis tincidunt metus, non imperdiet orci. Duis congue tellus vel pulvinar imperdiet. Donec eget diam felis. Sed tincidunt, massa sit amet blandit sagittis, lacus mi laoreet metus, vel rutrum enim enim eu mi. Nam quis eros nec felis dictum lobortis at ullamcorper lorem. Sed nec aliquet lectus. Vestibulum eu leo quis leo ultricies vehicula in in nunc.</p><p>Sed vestibulum eget ipsum convallis tempus. Pellentesque sollicitudin condimentum quam, vitae iaculis mauris hendrerit quis. Donec sit amet metus at ligula ultrices tincidunt vel ut lorem. Donec in risus vitae velit tincidunt rutrum. Aenean sodales libero a dolor dictum sollicitudin. Donec posuere tincidunt augue, id commodo neque semper quis. Suspendisse rutrum urna ut libero bibendum, ut imperdiet lacus volutpat.</p>]]></text>
       </properties>
      </node>
     </node>
     <node identifier="940279bc-b1a4-5ece-e883-e03d39b59b5a" type="TYPO3.Neos:ContentCollection" nodeName="teaser" locale=""/>
    </node>
   </node>
  </node>
  <node identifier="5ee7bdbb-e13a-6cdc-4103-2b801b3221d0" type="TYPO3.Neos:Shortcut" nodeName="s" locale="">
   <properties>
    <targetMode>firstChildNode</targetMode>
    <title>Shortcuts</title>
    <targetNode __type="reference"/>
   </properties>
   <node identifier="9be82e55-7c45-cf3e-1e17-36812ab4562f" type="TYPO3.Neos:Shortcut" nodeName="cms" locale="">
    <properties>
     <targetMode>firstChildNode</targetMode>
     <title>TYPO3 CMS</title>
     <targetNode __type="reference">
      <node identifier="74a06352-2ac0-799e-4baa-297a691737af"/>
     </targetNode>
    </properties>
   </node>
   <node identifier="f2183919-b85e-8529-dab7-de4359d908ea" type="TYPO3.Neos:Shortcut" nodeName="flow" locale="">
    <properties>
     <targetMode>firstChildNode</targetMode>
     <title>TYPO3 Flow</title>
     <targetNode __type="reference">
      <node identifier="1ea63915-3383-300b-c778-f0fef2c1744f"/>
     </targetNode>
    </properties>
   </node>
   <node identifier="c6e0ef5d-e8f7-fc0e-97ce-9523e204ca9f" type="TYPO3.Neos:Shortcut" nodeName="neos" locale="">
    <properties>
     <targetMode>firstChildNode</targetMode>
     <title>TYPO3 Neos</title>
     <targetNode __type="reference">
      <node identifier="af0973c8-70c4-45da-a853-8a6f08b9a6bc"/>
     </targetNode>
    </properties>
   </node>
  </node>
 </site>
</root>
